(defvar doom-real-buffer-functions '(doom-dired-buffer-p) "A list of predicate functions run to determine if a buffer is real, unlike\n`doom-unreal-buffer-functions'. They are passed one argument: the buffer to be\ntested.\n\nShould any of its function returns non-nil, the rest of the functions are\nignored and the buffer is considered real.\n\nSee `doom-real-buffer-p' for more information.")(defvar doom-unreal-buffer-functions '(minibufferp doom-special-buffer-p doom-non-file-visiting-buffer-p) "A list of predicate functions run to determine if a buffer is *not* real,\nunlike `doom-real-buffer-functions'. They are passed one argument: the buffer to\nbe tested.\n\nShould any of these functions return non-nil, the rest of the functions are\nignored and the buffer is considered unreal.\n\nSee `doom-real-buffer-p' for more information.")(defvar-local doom-real-buffer-p nil "If non-nil, this buffer should be considered real no matter what. See\n`doom-real-buffer-p' for more information.")(defvar doom-fallback-buffer-name "*scratch*" "The name of the buffer to fall back to if no other buffers exist (will create\nit if it doesn't exist).")(autoload 'doom-buffer-frame-predicate "~/.emacs.d/lisp/lib/buffers" "To be used as the default frame buffer-predicate parameter. Returns nil if\nBUF should be skipped over by functions like `next-buffer' and `other-buffer'.\n\n(fn BUF)")(autoload 'doom-fallback-buffer "~/.emacs.d/lisp/lib/buffers" "Returns the fallback buffer, creating it if necessary. By default this is the\nscratch buffer. See `doom-fallback-buffer-name' to change this.")(defalias 'doom-buffer-list #'buffer-list)(autoload 'doom-project-buffer-list "~/.emacs.d/lisp/lib/buffers" "Return a list of buffers belonging to the specified PROJECT.\n\nIf PROJECT is nil, default to the current project.\n\nIf no project is active, return all buffers.\n\n(fn &optional PROJECT)")(autoload 'doom-open-projects "~/.emacs.d/lisp/lib/buffers" "Return a list of projects with open buffers.")(autoload 'doom-dired-buffer-p "~/.emacs.d/lisp/lib/buffers" "Returns non-nil if BUF is a dired buffer.\n\n(fn BUF)")(autoload 'doom-special-buffer-p "~/.emacs.d/lisp/lib/buffers" "Returns non-nil if BUF's name starts and ends with an *.\n\n(fn BUF)")(autoload 'doom-temp-buffer-p "~/.emacs.d/lisp/lib/buffers" "Returns non-nil if BUF is temporary.\n\n(fn BUF)")(autoload 'doom-visible-buffer-p "~/.emacs.d/lisp/lib/buffers" "Return non-nil if BUF is visible.\n\n(fn BUF)")(autoload 'doom-buried-buffer-p "~/.emacs.d/lisp/lib/buffers" "Return non-nil if BUF is not visible.\n\n(fn BUF)")(autoload 'doom-non-file-visiting-buffer-p "~/.emacs.d/lisp/lib/buffers" "Returns non-nil if BUF does not have a value for `buffer-file-name'.\n\n(fn BUF)")(autoload 'doom-real-buffer-list "~/.emacs.d/lisp/lib/buffers" "Return a list of buffers that satisfy `doom-real-buffer-p'.\n\n(fn &optional BUFFER-LIST)")(autoload 'doom-real-buffer-p "~/.emacs.d/lisp/lib/buffers" "Returns t if BUFFER-OR-NAME is a 'real' buffer.\n\nA real buffer is a useful buffer; a first class citizen in Doom. Real ones\nshould get special treatment, because we will be spending most of our time in\nthem. Unreal ones should be low-profile and easy to cast aside, so we can focus\non real ones.\n\nThe exact criteria for a real buffer is:\n\n  1. A non-nil value for the buffer-local value of the `doom-real-buffer-p'\n     variable OR\n  2. Any function in `doom-real-buffer-functions' returns non-nil OR\n  3. None of the functions in `doom-unreal-buffer-functions' must return\n     non-nil.\n\nIf BUFFER-OR-NAME is omitted or nil, the current buffer is tested.\n\n(fn BUFFER-OR-NAME)")(autoload 'doom-unreal-buffer-p "~/.emacs.d/lisp/lib/buffers" "Return t if BUFFER-OR-NAME is an 'unreal' buffer.\n\nSee `doom-real-buffer-p' for details on what that means.\n\n(fn BUFFER-OR-NAME)")(autoload 'doom-buffers-in-mode "~/.emacs.d/lisp/lib/buffers" "Return a list of buffers whose `major-mode' is `eq' to MODE(S).\n\nIf DERIVED-P, test with `derived-mode-p', otherwise use `eq'.\n\n(fn MODES &optional BUFFER-LIST DERIVED-P)")(autoload 'doom-visible-windows "~/.emacs.d/lisp/lib/buffers" "Return a list of the visible, non-popup (dedicated) windows.\n\n(fn &optional WINDOW-LIST)")(autoload 'doom-visible-buffers "~/.emacs.d/lisp/lib/buffers" "Return a list of visible buffers (i.e. not buried).\n\n(fn &optional BUFFER-LIST ALL-FRAMES)")(autoload 'doom-buried-buffers "~/.emacs.d/lisp/lib/buffers" "Get a list of buffers that are buried.\n\n(fn &optional BUFFER-LIST)")(autoload 'doom-matching-buffers "~/.emacs.d/lisp/lib/buffers" "Get a list of all buffers that match the regex PATTERN.\n\n(fn PATTERN &optional BUFFER-LIST)")(autoload 'doom-set-buffer-real "~/.emacs.d/lisp/lib/buffers" "Forcibly mark BUFFER as FLAG (non-nil = real).\n\nSee `doom-real-buffer-p' for an explanation for real buffers.\n\n(fn BUFFER FLAG)")(autoload 'doom-kill-buffer-and-windows "~/.emacs.d/lisp/lib/buffers" "Kill the buffer and delete all the windows it's displayed in.\n\n(fn BUFFER)")(autoload 'doom-fixup-windows "~/.emacs.d/lisp/lib/buffers" "Ensure that each of WINDOWS is showing a real buffer or the fallback buffer.\n\n(fn WINDOWS)")(autoload 'doom-kill-buffer-fixup-windows "~/.emacs.d/lisp/lib/buffers" "Kill the BUFFER and ensure all the windows it was displayed in have switched\nto a real buffer or the fallback buffer.\n\n(fn BUFFER)")(autoload 'doom-kill-buffers-fixup-windows "~/.emacs.d/lisp/lib/buffers" "Kill the BUFFERS and ensure all the windows they were displayed in have\nswitched to a real buffer or the fallback buffer.\n\n(fn BUFFERS)")(autoload 'doom-kill-matching-buffers "~/.emacs.d/lisp/lib/buffers" "Kill all buffers (in current workspace OR in BUFFER-LIST) that match the\nregex PATTERN. Returns the number of killed buffers.\n\n(fn PATTERN &optional BUFFER-LIST)")(autoload 'doom-mark-buffer-as-real-h "~/.emacs.d/lisp/lib/buffers" "Hook function that marks the current buffer as real.\n\nSee `doom-real-buffer-p' for an explanation for real buffers.")(autoload 'doom/save-and-kill-buffer "~/.emacs.d/lisp/lib/buffers" "Save the current buffer to file, then kill it." t)(autoload 'doom/kill-this-buffer-in-all-windows "~/.emacs.d/lisp/lib/buffers" "Kill BUFFER globally and ensure all windows previously showing this buffer\nhave switched to a real buffer or the fallback buffer.\n\nIf DONT-SAVE, don't prompt to save modified buffers (discarding their changes).\n\n(fn BUFFER &optional DONT-SAVE)" t)(autoload 'doom/kill-all-buffers "~/.emacs.d/lisp/lib/buffers" "Kill all buffers and closes their windows.\n\nIf the prefix arg is passed, doesn't close windows and only kill buffers that\nbelong to the current project.\n\n(fn &optional BUFFER-LIST INTERACTIVE)" t)(autoload 'doom/kill-other-buffers "~/.emacs.d/lisp/lib/buffers" "Kill all other buffers (besides the current one).\n\nIf the prefix arg is passed, kill only buffers that belong to the current\nproject.\n\n(fn &optional BUFFER-LIST INTERACTIVE)" t)(autoload 'doom/kill-matching-buffers "~/.emacs.d/lisp/lib/buffers" "Kill buffers that match PATTERN in BUFFER-LIST.\n\nIf the prefix arg is passed, only kill matching buffers in the current project.\n\n(fn PATTERN &optional BUFFER-LIST INTERACTIVE)" t)(autoload 'doom/kill-buried-buffers "~/.emacs.d/lisp/lib/buffers" "Kill buffers that are buried.\n\nIf PROJECT-P (universal argument), only kill buried buffers belonging to the\ncurrent project.\n\n(fn &optional BUFFER-LIST INTERACTIVE)" t)(autoload 'doom/kill-project-buffers "~/.emacs.d/lisp/lib/buffers" "Kill buffers for the specified PROJECT.\n\n(fn PROJECT &optional INTERACTIVE)" t)(defvar doom-after-reload-hook nil "A list of hooks to run after `doom/reload' has reloaded Doom.")(defvar doom-before-reload-hook nil "A list of hooks to run before `doom/reload' has reloaded Doom.")(autoload 'doom/open-private-config "~/.emacs.d/lisp/lib/config" "Browse your `doom-user-dir'." t)(autoload 'doom/find-file-in-private-config "~/.emacs.d/lisp/lib/config" "Search for a file in `doom-user-dir'." t)(autoload 'doom/goto-private-init-file "~/.emacs.d/lisp/lib/config" "Open your private init.el file.\nAnd jumps to your `doom!' block." t)(autoload 'doom/goto-private-config-file "~/.emacs.d/lisp/lib/config" "Open your private config.el file." t)(autoload 'doom/goto-private-packages-file "~/.emacs.d/lisp/lib/config" "Open your private packages.el file." t)(autoload 'doom/reload "~/.emacs.d/lisp/lib/config" "Reloads your private config.\n\nWARNING: This command is experimental! If you haven't configured your config to\nbe idempotent, then this could cause compounding slowness or errors.\n\nThis is experimental! It will try to do as `bin/doom sync' does, but from within\nthis Emacs session. i.e. it reload autoloads files (if necessary), reloads your\npackage list, and lastly, reloads your private config.el.\n\nRuns `doom-after-reload-hook' afterwards." t)(autoload 'doom/reload-autoloads "~/.emacs.d/lisp/lib/config" "Reload only the autoloads of the current profile.\n\nThis is much faster and safer than `doom/reload', but not as comprehensive. This\nreloads your package and module visibility, but does not install new packages or\nremove orphaned ones. It also doesn't reload your private config.\n\nIt is useful to only pull in changes performed by 'doom sync' on the command\nline." t)(autoload 'doom/reload-env "~/.emacs.d/lisp/lib/config" "Reloads your envvar file.\n\nDOES NOT REGENERATE IT. You must run 'doom env' in your shell OUTSIDE of Emacs.\nDoing so from within Emacs will taint your shell environment.\n\nAn envvar file contains a snapshot of your shell environment, which can be\nimported into Emacs." t)(autoload 'doom/upgrade "~/.emacs.d/lisp/lib/config" "Run 'doom upgrade' then prompt to restart Emacs." t)(defvar doom-debug-variables `((doom-print-minimum-level . debug) (doom-inhibit-log) (doom-log-level . 2) async-debug debug-on-error gcmh-verbose init-file-debug jka-compr-verbose (message-log-max . 16384) (native-comp-async-report-warnings-errors . silent) (native-comp-warning-on-missing-source . t) url-debug use-package-verbose (warning-suppress-types)) "A list of variable to toggle on `doom-debug-mode'.\n\nEach entry can be a variable symbol or a cons cell whose CAR is the variable\nsymbol and CDR is the value to set it to when `doom-debug-mode' is activated.")(defvar doom-debug-mode nil "Non-nil if Doom-Debug mode is enabled.\nSee the `doom-debug-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `doom-debug-mode'.")(autoload 'doom-debug-mode "~/.emacs.d/lisp/lib/debug" "Toggle `debug-on-error' and `init-file-debug' for verbose logging.\n\nThis is a global minor mode.  If called interactively, toggle the\n`Doom-Debug mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='doom-debug-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'doom-backtrace "~/.emacs.d/lisp/lib/debug" "Return a stack trace as a list of `backtrace-frame' objects.")(autoload 'doom-run-all-startup-hooks-h "~/.emacs.d/lisp/lib/debug" "Run all startup Emacs hooks. Meant to be executed after starting Emacs with\n-q or -Q, for example:\n\n  emacs -Q -l init.el -f doom-run-all-startup-hooks-h")(autoload 'doom-info "~/.emacs.d/lisp/lib/debug" "Returns diagnostic information about the current Emacs session in markdown,\nready to be pasted in a bug report on github.")(autoload 'doom-info-string "~/.emacs.d/lisp/lib/debug" "Return the `doom-info' as a compact string.\n\nFILL-COLUMN determines the column at which lines will be broken.\n\n(fn &optional WIDTH NOCOLOR)")(autoload 'doom/version "~/.emacs.d/lisp/lib/debug" "Display the running version of Doom core, module sources, and Emacs." t)(autoload 'doom/info "~/.emacs.d/lisp/lib/debug" "Collects some debug information about your Emacs session, formats it and\ncopies it to your clipboard, ready to be pasted into bug reports!" t)(autoload 'doom/toggle-profiler "~/.emacs.d/lisp/lib/debug" "Toggle the Emacs profiler. Run it again to see the profiling report." t)(defvar doom-docs-dir (file-name-concat doom-emacs-dir "docs/") "Where Doom's documentation files are stored. Must end with a slash.")(autoload 'doom-docs-mode "~/.emacs.d/lisp/lib/docs" "Hides metadata, tags, & drawers and activates all org-mode prettifications.\n\nThis primes `org-mode' for reading.\n\nThis is a minor mode.  If called interactively, toggle the\n`Doom-Docs mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `doom-docs-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'doom/reload-docs "~/.emacs.d/lisp/lib/docs" "Reload the ID locations in Doom's documentation and open docs buffers.\n\n(fn &optional FORCE)" t)(autoload 'doom-docs-generate-id "~/.emacs.d/lisp/lib/docs" "Generate an ID for a `doom-docs-org-mode' buffer.\n\n(fn &optional FORCE?)")(autoload 'doom-docs-org-mode "~/.emacs.d/lisp/lib/docs" "A derivative of `org-mode' for Doom's documentation files.\n\nKeeps track of its own IDs in `doom-docs-dir' and toggles `doom-docs-mode' when\n`read-only-mode' is activated.\n\n(fn)" t)(autoload 'doom-docs-read-only-h "~/.emacs.d/lisp/lib/docs" "Activate `read-only-mode' if the current file exists and is non-empty.")(autoload 'doom-path "~/.emacs.d/lisp/lib/files" "Return an path expanded after concatenating SEGMENTS with path separators.\n\nIgnores `nil' elements in SEGMENTS, and is intended as a fast compromise between\n`expand-file-name' (slow, but accurate), `file-name-concat' (fast, but\ninaccurate).\n\n(fn &rest SEGMENTS)")(function-put 'doom-path 'side-effect-free 't)(autoload 'doom-glob "~/.emacs.d/lisp/lib/files" "Return file list matching the glob created by joining SEGMENTS.\n\nThe returned file paths will be relative to `default-directory', unless SEGMENTS\nconcatenate into an absolute path.\n\nReturns nil if no matches exist.\nIgnores `nil' elements in SEGMENTS.\nIf the glob ends in a slash, only returns matching directories.\n\n(fn &rest SEGMENTS)")(function-put 'doom-glob 'side-effect-free 't)(define-obsolete-function-alias 'doom-dir 'doom-path "3.0.0")(autoload 'doom-files-in "~/.emacs.d/lisp/lib/files" "Return a list of files/directories in PATHS (one string or a list of them).\n\nFILTER is a function or symbol that takes one argument (the path). If it returns\nnon-nil, the entry will be excluded.\n\nMAP is a function or symbol which will be used to transform each entry in the\nresults.\n\nTYPE determines what kind of path will be included in the results. This can be t\n(files and folders), 'files or 'dirs.\n\nBy default, this function returns paths relative to PATH-OR-PATHS if it is a\nsingle path. If it a list of paths, this function returns absolute paths.\nOtherwise, by setting RELATIVE-TO to a path, the results will be transformed to\nbe relative to it.\n\nThe search recurses up to DEPTH and no further. DEPTH is an integer.\n\nMATCH is a string regexp. Only entries that match it will be included.\n\n(fn PATHS &rest REST &key FILTER MAP (FULL t) (FOLLOW-SYMLINKS t) (TYPE \\='files) (RELATIVE-TO (unless full default-directory)) (DEPTH 99999) (MINDEPTH 0) (MATCH \"/[^._][^/]+\"))")(autoload 'doom-file-cookie-p "~/.emacs.d/lisp/lib/files" "Returns the evaluated result of FORM in a ;;;###COOKIE FORM at the top of\nFILE.\n\nIf COOKIE doesn't exist, or cookie isn't within the first 256 bytes of FILE,\nreturn NULL-VALUE.\n\n(fn FILE &optional COOKIE NULL-VALUE)")(autoload 'file-exists-p! "~/.emacs.d/lisp/lib/files" "Returns non-nil if the FILES in DIRECTORY all exist.\n\nDIRECTORY is a path; defaults to `default-directory'.\n\nReturns the last file found to meet the rules set by FILES, which can be a\nsingle file or nested compound statement of `and' and `or' statements.\n\n(fn FILES &optional DIRECTORY)" nil t)(autoload 'doom-file-size "~/.emacs.d/lisp/lib/files" "Returns the size of FILE (in DIR) in bytes.\n\n(fn FILE &optional DIR)")(autoload 'doom-directory-size "~/.emacs.d/lisp/lib/files" "Returns the size of FILE (in DIR) in kilobytes.\n\n(fn DIR)")(autoload 'doom-file-read "~/.emacs.d/lisp/lib/files" "Read FILE and return its contents.\n\nSet BY to change how its contents are consumed. It accepts any function, to be\ncalled with no arguments and expected to return the contents as any arbitrary\ndata. By default, BY is set to `buffer-string'. Otherwise, BY recognizes these\nspecial values:\n\n'insert      -- insert FILE's contents into the current buffer before point.\n'read        -- read the first form in FILE and return it as a single S-exp.\n'read*       -- read all forms in FILE and return it as a list of S-exps.\n'(read . N)  -- read the first N (an integer) S-exps in FILE.\n\nCODING dictates the encoding of the buffer. This defaults to `utf-8'. If set to\nnil, `binary' is used.\n\nIf NOERROR is non-nil, don't throw an error if FILE doesn't exist. This will\nstill throw an error if FILE is unreadable, however.\n\nIf BEG and/or END are integers, only that region will be read from FILE.\n\n(fn FILE &key (BY \\='buffer-string) (CODING (or coding-system-for-read \\='utf-8)) NOERROR BEG END)")(autoload 'doom-file-write "~/.emacs.d/lisp/lib/files" "Write CONTENTS (a string or list of forms) to FILE (a string path).\n\nIf CONTENTS is list of forms. Any literal strings in the list are inserted\nverbatim, as text followed by a newline, with `insert'. Sexps are inserted with\n`prin1'. BY is the function to use to emit\n\nMODE dictates the permissions of created file and directories. MODE is either an\ninteger or a cons cell whose car is the mode for files and cdr the mode for\ndirectories. If FILE already exists, its permissions will be changed. The\npermissions of existing directories will never be changed.\n\nCODING dictates the encoding to read/write with (see `coding-system-for-write').\nThis defaults to `utf-8'. If set to nil, `binary' is used.\n\nAPPEND dictates where CONTENTS will be written. If neither is set,\nthe file will be overwritten. If both are, the contents will be written to both\nends. Set either APPEND or PREPEND to `noerror' to silently ignore read errors.\n\n(fn FILE CONTENTS &key APPEND (CODING \\='utf-8) MODE (MKDIR \\='parents) (INSERTFN #\\='insert) (PRINTFN #\\='prin1))")(autoload 'with-file-contents! "~/.emacs.d/lisp/lib/files" "Create a temporary buffer with FILE's contents and execute BODY in it.\n\nThe point is at the beginning of the buffer afterwards.\n\nA convenience macro to express the common `with-temp-buffer' +\n`insert-file-contents' idiom more succinctly, enforce `utf-8', and perform some\noptimizations for `binary' IO.\n\n(fn FILE &rest BODY)" nil t)(function-put 'with-file-contents! 'lisp-indent-function 1)(autoload 'with-file! "~/.emacs.d/lisp/lib/files" "Evaluate BODY in a temp buffer, then write its contents to FILE.\n\nUnlike `with-temp-file', this uses the `utf-8' encoding by default and performs\nsome optimizations for `binary' IO.\n\n(fn FILE &rest BODY)" nil t)(function-put 'with-file! 'lisp-indent-function 1)(autoload 'doom/delete-this-file "~/.emacs.d/lisp/lib/files" "Delete PATH, kill its buffers and expunge it from vc/magit cache.\n\nIf PATH is not specified, default to the current buffer's file.\n\nIf FORCE-P, delete without confirmation.\n\n(fn &optional PATH FORCE-P)" t)(autoload 'doom/copy-this-file "~/.emacs.d/lisp/lib/files" "Copy current buffer's file to NEW-PATH then open NEW-PATH.\n\nIf FORCE-P, overwrite the destination file if it exists, without confirmation.\n\n(fn NEW-PATH &optional FORCE-P)" t)(autoload 'doom/move-this-file "~/.emacs.d/lisp/lib/files" "Move current buffer's file to NEW-PATH.\n\nIf FORCE-P, overwrite the destination file if it exists, without confirmation.\n\n(fn NEW-PATH &optional FORCE-P)" t)(autoload 'doom/sudo-find-file "~/.emacs.d/lisp/lib/files" "Open FILE as root.\n\nThis will prompt you to save the current buffer, unless prefix ARG is given, in\nwhich case it will save it without prompting.\n\n(fn FILE &optional ARG)" t)(autoload 'doom/sudo-this-file "~/.emacs.d/lisp/lib/files" "Open the current file as root." t)(autoload 'doom/sudo-save-buffer "~/.emacs.d/lisp/lib/files" "Save this file as root." t)(autoload 'doom/remove-recent-file "~/.emacs.d/lisp/lib/files" "Remove FILE from your recently-opened-files list.\n\n(fn FILE)" t)(eval-when! (not (fboundp 'find-sibling-file)) (defvar find-sibling-rules nil) (defun find-sibling-file (file) "Visit a \"sibling\" file of FILE.\nWhen called interactively, FILE is the currently visited file.\n\nThe \"sibling\" file is defined by the `find-sibling-rules' variable." (interactive (progn (unless buffer-file-name (user-error "Not visiting a file")) (list buffer-file-name))) (unless find-sibling-rules (user-error "The `find-sibling-rules' variable has not been configured")) (let ((siblings (find-sibling-file-search (expand-file-name file) find-sibling-rules))) (cond ((null siblings) (user-error "Couldn't find any sibling files")) ((length= siblings 1) (find-file (car siblings))) (t (let ((relatives (mapcar (lambda (sibling) (file-relative-name sibling (file-name-directory file))) siblings))) (find-file (completing-read (format-prompt "Find file" (car relatives)) relatives nil t nil nil (car relatives)))))))) (defun find-sibling-file-search (file &optional rules) "Return a list of FILE's \"siblings\".\nRULES should be a list on the form defined by `find-sibling-rules' (which\nsee), and if nil, defaults to `find-sibling-rules'." (let ((results nil)) (pcase-dolist (`(,match \, expansions) (or rules find-sibling-rules)) (when (string-match match file) (let ((match-data (match-data))) (dolist (expansion expansions) (let ((start 0)) (while (string-match "\\\\\\([&0-9]+\\)" expansion start) (let ((index (string-to-number (match-string 1 expansion)))) (setq start (match-end 0) expansion (replace-match (substring file (elt match-data (* index 2)) (elt match-data (1+ (* index 2)))) t t expansion))))) (let ((default-directory (substring file 0 (car match-data)))) (setq results (nconc results (mapcar #'expand-file-name (letf! (defun wildcard-to-regexp (wildcard) (concat "\\`" wildcard "\\'")) (file-expand-wildcards expansion nil)))))))))) (delete file (delete-dups results)))))(defvar doom-font-increment 2 "How many steps to increase the font size each time `doom/increase-font-size'\nor `doom/decrease-font-size' are invoked.")(defvar doom-big-font nil "The font to use for `doom-big-font-mode'.\nIf nil, `doom-font' will be used, scaled up by `doom-big-font-increment'. See\n`doom-font' for details on acceptable values for this variable.")(defvar doom-big-font-increment 4 "How many steps to increase the font size (with `doom-font' as the base) when\n`doom-big-font-mode' is enabled and `doom-big-font' is nil.")(autoload 'doom-normalize-font "~/.emacs.d/lisp/lib/fonts" "Return FONT as a normalized font spec.\n\nThe font will be normalized (i.e. :weight, :slant, and :width will set to\n'normal if not specified) before it is converted.\n\nFONT can be a `font-spec', a font object, an XFT font string, or an XLFD font\nstring.\n\n(fn FONT)")(autoload 'doom-adjust-font-size "~/.emacs.d/lisp/lib/fonts" "Increase size of font in FRAME by INCREMENT.\n\nIf FIXED-SIZE-P is non-nil, treat INCREMENT as a font size, rather than a\nscaling factor.\n\nFONT-ALIST is an alist give temporary values to certain Doom font variables,\nlike `doom-font' or `doom-variable-pitch-font'. e.g.\n\n  `((doom-font . ,(font-spec :family \"Sans Serif\" :size 12)))\n\nDoesn't work in terminal Emacs.\n\n(fn INCREMENT &optional FIXED-SIZE-P FONT-ALIST)")(autoload 'doom-font-exists-p "~/.emacs.d/lisp/lib/fonts" "Return non-nil if FONT exists on this system.\n\n(fn FONT)")(function-put 'doom-font-exists-p 'pure 't)(function-put 'doom-font-exists-p 'side-effect-free 't)(autoload 'doom/reload-font "~/.emacs.d/lisp/lib/fonts" "Reload your fonts, if they're set.\nSee `doom-init-fonts-h'." t)(autoload 'doom/increase-font-size "~/.emacs.d/lisp/lib/fonts" "Enlargens the font size across the current and child frames.\n\n(fn COUNT &optional INCREMENT)" t)(autoload 'doom/decrease-font-size "~/.emacs.d/lisp/lib/fonts" "Shrinks the font size across the current and child frames.\n\n(fn COUNT &optional INCREMENT)" t)(autoload 'doom/reset-font-size "~/.emacs.d/lisp/lib/fonts" "Reset font size and `text-scale'.\n\nAssuming it has been adjusted via `doom/increase-font-size' and\n`doom/decrease-font-size', or `text-scale-*' commands." t)(defvar doom-big-font-mode nil "Non-nil if Doom-BIG-Font mode is enabled.\nSee the `doom-big-font-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `doom-big-font-mode'.")(autoload 'doom-big-font-mode "~/.emacs.d/lisp/lib/fonts" "Globally resizes your fonts for streams, screen-sharing or presentations.\n\nUses `doom-big-font' if its set, otherwise uses `doom-font' (falling back to\nyour system font).\n\nAlso resizees `doom-variable-pitch-font' and `doom-serif-font'.\n\nThis is a global minor mode.  If called interactively, toggle the\n`Doom-BIG-Font mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='doom-big-font-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'doom-git-toplevel "~/.emacs.d/lisp/lib/git" "Return the path to the current repo's root.\n\n(fn &rest SEGMENTS)")(autoload 'doom-active-minor-modes "~/.emacs.d/lisp/lib/help" "Return a list of active minor-mode symbols.")(defalias 'doom/describe-autodefs #'doom/help-autodefs)(defalias 'doom/describe-module #'doom/help-modules)(defalias 'doom/describe-package #'doom/help-packages)(autoload 'doom/describe-active-minor-mode "~/.emacs.d/lisp/lib/help" "Get information on an active minor mode. Use `describe-minor-mode' for a\nselection of all minor-modes, active or not.\n\n(fn MODE)" t)(autoload 'doom-completing-read-org-headings "~/.emacs.d/lisp/lib/help" "TODO\n\n(fn PROMPT FILES &rest PLIST &key DEPTH MINDEPTH INCLUDE-FILES INITIAL-INPUT EXTRA-CANDIDATES ACTION)")(autoload 'doom/homepage "~/.emacs.d/lisp/lib/help" "Open the doom emacs homepage in the browser." t)(autoload 'doom/issue-tracker "~/.emacs.d/lisp/lib/help" "Open Doom Emacs' global issue tracker on Discourse." t)(autoload 'doom/report-bug "~/.emacs.d/lisp/lib/help" "Open the browser on our Discourse.\n\nIf called when a backtrace buffer is present, it and the output of `doom-info'\nwill be automatically appended to the result." t)(autoload 'doom/discourse "~/.emacs.d/lisp/lib/help" "Open Doom Emacs' issue tracker on Discourse." t)(autoload 'doom/help "~/.emacs.d/lisp/lib/help" "Open Doom's user manual." t)(autoload 'doom/help-search-headings "~/.emacs.d/lisp/lib/help" "Search Doom's documentation and jump to a headline.\n\n(fn &optional INITIAL-INPUT)" t)(autoload 'doom/help-search "~/.emacs.d/lisp/lib/help" "Perform a text search on all of Doom's documentation.\n\n(fn &optional INITIAL-INPUT)" t)(autoload 'doom/help-search-news "~/.emacs.d/lisp/lib/help" "Search headlines in Doom's newsletters.\n\n(fn &optional INITIAL-INPUT)" t)(autoload 'doom/help-faq "~/.emacs.d/lisp/lib/help" "Search Doom's FAQ and jump to a question.\n\n(fn &optional INITIAL-INPUT)" t)(autoload 'doom/help-news "~/.emacs.d/lisp/lib/help" "Open a Doom newsletter.\nThe latest newsletter will be selected by default." t)(autoload 'doom/help-autodefs "~/.emacs.d/lisp/lib/help" "Open documentation for an autodef.\n\nAn autodef is a Doom concept. It is a function or macro that is always defined,\nwhether or not its containing module is disabled (in which case it will safely\nno-op without evaluating its arguments). This syntactic sugar lets you use them\nwithout needing to check if they are available.\n\n(fn AUTODEF)" t)(autoload 'doom/help-modules "~/.emacs.d/lisp/lib/help" "Open the documentation for a Doom module.\n\nCATEGORY is a keyword and MODULE is a symbol. e.g. :editor and 'evil.\n\nIf VISIT-DIR is non-nil, visit the module's directory rather than its\ndocumentation.\n\nAutomatically selects a) the module at point (in private init files), b) the\nmodule derived from a `modulep!' or `require!' call, c) the module that the\ncurrent file is in, or d) the module associated with the current major mode (see\n`doom--help-major-mode-module-alist').\n\n(fn CATEGORY MODULE &optional VISIT-DIR)" t)(autoload 'doom/help-custom-variable "~/.emacs.d/lisp/lib/help" "Look up documentation for a custom variable.\n\nUnlike `describe-variable' or `helpful-variable', which casts a wider net that\nincludes internal variables, this only lists variables that exist to be\ncustomized (defined with `defcustom').\n\n(fn VAR)" t)(autoload 'doom/help-packages "~/.emacs.d/lisp/lib/help" "Like `describe-package', but for packages installed by Doom modules.\n\nOnly shows installed packages. Includes information about where packages are\ndefined and configured.\n\nIf prefix arg is present, refresh the cache.\n\n(fn PACKAGE)" t)(autoload 'doom/help-package-config "~/.emacs.d/lisp/lib/help" "Jump to any `use-package!', `after!' or ;;;###package block for PACKAGE.\n\nThis only searches `doom-emacs-dir' (typically ~/.emacs.d) and does not include\nconfig blocks in your private config.\n\n(fn PACKAGE)" t)(defalias 'doom/help-package-homepage #'straight-visit-package-website)(autoload 'doom/help-search-load-path "~/.emacs.d/lisp/lib/help" "Perform a text search on your `load-path'.\nUses the symbol at point or the current selection, if available.\n\n(fn QUERY)" t)(autoload 'doom/help-search-loaded-files "~/.emacs.d/lisp/lib/help" "Perform a text search on your `load-path'.\nUses the symbol at point or the current selection, if available.\n\n(fn QUERY)" t)(autoload 'doom/reload-packages "~/.emacs.d/lisp/lib/packages" "Reload `doom-packages', `package' and `quelpa'." t)(autoload 'doom/bumpify-package-at-point "~/.emacs.d/lisp/lib/packages" "Convert `package!' call at point to a bump string." t)(autoload 'doom/bumpify-packages-in-buffer "~/.emacs.d/lisp/lib/packages" "Convert all `package!' calls in buffer into bump strings." t)(autoload 'doom/bump-package-at-point "~/.emacs.d/lisp/lib/packages" "Inserts or updates a `:pin' for the `package!' statement at point.\nGrabs the latest commit id of the package using 'git'.\n\n(fn &optional SELECT)" t)(autoload 'doom/bump-packages-in-buffer "~/.emacs.d/lisp/lib/packages" "Inserts or updates a `:pin' to all `package!' statements in current buffer.\nIf SELECT (prefix arg) is non-nil, prompt you to choose a specific commit for\neach package.\n\n(fn &optional SELECT)" t)(autoload 'doom/bump-module "~/.emacs.d/lisp/lib/packages" "Bump packages in CATEGORY MODULE.\nIf SELECT (prefix arg) is non-nil, prompt you to choose a specific commit for\neach package.\n\n(fn CATEGORY &optional MODULE SELECT)" t)(autoload 'doom/bump-package "~/.emacs.d/lisp/lib/packages" "Bump PACKAGE in all modules that install it.\n\n(fn PACKAGE)" t)(autoload 'doom/bumpify-diff "~/.emacs.d/lisp/lib/packages" "Copy user/repo@hash -> user/repo@hash's of changed packages to clipboard.\n\nMust be run from a magit diff buffer.\n\n(fn &optional INTERACTIVE)" t)(autoload 'doom/commit-bumps "~/.emacs.d/lisp/lib/packages" "Create a pre-filled magit commit for currently bumped packages." t)(autoload 'doom-package-homepage "~/.emacs.d/lisp/lib/packages" "Return the url to PACKAGE's homepage (usually a repo).\n\n(fn PACKAGE)")(autoload 'plist-put! "~/.emacs.d/lisp/lib/plist" "Set each PROP VALUE pair in REST to PLIST in-place.\n\n(fn PLIST &rest REST)" nil t)(autoload 'doom-plist-get "~/.emacs.d/lisp/lib/plist" "Return PROP in PLIST, if it exists. Otherwise NIL-VALUE.\n\n(fn PLIST PROP &optional NIL-VALUE)")(autoload 'doom-plist-merge "~/.emacs.d/lisp/lib/plist" "Non-destructively merge FROM-PLIST onto TO-PLIST\n\n(fn FROM-PLIST TO-PLIST)")(autoload 'doom-plist-delete-nil "~/.emacs.d/lisp/lib/plist" "Delete `nil' properties from a copy of PLIST.\n\n(fn PLIST)")(autoload 'doom-plist-keys "~/.emacs.d/lisp/lib/plist" "Return the keys in PLIST.\n\n(fn PLIST)")(autoload 'doom-plist-values "~/.emacs.d/lisp/lib/plist" "Return the values in PLIST.\n\n(fn PLIST)")(autoload 'doom-print "~/.emacs.d/lisp/lib/print" "Print OUTPUT to stdout.\n\nUnlike `message', this:\n- Respects the value of `standard-output' (if `doom-print-stream' is nil).\n- Indents according to `doom-print-indent' (if FORMAT is non-nil).\n- Prints to stdout instead of stderr in batch mode.\n- Recognizes more terminal escape codes (only in batch mode).\n- No-ops if OUTPUT is nil or an empty/blank string.\n\nReturns OUTPUT.\n\n(fn OUTPUT &key (FORMAT nil) (LEVEL doom-print-level) (NEWLINE t) (STREAM (or doom-print-stream standard-output)))")(autoload 'format! "~/.emacs.d/lisp/lib/print" "An alternative to `format' that understands `print!'s style syntax.\n\n(fn MESSAGE &rest ARGS)" nil t)(autoload 'print-group! "~/.emacs.d/lisp/lib/print" "Indents any `print!' or `format!' output within BODY.\n\n(fn &rest BODY)" nil t)(function-put 'print-group! 'lisp-indent-function 'defun)(autoload 'print! "~/.emacs.d/lisp/lib/print" "Prints MESSAGE, formatted with ARGS, to stdout.\n\nReturns non-nil if the message is a non-empty string.\n\nCan be colored using (color ...) blocks:\n\n  (print! \"Hello %s\" (bold (blue \"How are you?\")))\n  (print! \"Hello %s\" (red \"World\"))\n  (print! (green \"Great %s!\") \"success\")\n\nUses faces in interactive sessions and ANSI codes otherwise.\n\n(fn MESSAGE &rest ARGS)" nil t)(autoload 'insert! "~/.emacs.d/lisp/lib/print" "Like `insert', but with the power of `format!'.\n\nEach argument in ARGS can be a list, as if they were arguments to `format!':\n(MESSAGE [ARGS...]).\n\n(fn &rest (MESSAGE . ARGS)...)" nil t)(autoload 'with-output-to! "~/.emacs.d/lisp/lib/print" "Capture all output within BODY according to STREAMSPEC.\n\nSTREAMSPEC is a list of log specifications, indicating where to write output\nbased on the print level of the message. For example:\n\n  `((>= notice ,(get-buffer-create \"*stdout*\"))\n    (= error   ,(get-buffer-create \"*errors*\"))\n    (t . ,(get-buffer-create \"*debug*\")))\n\n(fn STREAMSPEC &rest BODY)" nil t)(function-put 'with-output-to! 'lisp-indent-function 1)(autoload 'doom-print--format "~/.emacs.d/lisp/lib/print" "\n\n(fn MESSAGE &rest ARGS)")(autoload 'doom-print--indent "~/.emacs.d/lisp/lib/print" "Indent TEXT by WIDTH spaces. If ARGS, format TEXT with them.\n\n(fn TEXT &optional PREFIX)")(autoload 'doom-print--fill "~/.emacs.d/lisp/lib/print" "Ensure MSG is split into lines no longer than `fill-column'.\n\n(fn MESSAGE &optional COLUMN INDENT)")(autoload 'doom-print--paragraph "~/.emacs.d/lisp/lib/print" "TODO\n\n(fn &rest LINES)")(autoload 'doom-print--join "~/.emacs.d/lisp/lib/print" "Ensure SEQUENCE is joined with SEPARATOR.\n\n`nil' and empty strings in SEQUENCE are omitted.\n\n(fn SEQUENCE &optional SEPARATOR)")(autoload 'doom-print--truncate "~/.emacs.d/lisp/lib/print" "Replaces basic org markup with ansi/text-properties.\n\n(fn TEXT &optional COL ELLIPSIS)")(autoload 'doom-print--buffer "~/.emacs.d/lisp/lib/print" "Replaces basic org markup with ansi/text-properties.\n\n(fn BUFFER &optional BEG END)")(autoload 'doom-print--cli-markup "~/.emacs.d/lisp/lib/print" "Replace `...', `...`, and ```...``` quotes in TEXT with CLI formatting.\n\n- `$ENVVAR' = bolded\n- `--switch' = bolded\n- `ARG' = underlined\n- `symbol' = highlighted in blue\n- `arbitrary code` = highlighted in blue\n- ```\n  Arbitrary multiline code gets highlighted in blue too.\n  ```\n\n(fn TEXT)")(autoload 'doom-print--org "~/.emacs.d/lisp/lib/print" "Replaces basic Org markup with ansi/text-properties.\n\nAll emphasis markers need to be preceded by a backslash.\n\n(fn TEXT)")(autoload 'doom-print--style "~/.emacs.d/lisp/lib/print" "Apply STYLE to formatted MESSAGE with ARGS.\n\nSTYLE is a symbol that correlates to `doom-print-ansi-alist'.\n\nIn a noninteractive session, this wraps the result in ansi color codes.\nOtherwise, it maps colors to a term-color-* face.\n\n(fn STYLE FORMAT &rest ARGS)")(autoload 'doom-print--class "~/.emacs.d/lisp/lib/print" "Apply CLASS to formatted format with ARGS.\n\nCLASS is derived from `doom-print-class-alist', and can contain any arbitrary,\ntransformative logic.\n\n(fn CLASS FORMAT &rest ARGS)")(autoload 'doom-call-process "~/.emacs.d/lisp/lib/process" "Execute COMMAND with ARGS synchronously.\n\nReturns (STATUS . OUTPUT) when it is done, where STATUS is the returned error\ncode of the process and OUTPUT is its stdout output.\n\n(fn COMMAND &rest ARGS)")(autoload 'doom-exec-process "~/.emacs.d/lisp/lib/process" "Execute COMMAND with ARGS synchronously.\n\nUnlike `doom-call-process', this pipes output to `standard-output' on the fly to\nsimulate 'exec' in the shell, so batch scripts could run external programs\nsynchronously without sacrificing their output.\n\nWarning: freezes indefinitely on any stdin prompt.\n\n(fn COMMAND &rest ARGS)")(defvar projectile-project-root nil)(defvar projectile-enable-caching (not noninteractive))(defvar projectile-require-project-root 'prompt)(autoload 'project-file-exists-p! "~/.emacs.d/lisp/lib/projects" "Checks if FILES exist at the current project's root.\n\nThe project's root is determined by `projectile', starting from BASE-DIRECTORY\n(defaults to `default-directory'). FILES are paths relative to the project root,\nunless they begin with a slash.\n\n(fn FILES &optional BASE-DIRECTORY)" nil t)(autoload 'doom/find-file-in-other-project "~/.emacs.d/lisp/lib/projects" "Performs `projectile-find-file' in a known project of your choosing.\n\n(fn PROJECT-ROOT)" t)(autoload 'doom/browse-in-other-project "~/.emacs.d/lisp/lib/projects" "Performs `find-file' in a known project of your choosing.\n\n(fn PROJECT-ROOT)" t)(autoload 'doom/browse-in-emacsd "~/.emacs.d/lisp/lib/projects" "Browse files from `doom-emacs-dir'." t)(autoload 'doom/find-file-in-emacsd "~/.emacs.d/lisp/lib/projects" "Find a file under `doom-emacs-dir', recursively." t)(autoload 'doom/add-directory-as-project "~/.emacs.d/lisp/lib/projects" "Register an arbitrary directory as a project.\n\nUnlike `projectile-add-known-project', if DIR isn't a valid project, a .project\nfile will be created within it so that it will always be treated as one. This\ncommand will throw an error if a parent of DIR is a valid project (which would\nmask DIR).\n\n(fn DIR)" t)(autoload 'doom-project-p "~/.emacs.d/lisp/lib/projects" "Return t if DIR (defaults to `default-directory') is a valid project.\n\n(fn &optional DIR)")(autoload 'doom-project-root "~/.emacs.d/lisp/lib/projects" "Return the project root of DIR (defaults to `default-directory').\nReturns nil if not in a project.\n\n(fn &optional DIR)")(autoload 'doom-project-name "~/.emacs.d/lisp/lib/projects" "Return the name of the current project.\n\nReturns '-' if not in a valid project.\n\n(fn &optional DIR)")(autoload 'doom-project-expand "~/.emacs.d/lisp/lib/projects" "Expand NAME to project root.\n\n(fn NAME &optional DIR)")(autoload 'doom-project-find-file "~/.emacs.d/lisp/lib/projects" "Jump to a file in DIR (searched recursively).\n\nIf DIR is not a project, it will be indexed (but not cached).\n\n(fn DIR)")(autoload 'doom-project-browse "~/.emacs.d/lisp/lib/projects" "Traverse a file structure starting linearly from DIR.\n\n(fn DIR)")(autoload 'doom-project-ignored-p "~/.emacs.d/lisp/lib/projects" "Return non-nil if temporary file or a straight package.\n\n(fn PROJECT-ROOT)")(progn (autoload 'set-project-type! "~/.emacs.d/lisp/lib/projects.el" "Add a project type to `projectile-project-type'.\n\n(fn NAME &key PREDICATE COMPILE RUN TEST CONFIGURE DIR)") (function-put 'set-project-type! 'lisp-indent-function 1))(put 'set-project-type! 'doom-module '(:core))(autoload 'doom/sandbox "~/.emacs.d/lisp/lib/sandbox" "Open the Emacs Lisp sandbox.\n\nThis is a test bed for running Emacs Lisp in another instance of Emacs with\nvarying amounts of Doom loaded, including:\n\n  a) vanilla Emacs (nothing loaded),\n  b) vanilla Doom (only Doom core),\n  c) Doom + modules - your private config or\n  c) Doom + modules + your private config (a complete Doom session)\n\nThis is done without sacrificing access to installed packages. Use the sandbox\nto reproduce bugs and determine if Doom is to blame." t)(autoload 'doom-scratch-buffer "~/.emacs.d/lisp/lib/scratch" "Return a scratchpad buffer in major MODE.\n\n(fn &optional DONT-RESTORE-P MODE DIRECTORY PROJECT-NAME)")(autoload 'doom-persist-scratch-buffer-h "~/.emacs.d/lisp/lib/scratch" "Save the current buffer to `doom-scratch-dir'.")(autoload 'doom-persist-scratch-buffers-h "~/.emacs.d/lisp/lib/scratch" "Save all scratch buffers to `doom-scratch-dir'.")(autoload 'doom-persist-scratch-buffers-after-switch-h "~/.emacs.d/lisp/lib/scratch" "Kill scratch buffers when they are no longer visible, saving them to disk.")(unless noninteractive (add-hook 'kill-emacs-hook #'doom-persist-scratch-buffers-h))(autoload 'doom/open-scratch-buffer "~/.emacs.d/lisp/lib/scratch" "Pop up a persistent scratch buffer.\n\nIf passed the prefix ARG, do not restore the last scratch buffer.\nIf PROJECT-P is non-nil, open a persistent scratch buffer associated with the\n  current project.\n\n(fn &optional ARG PROJECT-P SAME-WINDOW-P)" t)(autoload 'doom/switch-to-scratch-buffer "~/.emacs.d/lisp/lib/scratch" "Like `doom/open-scratch-buffer', but switches to it in the current window.\n\nIf passed the prefix ARG, do not restore the last scratch buffer.\n\n(fn &optional ARG PROJECT-P)" t)(autoload 'doom/open-project-scratch-buffer "~/.emacs.d/lisp/lib/scratch" "Opens the (persistent) project scratch buffer in a popup.\n\nIf passed the prefix ARG, do not restore the last scratch buffer.\n\n(fn &optional ARG SAME-WINDOW-P)" t)(autoload 'doom/switch-to-project-scratch-buffer "~/.emacs.d/lisp/lib/scratch" "Like `doom/open-project-scratch-buffer', but switches to it in the current\nwindow.\n\nIf passed the prefix ARG, do not restore the last scratch buffer.\n\n(fn &optional ARG)" t)(autoload 'doom/revert-scratch-buffer "~/.emacs.d/lisp/lib/scratch" "Revert scratch buffer to last persistent state." t)(autoload 'doom/delete-persistent-scratch-file "~/.emacs.d/lisp/lib/scratch" "Deletes a scratch buffer file in `doom-scratch-dir'.\n\nIf prefix ARG, delete all persistent scratches.\n\n(fn &optional ARG)" t)(autoload 'doom-session-file "~/.emacs.d/lisp/lib/sessions" "TODO\n\n(fn &optional NAME)")(autoload 'doom-save-session "~/.emacs.d/lisp/lib/sessions" "TODO\n\n(fn &optional FILE)")(autoload 'doom-load-session "~/.emacs.d/lisp/lib/sessions" "TODO\n\n(fn &optional FILE)")(autoload 'doom/quickload-session "~/.emacs.d/lisp/lib/sessions" "Load the last session saved.\nIf the FORCE \\[universal-argument] is provided\nthen no confirmation is asked.\n\n(fn FORCE)" t)(autoload 'doom/quicksave-session "~/.emacs.d/lisp/lib/sessions" "TODO" t)(autoload 'doom/load-session "~/.emacs.d/lisp/lib/sessions" "TODO\n\n(fn FILE)" t)(autoload 'doom/save-session "~/.emacs.d/lisp/lib/sessions" "TODO\n\n(fn FILE)" t)(autoload 'doom/restart "~/.emacs.d/lisp/lib/sessions" "Restart Emacs (and the daemon, if active).\n\nUnlike `doom/restart-and-restore', does not restart the current session." t)(autoload 'doom/restart-and-restore "~/.emacs.d/lisp/lib/sessions" "Restart Emacs (and the daemon, if active).\n\nIf DEBUG (the prefix arg) is given, start the new instance with the --debug\nswitch.\n\n(fn &optional DEBUG)" t)(autoload 'doom-store-persist "~/.emacs.d/lisp/lib/store" "Persist VARIABLES (list of symbols) in LOCATION (symbol).\nThis populates these variables with cached values, if one exists, and saves them\nto file when Emacs quits. This cannot persist buffer-local variables.\n\n(fn LOCATION VARIABLES)")(autoload 'doom-store-desist "~/.emacs.d/lisp/lib/store" "Unregisters VARIABLES (list of symbols) in LOCATION (symbol).\nVariables to persist are recorded in `doom-store-persist-alist'. Does not affect\nthe actual variables themselves or their values.\n\n(fn LOCATION &optional VARIABLES)")(autoload 'doom-store-get "~/.emacs.d/lisp/lib/store" "Retrieve KEY from LOCATION (defaults to `doom-store-location').\nIf it doesn't exist or has expired, DEFAULT_VALUE is returned.\n\n(fn KEY &optional LOCATION DEFAULT-VALUE NOFLUSH)")(autoload 'doom-store-put "~/.emacs.d/lisp/lib/store" "Set KEY to VALUE in the store at LOCATION.\nKEY can be any lisp object that is comparable with `equal'. TTL is the duration\n(in seconds) after which this cache entry expires; if nil, no cache expiration.\nLOCATION is the super-key to store this cache item under. It defaults to\n`doom-store-location'.\n\n(fn KEY VALUE &optional TTL LOCATION NOFLUSH)")(autoload 'doom-store-rem "~/.emacs.d/lisp/lib/store" "Clear a cache LOCATION (defaults to `doom-store-location').\n\n(fn KEY &optional LOCATION NOFLUSH)")(autoload 'doom-store-member-p "~/.emacs.d/lisp/lib/store" "Return t if KEY in LOCATION exists.\nLOCATION defaults to `doom-store-location'.\n\n(fn KEY &optional LOCATION)")(autoload 'doom-store-clear "~/.emacs.d/lisp/lib/store" "Clear the store at LOCATION (defaults to `doom-store-location').\n\n(fn &optional LOCATION)")(autoload 'doom-pcre-quote "~/.emacs.d/lisp/lib/strings" "Like `reqexp-quote', but for PCREs.\n\n(fn STR)")(autoload 'doom-system-distro "~/.emacs.d/lisp/lib/system" "Return a symbol representing the installed distro.")(autoload 'doom-system-distro-version "~/.emacs.d/lisp/lib/system" "Return a distro name and version string.")(autoload 'doom-system-distro-icon "~/.emacs.d/lisp/lib/system" "Display icon for the installed distro.")(autoload 'doom-system-cpus "~/.emacs.d/lisp/lib/system" "Return the max number of processing units on this system.\nTries to be portable. Returns 1 if cannot be determined.")(autoload 'doom-syntax-ppss "~/.emacs.d/lisp/lib/text" "Memoize the last result of `syntax-ppss'.\n\nP is the point at which we run `syntax-ppss'\n\n(fn &optional P)")(autoload 'doom-surrounded-p "~/.emacs.d/lisp/lib/text" "Returns t if point is surrounded by a brace delimiter: {[(\n\nIf INLINE is non-nil, only returns t if braces are on the same line, and\nwhitespace is balanced on either side of the cursor.\n\nIf INLINE is nil, returns t if the opening and closing braces are on adjacent\nlines, above and below, with only whitespace in between.\n\n(fn PAIR &optional INLINE BALANCED)")(autoload 'doom-point-in-comment-p "~/.emacs.d/lisp/lib/text" "Return non-nil if point is in a comment.\nPT defaults to the current position.\n\n(fn &optional PT)")(autoload 'doom-point-in-string-p "~/.emacs.d/lisp/lib/text" "Return non-nil if point is inside string.\n\nThis function actually returns the 3rd element of `syntax-ppss'\nwhich can be a number if the string is delimited by that\ncharacter or t if the string is delimited by general string\nfences.\n\nIf optional argument PT is present test this instead of point.\n\n(fn &optional PT)")(autoload 'doom-point-in-string-or-comment-p "~/.emacs.d/lisp/lib/text" "Return non-nil if POS is in a string or comment.\n\n(fn &optional POS)")(autoload 'doom-region-active-p "~/.emacs.d/lisp/lib/text" "Return non-nil if selection is active.\nDetects evil visual mode as well.")(function-put 'doom-region-active-p 'side-effect-free 't)(autoload 'doom-region-beginning "~/.emacs.d/lisp/lib/text" "Return beginning position of selection.\nUses `evil-visual-beginning' if available.")(function-put 'doom-region-beginning 'side-effect-free 't)(autoload 'doom-region-end "~/.emacs.d/lisp/lib/text" "Return end position of selection.\nUses `evil-visual-end' if available.")(function-put 'doom-region-end 'side-effect-free 't)(autoload 'doom-region "~/.emacs.d/lisp/lib/text" "Return the bounds of the current seelction.\n\nIf AS-LIST is non-nil, returns (BEG END). Otherwise returns a cons cell (BEG .\nEND).\n\n(fn &optional AS-LIST)")(autoload 'doom-thing-at-point-or-region "~/.emacs.d/lisp/lib/text" "Grab the current selection, THING at point, or xref identifier at point.\n\nReturns THING if it is a string. Otherwise, if nothing is found at point and\nPROMPT is non-nil, prompt for a string (if PROMPT is a string it'll be used as\nthe prompting string). Returns nil if all else fails.\n\nNOTE: Don't use THING for grabbing symbol-at-point. The xref fallback is smarter\nin some cases.\n\n(fn &optional THING PROMPT)")(function-put 'doom-thing-at-point-or-region 'side-effect-free 't)(autoload 'doom/backward-to-bol-or-indent "~/.emacs.d/lisp/lib/text" "Jump between the indentation column (first non-whitespace character) and the\nbeginning of the line. The opposite of\n`doom/forward-to-last-non-comment-or-eol'.\n\n(fn &optional POINT)" t)(autoload 'doom/forward-to-last-non-comment-or-eol "~/.emacs.d/lisp/lib/text" "Jumps between the last non-blank, non-comment character in the line and the\ntrue end of the line. The opposite of `doom/backward-to-bol-or-indent'.\n\n(fn &optional POINT)" t)(autoload 'doom/backward-kill-to-bol-and-indent "~/.emacs.d/lisp/lib/text" "Kill line to the first non-blank character. If invoked again afterwards, kill\nline to beginning of line. Same as `evil-delete-back-to-indentation'." t)(autoload 'doom/delete-backward-word "~/.emacs.d/lisp/lib/text" "Like `backward-kill-word', but doesn't affect the kill-ring.\n\n(fn ARG)" t)(autoload 'doom/dumb-indent "~/.emacs.d/lisp/lib/text" "Inserts a tab character (or spaces x tab-width)." t)(autoload 'doom/dumb-dedent "~/.emacs.d/lisp/lib/text" "Dedents the current line." t)(autoload 'doom/retab "~/.emacs.d/lisp/lib/text" "Converts tabs-to-spaces or spaces-to-tabs within BEG and END (defaults to\nbuffer start and end, to make indentation consistent. Which it does depends on\nthe value of `indent-tab-mode'.\n\nIf ARG (universal argument) is non-nil, retab the current buffer using the\nopposite indentation style.\n\n(fn ARG &optional BEG END)" t)(autoload 'doom/delete-trailing-newlines "~/.emacs.d/lisp/lib/text" "Trim trailing newlines.\n\nRespects `require-final-newline'." t)(autoload 'doom/dos2unix "~/.emacs.d/lisp/lib/text" "Convert the current buffer to a Unix file encoding." t)(autoload 'doom/unix2dos "~/.emacs.d/lisp/lib/text" "Convert the current buffer to a DOS file encoding." t)(autoload 'doom/toggle-indent-style "~/.emacs.d/lisp/lib/text" "Switch between tabs and spaces indentation style in the current buffer." t)(autoload 'doom/set-indent-width "~/.emacs.d/lisp/lib/text" "Change the indentation size to WIDTH of the current buffer.\n\nThe effectiveness of this command is significantly improved if you have\neditorconfig or dtrt-indent installed.\n\n(fn WIDTH)" t)(autoload 'doom-enable-delete-trailing-whitespace-h "~/.emacs.d/lisp/lib/text" "Enables the automatic deletion of trailing whitespaces upon file save.\n\ni.e. enables `ws-butler-mode' in the current buffer.")(autoload 'doom-disable-delete-trailing-whitespace-h "~/.emacs.d/lisp/lib/text" "Disables the automatic deletion of trailing whitespaces upon file save.\n\ni.e. disables `ws-butler-mode' in the current buffer.")(autoload 'doom-enable-show-trailing-whitespace-h "~/.emacs.d/lisp/lib/text" "Enable `show-trailing-whitespace' in the current buffer.")(autoload 'doom-disable-show-trailing-whitespace-h "~/.emacs.d/lisp/lib/text" "Disable `show-trailing-whitespace' in the current buffer.")(defconst doom-customize-theme-hook nil)(autoload 'doom--run-customize-theme-hook "~/.emacs.d/lisp/lib/themes" "Run FN, but suppress any writes to `custom-file'.\n\n(fn FN)")(autoload 'custom-theme-set-faces! "~/.emacs.d/lisp/lib/themes" "Apply a list of face SPECS as user customizations for THEME.\n\nTHEME can be a single symbol or list thereof. If nil, apply these settings to\nall themes. It will apply to all themes once they are loaded.\n\n(fn THEME &rest SPECS)" nil t)(function-put 'custom-theme-set-faces! 'lisp-indent-function 'defun)(autoload 'custom-set-faces! "~/.emacs.d/lisp/lib/themes" "Apply a list of face SPECS as user customizations.\n\nThis is a convenience macro alternative to `custom-set-face' which allows for a\nsimplified face format, and takes care of load order issues, so you can use\ndoom-themes' API without worry.\n\n(fn &rest SPECS)" nil t)(function-put 'custom-set-faces! 'lisp-indent-function 'defun)(autoload 'doom/reload-theme "~/.emacs.d/lisp/lib/themes" "Reload the current Emacs theme." t)(autoload 'doom-theme-face-attribute "~/.emacs.d/lisp/lib/themes" "Read a FACE's ATTRIBUTE for a loaded THEME.\n\nThis is different from `face-attribute', which reads the attribute of an active\nface for the current theme, but an active theme can change (or fail to load) in\nnon-interactive or frame-less sessions.\n\n(fn THEME FACE ATTRIBUTE &optional RECURSIVE)")(autoload 'doom-resize-window "~/.emacs.d/lisp/lib/ui" "Resize a window to NEW-SIZE. If HORIZONTAL, do it width-wise.\nIf FORCE-P is omitted when `window-size-fixed' is non-nil, resizing will fail.\n\n(fn WINDOW NEW-SIZE &optional HORIZONTAL FORCE-P)")(autoload 'doom-quit-p "~/.emacs.d/lisp/lib/ui" "Prompt the user for confirmation when killing Emacs.\n\nReturns t if it is safe to kill this session. Does not prompt if no real buffers\nare open.\n\n(fn &optional PROMPT)")(autoload 'doom-recenter-a "~/.emacs.d/lisp/lib/ui" "Generic advice for recentering window (typically :after other functions).\n\n(fn &rest _)")(autoload 'doom-preserve-window-position-a "~/.emacs.d/lisp/lib/ui" "Generic advice for preserving cursor position on screen after scrolling.\n\n(fn FN &rest ARGS)")(autoload 'doom-shut-up-a "~/.emacs.d/lisp/lib/ui" "Generic advisor for silencing noisy functions.\n\nIn interactive Emacs, this just inhibits messages from appearing in the\nminibuffer. They are still logged to *Messages*.\n\nIn tty Emacs, messages are suppressed completely.\n\n(fn FN &rest ARGS)")(autoload 'doom-apply-ansi-color-to-compilation-buffer-h "~/.emacs.d/lisp/lib/ui" "Applies ansi codes to the compilation buffers. Meant for\n`compilation-filter-hook'.")(autoload 'doom-disable-show-paren-mode-h "~/.emacs.d/lisp/lib/ui" "Turn off `show-paren-mode' buffer-locally.")(autoload 'doom-enable-line-numbers-h "~/.emacs.d/lisp/lib/ui")(autoload 'doom-disable-line-numbers-h "~/.emacs.d/lisp/lib/ui")(autoload 'doom/toggle-line-numbers "~/.emacs.d/lisp/lib/ui" "Toggle line numbers.\n\nCycles through regular, relative and no line numbers. The order depends on what\n`display-line-numbers-type' is set to. If you're using Emacs 26+, and\nvisual-line-mode is on, this skips relative and uses visual instead.\n\nSee `display-line-numbers' for what these values mean." t)(autoload 'doom/delete-frame-with-prompt "~/.emacs.d/lisp/lib/ui" "Delete the current frame, but ask for confirmation if it isn't empty." t)(autoload 'doom/window-maximize-buffer "~/.emacs.d/lisp/lib/ui" "Close other windows to focus on this one.\nUse `winner-undo' to undo this. Alternatively, use `doom/window-enlargen'.\n\n(fn &optional ARG)" t)(autoload 'doom/window-enlargen "~/.emacs.d/lisp/lib/ui" "Enlargen the current window (i.e. shrinks others) so you can focus on it.\nUse `winner-undo' to undo this. Alternatively, use\n`doom/window-maximize-buffer'.\n\n(fn &optional ARG)" t)(autoload 'doom/window-maximize-horizontally "~/.emacs.d/lisp/lib/ui" "Delete all windows to the left and right of the current window." t)(autoload 'doom/window-maximize-vertically "~/.emacs.d/lisp/lib/ui" "Delete all windows above and below the current window." t)(autoload 'doom/set-frame-opacity "~/.emacs.d/lisp/lib/ui" "Interactively change the current frame's opacity.\n\nOPACITY is an integer between 0 to 100, inclusive.\n\n(fn OPACITY)" t)(autoload 'doom/narrow-buffer-indirectly "~/.emacs.d/lisp/lib/ui" "Restrict editing in this buffer to the current region, indirectly.\n\nThis recursively creates indirect clones of the current buffer so that the\nnarrowing doesn't affect other windows displaying the same buffer. Call\n`doom/widen-indirectly-narrowed-buffer' to undo it (incrementally).\n\nInspired from http://demonastery.org/2013/04/emacs-evil-narrow-region/\n\n(fn BEG END)" t)(autoload 'doom/widen-indirectly-narrowed-buffer "~/.emacs.d/lisp/lib/ui" "Widens narrowed buffers.\n\nThis command will incrementally kill indirect buffers (under the assumption they\nwere created by `doom/narrow-buffer-indirectly') and switch to their base\nbuffer.\n\nIf ARG, then kill all indirect buffers, return the base buffer and widen it.\n\nIf the current buffer is not an indirect buffer, it is `widen'ed.\n\n(fn &optional ARG)" t)(autoload 'doom/toggle-narrow-buffer "~/.emacs.d/lisp/lib/ui" "Narrow the buffer to BEG END. If narrowed, widen it.\n\n(fn BEG END)" t)(defvar +company-backend-alist '((text-mode (:separate company-dabbrev company-yasnippet company-ispell)) (prog-mode company-capf company-yasnippet) (conf-mode company-capf company-dabbrev-code company-yasnippet)) "An alist matching modes to company backends. The backends for any mode is\nbuilt from this.")(autoload '+company-init-backends-h "~/.emacs.d/modules/completion/company/autoload" "Set `company-backends' for the current buffer.")(autoload '+company-has-completion-p "~/.emacs.d/modules/completion/company/autoload" "Return non-nil if a completion candidate exists at point.")(autoload '+company/toggle-auto-completion "~/.emacs.d/modules/completion/company/autoload" "Toggle as-you-type code completion." t)(autoload '+company/complete "~/.emacs.d/modules/completion/company/autoload" "Bring up the completion popup. If only one result, complete it." t)(autoload '+company/dabbrev "~/.emacs.d/modules/completion/company/autoload" "Invokes `company-dabbrev-code' in prog-mode buffers and `company-dabbrev'\neverywhere else." t)(autoload '+company/whole-lines "~/.emacs.d/modules/completion/company/autoload" "`company-mode' completion backend that completes whole-lines, akin to vim's\nC-x C-l.\n\n(fn COMMAND &optional ARG &rest IGNORED)" t)(autoload '+company/dict-or-keywords "~/.emacs.d/modules/completion/company/autoload" "`company-mode' completion combining `company-dict' and `company-keywords'." t)(autoload '+company/dabbrev-code-previous "~/.emacs.d/modules/completion/company/autoload" "TODO" t)(autoload '+company/completing-read "~/.emacs.d/modules/completion/company/autoload" "Complete current company candidates in minibuffer.\n\nUses ivy, helm, vertico, or ido, if available." t)(progn (autoload 'set-company-backend! "~/.emacs.d/modules/completion/company/autoload.el" "Prepends BACKENDS (in order) to `company-backends' in MODES.\n\nMODES should be one symbol or a list of them, representing major or minor modes.\nThis will overwrite backends for MODES on consecutive uses.\n\nIf the car of BACKENDS is nil, unset the backends for MODES.\n\nExamples:\n\n  (set-company-backend! 'js2-mode\n    'company-tide 'company-yasnippet)\n\n  (set-company-backend! 'sh-mode\n    '(company-shell :with company-yasnippet))\n\n  (set-company-backend! '(c-mode c++-mode)\n    '(:separate company-irony-c-headers company-irony))\n\n  (set-company-backend! 'sh-mode nil)  ; unsets backends for sh-mode\n\n(fn MODES &rest BACKENDS)") (function-put 'set-company-backend! 'lisp-indent-function 'defun))(put 'set-company-backend! 'doom-module '(:completion . company))(autoload '+corfu/move-to-minibuffer "~/.emacs.d/modules/completion/corfu/autoload" "Move the current list of candidates to your choice of minibuffer completion UI." t)(autoload '+corfu/smart-sep-toggle-escape "~/.emacs.d/modules/completion/corfu/autoload" "Insert `corfu-separator' or toggle escape if it's already there." t)(autoload '+corfu/dabbrev-this-buffer "~/.emacs.d/modules/completion/corfu/autoload" "Like `cape-dabbrev', but only scans current buffer." t)(autoload '+corfu/toggle-auto-complete "~/.emacs.d/modules/completion/corfu/autoload" "Toggle as-you-type completion in Corfu.\n\n(fn &optional INTERACTIVE)" t)(autoload '+corfu/dabbrev-or-next "~/.emacs.d/modules/completion/corfu/autoload" "Trigger corfu popup and select the first candidate.\n\nIntended to mimic `evil-complete-next', unless the popup is already open.\n\n(fn &optional ARG)" t)(autoload '+corfu/dabbrev-or-last "~/.emacs.d/modules/completion/corfu/autoload" "Trigger corfu popup and select the first candidate.\n\nIntended to mimic `evil-complete-previous', unless the popup is already open.\n\n(fn &optional ARG)" t)(autoload '+vertico:project-search "~/.emacs.d/modules/completion/vertico/autoload/evil" nil t)(autoload '+vertico:project-search-from-cwd "~/.emacs.d/modules/completion/vertico/autoload/evil" nil t)(autoload '+vertico/embark-magit-status "~/.emacs.d/modules/completion/vertico/autoload/magit" "Run `magit-status` on repo containing the embark target.\n\n(fn FILE)" t)(defvar embark-quit-after-action)(autoload '+vertico-file-search "~/.emacs.d/modules/completion/vertico/autoload/vertico" "Conduct a file search using ripgrep.\n\n:query STRING\n  Determines the initial input to search for.\n:in PATH\n  Sets what directory to base the search out of. Defaults to the current project's root.\n:recursive BOOL\n  Whether or not to search files recursively from the base directory.\n:args LIST\n  Arguments to be appended to `consult-ripgrep-args'.\n\n(fn &key QUERY IN ALL-FILES (RECURSIVE t) PROMPT ARGS)")(function-put '+vertico-file-search 'lisp-indent-function 'defun)(autoload '+vertico/project-search "~/.emacs.d/modules/completion/vertico/autoload/vertico" "Performs a live project search from the project root using ripgrep.\nIf ARG (universal argument), include all files, even hidden or compressed ones,\nin the search.\n\n(fn &optional ARG INITIAL-QUERY DIRECTORY)" t)(autoload '+vertico/project-search-from-cwd "~/.emacs.d/modules/completion/vertico/autoload/vertico" "Performs a live project search from the current directory.\nIf ARG (universal argument), include all files, even hidden or compressed ones.\n\n(fn &optional ARG INITIAL-QUERY)" t)(autoload '+vertico/search-symbol-at-point "~/.emacs.d/modules/completion/vertico/autoload/vertico" "Performs a search in the current buffer for thing at point." t)(autoload '+vertico-embark-target-package-fn "~/.emacs.d/modules/completion/vertico/autoload/vertico" "Targets Doom's package! statements and returns the package name")(autoload '+vertico/embark-export-write "~/.emacs.d/modules/completion/vertico/autoload/vertico" "Export the current vertico results to a writable buffer if possible.\n\nSupports exporting consult-grep to wgrep, file to wdeired, and consult-location to occur-edit" t)(autoload '+vertico/embark-preview "~/.emacs.d/modules/completion/vertico/autoload/vertico" "Previews candidate in vertico buffer, unless it's a consult command" t)(autoload '+vertico/enter-or-preview "~/.emacs.d/modules/completion/vertico/autoload/vertico" "Enter directory or embark preview on current candidate." t)(autoload '+vertico/jump-list "~/.emacs.d/modules/completion/vertico/autoload/vertico" "Go to an entry in evil's (or better-jumper's) jumplist.\n\n(fn JUMP)" t)(autoload '+vertico-embark-which-key-indicator "~/.emacs.d/modules/completion/vertico/autoload/vertico" "An embark indicator that displays keymaps using which-key.\nThe which-key help message will show the type and value of the\ncurrent target followed by an ellipsis if there are further\ntargets.")(autoload '+vertico/consult-fd-or-find "~/.emacs.d/modules/completion/vertico/autoload/vertico" "Runs consult-fd if fd version > 8.6.0 exists, consult-find otherwise.\nSee minad/consult#770.\n\n(fn &optional DIR INITIAL)" t)(autoload '+vertico-basic-remote-try-completion "~/.emacs.d/modules/completion/vertico/autoload/vertico" "\n\n(fn STRING TABLE PRED POINT)")(autoload '+vertico-basic-remote-all-completions "~/.emacs.d/modules/completion/vertico/autoload/vertico" "\n\n(fn STRING TABLE PRED POINT)")(autoload '+vertico-orderless-dispatch "~/.emacs.d/modules/completion/vertico/autoload/vertico" "Like `orderless-affix-dispatch', but allows affixes to be escaped.\n\n(fn PATTERN INDEX TOTAL)")(autoload '+vertico-orderless-disambiguation-dispatch "~/.emacs.d/modules/completion/vertico/autoload/vertico" "Ensure $ works with Consult commands, which add disambiguation suffixes.\n\n(fn PATTERN INDEX TOTAL)")(autoload '+vertico/switch-workspace-buffer "~/.emacs.d/modules/completion/vertico/autoload/workspaces" "Switch to another buffer in the same or a specified workspace.\n\nType the workspace's number (starting from 1) followed by a space to display its\nbuffer list. Selecting a buffer in another workspace will switch to that\nworkspace instead. If FORCE-SAME-WORKSPACE (the prefix arg) is non-nil, that\nbuffer will be opened in the current workspace instead.\n\n(fn &optional FORCE-SAME-WORKSPACE)" t)(autoload '+vertico/embark-open-in-new-workspace "~/.emacs.d/modules/completion/vertico/autoload/workspaces" "Open file in a new workspace.\n\n(fn FILE)" t)(autoload '+doom-dashboard/open "~/.emacs.d/modules/ui/doom-dashboard/autoload" "Switch to the dashboard in the current window, of the current FRAME.\n\n(fn FRAME)" t)(autoload '+doom-dashboard/forward-button "~/.emacs.d/modules/ui/doom-dashboard/autoload" "Like `forward-button', but don't wrap.\n\n(fn N)" t)(autoload '+doom-dashboard/backward-button "~/.emacs.d/modules/ui/doom-dashboard/autoload" "Like `backward-button', but don't wrap.\n\n(fn N)" t)(autoload '+modeline-resize-for-font-h "~/.emacs.d/modules/ui/modeline/autoload" "Adjust the modeline's height when the font size is changed by\n`doom/increase-font-size' or `doom/decrease-font-size'.\n\nMeant for `doom-change-font-size-hook'.")(autoload '+modeline-update-env-in-all-windows-h "~/.emacs.d/modules/ui/modeline/autoload" "Update version strings in all buffers.\n\n(fn &rest _)")(autoload '+modeline-clear-env-in-all-windows-h "~/.emacs.d/modules/ui/modeline/autoload" "Blank out version strings in all buffers.\n\n(fn &rest _)")(autoload '+popup--init "~/.emacs.d/modules/ui/popup/autoload/popup" "Initializes a popup window. Run any time a popup is opened. It sets the\ndefault window parameters for popup windows, clears leftover transient timers\nand enables `+popup-buffer-mode'.\n\n(fn WINDOW &optional ALIST)")(autoload '+popup-buffer-p "~/.emacs.d/modules/ui/popup/autoload/popup" "Return non-nil if BUFFER is a popup buffer. Defaults to the current buffer.\n\n(fn &optional BUFFER)")(autoload '+popup-window-p "~/.emacs.d/modules/ui/popup/autoload/popup" "Return non-nil if WINDOW is a popup window. Defaults to the current window.\n\n(fn &optional WINDOW)")(autoload '+popup-buffer "~/.emacs.d/modules/ui/popup/autoload/popup" "Open BUFFER in a popup window. ALIST describes its features.\n\n(fn BUFFER &optional ALIST)")(autoload '+popup-parameter "~/.emacs.d/modules/ui/popup/autoload/popup" "Fetch the window PARAMETER (symbol) of WINDOW\n\n(fn PARAMETER &optional WINDOW)")(autoload '+popup-parameter-fn "~/.emacs.d/modules/ui/popup/autoload/popup" "Fetch the window PARAMETER (symbol) of WINDOW. If it is a function, run it\nwith ARGS to get its return value.\n\n(fn PARAMETER &optional WINDOW &rest ARGS)")(autoload '+popup-windows "~/.emacs.d/modules/ui/popup/autoload/popup" "Returns a list of all popup windows.")(autoload '+popup-shrink-to-fit "~/.emacs.d/modules/ui/popup/autoload/popup" "Shrinks WINDOW to fit the buffer contents, if the buffer isn't empty.\n\nUses `shrink-window-if-larger-than-buffer'.\n\n(fn &optional WINDOW)")(autoload '+popup-alist-from-window-state "~/.emacs.d/modules/ui/popup/autoload/popup" "Convert window STATE (from `window-state-get') to a `display-buffer' alist.\n\n(fn STATE)")(autoload '+popup-adjust-fringes-h "~/.emacs.d/modules/ui/popup/autoload/popup" "Hides the fringe in popup windows, restoring them if `+popup-buffer-mode' is\ndisabled.")(autoload '+popup-adjust-margins-h "~/.emacs.d/modules/ui/popup/autoload/popup" "Creates padding for the popup window determined by `+popup-margin-width',\nrestoring it if `+popup-buffer-mode' is disabled.")(autoload '+popup-set-modeline-on-enable-h "~/.emacs.d/modules/ui/popup/autoload/popup" "Don't show modeline in popup windows without a `modeline' window-parameter.\nPossible values for this parameter are:\n\n  t            show the mode-line as normal\n  nil          hide the modeline entirely (the default)\n  a function   `mode-line-format' is set to its return value\n\nAny non-nil value besides the above will be used as the raw value for\n`mode-line-format'.")(autoload '+popup-unset-modeline-on-disable-h "~/.emacs.d/modules/ui/popup/autoload/popup" "Restore the modeline when `+popup-buffer-mode' is deactivated.")(autoload '+popup-close-on-escape-h "~/.emacs.d/modules/ui/popup/autoload/popup" "If called inside a popup, try to close that popup window (see\n`+popup/close'). If called outside, try to close all popup windows (see\n`+popup/close-all').")(autoload '+popup-cleanup-rules-h "~/.emacs.d/modules/ui/popup/autoload/popup" "Cleans up any duplicate popup rules." t)(autoload '+popup-kill-buffer-hook-h "~/.emacs.d/modules/ui/popup/autoload/popup" "TODO")(defalias 'other-popup #'+popup/other)(autoload '+popup/buffer "~/.emacs.d/modules/ui/popup/autoload/popup" "Open this buffer in a popup window." t)(autoload '+popup/other "~/.emacs.d/modules/ui/popup/autoload/popup" "Cycle through popup windows, like `other-window'. Ignores regular windows." t)(autoload '+popup/close "~/.emacs.d/modules/ui/popup/autoload/popup" "Close WINDOW, if it's a popup window.\n\nThis will do nothing if the popup's `quit' window parameter is either nil or\n'other. This window parameter is ignored if FORCE-P is non-nil.\n\n(fn &optional WINDOW FORCE-P)" t)(autoload '+popup/close-all "~/.emacs.d/modules/ui/popup/autoload/popup" "Close all open popup windows.\n\nThis will ignore popups with an `quit' parameter that is either nil or 'current.\nThis window parameter is ignored if FORCE-P is non-nil.\n\n(fn &optional FORCE-P)" t)(autoload '+popup/toggle "~/.emacs.d/modules/ui/popup/autoload/popup" "Toggle any visible popups.\nIf no popups are available, display the *Messages* buffer in a popup window." t)(autoload '+popup/restore "~/.emacs.d/modules/ui/popup/autoload/popup" "Restore the last popups that were closed, if any." t)(autoload '+popup/raise "~/.emacs.d/modules/ui/popup/autoload/popup" "Raise the current popup window into a regular window and\nreturn it. If prefix ARG, raise the current popup into a new\nwindow and return that window.\n\n(fn WINDOW &optional ARG)" t)(autoload '+popup/diagnose "~/.emacs.d/modules/ui/popup/autoload/popup" "Reveal what popup rule will be used for the current buffer." t)(autoload '+popup-close-a "~/.emacs.d/modules/ui/popup/autoload/popup" "TODO\n\n(fn &rest _)")(autoload '+popup-save-a "~/.emacs.d/modules/ui/popup/autoload/popup" "Sets aside all popups before executing the original function, usually to\nprevent the popup(s) from messing up the UI (or vice versa).\n\n(fn FN &rest ARGS)")(autoload '+popup-display-buffer-fullframe-fn "~/.emacs.d/modules/ui/popup/autoload/popup" "Displays the buffer fullscreen.\n\n(fn BUFFER ALIST)")(autoload '+popup-display-buffer-stacked-side-window-fn "~/.emacs.d/modules/ui/popup/autoload/popup" "A `display-buffer' action that serves as an alternative to\n`display-buffer-in-side-window', but allows for stacking popups with the `vslot'\nalist entry.\n\nAccepts the same arguments as `display-buffer-in-side-window'. You must set\n`window--sides-inhibit-check' to non-nil for this work properly.\n\n(fn BUFFER ALIST)")(defvar +popup--display-buffer-alist nil)(defvar +popup-defaults (list :side 'bottom :height 0.16 :width 40 :quit t :select #'ignore :ttl 5) "Default properties for popup rules defined with `set-popup-rule!'.")(autoload '+popup-make-rule "~/.emacs.d/modules/ui/popup/autoload/settings" "\n\n(fn PREDICATE PLIST)")(progn (autoload 'set-popup-rule! "~/.emacs.d/modules/ui/popup/autoload/settings.el" "Define a popup rule.\n\nThese rules affect buffers displayed with `pop-to-buffer' and `display-buffer'\n(or their siblings). Buffers displayed with `switch-to-buffer' (and its\nvariants) will not be affected by these rules (as they are unaffected by\n`display-buffer-alist', which powers the popup management system).\n\nPREDICATE accepts anything that the CONDITION argument in `buffer-match-p' takes\n(if you're on Emacs 29 or newer). On Emacs 28 or older, it can either be a) a\nregexp string (matched against the buffer's name) or b) a function that takes\ntwo arguments (a buffer name and the ACTION argument of `display-buffer') and\nreturns a boolean.\n\nPLIST can be made up of any of the following properties:\n\n:ignore BOOL\n  If BOOL is non-nil, popups matching PREDICATE will not be handled by the popup\n  system. Use this for buffers that have their own window management system like\n  magit or helm.\n\n:actions ACTIONS\n  ACTIONS is a list of functions or an alist containing (FUNCTION . ALIST). See\n  `display-buffer''s second argument for more information on its format and what\n  it accepts. If omitted, `+popup-default-display-buffer-actions' is used.\n\n:side 'bottom|'top|'left|'right\n  Which side of the frame to open the popup on. This is only respected if\n  `+popup-display-buffer-stacked-side-window-fn' or `display-buffer-in-side-window'\n  is in :actions or `+popup-default-display-buffer-actions'.\n\n:size/:width/:height FLOAT|INT|FN\n  Determines the size of the popup. If more than one of these size properties are\n  given :size always takes precedence, and is mapped with window-width or\n  window-height depending on what :side the popup is opened. Setting a height\n  for a popup that opens on the left or right is harmless, but comes into play\n  if two popups occupy the same :vslot.\n\n  If a FLOAT (0 < x < 1), the number represents how much of the window will be\n    consumed by the popup (a percentage).\n  If an INT, the number determines the size in lines (height) or units of\n    character width (width).\n  If a function, it takes one argument: the popup window, and can do whatever it\n    wants with it, typically resize it, like `+popup-shrink-to-fit'.\n\n:slot/:vslot INT\n  (This only applies to popups with a :side and only if :actions is blank or\n  contains the `+popup-display-buffer-stacked-side-window-fn' action) These control\n  how multiple popups are laid out. INT can be any integer, positive and\n  negative.\n\n  :slot controls lateral positioning (e.g. the horizontal positioning for\n    top/bottom popups, or vertical positioning for left/right popups).\n  :vslot controls popup stacking (from the edge of the frame toward the center).\n\n  Let's assume popup A and B are opened with :side 'bottom, in that order.\n    If they possess the same :slot and :vslot, popup B will replace popup A.\n    If popup B has a higher :slot, it will open to the right of popup A.\n    If popup B has a lower :slot, it will open to the left of popup A.\n    If popup B has a higher :vslot, it will open above popup A.\n    If popup B has a lower :vslot, it will open below popup A.\n\n:ttl INT|BOOL|FN\n  Stands for time-to-live. It can be t, an integer, nil or a function. This\n  controls how (and if) the popup system will clean up after the popup.\n\n  If any non-zero integer, wait that many seconds before killing the buffer (and\n    any associated processes).\n  If 0, the buffer is immediately killed.\n  If nil, the buffer won't be killed and is left to its own devices.\n  If t, resort to the default :ttl in `+popup-defaults'. If none exists, this is\n    the same as nil.\n  If a function, it takes one argument: the target popup buffer. The popup\n    system does nothing else and ignores the function's return value.\n\n:quit FN|BOOL|'other|'current\n  Can be t, 'other, 'current, nil, or a function. This determines the behavior\n  of the ESC/C-g keys in or outside of popup windows.\n\n  If t, close the popup if ESC/C-g is pressed anywhere.\n  If 'other, close this popup if ESC/C-g is pressed outside of any popup. This\n    is great for popups you may press ESC/C-g a lot in.\n  If 'current, close the current popup if ESC/C-g is pressed from inside of the\n    popup. This makes it harder to accidentally close a popup until you really\n    want to.\n  If nil, pressing ESC/C-g will never close this popup.\n  If a function, it takes one argument: the to-be-closed popup window, and is\n    run when ESC/C-g is pressed while that popup is open. It must return one of\n    the other values to determine the fate of the popup.\n\n:select BOOL|FN\n  Can be a boolean or function. The boolean determines whether to focus the\n  popup window after it opens (non-nil) or focus the origin window (nil).\n\n  If a function, it takes two arguments: the popup window and originating window\n    (where you were before the popup opened). The popup system does nothing else\n    and ignores the function's return value.\n\n:modeline BOOL|FN|LIST\n  Can be t (show the default modeline), nil (show no modeline), a function that\n  returns a modeline format or a valid value for `mode-line-format' to be used\n  verbatim. The function takes no arguments and is run in the context of the\n  popup buffer.\n\n:autosave BOOL|FN\n  This parameter determines what to do with modified buffers when closing popup\n  windows. It accepts t, 'ignore, a function or nil.\n\n  If t, no prompts. Just save them automatically (if they're file-visiting\n    buffers). Same as 'ignore for non-file-visiting buffers.\n  If nil (the default), prompt the user what to do if the buffer is\n    file-visiting and modified.\n  If 'ignore, no prompts, no saving. Just silently kill it.\n  If a function, it is run with one argument: the popup buffer, and must return\n    non-nil to save or nil to do nothing (but no prompts).\n\n:parameters ALIST\n  An alist of custom window parameters. See `(elisp)Window Parameters'.\n\nIf any of these are omitted, defaults derived from `+popup-defaults' will be\nused.\n\n(fn PREDICATE &key IGNORE ACTIONS SIDE SIZE WIDTH HEIGHT SLOT VSLOT TTL QUIT SELECT MODELINE AUTOSAVE PARAMETERS)") (function-put 'set-popup-rule! 'lisp-indent-function 'defun))(put 'set-popup-rule! 'doom-module '(:ui . popup))(progn (autoload 'set-popup-rules! "~/.emacs.d/modules/ui/popup/autoload/settings.el" "Defines multiple popup rules.\n\nEvery entry in RULESETS should be a list of alists where the CAR is the\npredicate and CDR is a plist. See `set-popup-rule!' for details on the predicate\nand plist.\n\nExample:\n\n  (set-popup-rules!\n    '((\"^ \\*\" :slot 1 :vslot -1 :size #'+popup-shrink-to-fit)\n      (\"^\\*\"  :slot 1 :vslot -1 :select t))\n    '((\"^\\*Completions\" :slot -1 :vslot -2 :ttl 0)\n      (\"^\\*Compil\\(?:ation\\|e-Log\\)\" :size 0.3 :ttl 0 :quit t)))\n\n(fn &rest RULESETS)") (function-put 'set-popup-rules! 'lisp-indent-function 0))(put 'set-popup-rules! 'doom-module '(:ui . popup))(autoload '+treemacs/toggle "~/.emacs.d/modules/ui/treemacs/autoload" "Initialize or toggle treemacs.\n\nEnsures that only the current project is present and all other projects have\nbeen removed.\n\nUse `treemacs' command for old functionality." t)(defalias '+vc-gutter/stage-hunk #'diff-hl-stage-current-hunk)(defalias '+vc-gutter/next-hunk #'diff-hl-next-hunk)(defalias '+vc-gutter/previous-hunk #'diff-hl-previous-hunk)(autoload '+vc-gutter/revert-hunk "~/.emacs.d/modules/ui/vc-gutter/autoload/diff-hl" "Invoke `diff-hl-revert-hunk'.\n\n(fn &optional NO-PROMPT)" t)(autoload '+vc-gutter/save-and-revert-hunk "~/.emacs.d/modules/ui/vc-gutter/autoload/diff-hl" "Invoke `diff-hl-revert-hunk' with `vc-suppress-confirm' set." t)(add-hook! '(prog-mode-hook text-mode-hook conf-mode-hook) #'vi-tilde-fringe-mode)(autoload '+workspace:save "~/.emacs.d/modules/ui/workspaces/autoload/evil" nil t)(autoload '+workspace:load "~/.emacs.d/modules/ui/workspaces/autoload/evil" nil t)(autoload '+workspace:new "~/.emacs.d/modules/ui/workspaces/autoload/evil" nil t)(autoload '+workspace:rename "~/.emacs.d/modules/ui/workspaces/autoload/evil" nil t)(autoload '+workspace:delete "~/.emacs.d/modules/ui/workspaces/autoload/evil" nil t)(autoload '+workspace:switch-next "~/.emacs.d/modules/ui/workspaces/autoload/evil" nil t)(autoload '+workspace:switch-previous "~/.emacs.d/modules/ui/workspaces/autoload/evil" nil t)(defface +workspace-tab-selected-face '((t (:inherit highlight))) "The face for selected tabs displayed by `+workspace/display'" :group 'persp-mode)(defface +workspace-tab-face '((t (:inherit default))) "The face for selected tabs displayed by `+workspace/display'" :group 'persp-mode)(defalias #'+workspace-p #'perspective-p "Return t if OBJ is a perspective hash table.")(autoload '+workspace-exists-p "~/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Returns t if NAME is the name of an existing workspace.\n\n(fn NAME)")(defalias #'+workspace-contains-buffer-p #'persp-contain-buffer-p "Return non-nil if BUFFER is in WORKSPACE (defaults to current workspace).")(defalias #'+workspace-current #'get-current-persp "Return the currently active workspace.")(autoload '+workspace-get "~/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Return a workspace named NAME. Unless NOERROR is non-nil, this throws an\nerror if NAME doesn't exist.\n\n(fn NAME &optional NOERROR)")(autoload '+workspace-current-name "~/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Get the name of the current workspace.")(autoload '+workspace-list-names "~/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Return the list of names of open workspaces.")(autoload '+workspace-list "~/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Return a list of workspace structs (satisifes `+workspace-p').")(autoload '+workspace-buffer-list "~/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Return a list of buffers in PERSP.\n\nPERSP can be a string (name of a workspace) or a workspace (satisfies\n`+workspace-p'). If nil or omitted, it defaults to the current workspace.\n\n(fn &optional PERSP)")(autoload '+workspace-orphaned-buffer-list "~/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Return a list of buffers that aren't associated with any perspective.")(autoload '+workspace-load "~/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Loads a single workspace (named NAME) into the current session. Can only\nretrieve perspectives that were explicitly saved with `+workspace-save'.\n\nReturns t if successful, nil otherwise.\n\n(fn NAME)")(autoload '+workspace-save "~/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Saves a single workspace (NAME) from the current session. Can be loaded again\nwith `+workspace-load'. NAME can be the string name of a workspace or its\nperspective hash table.\n\nReturns t on success, nil otherwise.\n\n(fn NAME)")(autoload '+workspace-delete "~/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Delete WORKSPACE from the saved workspaces in `persp-save-dir'.\n\nReturn t if WORKSPACE was successfully deleted. Throws error if WORKSPACE is not\nfound or wasn't saved with `+workspace-save'.\n\n(fn WORKSPACE)")(autoload '+workspace-new "~/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Create a new workspace named NAME. If one already exists, return nil.\nOtherwise return t on success, nil otherwise.\n\n(fn NAME)")(autoload '+workspace-rename "~/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Rename the current workspace named NAME to NEW-NAME. Returns old name on\nsuccess, nil otherwise.\n\n(fn NAME NEW-NAME)")(autoload '+workspace-kill "~/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Kill the workspace denoted by WORKSPACE, which can be the name of a\nperspective or its hash table. If INHIBIT-KILL-P is non-nil, don't kill this\nworkspace's buffers.\n\n(fn WORKSPACE &optional INHIBIT-KILL-P)")(autoload '+workspace-switch "~/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Switch to another workspace named NAME (a string).\n\nIf AUTO-CREATE-P is non-nil, create the workspace if it doesn't exist, otherwise\nthrows an error.\n\n(fn NAME &optional AUTO-CREATE-P)")(defalias '+workspace/restore-last-session #'doom/quickload-session)(autoload '+workspace/load "~/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Load a workspace and switch to it. If called with C-u, try to reload the\ncurrent workspace (by name) from session files.\n\n(fn NAME)" t)(autoload '+workspace/save "~/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Save the current workspace. If called with C-u, autosave the current\nworkspace.\n\n(fn NAME)" t)(autoload '+workspace/rename "~/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Rename the current workspace.\n\n(fn NEW-NAME)" t)(autoload '+workspace/kill "~/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Delete this workspace. If called with C-u, prompts you for the name of the\nworkspace to delete.\n\n(fn NAME)" t)(autoload '+workspace/delete "~/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Delete a saved workspace in `persp-save-dir'.\n\nCan only selete workspaces saved with `+workspace/save' or `+workspace-save'.\n\n(fn NAME)" t)(autoload '+workspace/kill-session "~/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Delete the current session, all workspaces, windows and their buffers.\n\n(fn &optional INTERACTIVE)" t)(autoload '+workspace/kill-session-and-quit "~/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Kill emacs without saving anything." t)(autoload '+workspace/new "~/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Create a new workspace named NAME. If CLONE-P is non-nil, clone the current\nworkspace, otherwise the new workspace is blank.\n\n(fn &optional NAME CLONE-P)" t)(autoload '+workspace/new-named "~/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Create a new workspace with a given NAME.\n\n(fn NAME)" t)(autoload '+workspace/switch-to "~/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Switch to a workspace at a given INDEX. A negative number will start from the\nend of the workspace list.\n\n(fn INDEX)" t)(dotimes (i 9) (defalias (intern (format "+workspace/switch-to-%d" i)) (lambda nil (interactive) (+workspace/switch-to i)) (format "Switch to workspace #%d" (1+ i))))(autoload '+workspace/switch-to-final "~/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Switch to the final workspace in open workspaces." t)(autoload '+workspace/other "~/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Switch to the last activated workspace." t)(autoload '+workspace/cycle "~/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Cycle n workspaces to the right (default) or left.\n\n(fn N)" t)(autoload '+workspace/switch-left "~/.emacs.d/modules/ui/workspaces/autoload/workspaces" nil t)(autoload '+workspace/switch-right "~/.emacs.d/modules/ui/workspaces/autoload/workspaces" nil t)(autoload '+workspace/close-window-or-workspace "~/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Close the selected window. If it's the last window in the workspace, either\nclose the workspace (as well as its associated frame, if one exists) and move to\nthe next." t)(autoload '+workspace/swap-left "~/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Swap the current workspace with the COUNTth workspace on its left.\n\n(fn &optional COUNT)" t)(autoload '+workspace/swap-right "~/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Swap the current workspace with the COUNTth workspace on its right.\n\n(fn &optional COUNT)" t)(autoload '+workspace-message "~/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Show an 'elegant' message in the echo area next to a listing of workspaces.\n\n(fn MESSAGE &optional TYPE)")(autoload '+workspace-error "~/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Show an 'elegant' error in the echo area next to a listing of workspaces.\n\n(fn MESSAGE &optional NOERROR)")(autoload '+workspace/display "~/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Display a list of workspaces (like tabs) in the echo area." t)(autoload '+workspaces-delete-associated-workspace-h "~/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Delete workspace associated with current frame.\nA workspace gets associated with a frame when a new frame is interactively\ncreated.\n\n(fn &optional FRAME)")(autoload '+workspaces-associate-frame-fn "~/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Create a blank, new perspective and associate it with FRAME.\n\n(fn FRAME &optional NEW-FRAME-P)")(autoload '+workspaces-set-project-action-fn "~/.emacs.d/modules/ui/workspaces/autoload/workspaces" "A `projectile-switch-project-action' that sets the project directory for\n`+workspaces-switch-to-project-h'.")(autoload '+workspaces-switch-to-project-h "~/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Creates a workspace dedicated to a new project. If one already exists, switch\nto it. If in the main workspace and it's empty, recycle that workspace, without\nrenaming it.\n\nAfterwords, runs `+workspaces-switch-project-function'. By default, this prompts\nthe user to open a file in the new project.\n\nThis be hooked to `projectile-after-switch-project-hook'.\n\n(fn &optional DIR)")(autoload '+workspaces-save-tab-bar-data-h "~/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Save the current workspace's tab bar data.\n\n(fn _)")(autoload '+workspaces-save-tab-bar-data-to-file-h "~/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Save the current workspace's tab bar data to file.\n\n(fn &rest _)")(autoload '+workspaces-load-tab-bar-data-h "~/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Restores the tab bar data of the workspace we have just switched to.\n\n(fn _)")(autoload '+workspaces-load-tab-bar-data-from-file-h "~/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Restores the tab bar data from file.\n\n(fn &rest _)")(autoload '+workspaces-autosave-real-buffers-a "~/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Don't autosave if no real buffers are open.\n\n(fn FN &rest ARGS)")(defalias '+zen/toggle #'writeroom-mode)(autoload '+zen/toggle-fullscreen "~/.emacs.d/modules/ui/zen/autoload" "Toggle `writeroom-mode' fullscreen and delete all other windows.\nInvoke again to revert to the window configuration before it was activated." t)(autoload '+evil-escape-a "~/.emacs.d/modules/editor/evil/autoload/advice" "Call `doom/escape' if `evil-force-normal-state' is called interactively.\n\n(fn &rest _)")(autoload '+evil-replace-filename-modifiers-a "~/.emacs.d/modules/editor/evil/autoload/advice" "Take a path and resolve any vim-like filename modifiers in it. This adds\nsupport for most vim file modifiers, as well as:\n\n  %:P   Resolves to `doom-project-root'.\n\nSee http://vimdoc.sourceforge.net/htmldoc/cmdline.html#filename-modifiers for\nmore information on modifiers.\n\n(fn FILE-NAME)")(autoload '+evil--insert-newline-below-and-respect-comments-a "~/.emacs.d/modules/editor/evil/autoload/advice" "\n\n(fn FN COUNT)")(autoload '+evil--insert-newline-above-and-respect-comments-a "~/.emacs.d/modules/editor/evil/autoload/advice" "\n\n(fn FN COUNT)")(autoload '+evil-window-split-a "~/.emacs.d/modules/editor/evil/autoload/advice" nil t)(autoload '+evil-window-vsplit-a "~/.emacs.d/modules/editor/evil/autoload/advice" nil t)(autoload '+evil-join-a "~/.emacs.d/modules/editor/evil/autoload/advice" nil nil)(autoload '+evil--fix-dabbrev-in-minibuffer-h "~/.emacs.d/modules/editor/evil/autoload/advice" "Make `try-expand-dabbrev' from `hippie-expand' work in minibuffer. See\n`he-dabbrev-beg', so we need to redefine syntax for '/'.")(autoload '+evil--embrace-get-pair "~/.emacs.d/modules/editor/evil/autoload/embrace" "\n\n(fn CHAR)")(autoload '+evil--embrace-escaped "~/.emacs.d/modules/editor/evil/autoload/embrace" "Backslash-escaped surround character support for embrace.")(autoload '+evil--embrace-latex "~/.emacs.d/modules/editor/evil/autoload/embrace" "LaTeX command support for embrace.")(autoload '+evil--embrace-elisp-fn "~/.emacs.d/modules/editor/evil/autoload/embrace" "Elisp function support for embrace.")(autoload '+evil--embrace-angle-brackets "~/.emacs.d/modules/editor/evil/autoload/embrace" "Type/generic angle brackets.")(autoload '+evil/shift-right "~/.emacs.d/modules/editor/evil/autoload/evil" "vnoremap < <gv" t)(autoload '+evil/shift-left "~/.emacs.d/modules/editor/evil/autoload/evil" "vnoremap > >gv" t)(autoload '+evil/alt-paste "~/.emacs.d/modules/editor/evil/autoload/evil" "Call `evil-paste-after' but invert `evil-kill-on-visual-paste'.\nBy default, this replaces the selection with what's in the clipboard without\nreplacing its contents." t)(autoload '+evil/window-move-left "~/.emacs.d/modules/editor/evil/autoload/evil" "Swap windows to the left.\n\n(fn &optional ARG)" t)(autoload '+evil/window-move-right "~/.emacs.d/modules/editor/evil/autoload/evil" "Swap windows to the right\n\n(fn &optional ARG)" t)(autoload '+evil/window-move-up "~/.emacs.d/modules/editor/evil/autoload/evil" "Swap windows upward.\n\n(fn &optional ARG)" t)(autoload '+evil/window-move-down "~/.emacs.d/modules/editor/evil/autoload/evil" "Swap windows downward.\n\n(fn &optional ARG)" t)(autoload '+evil/window-split-and-follow "~/.emacs.d/modules/editor/evil/autoload/evil" "Split current window horizontally, then focus new window.\nIf `evil-split-window-below' is non-nil, the new window isn't focused." t)(autoload '+evil/window-vsplit-and-follow "~/.emacs.d/modules/editor/evil/autoload/evil" "Split current window vertically, then focus new window.\nIf `evil-vsplit-window-right' is non-nil, the new window isn't focused." t)(autoload '+evil:apply-macro "~/.emacs.d/modules/editor/evil/autoload/evil" nil t)(autoload '+evil:retab "~/.emacs.d/modules/editor/evil/autoload/evil" nil t)(autoload '+evil:narrow-buffer "~/.emacs.d/modules/editor/evil/autoload/evil" nil t)(autoload '+evil:yank-unindented "~/.emacs.d/modules/editor/evil/autoload/evil" nil t)(autoload '+evil-delete "~/.emacs.d/modules/editor/evil/autoload/evil" nil t)(progn (autoload 'set-evil-initial-state! "~/.emacs.d/modules/editor/evil/autoload/evil.el" "Set the initialize STATE of MODES using `evil-set-initial-state'.\n\n(fn MODES STATE)") (function-put 'set-evil-initial-state! 'lisp-indent-function 'defun))(put 'set-evil-initial-state! 'doom-module '(:editor . evil))(autoload '+evil-ex-regexp-match "~/.emacs.d/modules/editor/evil/autoload/ex" "\n\n(fn FLAG &optional ARG INVERT)")(autoload '+evil:align "~/.emacs.d/modules/editor/evil/autoload/ex" nil t)(autoload '+evil:align-right "~/.emacs.d/modules/editor/evil/autoload/ex" nil t)(autoload '+evil:open-scratch-buffer "~/.emacs.d/modules/editor/evil/autoload/ex" nil t)(autoload '+evil:pwd "~/.emacs.d/modules/editor/evil/autoload/ex" nil t)(autoload '+evil:make "~/.emacs.d/modules/editor/evil/autoload/ex" nil t)(autoload '+evil:compile "~/.emacs.d/modules/editor/evil/autoload/ex" nil t)(autoload '+evil:reverse-lines "~/.emacs.d/modules/editor/evil/autoload/ex" nil t)(autoload '+evil:cd "~/.emacs.d/modules/editor/evil/autoload/ex" nil t)(autoload '+evil:kill-all-buffers "~/.emacs.d/modules/editor/evil/autoload/ex" nil t)(autoload '+evil:kill-matching-buffers "~/.emacs.d/modules/editor/evil/autoload/ex" nil t)(autoload '+evil:help "~/.emacs.d/modules/editor/evil/autoload/ex" nil t)(autoload '+evil:read "~/.emacs.d/modules/editor/evil/autoload/ex" nil t)(autoload '+evil:delete-this-file "~/.emacs.d/modules/editor/evil/autoload/files" nil t)(autoload '+evil:move-this-file "~/.emacs.d/modules/editor/evil/autoload/files" nil t)(autoload '+evil:copy-this-file "~/.emacs.d/modules/editor/evil/autoload/files" nil t)(autoload '+evil:whole-buffer-txtobj "~/.emacs.d/modules/editor/evil/autoload/textobjects" nil nil)(autoload '+evil:defun-txtobj "~/.emacs.d/modules/editor/evil/autoload/textobjects" nil nil)(autoload '+evil:inner-url-txtobj "~/.emacs.d/modules/editor/evil/autoload/textobjects" nil nil)(autoload '+evil:outer-url-txtobj "~/.emacs.d/modules/editor/evil/autoload/textobjects" nil nil)(autoload '+evil:inner-any-quote "~/.emacs.d/modules/editor/evil/autoload/textobjects" nil nil)(autoload '+evil:outer-any-quote "~/.emacs.d/modules/editor/evil/autoload/textobjects" nil nil)(autoload '+evil/next-beginning-of-method "~/.emacs.d/modules/editor/evil/autoload/unimpaired" "Jump to the beginning of the COUNT-th method/function after point.\n\n(fn COUNT)" t)(autoload '+evil/previous-beginning-of-method "~/.emacs.d/modules/editor/evil/autoload/unimpaired" "Jump to the beginning of the COUNT-th method/function before point.\n\n(fn COUNT)" t)(defalias #'+evil/next-end-of-method #'end-of-defun "Jump to the end of the COUNT-th method/function after point.")(autoload '+evil/previous-end-of-method "~/.emacs.d/modules/editor/evil/autoload/unimpaired" "Jump to the end of the COUNT-th method/function before point.\n\n(fn COUNT)" t)(autoload '+evil/next-preproc-directive "~/.emacs.d/modules/editor/evil/autoload/unimpaired" "Jump to the COUNT-th preprocessor directive after point.\n\nBy default, this only recognizes C preproc directives. To change this see\n`+evil-preprocessor-regexp'.\n\n(fn COUNT)" t)(autoload '+evil/previous-preproc-directive "~/.emacs.d/modules/editor/evil/autoload/unimpaired" "Jump to the COUNT-th preprocessor directive before point.\n\nSee `+evil/next-preproc-directive' for details.\n\n(fn COUNT)" t)(autoload '+evil/next-comment "~/.emacs.d/modules/editor/evil/autoload/unimpaired" "Jump to the beginning of the COUNT-th commented region after point.\n\n(fn COUNT)" t)(autoload '+evil/previous-comment "~/.emacs.d/modules/editor/evil/autoload/unimpaired" "Jump to the beginning of the COUNT-th commented region before point.\n\n(fn COUNT)" t)(autoload '+evil/insert-newline-below "~/.emacs.d/modules/editor/evil/autoload/unimpaired" "Insert COUNT blank line(s) below current line. Does not change modes.\n\n(fn COUNT)" t)(autoload '+evil/insert-newline-above "~/.emacs.d/modules/editor/evil/autoload/unimpaired" "Insert COUNT blank line(s) above current line. Does not change modes.\n\n(fn COUNT)" t)(autoload '+evil/next-frame "~/.emacs.d/modules/editor/evil/autoload/unimpaired" "Focus next frame.\n\n(fn COUNT)" t)(autoload '+evil/previous-frame "~/.emacs.d/modules/editor/evil/autoload/unimpaired" "Focus previous frame.\n\n(fn COUNT)" t)(autoload '+evil/next-file "~/.emacs.d/modules/editor/evil/autoload/unimpaired" "Open file following this one, alphabetically, in the same directory.\n\n(fn COUNT)" t)(autoload '+evil/previous-file "~/.emacs.d/modules/editor/evil/autoload/unimpaired" "Open file preceding this one, alphabetically, in the same directory.\n\n(fn COUNT)" t)(autoload '+evil:url-encode "~/.emacs.d/modules/editor/evil/autoload/unimpaired" nil t)(autoload '+evil:url-decode "~/.emacs.d/modules/editor/evil/autoload/unimpaired" nil t)(autoload '+evil:c-string-encode "~/.emacs.d/modules/editor/evil/autoload/unimpaired" nil t)(autoload '+evil:c-string-decode "~/.emacs.d/modules/editor/evil/autoload/unimpaired" nil t)(autoload '+evil/reselect-paste "~/.emacs.d/modules/editor/evil/autoload/unimpaired" "Return to visual mode and reselect the last pasted region." t)(autoload '+file-templates--expand "~/.emacs.d/modules/editor/file-templates/autoload" "Auto insert a yasnippet snippet into current file and enter insert mode (if\nevil is loaded and enabled).\n\n(fn PRED &key PROJECT MODE TRIGGER IGNORE WHEN)")(autoload '+file-templates-get-short-path "~/.emacs.d/modules/editor/file-templates/autoload" "Fetches a short file path for the header in Doom module templates.")(autoload '+file-templates-module-for-path "~/.emacs.d/modules/editor/file-templates/autoload" "Generate a title for a doom module's readme at PATH.\n\n(fn &optional PATH)")(autoload '+file-templates/insert-license "~/.emacs.d/modules/editor/file-templates/autoload" "Insert a license file template into the current file." t)(autoload '+file-templates/debug "~/.emacs.d/modules/editor/file-templates/autoload" "Tests the current buffer and outputs the file template rule most appropriate\nfor it. This is used for testing." t)(progn (autoload 'set-file-template! "~/.emacs.d/modules/editor/file-templates/autoload.el" "Register a file template.\n\nPRED can either be a regexp string or a major mode symbol. PLIST may contain\nthese properties:\n\n  :when FUNCTION\n    Provides a secondary predicate. This function takes the filename as an\n    argument and is executed from within the target buffer. If it returns nil,\n    this rule will be skipped over.\n  :trigger STRING|FUNCTION\n    If a string, this is the yasnippet trigger keyword used to trigger the\n      target snippet.\n    If a function, this function will be run in the context of the buffer to\n      insert a file template into. It is given no arguments and must insert text\n      into the current buffer manually.\n    If omitted, `+file-templates-default-trigger' is used.\n  :mode SYMBOL\n    What mode to get the yasnippet snippet from. If omitted, either PRED (if\n    it's a major-mode symbol) or the mode of the buffer is used.\n  :project BOOL\n    If non-nil, ignore this template if this buffer isn't in a project.\n  :ignore BOOL\n    If non-nil, don't expand any template for this file and don't test any other\n    file template rule against this buffer.\n\n(fn PRED &key WHEN TRIGGER MODE PROJECT IGNORE)") (function-put 'set-file-template! 'lisp-indent-function 'defun))(put 'set-file-template! 'doom-module '(:editor . file-templates))(autoload 'set-file-templates! "~/.emacs.d/modules/editor/file-templates/autoload.el" "Like `set-file-template!', but can register multiple file templates at once.\n\n(fn &rest (PRED &key WHEN TRIGGER MODE PROJECT IGNORE))")(put 'set-file-templates! 'doom-module '(:editor . file-templates))(autoload '+fold/toggle "~/.emacs.d/modules/editor/fold/autoload/fold" "Toggle the fold at point.\n\nTargets `vimmish-fold', `hideshow', `ts-fold' and `outline' folds." t)(autoload '+fold/open-rec "~/.emacs.d/modules/editor/fold/autoload/fold" "Recursively open the folded region at point.\n\nTargets `vimmish-fold', `hideshow', `ts-fold' and `outline' folds." t)(autoload '+fold/open "~/.emacs.d/modules/editor/fold/autoload/fold" "Open the folded region at point.\n\nTargets `vimmish-fold', `hideshow', `ts-fold' and `outline' folds." t)(autoload '+fold/close "~/.emacs.d/modules/editor/fold/autoload/fold" "Close the folded region at point.\n\nTargets `vimmish-fold', `hideshow', `ts-fold' and `outline' folds." t)(autoload '+fold/open-all "~/.emacs.d/modules/editor/fold/autoload/fold" "Open folds at LEVEL (or all folds if LEVEL is nil).\n\n(fn &optional LEVEL)" t)(autoload '+fold/close-all "~/.emacs.d/modules/editor/fold/autoload/fold" "Close folds at LEVEL (or all folds if LEVEL is nil).\n\n(fn &optional LEVEL)" t)(autoload '+fold/next "~/.emacs.d/modules/editor/fold/autoload/fold" "Jump to the next vimish fold, folded outline heading or folded\nregion.\n\n(fn COUNT)" t)(autoload '+fold/previous "~/.emacs.d/modules/editor/fold/autoload/fold" "Jump to the previous vimish fold, outline heading or folded region.\n\n(fn COUNT)" t)(autoload '+fold-hideshow-haml-forward-sexp-fn "~/.emacs.d/modules/editor/fold/autoload/hideshow" "\n\n(fn ARG)")(autoload '+fold-hideshow-forward-block-by-indent-fn "~/.emacs.d/modules/editor/fold/autoload/hideshow" "\n\n(fn ARG)")(autoload '+fold-hideshow-set-up-overlay-fn "~/.emacs.d/modules/editor/fold/autoload/hideshow" "\n\n(fn OV)")(autoload 'set-yas-minor-mode! "~/.emacs.d/modules/editor/snippets/autoload/settings.el" "Register minor MODES (one mode symbol or a list of them) with yasnippet so it\ncan have its own snippets category, if the folder exists.\n\n(fn MODES)")(put 'set-yas-minor-mode! 'doom-module '(:editor . snippets))(autoload '+snippets-prompt-private "~/.emacs.d/modules/editor/snippets/autoload/snippets" "Prioritize private snippets over built-in ones if there are multiple\nchoices.\n\nThere are two groups of snippets in Doom Emacs. The built in ones (under\n`doom-emacs-dir'; provided by Doom or its plugins) or your private snippets\n(outside of `doom-eamcs-dir').\n\nIf there are multiple snippets with the same key in either camp (but not both),\nyou will be prompted to select one.\n\nIf there are conflicting keys across the two camps, the built-in ones are\nignored. This makes it easy to override built-in snippets with private ones.\n\n(fn PROMPT CHOICES &optional DISPLAY-FN)")(autoload '+snippets/goto-start-of-field "~/.emacs.d/modules/editor/snippets/autoload/snippets" "Go to the beginning of the current field." t)(autoload '+snippets/goto-end-of-field "~/.emacs.d/modules/editor/snippets/autoload/snippets" "Go to the end of the current field." t)(autoload '+snippets/delete-backward-char "~/.emacs.d/modules/editor/snippets/autoload/snippets" "Prevents Yas from interfering with backspace deletion.\n\n(fn &optional FIELD)" t)(autoload '+snippets/delete-forward-char-or-field "~/.emacs.d/modules/editor/snippets/autoload/snippets" "Delete forward, or skip the current field if it's empty. This is to prevent\nbuggy behavior when <delete> is pressed in an empty field.\n\n(fn &optional FIELD)" t)(autoload '+snippets/delete-to-start-of-field "~/.emacs.d/modules/editor/snippets/autoload/snippets" "Delete to start-of-field.\n\n(fn &optional FIELD)" t)(autoload '+snippets/find "~/.emacs.d/modules/editor/snippets/autoload/snippets" "Open a snippet file (in all of `yas-snippet-dirs')." t)(autoload '+snippets/find-private "~/.emacs.d/modules/editor/snippets/autoload/snippets" "Open a private snippet file in `+snippets-dir'." t)(autoload '+snippets/find-for-current-mode "~/.emacs.d/modules/editor/snippets/autoload/snippets" "Open a snippet for this mode.\n\n(fn TEMPLATE-UUID)" t)(autoload '+snippets/new "~/.emacs.d/modules/editor/snippets/autoload/snippets" "Create a new snippet in `+snippets-dir'.\n\nIf there are extra yasnippet modes active, or if ALL-MODES is non-nil, you will\nbe prompted for the mode for which to create the snippet.\n\n(fn &optional ALL-MODES)" t)(autoload '+snippets/new-alias "~/.emacs.d/modules/editor/snippets/autoload/snippets" "Create an alias for a snippet with uuid TEMPLATE-UUID.\n\nYou will be prompted for a snippet to alias.\n\n(fn TEMPLATE-UUID)" t)(autoload '+snippets/edit "~/.emacs.d/modules/editor/snippets/autoload/snippets" "Edit a snippet with uuid TEMPLATE-UUID.\n\nIf the snippet isn't in `+snippets-dir', it will be copied there (where it will\nshadow the default snippet).\n\n(fn TEMPLATE-UUID)" t)(autoload '+snippets-show-hints-in-header-line-h "~/.emacs.d/modules/editor/snippets/autoload/snippets")(autoload '+snippets-enable-project-modes-h "~/.emacs.d/modules/editor/snippets/autoload/snippets" "Automatically enable snippet libraries for project minor modes defined with\n`def-project-mode!'.\n\n(fn MODE &rest _)")(autoload '+snippets-read-only-maybe-h "~/.emacs.d/modules/editor/snippets/autoload/snippets" "Enable `read-only-mode' if snippet is built-in.")(autoload '+snippets-expand-on-region-a "~/.emacs.d/modules/editor/snippets/autoload/snippets" "Fix off-by-one when expanding snippets on an evil visual region.\n\nAlso strips whitespace out of selection. Also switches to insert mode. If\n`evil-local-mode' isn't enabled, or we're not in visual mode, run FN as is.\n\n(fn FN &optional NO-CONDITION)")(autoload '+dired/quit-all "~/.emacs.d/modules/emacs/dired/autoload" "Kill all `dired-mode' buffers." t)(autoload '+dired-enable-git-info-h "~/.emacs.d/modules/emacs/dired/autoload" "Enable `dired-git-info-mode' in git repos.")(autoload '+dired/dirvish-side-and-follow "~/.emacs.d/modules/emacs/dired/autoload" "Open `dirvish-side' then find the currently focused file.\n\nIf dirvish is already open, remotely jump to the file in Dirvish.\nIf given the prefix ARG, then prompt for a directory (replaces existing Dirvish\nsidebars).\n\n(fn &optional ARG)" t)(progn (autoload 'set-electric! "~/.emacs.d/modules/emacs/electric/autoload.el" "Declare that WORDS (list of strings) or CHARS (lists of chars) should trigger\nelectric indentation.\n\nEnables `electric-indent-local-mode' in MODES.\n\n(fn MODES &key WORDS CHARS)") (function-put 'set-electric! 'lisp-indent-function 'defun))(put 'set-electric! 'doom-module '(:emacs . electric))(autoload 'browse-at-remote--format-region-url-as-codeberg "~/.emacs.d/modules/emacs/vc/autoload/vc" "URL formatted for codeberg.\n\n(fn REPO-URL LOCATION FILENAME &optional LINESTART LINEEND)")(autoload 'browse-at-remote--format-commit-url-as-codeberg "~/.emacs.d/modules/emacs/vc/autoload/vc" "Commit URL formatted for codeberg\n\n(fn REPO-URL COMMITHASH)")(autoload '+vc/browse-at-remote "~/.emacs.d/modules/emacs/vc/autoload/vc" "Open URL to current file (and line if selection is active) in browser.\nIf prefix ARG, negate the default value of `browse-at-remote-prefer-symbolic'.\n\n(fn &optional ARG)" t)(autoload '+vc/browse-at-remote-kill "~/.emacs.d/modules/emacs/vc/autoload/vc" "Copy URL to current file (and line if selection is active) to clipboard.\nIf prefix ARG, negate the default value of `browse-at-remote-prefer-symbolic'.\n\n(fn &optional ARG INTERACTIVE?)" t)(autoload '+vc/browse-at-remote-homepage "~/.emacs.d/modules/emacs/vc/autoload/vc" "Open homepage for current project in browser." t)(autoload '+vc/browse-at-remote-kill-homepage "~/.emacs.d/modules/emacs/vc/autoload/vc" "Copy homepage URL of current project to clipboard." t)(autoload '+syntax-init-popups-h "~/.emacs.d/modules/checkers/syntax/autoload" "Activate `flycheck-posframe-mode' if available and in GUI Emacs.\nActivate `flycheck-popup-tip-mode' otherwise.\nDo nothing if `lsp-ui-mode' is active and `lsp-ui-sideline-enable' is non-nil.")(autoload 'set-next-checker! "~/.emacs.d/modules/checkers/syntax/autoload.el" "TODO\n\n(fn MODE CHECKER NEXT &optional APPEND)")(put 'set-next-checker! 'doom-module '(:checkers . syntax))(autoload '+spell-init-flyspell-predicate-h "~/.emacs.d/modules/checkers/spell/autoload/+flyspell" "TODO")(autoload '+spell-correction-at-point-p "~/.emacs.d/modules/checkers/spell/autoload/+flyspell" "TODO\n\n(fn &optional POINT)")(autoload '+spell/add-word "~/.emacs.d/modules/checkers/spell/autoload/+flyspell" "Add WORD to your personal dictionary, within SCOPE.\n\nSCOPE can be `buffer' or `session' to exclude words only from the current buffer\nor session. Otherwise, the addition is permanent.\n\n(fn WORD &optional SCOPE)" t)(autoload '+spell/remove-word "~/.emacs.d/modules/checkers/spell/autoload/+flyspell" "Remove WORD from your personal dictionary.\n\n(fn WORD &optional SCOPE)" t)(autoload '+spell/next-error "~/.emacs.d/modules/checkers/spell/autoload/+flyspell" "Jump to next flyspell error." t)(autoload '+spell/previous-error "~/.emacs.d/modules/checkers/spell/autoload/+flyspell" "Jump to previous flyspell error." t)(put 'flyspell-mode! 'doom-module '(:checkers . spell))(defalias 'flyspell-mode! #'flyspell-mode nil)(progn (autoload 'set-flyspell-predicate! "~/.emacs.d/modules/checkers/spell/autoload/+flyspell.el" "TODO\n\n(fn MODES PREDICATE)") (function-put 'set-flyspell-predicate! 'lisp-indent-function 'defun))(put 'set-flyspell-predicate! 'doom-module '(:checkers . spell))(autoload '+eval-display-results-in-popup "~/.emacs.d/modules/tools/eval/autoload/eval" "Display OUTPUT in a popup buffer.\n\n(fn OUTPUT &optional SOURCE-BUFFER)")(autoload '+eval-display-results-in-overlay "~/.emacs.d/modules/tools/eval/autoload/eval" "Display OUTPUT in a floating overlay next to the cursor.\n\n(fn OUTPUT &optional SOURCE-BUFFER)")(autoload '+eval-display-results "~/.emacs.d/modules/tools/eval/autoload/eval" "Display OUTPUT in an overlay or a popup buffer.\n\n(fn OUTPUT &optional SOURCE-BUFFER)")(autoload '+eval-region-as-major-mode "~/.emacs.d/modules/tools/eval/autoload/eval" "Evaluate a region between BEG and END and display the output.\n\nEvaluate as in RUNNER-MAJOR-MODE. If RUNNER-MAJOR-MODE is nil, use major-mode\nof the buffer instead.\n\n(fn BEG END &optional RUNNER-MAJOR-MODE)")(autoload '+eval/buffer "~/.emacs.d/modules/tools/eval/autoload/eval" "Evaluate the whole buffer." t)(autoload '+eval/region "~/.emacs.d/modules/tools/eval/autoload/eval" "Evaluate a region between BEG and END and display the output.\n\n(fn BEG END)" t)(autoload '+eval/line-or-region "~/.emacs.d/modules/tools/eval/autoload/eval" "Evaluate the current line or selected region." t)(autoload '+eval/buffer-or-region "~/.emacs.d/modules/tools/eval/autoload/eval" "Evaluate the region if it's active, otherwise evaluate the whole buffer.\n\nIf a REPL is open the code will be evaluated in it, otherwise a quickrun\nrunner will be used." t)(autoload '+eval/region-and-replace "~/.emacs.d/modules/tools/eval/autoload/eval" "Evaluation a region between BEG and END, and replace it with the result.\n\n(fn BEG END)" t)(autoload '+eval:region "~/.emacs.d/modules/tools/eval/autoload/evil" nil t)(autoload '+eval:replace-region "~/.emacs.d/modules/tools/eval/autoload/evil" nil t)(autoload '+eval:repl "~/.emacs.d/modules/tools/eval/autoload/evil" nil t)(autoload '+eval/open-repl-same-window "~/.emacs.d/modules/tools/eval/autoload/repl" "Opens (or reopens) the REPL associated with the current major-mode and place\nthe cursor at the prompt.\n\nIf ARG (universal argument), prompt for a specific REPL to open.\n\n(fn &optional ARG)" t)(autoload '+eval/open-repl-other-window "~/.emacs.d/modules/tools/eval/autoload/repl" "Does `+eval/open-repl', but in a popup window.\n\nIf ARG (universal argument), prompt for a specific REPL to open.\n\n(fn &optional ARG)" t)(autoload '+eval/send-region-to-repl "~/.emacs.d/modules/tools/eval/autoload/repl" "Execute the selected region in the REPL.\nOpens a REPL if one isn't already open. If AUTO-EXECUTE-P, then execute it\nimmediately after.\n\n(fn BEG END &optional INHIBIT-AUTO-EXECUTE-P)" t)(defvar +eval-runners nil "Alist mapping major modes to interactive runner functions.")(progn (autoload 'set-repl-handler! "~/.emacs.d/modules/tools/eval/autoload/settings.el" "Defines a REPL for MODES.\n\nMODES is either a single major mode symbol or a list of them. COMMAND is a\nfunction that creates and returns the REPL buffer.\n\nCOMMAND can either be a function that takes no arguments, or an interactive\ncommand that will be called interactively. COMMANDS must return either the repl\nbuffer or a function that takes no arguments and returns the repl buffer.\n\nPLIST is a property list that map special attributes to this repl. These are\nrecognized:\n\n  :persist BOOL\n    If non-nil, this REPL won't be killed when its window is closed.\n  :send-region FUNC\n    A function that accepts a BEG and END, and sends the contents of the region\n    to the REPL. Defaults to `+eval/send-region-to-repl'.\n  :send-buffer FUNC\n    A function of no arguments that sends the contents of the buffer to the REPL.\n    Defaults to `+eval/region', which will run the :send-region specified function\n    or `+eval/send-region-to-repl'.\n\n(fn MODES COMMAND &rest PLIST)") (function-put 'set-repl-handler! 'lisp-indent-function 'defun))(put 'set-repl-handler! 'doom-module '(:tools . eval))(progn (autoload 'set-eval-handler! "~/.emacs.d/modules/tools/eval/autoload/settings.el" "Define a code evaluator for major mode MODES with `quickrun'.\n\nMODES can be list of major mode symbols, or a single one.\n\n1. If MODE is a string and COMMAND is the string, MODE is a file regexp and\n   COMMAND is a string key for an entry in `quickrun-file-alist'.\n2. If MODE is not a string and COMMAND is a string, MODE is a major-mode symbol\n   and COMMAND is a key (for `quickrun--language-alist'), and will be registered\n   in `quickrun--major-mode-alist'.\n3. If MODE is not a string and COMMAND is an alist, see `quickrun-add-command':\n   (quickrun-add-command MODE COMMAND :mode MODE).\n4. If MODE is not a string and COMMANd is a symbol, add it to\n   `+eval-runners', which is used by `+eval/region'.\n\n(fn MODES COMMAND)") (function-put 'set-eval-handler! 'lisp-indent-function 'defun))(put 'set-eval-handler! 'doom-module '(:tools . eval))(defmacro set-docsets! (modes &rest docsets) "THIS FUNCTION DOES NOTHING BECAUSE (:tools . lookup) IS DISABLED\n\nRegisters a list of DOCSETS for MODES.\n\nMODES can be one major mode, or a list thereof.\n\nDOCSETS can be strings, each representing a dash docset, or a vector with the\nstructure [DOCSET FORM]. If FORM evaluates to nil, the DOCSET is omitted. If it\nis non-nil, (format DOCSET FORM) is used as the docset.\n\nThe first element in DOCSETS can be :add or :remove, making it easy for users to\nadd to or remove default docsets from modes.\n\nDOCSETS can also contain sublists, which will be flattened.\n\nExample:\n\n  (set-docsets! '(js2-mode rjsx-mode) \"JavaScript\"\n    [\"React\" (eq major-mode 'rjsx-mode)]\n    [\"TypeScript\" (bound-and-true-p tide-mode)])\n\nUsed by `+lookup/in-docsets' and `+lookup/documentation'." (ignore modes docsets))(put 'set-docsets! 'doom-module '(:tools . lookup))(autoload '+lookup:online "~/.emacs.d/modules/tools/lookup/autoload/evil" nil t)(autoload '+lookup:dash "~/.emacs.d/modules/tools/lookup/autoload/evil" nil t)(autoload '+lookup/definition "~/.emacs.d/modules/tools/lookup/autoload/lookup" "Jump to the definition of IDENTIFIER (defaults to the symbol at point).\n\nEach function in `+lookup-definition-functions' is tried until one changes the\npoint or current buffer. Falls back to dumb-jump, naive\nripgrep/the_silver_searcher text search, then `evil-goto-definition' if\nevil-mode is active.\n\n(fn IDENTIFIER &optional ARG)" t)(autoload '+lookup/implementations "~/.emacs.d/modules/tools/lookup/autoload/lookup" "Jump to the implementations of IDENTIFIER (defaults to the symbol at point).\n\nEach function in `+lookup-implementations-functions' is tried until one changes\nthe point or current buffer.\n\n(fn IDENTIFIER &optional ARG)" t)(autoload '+lookup/type-definition "~/.emacs.d/modules/tools/lookup/autoload/lookup" "Jump to the type definition of IDENTIFIER (defaults to the symbol at point).\n\nEach function in `+lookup-type-definition-functions' is tried until one changes\nthe point or current buffer.\n\n(fn IDENTIFIER &optional ARG)" t)(autoload '+lookup/references "~/.emacs.d/modules/tools/lookup/autoload/lookup" "Show a list of usages of IDENTIFIER (defaults to the symbol at point)\n\nTries each function in `+lookup-references-functions' until one changes the\npoint and/or current buffer. Falls back to a naive ripgrep/the_silver_searcher\nsearch otherwise.\n\n(fn IDENTIFIER &optional ARG)" t)(autoload '+lookup/documentation "~/.emacs.d/modules/tools/lookup/autoload/lookup" "Show documentation for IDENTIFIER (defaults to symbol at point or selection.\n\nFirst attempts the :documentation handler specified with `set-lookup-handlers!'\nfor the current mode/buffer (if any), then falls back to the backends in\n`+lookup-documentation-functions'.\n\n(fn IDENTIFIER &optional ARG)" t)(autoload '+lookup/file "~/.emacs.d/modules/tools/lookup/autoload/lookup" "Figure out PATH from whatever is at point and open it.\n\nEach function in `+lookup-file-functions' is tried until one changes the point\nor the current buffer.\n\nOtherwise, falls back on `find-file-at-point'.\n\n(fn &optional PATH)" t)(autoload '+lookup/dictionary-definition "~/.emacs.d/modules/tools/lookup/autoload/lookup" "Look up the definition of the word at point (or selection).\n\n(fn IDENTIFIER &optional ARG)" t)(autoload '+lookup/synonyms "~/.emacs.d/modules/tools/lookup/autoload/lookup" "Look up and insert a synonym for the word at point (or selection).\n\n(fn IDENTIFIER &optional ARG)" t)(progn (autoload 'set-lookup-handlers! "~/.emacs.d/modules/tools/lookup/autoload/lookup.el" "Define jump handlers for major or minor MODES.\n\nA handler is either an interactive command that changes the current buffer\nand/or location of the cursor, or a function that takes one argument: the\nidentifier being looked up, and returns either nil (failed to find it), t\n(succeeded at changing the buffer/moving the cursor), or 'deferred (assume this\nhandler has succeeded, but expect changes not to be visible yet).\n\nThere are several kinds of handlers, which can be defined with the following\nproperties:\n\n:definition FN\n  Run when jumping to a symbol's definition. Used by `+lookup/definition'.\n:implementations FN\n  Run when looking for implementations of a symbol in the current project. Used\n  by `+lookup/implementations'.\n:type-definition FN\n  Run when jumping to a symbol's type definition. Used by\n  `+lookup/type-definition'.\n:references FN\n  Run when looking for usage references of a symbol in the current project. Used\n  by `+lookup/references'.\n:documentation FN\n  Run when looking up documentation for a symbol. Used by\n  `+lookup/documentation'.\n:file FN\n  Run when looking up the file for a symbol/string. Typically a file path. Used\n  by `+lookup/file'.\n:xref-backend FN\n  Defines an xref backend for a major-mode. A :definition and :references\n  handler isn't necessary with a :xref-backend, but will have higher precedence\n  if they exist.\n:async BOOL\n  Indicates that *all* supplied FNs are asynchronous. Note: lookups will not try\n  any handlers after async ones, due to their nature. To get around this, you\n  must write a specialized wrapper to await the async response, or use a\n  different heuristic to determine, ahead of time, whether the async call will\n  succeed or not.\n\n  If you only want to specify one FN is async, declare it inline instead:\n\n    (set-lookup-handlers! 'rust-mode\n      :definition '(racer-find-definition :async t))\n\nHandlers can either be interactive or non-interactive. Non-interactive handlers\nmust take one argument: the identifier being looked up. This function must\nchange the current buffer or window or return non-nil when it succeeds.\n\nIf it doesn't change the current buffer, or it returns nil, the lookup module\nwill fall back to the next handler in `+lookup-definition-functions',\n`+lookup-implementations-functions', `+lookup-type-definition-functions',\n`+lookup-references-functions', `+lookup-file-functions' or\n`+lookup-documentation-functions'.\n\nConsecutive `set-lookup-handlers!' calls will overwrite previously defined\nhandlers for MODES. If used on minor modes, they are stacked onto handlers\ndefined for other minor modes or the major mode it's activated in.\n\nThis can be passed nil as its second argument to unset handlers for MODES. e.g.\n\n  (set-lookup-handlers! 'python-mode nil)\n\n(fn MODES &key DEFINITION IMPLEMENTATIONS TYPE-DEFINITION REFERENCES DOCUMENTATION FILE XREF-BACKEND ASYNC)") (function-put 'set-lookup-handlers! 'lisp-indent-function 'defun))(put 'set-lookup-handlers! 'doom-module '(:tools . lookup))(autoload '+lookup-online-backend-fn "~/.emacs.d/modules/tools/lookup/autoload/online" "Open the browser and search for IDENTIFIER online.\nWhen called for the first time, or with a non-nil prefix argument, prompt for\nthe search engine to use.\n\n(fn IDENTIFIER)")(autoload '+lookup/online "~/.emacs.d/modules/tools/lookup/autoload/online" "Look up QUERY in the browser using PROVIDER.\nWhen called interactively, prompt for a query and, when called for the first\ntime, the provider from `+lookup-provider-url-alist'. In subsequent calls, reuse\nthe previous provider. With a non-nil prefix argument, always prompt for the\nprovider.\n\nQUERY must be a string, and PROVIDER must be a key of\n`+lookup-provider-url-alist'.\n\n(fn QUERY PROVIDER)" t)(autoload '+lookup/online-select "~/.emacs.d/modules/tools/lookup/autoload/online" "Run `+lookup/online', but always prompt for the provider to use." t)(autoload '+lookup--online-backend-google "~/.emacs.d/modules/tools/lookup/autoload/online" "Search Google, starting with QUERY, with live autocompletion.\n\n(fn QUERY)")(autoload '+lookup--online-backend-duckduckgo "~/.emacs.d/modules/tools/lookup/autoload/online" "Search DuckDuckGo, starting with QUERY, with live autocompletion.\n\n(fn QUERY)")(autoload '+lookup-xwidget-webkit-open-url-fn "~/.emacs.d/modules/tools/lookup/autoload/xwidget" "\n\n(fn URL &optional NEW-SESSION)")(defadvice! +magit--ignore-version-a (fn &rest args) :around #'magit-version (let ((inhibit-message (not (called-interactively-p 'any)))) (apply fn args)))(autoload '+magit-display-buffer-fn "~/.emacs.d/modules/tools/magit/autoload" "Same as `magit-display-buffer-traditional', except...\n\n- If opened from a commit window, it will open below it.\n- Magit process windows are always opened in small windows below the current.\n- Everything else will reuse the same window.\n\n(fn BUFFER)")(autoload '+magit-mark-stale-buffers-h "~/.emacs.d/modules/tools/magit/autoload" "Revert all visible buffers and mark buried buffers as stale.\n\nStale buffers are reverted when they are switched to, assuming they haven't been\nmodified.")(autoload '+magit-revert-buffer-maybe-h "~/.emacs.d/modules/tools/magit/autoload" "Update `vc' and `diff-hl' if out of date.")(autoload '+magit/quit "~/.emacs.d/modules/tools/magit/autoload" "Bury the current magit buffer.\n\nIf KILL-BUFFER, kill this buffer instead of burying it.\nIf the buried/killed magit buffer was the last magit buffer open for this repo,\nkill all magit buffers for this repo.\n\n(fn &optional KILL-BUFFER)" t)(autoload '+magit/quit-all "~/.emacs.d/modules/tools/magit/autoload" "Kill all magit buffers for the current repository." t)(autoload '+magit/start-code-review "~/.emacs.d/modules/tools/magit/autoload" "\n\n(fn ARG)" t)(autoload '+tmux:run "~/.emacs.d/modules/tools/tmux/autoload/evil" nil t)(autoload '+tmux:cd-here "~/.emacs.d/modules/tools/tmux/autoload/evil" nil t)(autoload '+tmux "~/.emacs.d/modules/tools/tmux/autoload/tmux" "Execute COMMAND in tmux\n\n(fn COMMAND &rest ARGS)")(autoload '+tmux/run "~/.emacs.d/modules/tools/tmux/autoload/tmux" "Run COMMAND in tmux. If NORETURN is non-nil, send the commands as keypresses\nbut do not execute them.\n\n(fn COMMAND &optional NORETURN)" t)(autoload '+tmux/send-region "~/.emacs.d/modules/tools/tmux/autoload/tmux" "Send region to tmux.\n\n(fn BEG END &optional NORETURN)" t)(autoload '+tmux/rerun "~/.emacs.d/modules/tools/tmux/autoload/tmux" "Rerun the last command executed by `+tmux' and `+tmux/run'." t)(autoload '+tmux/cd "~/.emacs.d/modules/tools/tmux/autoload/tmux" "Change the pwd of the currently active tmux pane to DIRECTORY.\n\nDIRECTORY defaults to `default-directory' if omitted, or to `doom-project-root'\nif prefix arg is non-nil.\n\nIf NORETURN is non-nil, send the cd command to tmux, but do not execute the\ncommand.\n\n(fn &optional DIRECTORY NORETURN)" t)(autoload '+tmux/cd-to-here "~/.emacs.d/modules/tools/tmux/autoload/tmux" "cd into `default-directory' in tmux." t)(autoload '+tmux/cd-to-project "~/.emacs.d/modules/tools/tmux/autoload/tmux" "cd into `doom-project-root' in tmux." t)(autoload '+tmux-list-sessions "~/.emacs.d/modules/tools/tmux/autoload/tmux")(autoload '+tmux-list-windows "~/.emacs.d/modules/tools/tmux/autoload/tmux" "\n\n(fn &optional SESSION)")(autoload '+tmux-list-panes "~/.emacs.d/modules/tools/tmux/autoload/tmux" "\n\n(fn &optional SESS-OR-WIN)")(defalias 'cpp-mode 'c++-mode)(defvaralias 'cpp-mode-map 'c++-mode-map)(autoload '+cc-c++-lineup-inclass "~/.emacs.d/modules/lang/cc/autoload" "Indent inclass lines one level further than access modifier keywords.\n\n(fn LANGELEM)")(autoload '+cc-lineup-arglist-close "~/.emacs.d/modules/lang/cc/autoload" "Line up the closing brace in an arglist with the opening brace IF cursor is\npreceded by the opening brace or a comma (disregarding whitespace in between).\n\n(fn LANGLEM)")(autoload '+cc-c-c++-objc-mode "~/.emacs.d/modules/lang/cc/autoload" "Uses heuristics to detect `c-mode', `objc-mode' or `c++-mode'.\n\n1. Checks if there are nearby cpp/cc/m/mm files with the same name.\n2. Checks for ObjC and C++-specific keywords and libraries.\n3. Falls back to `+cc-default-header-file-mode', if set.\n4. Otherwise, activates `c-mode'.\n\nThis is meant to replace `c-or-c++-mode' (introduced in Emacs 26.1), which\ndoesn't support specification of the fallback mode and whose heuristics are\nsimpler.")(autoload '+cc/eglot-ccls-show-inheritance-hierarchy "~/.emacs.d/modules/lang/cc/autoload" "Show inheritance hierarchy for the thing at point.\nIf DERIVED is non-nil (interactively, with prefix argument), show\nthe children of class at point.\n\n(fn &optional DERIVED)" t)(autoload '+cc-cmake-lookup-documentation-fn "~/.emacs.d/modules/lang/cc/autoload" "Look up the symbol at point in CMake's documentation.\n\n(fn _)")(autoload '+cc-fontify-constants-h "~/.emacs.d/modules/lang/cc/autoload" "Better fontification for preprocessor constants")(autoload '+cc-init-ffap-integration-h "~/.emacs.d/modules/lang/cc/autoload" "Takes the local project include paths and registers them with ffap.\nThis way, `find-file-at-point' (and `+lookup/file') will know where to find most\nheader files.")(autoload '+cc/ccls-show-callee "~/.emacs.d/modules/lang/cc/autoload" "Show callees of symbol under point." t)(autoload '+cc/ccls-show-caller "~/.emacs.d/modules/lang/cc/autoload" "Show callers of symbol under point." t)(autoload '+cc/ccls-show-vars "~/.emacs.d/modules/lang/cc/autoload" "Show variables of type KIND as symbol under point.\n   1 -> field\n   2 -> local variable\n   3 -> field or local variables. 3 = 1 | 2.\n   4 -> parameter\n\n(fn KIND)")(autoload '+cc/ccls-show-base "~/.emacs.d/modules/lang/cc/autoload" "Show bases of class under point up to LEVELS levels (1 for direct bases).\n\n(fn LEVELS)")(autoload '+cc/ccls-show-derived "~/.emacs.d/modules/lang/cc/autoload" "Show derived classes from class under point down to LEVELS levels (1 for direct derived).\n\n(fn LEVELS)")(autoload '+cc/ccls-show-member "~/.emacs.d/modules/lang/cc/autoload" "Show member elements of kind KIND for class/namespace under point.\n   0 -> member variables/ variables in a namespace\n   2 -> nested classes / types in a namespace\n   3 -> member functions / functions in a namespace\n\n(fn KIND)")(autoload '+cc/ccls-show-references-address "~/.emacs.d/modules/lang/cc/autoload" "References w/ Role::Address bit (e.g. variables explicitly being taken addresses)" t)(autoload '+cc/ccls-show-references-macro "~/.emacs.d/modules/lang/cc/autoload" "References w/ Role::Dynamic bit (macro expansions)" t)(autoload '+cc/ccls-show-references-not-call "~/.emacs.d/modules/lang/cc/autoload" "References w/o Role::Call bit (e.g. where functions are taken addresses)" t)(autoload '+cc/ccls-show-references-read "~/.emacs.d/modules/lang/cc/autoload" "References w/ Role::Read" t)(autoload '+cc/ccls-show-references-write "~/.emacs.d/modules/lang/cc/autoload" "References w/ Role::Write" t)(autoload '+emacs-lisp-eval "~/.emacs.d/modules/lang/emacs-lisp/autoload" "Evaluate a region and print it to the echo area (if one line long), otherwise\nto a pop up buffer.\n\n(fn BEG END)")(autoload '+emacs-lisp-outline-level "~/.emacs.d/modules/lang/emacs-lisp/autoload" "Return outline level for comment at point.\nIntended to replace `lisp-outline-level'.")(autoload '+emacs-lisp-lookup-definition "~/.emacs.d/modules/lang/emacs-lisp/autoload" "Lookup definition of THING.\n\n(fn THING)")(autoload '+emacs-lisp-lookup-documentation "~/.emacs.d/modules/lang/emacs-lisp/autoload" "Lookup THING with `helpful-variable' if it's a variable, `helpful-callable'\nif it's callable, `apropos' otherwise.\n\n(fn THING)")(autoload '+emacs-lisp-indent-function "~/.emacs.d/modules/lang/emacs-lisp/autoload" "A replacement for `lisp-indent-function'.\n\nIndents plists more sensibly. Adapted from\nhttps://emacs.stackexchange.com/questions/10230/how-to-indent-keywords-aligned\n\n(fn INDENT-POINT STATE)")(autoload '+emacs-lisp/open-repl "~/.emacs.d/modules/lang/emacs-lisp/autoload" "Open the Emacs Lisp REPL (`ielm')." t)(autoload '+emacs-lisp/buttercup-run-file "~/.emacs.d/modules/lang/emacs-lisp/autoload" "Run all buttercup tests in the focused buffer." t)(autoload '+emacs-lisp/buttercup-run-project "~/.emacs.d/modules/lang/emacs-lisp/autoload" "Run all buttercup tests in the project." t)(autoload '+emacs-lisp/edebug-instrument-defun-on "~/.emacs.d/modules/lang/emacs-lisp/autoload" "Toggle on instrumentalisation for the function under `defun'." t)(autoload '+emacs-lisp/edebug-instrument-defun-off "~/.emacs.d/modules/lang/emacs-lisp/autoload" "Toggle off instrumentalisation for the function under `defun'." t)(autoload '+emacs-lisp-init-straight-maybe-h "~/.emacs.d/modules/lang/emacs-lisp/autoload" "Make sure straight sees modifications to installed packages.")(autoload '+emacs-lisp-extend-imenu-h "~/.emacs.d/modules/lang/emacs-lisp/autoload" "Improve imenu support in `emacs-lisp-mode' for Doom's APIs.")(autoload '+emacs-lisp-non-package-mode "~/.emacs.d/modules/lang/emacs-lisp/autoload" "Reduce flycheck/flymake verbosity where it is appropriate.\n\nEssentially, this means in any elisp file that either:\n- Is not a theme in `custom-theme-load-path',\n- Lacks a `provide' statement,\n- Lives in a project with a .doommodule file,\n- Is a dotfile (like .dir-locals.el or .doomrc).\n\nThis generally applies to your private config (`doom-user-dir') or Doom's source\n(`doom-emacs-dir').\n\nThis is a minor mode.  If called interactively, toggle the\n`+Emacs-Lisp-Non-Package mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `+emacs-lisp-non-package-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload '+emacs-lisp-highlight-vars-and-faces "~/.emacs.d/modules/lang/emacs-lisp/autoload" "Match defined variables and functions.\n\nFunctions are differentiated into special forms, built-in functions and\nlibrary/userland functions\n\n(fn END)")(put 'map! 'indent-plists-as-data t)(autoload '+emacs-lisp--calculate-lisp-indent-a "~/.emacs.d/modules/lang/emacs-lisp/autoload" "Add better indentation for quoted and backquoted lists.\n\nIntended as :override advice for `calculate-lisp-indent'.\n\nAdapted from URL `https://www.reddit.com/r/emacs/comments/d7x7x8/finally_fixing_indentation_of_quoted_lists/'.\n\n(fn &optional PARSE-START)")(autoload '+java-android-mode-is-layout-file "~/.emacs.d/modules/lang/java/autoload/java")(autoload '+java-android-mode-in-tags "~/.emacs.d/modules/lang/java/autoload/java" "\n\n(fn &rest TAGS)")(autoload '+java-android-mode-tag-name "~/.emacs.d/modules/lang/java/autoload/java")(autoload '+java-android-mode-maybe-h "~/.emacs.d/modules/lang/java/autoload/java" "Enable `android-mode' if this looks like an android project.\n\nIt determines this by the existence of AndroidManifest.xml or\nsrc/main/AndroidManifest.xml.")(autoload '+java-current-package "~/.emacs.d/modules/lang/java/autoload/java" "Converts the current file's path into a namespace.\n\nFor example: ~/some/project/src/net/lissner/game/MyClass.java\nIs converted to: net.lissner.game\n\nIt does this by ignoring everything before the nearest package root (see\n`+java-project-package-roots' to control what this function considers a package\nroot).")(autoload '+java-current-class "~/.emacs.d/modules/lang/java/autoload/java" "Get the class name for the current file.")(autoload '+java/open-groovy-repl "~/.emacs.d/modules/lang/java/autoload/java" "Open a Groovy REPL." t)(autoload '+javascript-npm-conf "~/.emacs.d/modules/lang/javascript/autoload" "Retrieves an alist of this project's 'package.json'. If REFRESH-P is non-nil\nignore the cache.\n\n(fn &optional PROJECT-ROOT REFRESH-P)")(autoload '+javascript-npm-dep-p "~/.emacs.d/modules/lang/javascript/autoload" "\n\n(fn PACKAGES &optional PROJECT-ROOT REFRESH-P)")(autoload '+javascript-add-npm-path-h "~/.emacs.d/modules/lang/javascript/autoload" "Add node_modules/.bin to `exec-path'.")(autoload '+javascript/open-repl "~/.emacs.d/modules/lang/javascript/autoload" "Open a Javascript REPL. Meaning either `skewer-repl', if any of the\nskewer-*-mode's are enabled, or `nodejs-repl' otherwise." t)(autoload '+javascript/skewer-this-buffer "~/.emacs.d/modules/lang/javascript/autoload" "Toggle a globalized skewer-mode, attaching an external browser (once),\ninitiating an internal httpd server (once) and enabling the appropriate\nskewer-mode for the current buffer.\n\nRun this for any buffer you want to skewer." t)(autoload '+javascript/skewer-cleanup "~/.emacs.d/modules/lang/javascript/autoload" "Disable skewer-mode globally and disable the httpd server." t)(autoload '+javascript-cleanup-tide-processes-h "~/.emacs.d/modules/lang/javascript/autoload" "Clean up dangling tsserver processes if there are no more buffers with\n`tide-mode' active that belong to that server's project.")(autoload '+javascript-tide-project-root-a "~/.emacs.d/modules/lang/javascript/autoload" "Resolve to `doom-project-root' if `tide-project-root' fails.")(defvar inferior-julia-program-name (or (executable-find "julia-basic") "julia"))(autoload '+julia/open-repl "~/.emacs.d/modules/lang/julia/autoload" "Run an inferior instance of `julia' inside Emacs." t)(autoload '+julia/open-snail-repl "~/.emacs.d/modules/lang/julia/autoload" "A wrapper for julia-snail" t)(autoload '+latex-indent-item-fn "~/.emacs.d/modules/lang/latex/autoload" "Indent LaTeX \"itemize\",\"enumerate\", and \"description\" environments.\n\n\"\\item\" is indented `LaTeX-indent-level' spaces relative to the beginning\nof the environment.\n\nSee `LaTeX-indent-level-item-continuation' for the indentation strategy this\nfunction uses.")(autoload '+latex-fold-last-macro-a "~/.emacs.d/modules/lang/latex/autoload" "Advice to auto-fold LaTeX macros after functions that\ntypically insert macros.\n\n(fn &rest _)")(autoload '+latex-symbols-company-backend "~/.emacs.d/modules/lang/latex/autoload" "A wrapper backend for `company-mode' that either uses\n`company-math-symbols-unicode' or `company-math-symbols-latex'. If\n`+latex-enable-unicode-math' is non-nil use the former, otherwise the latter.\n\n(fn COMMAND &optional ARG &rest IGNORED)")(autoload '+markdown-flyspell-word-p "~/.emacs.d/modules/lang/markdown/autoload" "Return t if `flyspell' should check word before point.\n\nUsed for `flyspell-generic-check-word-predicate'. Like\n`markdown-flyspell-check-word-p', but also:\n\na) Performs spell check in code comments and\nb) Inhibits spell check in html markup")(autoload '+markdown-compile "~/.emacs.d/modules/lang/markdown/autoload" "Compile markdown into html.\n\nRuns `+markdown-compile-functions' until the first function to return non-nil,\notherwise throws an error.\n\n(fn BEG END OUTPUT-BUFFER)")(autoload '+markdown-compile-marked "~/.emacs.d/modules/lang/markdown/autoload" "Compiles markdown with the marked program, if available.\nReturns its exit code.\n\n(fn BEG END OUTPUT-BUFFER)")(autoload '+markdown-compile-pandoc "~/.emacs.d/modules/lang/markdown/autoload" "Compiles markdown with the pandoc program, if available.\nReturns its exit code.\n\n(fn BEG END OUTPUT-BUFFER)")(autoload '+markdown-compile-multimarkdown "~/.emacs.d/modules/lang/markdown/autoload" "Compiles markdown with the multimarkdown program, if available. Returns its\nexit code.\n\n(fn BEG END OUTPUT-BUFFER)")(autoload '+markdown-compile-markdown "~/.emacs.d/modules/lang/markdown/autoload" "Compiles markdown using the Markdown.pl script (or markdown executable), if\navailable. Returns its exit code.\n\n(fn BEG END OUTPUT-BUFFER)")(autoload '+markdown/insert-del "~/.emacs.d/modules/lang/markdown/autoload" "Surround region in github strike-through delimiters." t)(autoload '+org-attach-icon-for "~/.emacs.d/modules/lang/org/autoload/org-attach" "\n\n(fn PATH)")(autoload '+org/open-gallery-from-attachments "~/.emacs.d/modules/lang/org/autoload/org-attach" "TODO" t)(autoload '+org/find-file-in-attachments "~/.emacs.d/modules/lang/org/autoload/org-attach" "Open a file from `org-attach-id-dir'." t)(autoload '+org/attach-file-and-insert-link "~/.emacs.d/modules/lang/org/autoload/org-attach" "Downloads the file at PATH and insert an org link at point.\nPATH (a string) can be an url, a local file path, or a base64 encoded datauri.\n\n(fn PATH)" t)(autoload '+org-headline-avy "~/.emacs.d/modules/lang/org/autoload/org-avy" "TODO")(autoload '+org/goto-visible "~/.emacs.d/modules/lang/org/autoload/org-avy" "TODO" t)(autoload '+org-eval-handler "~/.emacs.d/modules/lang/org/autoload/org-babel" "TODO\n\n(fn BEG END)")(autoload '+org-lookup-definition-handler "~/.emacs.d/modules/lang/org/autoload/org-babel" "TODO\n\n(fn IDENTIFIER)")(autoload '+org-lookup-references-handler "~/.emacs.d/modules/lang/org/autoload/org-babel" "TODO\n\n(fn IDENTIFIER)")(autoload '+org-lookup-documentation-handler "~/.emacs.d/modules/lang/org/autoload/org-babel" "TODO\n\n(fn IDENTIFIER)")(autoload '+org/remove-result-blocks "~/.emacs.d/modules/lang/org/autoload/org-babel" "Remove all result blocks located after current point.\n\n(fn REMOVE-ALL)" t)(autoload '+org-clear-babel-results-h "~/.emacs.d/modules/lang/org/autoload/org-babel" "Remove the results block for the org babel block at point.")(defvar +org-capture-frame-parameters `((name . "doom-capture") (width . 70) (height . 25) (transient . t) ,@(when (featurep :system 'linux) `((window-system \, (if (boundp 'pgtk-initialized) 'pgtk 'x)) (display \, (or (getenv "WAYLAND_DISPLAY") (getenv "DISPLAY") ":0")))) ,(if (featurep :system 'macos) '(menu-bar-lines . 1))) "TODO")(autoload '+org-capture-cleanup-frame-h "~/.emacs.d/modules/lang/org/autoload/org-capture" "Closes the org-capture frame once done adding an entry.")(autoload '+org-capture-frame-p "~/.emacs.d/modules/lang/org/autoload/org-capture" "Return t if the current frame is an org-capture frame opened by\n`+org-capture/open-frame'.\n\n(fn &rest _)")(autoload '+org-capture/open-frame "~/.emacs.d/modules/lang/org/autoload/org-capture" "Opens the org-capture window in a floating frame that cleans itself up once\nyou're done. This can be called from an external shell script.\n\n(fn &optional INITIAL-INPUT KEY)" t)(autoload '+org-capture-available-keys "~/.emacs.d/modules/lang/org/autoload/org-capture" "TODO")(autoload '+org-capture-todo-file "~/.emacs.d/modules/lang/org/autoload/org-capture" "Expand `+org-capture-todo-file' from `org-directory'.\nIf it is an absolute path return `+org-capture-todo-file' verbatim.")(autoload '+org-capture-notes-file "~/.emacs.d/modules/lang/org/autoload/org-capture" "Expand `+org-capture-notes-file' from `org-directory'.\nIf it is an absolute path return `+org-capture-notes-file' verbatim.")(autoload '+org-capture-project-todo-file "~/.emacs.d/modules/lang/org/autoload/org-capture" "Find the nearest `+org-capture-todo-file' in a parent directory, otherwise,\nopens a blank one at the project root. Throws an error if not in a project.")(autoload '+org-capture-project-notes-file "~/.emacs.d/modules/lang/org/autoload/org-capture" "Find the nearest `+org-capture-notes-file' in a parent directory, otherwise,\nopens a blank one at the project root. Throws an error if not in a project.")(autoload '+org-capture-project-changelog-file "~/.emacs.d/modules/lang/org/autoload/org-capture" "Find the nearest `+org-capture-changelog-file' in a parent directory,\notherwise, opens a blank one at the project root. Throws an error if not in a\nproject.")(autoload '+org-capture-central-project-todo-file "~/.emacs.d/modules/lang/org/autoload/org-capture" "TODO")(autoload '+org-capture-central-project-notes-file "~/.emacs.d/modules/lang/org/autoload/org-capture" "TODO")(autoload '+org-capture-central-project-changelog-file "~/.emacs.d/modules/lang/org/autoload/org-capture" "TODO")(autoload '+org/export-to-clipboard "~/.emacs.d/modules/lang/org/autoload/org-export" "Exports the current buffer/selection to the clipboard.\n\nPrompts for what BACKEND to use. See `org-export-backends' for options.\n\n(fn BACKEND)" t)(autoload '+org/export-to-clipboard-as-rich-text "~/.emacs.d/modules/lang/org/autoload/org-export" "Export the current buffer to HTML then copies it to clipboard as rich text.\n\nSupports org-mode, markdown-mode, and gfm-mode buffers. In any other mode,\nhtmlize is used (takes what you see in Emacs and converts it to html, text\nproperties and font-locking et all).\n\n(fn BEG END)" t)(autoload '+org-define-basic-link "~/.emacs.d/modules/lang/org/autoload/org-link" "Define a link with some basic completion & fontification.\n\nKEY is the name of the link type. DIR-VAR is the directory variable to resolve\nlinks relative to. PLIST is passed to `org-link-set-parameters' verbatim.\n\nLinks defined with this will be rendered in the `error' face if the file doesn't\nexist, and `org-link' otherwise.\n\n(fn KEY DIR-VAR &rest PLIST)")(function-put '+org-define-basic-link 'lisp-indent-function 2)(autoload '+org-link-read-desc-at-point "~/.emacs.d/modules/lang/org/autoload/org-link" "TODO\n\n(fn &optional DEFAULT CONTEXT)")(autoload '+org-link-read-kbd-at-point "~/.emacs.d/modules/lang/org/autoload/org-link" "TODO\n\n(fn &optional DEFAULT CONTEXT)")(autoload '+org-link--var-link-activate-fn "~/.emacs.d/modules/lang/org/autoload/org-link" "\n\n(fn START END VAR BRACKETED-P)")(autoload '+org-link--fn-link-activate-fn "~/.emacs.d/modules/lang/org/autoload/org-link" "\n\n(fn START END FN BRACKETED-P)")(autoload '+org-link--face-link-activate-fn "~/.emacs.d/modules/lang/org/autoload/org-link" "\n\n(fn START END FACE BRACKETED-P)")(autoload '+org-link--command-link-activate-fn "~/.emacs.d/modules/lang/org/autoload/org-link" "\n\n(fn START END COMMAND BRACKETED-P)")(autoload '+org-link--doom-module-link-follow-fn "~/.emacs.d/modules/lang/org/autoload/org-link" "\n\n(fn MODULE-PATH ARG)")(autoload '+org-link--doom-module-link-activate-fn "~/.emacs.d/modules/lang/org/autoload/org-link" "\n\n(fn START END MODULE-PATH BRACKETED-P)")(autoload '+org-link--doom-package-link-activate-fn "~/.emacs.d/modules/lang/org/autoload/org-link" "\n\n(fn START END PACKAGE BRACKETED-P)")(autoload '+org-link--doom-package-link-follow-fn "~/.emacs.d/modules/lang/org/autoload/org-link" "TODO\n\n(fn PKG PREFIXARG)")(autoload '+org-link--doom-executable-link-activate-fn "~/.emacs.d/modules/lang/org/autoload/org-link" "\n\n(fn START END EXECUTABLE BRACKETED-P)")(autoload '+org-image-file-data-fn "~/.emacs.d/modules/lang/org/autoload/org-link" "Intepret LINK as an image file path and return its data.\n\n(fn PROTOCOL LINK DESCRIPTION)")(autoload '+org-inline-image-data-fn "~/.emacs.d/modules/lang/org/autoload/org-link" "Interpret LINK as base64-encoded image data.\n\n(fn PROTOCOL LINK DESCRIPTION)")(autoload '+org-http-image-data-fn "~/.emacs.d/modules/lang/org/autoload/org-link" "Interpret LINK as an URL to an image file.\n\n(fn PROTOCOL LINK DESCRIPTION)")(autoload '+org-play-gif-at-point-h "~/.emacs.d/modules/lang/org/autoload/org-link" "Play the gif at point, while the cursor remains there (looping).")(autoload '+org-play-all-gifs-h "~/.emacs.d/modules/lang/org/autoload/org-link" "Continuously play all gifs in the visible buffer.")(autoload '+org/remove-link "~/.emacs.d/modules/lang/org/autoload/org-link" "Unlink the text at point." t)(autoload '+org/yank-link "~/.emacs.d/modules/lang/org/autoload/org-link" "Copy the url at point to the clipboard.\nIf on top of an Org link, will only copy the link component." t)(autoload '+org/play-gif-at-point "~/.emacs.d/modules/lang/org/autoload/org-link" "TODO" t)(autoload '+org/refile-to-current-file "~/.emacs.d/modules/lang/org/autoload/org-refile" "Refile current heading to elsewhere in the current buffer.\nIf prefix ARG, copy instead of move.\n\n(fn ARG &optional FILE)" t)(autoload '+org/refile-to-file "~/.emacs.d/modules/lang/org/autoload/org-refile" "Refile current heading to a particular org file.\nIf prefix ARG, copy instead of move.\n\n(fn ARG FILE)" t)(autoload '+org/refile-to-other-window "~/.emacs.d/modules/lang/org/autoload/org-refile" "Refile current heading to an org buffer visible in another window.\nIf prefix ARG, copy instead of move.\n\n(fn ARG)" t)(autoload '+org/refile-to-other-buffer "~/.emacs.d/modules/lang/org/autoload/org-refile" "Refile current heading to another, living org buffer.\nIf prefix ARG, copy instead of move.\n\n(fn ARG)" t)(autoload '+org/refile-to-running-clock "~/.emacs.d/modules/lang/org/autoload/org-refile" "Refile current heading to the currently clocked in task.\nIf prefix ARG, copy instead of move.\n\n(fn ARG)" t)(autoload '+org/refile-to-last-location "~/.emacs.d/modules/lang/org/autoload/org-refile" "Refile current heading to the last node you refiled to.\nIf prefix ARG, copy instead of move.\n\n(fn ARG)" t)(autoload '+org/refile-to-visible "~/.emacs.d/modules/lang/org/autoload/org-refile" "Refile current heading as first child of visible heading selected with Avy." t)(autoload '+org/table-previous-row "~/.emacs.d/modules/lang/org/autoload/org-tables" "Go to the previous row (same column) in the current table. Before doing so,\nre-align the table if necessary. (Necessary because org-mode has a\n`org-table-next-row', but not `org-table-previous-row')" t)(autoload '+org/table-insert-column-left "~/.emacs.d/modules/lang/org/autoload/org-tables" "Insert a new column left of the current column." t)(autoload '+org/table-insert-row-below "~/.emacs.d/modules/lang/org/autoload/org-tables" "Insert a new row below the current row." t)(autoload '+org-realign-table-maybe-h "~/.emacs.d/modules/lang/org/autoload/org-tables" "Auto-align table under cursor.")(autoload '+org-delete-backward-char-and-realign-table-maybe-h "~/.emacs.d/modules/lang/org/autoload/org-tables" "Ensure deleting characters with backspace doesn't deform the table cell.")(autoload '+org-realign-table-maybe-a "~/.emacs.d/modules/lang/org/autoload/org-tables" "Auto-align table under cursor and re-calculate formulas.\n\n(fn &rest _)")(autoload '+org-get-todo-keywords-for "~/.emacs.d/modules/lang/org/autoload/org" "Returns the list of todo keywords that KEYWORD belongs to.\n\n(fn &optional KEYWORD)")(autoload '+org-pretty-mode "~/.emacs.d/modules/lang/org/autoload/org" "Hides emphasis markers and toggles pretty entities.\n\nThis is a minor mode.  If called interactively, toggle the\n`+Org-Pretty mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `+org-pretty-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload '+org/return "~/.emacs.d/modules/lang/org/autoload/org" "Call `org-return' then indent (if `electric-indent-mode' is on)." t)(autoload '+org/dwim-at-point "~/.emacs.d/modules/lang/org/autoload/org" "Do-what-I-mean at point.\n\nIf on a:\n- checkbox list item or todo heading: toggle it.\n- citation: follow it\n- headline: cycle ARCHIVE subtrees, toggle latex fragments and inline images in\n  subtree; update statistics cookies/checkboxes and ToCs.\n- clock: update its time.\n- footnote reference: jump to the footnote's definition\n- footnote definition: jump to the first reference of this footnote\n- timestamp: open an agenda view for the time-stamp date/range at point.\n- table-row or a TBLFM: recalculate the table's formulas\n- table-cell: clear it and go into insert mode. If this is a formula cell,\n  recaluclate it instead.\n- babel-call: execute the source block\n- statistics-cookie: update it.\n- src block: execute it\n- latex fragment: toggle it.\n- link: follow it\n- otherwise, refresh all inline images in current tree.\n\n(fn &optional ARG)" t)(autoload '+org/shift-return "~/.emacs.d/modules/lang/org/autoload/org" "Insert a literal newline, or dwim in tables.\nExecutes `org-table-copy-down' if in table.\n\n(fn &optional ARG)" t)(autoload '+org/insert-item-below "~/.emacs.d/modules/lang/org/autoload/org" "Inserts a new heading, table cell or item below the current one.\n\n(fn COUNT)" t)(autoload '+org/insert-item-above "~/.emacs.d/modules/lang/org/autoload/org" "Inserts a new heading, table cell or item above the current one.\n\n(fn COUNT)" t)(autoload '+org/toggle-last-clock "~/.emacs.d/modules/lang/org/autoload/org" "Toggles last clocked item.\n\nClock out if an active clock is running (or cancel it if prefix ARG is non-nil).\n\nIf no clock is active, then clock into the last item. See `org-clock-in-last' to\nsee how ARG affects this command.\n\n(fn ARG)" t)(autoload '+org/reformat-at-point "~/.emacs.d/modules/lang/org/autoload/org" "Reformat the element at point.\n\nIf in an org src block, invokes `+format/org-block' if the ':editor format'\n  module is enabled.\nIf in an org table, realign the cells with `org-table-align'.\nOtherwise, falls back to `org-fill-paragraph' to reflow paragraphs." t)(defalias #'+org/toggle-fold #'+org-cycle-only-current-subtree-h)(autoload '+org/open-fold "~/.emacs.d/modules/lang/org/autoload/org" "Open the current fold (not but its children)." t)(defalias #'+org/close-fold #'outline-hide-subtree)(autoload '+org/close-all-folds "~/.emacs.d/modules/lang/org/autoload/org" "Close all folds in the buffer (or below LEVEL).\n\n(fn &optional LEVEL)" t)(autoload '+org/open-all-folds "~/.emacs.d/modules/lang/org/autoload/org" "Open all folds in the buffer (or up to LEVEL).\n\n(fn &optional LEVEL)" t)(autoload '+org/show-next-fold-level "~/.emacs.d/modules/lang/org/autoload/org" "Decrease the fold-level of the visible area of the buffer. This unfolds\nanother level of headings on each invocation.\n\n(fn &optional COUNT)" t)(autoload '+org/hide-next-fold-level "~/.emacs.d/modules/lang/org/autoload/org" "Increase the global fold-level of the visible area of the buffer. This folds\nanother level of headings on each invocation.\n\n(fn &optional COUNT)" t)(autoload '+org-indent-maybe-h "~/.emacs.d/modules/lang/org/autoload/org" "Indent the current item (header or item), if possible.\nMade for `org-tab-first-hook' in evil-mode." t)(autoload '+org-yas-expand-maybe-h "~/.emacs.d/modules/lang/org/autoload/org" "Expand a yasnippet snippet, if trigger exists at point or region is active.\nMade for `org-tab-first-hook'.")(autoload '+org-cycle-only-current-subtree-h "~/.emacs.d/modules/lang/org/autoload/org" "Toggle the local fold at the point, and no deeper.\n`org-cycle's standard behavior is to cycle between three levels: collapsed,\nsubtree and whole document. This is slow, especially in larger org buffer. Most\nof the time I just want to peek into the current subtree -- at most, expand\n*only* the current subtree.\n\nAll my (performant) foldings needs are met between this and `org-show-subtree'\n(on zO for evil users), and `org-cycle' on shift-TAB if I need it.\n\n(fn &optional ARG)" t)(autoload '+org-make-last-point-visible-h "~/.emacs.d/modules/lang/org/autoload/org" "Unfold subtree around point if saveplace places us in a folded region.")(autoload '+org-remove-occur-highlights-h "~/.emacs.d/modules/lang/org/autoload/org" "Remove org occur highlights on ESC in normal mode.")(autoload '+rust-cargo-project-p "~/.emacs.d/modules/lang/rust/autoload" "Return t if this is a cargo project.")(autoload '+rust/cargo-audit "~/.emacs.d/modules/lang/rust/autoload" "Run 'cargo audit' for the current project." t)(autoload '+sh--match-variables-in-quotes "~/.emacs.d/modules/lang/sh/autoload" "Search for variables in double-quoted strings bounded by LIMIT.\n\n(fn LIMIT)")(autoload '+sh--match-command-subst-in-quotes "~/.emacs.d/modules/lang/sh/autoload" "Search for variables in double-quoted strings bounded by LIMIT.\n\n(fn LIMIT)")(autoload '+sh/open-repl "~/.emacs.d/modules/lang/sh/autoload" "Open a shell REPL." t)(autoload '+sh-lookup-documentation-handler "~/.emacs.d/modules/lang/sh/autoload" "Look up documentation in `man' or `woman'." t)(autoload '=calendar "~/.emacs.d/modules/app/calendar/autoload" "Activate (or switch to) `calendar' in its workspace." t)(autoload '+calendar/quit "~/.emacs.d/modules/app/calendar/autoload" "TODO" t)(autoload '+calendar/open-calendar "~/.emacs.d/modules/app/calendar/autoload" "TODO" t)(autoload '+calendar-cfw:render-button-a "~/.emacs.d/modules/app/calendar/autoload" "render-button\n TITLE\n COMMAND\n STATE\n\n(fn TITLE COMMAND &optional STATE)")(autoload '+default/compile "~/.emacs.d/modules/config/default/autoload/default" "Runs `compile' from the root of the current project.\n\nIf a compilation window is already open, recompile that instead.\n\nIf ARG (universal argument), runs `compile' from the current directory.\n\n(fn ARG)" t)(autoload '+default/man-or-woman "~/.emacs.d/modules/config/default/autoload/default" "Invoke `man' if man is installed and the platform is not MacOS, otherwise use `woman'.\n\n`man -k \"^\"` is very slow on MacOS, which is what `Man-completion-table' uses to\ngenerate `completing-read' candidates." t)(autoload '+default/new-buffer "~/.emacs.d/modules/config/default/autoload/default" "TODO" t)(autoload '+default/restart-server "~/.emacs.d/modules/config/default/autoload/default" "Restart the Emacs server." t)(autoload '+default/diagnostics "~/.emacs.d/modules/config/default/autoload/default" "List diagnostics for the current buffer/project.\nIf the vertico and lsp modules are active, list lsp diagnostics for the\ncurrent project. Otherwise list them for the current buffer\n\n(fn &rest ARG)" t)(autoload '+default/lsp-command-map "~/.emacs.d/modules/config/default/autoload/deferred" "Lazily invoke `lsp-command-map'." t)(autoload '+default/browse-project "~/.emacs.d/modules/config/default/autoload/files" "Browse files from the current project's root." t)(autoload '+default/browse-templates "~/.emacs.d/modules/config/default/autoload/files" "Browse files from `+file-templates-dir'." t)(autoload '+default/find-in-templates "~/.emacs.d/modules/config/default/autoload/files" "Find a file under `+file-templates-dir', recursively." t)(autoload '+default/browse-notes "~/.emacs.d/modules/config/default/autoload/files" "Browse files from `org-directory'." t)(autoload '+default/find-in-notes "~/.emacs.d/modules/config/default/autoload/files" "Find a file under `org-directory', recursively." t)(autoload '+default/find-file-under-here "~/.emacs.d/modules/config/default/autoload/files" "Perform a recursive file search from the current directory." t)(autoload '+default/discover-projects "~/.emacs.d/modules/config/default/autoload/files" "Discover projects in `projectile-project-search-path'.\nIf prefix ARG is non-nil, prompt for the search path.\n\n(fn ARG)" t)(autoload '+default/dired "~/.emacs.d/modules/config/default/autoload/files" "Open a directory in dired.\nIf prefix ARG is non-nil, prompt for a known project to open in dired.\n\n(fn ARG)" t)(autoload '+default/search-cwd "~/.emacs.d/modules/config/default/autoload/search" "Conduct a text search in files under the current folder.\nIf prefix ARG is set, prompt for a directory to search from.\n\n(fn &optional ARG)" t)(autoload '+default/search-other-cwd "~/.emacs.d/modules/config/default/autoload/search" "Conduct a text search in another directory." t)(autoload '+default/search-emacsd "~/.emacs.d/modules/config/default/autoload/search" "Conduct a text search in files under `doom-emacs-dir'." t)(autoload '+default/search-buffer "~/.emacs.d/modules/config/default/autoload/search" "Conduct a text search on the current buffer.\n\nIf a selection is active and multi-line, perform a search restricted to that\nregion.\n\nIf a selection is active and not multi-line, use the selection as the initial\ninput and search the whole buffer for it." t)(autoload '+default/search-project "~/.emacs.d/modules/config/default/autoload/search" "Conduct a text search in the current project root.\nIf prefix ARG is set, include ignored/hidden files.\n\n(fn &optional ARG)" t)(autoload '+default/search-other-project "~/.emacs.d/modules/config/default/autoload/search" "Conduct a text search in a known project." t)(autoload '+default/search-project-for-symbol-at-point "~/.emacs.d/modules/config/default/autoload/search" "Search current project for symbol at point.\nIf prefix ARG is set, prompt for a known project to search from.\n\n(fn SYMBOL DIR)" t)(autoload '+default/search-notes-for-symbol-at-point "~/.emacs.d/modules/config/default/autoload/search" "Conduct a text search in the current project for symbol at point. If prefix\nARG is set, prompt for a known project to search from.\n\n(fn SYMBOL)" t)(autoload '+default/org-notes-search "~/.emacs.d/modules/config/default/autoload/search" "Perform a text search on `org-directory'.\n\n(fn QUERY)" t)(autoload '+default/org-notes-headlines "~/.emacs.d/modules/config/default/autoload/search" "Jump to an Org headline in `org-agenda-files'." t)(defalias '+default/newline #'electric-indent-just-newline)(autoload '+default/newline-above "~/.emacs.d/modules/config/default/autoload/text" "Insert an indented new line before the current one." t)(autoload '+default/newline-below "~/.emacs.d/modules/config/default/autoload/text" "Insert an indented new line after the current one." t)(autoload '+default/yank-pop "~/.emacs.d/modules/config/default/autoload/text" "Interactively select what text to insert from the kill ring." t)(autoload '+default/yank-buffer-contents "~/.emacs.d/modules/config/default/autoload/text" "Copy entire buffer into kill ring." t)(autoload '+default/yank-buffer-path "~/.emacs.d/modules/config/default/autoload/text" "Copy the current buffer's path to the kill ring.\n\n(fn &optional ROOT)" t)(autoload '+default/yank-buffer-path-relative-to-project "~/.emacs.d/modules/config/default/autoload/text" "Copy the current buffer's path to the kill ring.\nWith non-nil prefix INCLUDE-ROOT, also include the project's root.\n\n(fn &optional INCLUDE-ROOT)" t)(autoload '+default/insert-file-path "~/.emacs.d/modules/config/default/autoload/text" "Insert the file name (absolute path if prefix ARG).\nIf `buffer-file-name' isn't set, uses `default-directory'.\n\n(fn ARG)" t)(autoload 'doom/backward-delete-whitespace-to-column "~/.emacs.d/modules/config/default/autoload/text" "Delete back to the previous column of whitespace, or as much whitespace as\npossible, or just one char if that's not possible." t)(autoload '+default--delete-backward-char-a "~/.emacs.d/modules/config/default/autoload/text" "Same as `delete-backward-char', but preforms these additional checks:\n\n+ If point is surrounded by (balanced) whitespace and a brace delimiter ({} []\n  ()), delete a space on either side of the cursor.\n+ If point is at BOL and surrounded by braces on adjacent lines, collapse\n  newlines:\n  {\n  |\n  } => {|}\n+ Otherwise, resort to `doom/backward-delete-whitespace-to-column'.\n+ Resorts to `delete-char' if n > 1\n\n(fn N &optional KILLFLAG)" t)(defmacro set-ligatures! (modes &rest plist) "THIS FUNCTION DOES NOTHING BECAUSE (:ui . ligatures) IS DISABLED\n\nAssociates string patterns with icons in certain major-modes.\n\n  MODES is a major mode symbol or a list of them.\n  PLIST is a property list whose keys must match keys in\n`+ligatures-extra-symbols', and whose values are strings representing the text\nto be replaced with that symbol.\n\nIf the car of PLIST is nil, then unset any\npretty symbols and ligatures previously defined for MODES.\n\nFor example, the rule for emacs-lisp-mode is very simple:\n\n  (after! elisp-mode\n    (set-ligatures! \\='emacs-lisp-mode\n      :lambda \"lambda\"))\n\nThis will replace any instances of \"lambda\" in emacs-lisp-mode with the symbol\nassociated with :lambda in `+ligatures-extra-symbols'.\n\nPretty symbols can be unset by passing `nil':\n\n  (after! rustic\n    (set-ligatures! \\='rustic-mode nil))\n\nNote that this will keep all ligatures in `+ligatures-prog-mode-list' active, as\n`emacs-lisp-mode' is derived from `prog-mode'." (ignore modes plist))(put 'set-ligatures! 'doom-module '(:ui . ligatures))(defmacro set-font-ligatures! (modes &rest ligatures) "THIS FUNCTION DOES NOTHING BECAUSE (:ui . ligatures) IS DISABLED\n\nAssociates string patterns with ligatures in certain major-modes.\n\n  MODES is a major mode symbol or a list of them.\n  LIGATURES is a list of ligatures that should be handled by the font,\n    like \"==\" or \"-->\". LIGATURES is a list of strings.\n\nFor example, the rule for emacs-lisp-mode is very simple:\n\n  (set-font-ligatures! \\='emacs-lisp-mode \"->\")\n\nThis will ligate \"->\" into the arrow of choice according to your font.\n\nAll font ligatures for emacs-lisp-mode can be unset with:\n\n  (set-font-ligatures! \\='emacs-lisp-mode nil)\n\nHowever, ligatures for any parent modes (like `prog-mode') will still be in\neffect, as `emacs-lisp-mode' is derived from `prog-mode'." (ignore modes ligatures))(put 'set-font-ligatures! 'doom-module '(:ui . ligatures))(fset 'tree-sitter! #'ignore)(fset 'set-tree-sitter-lang! #'ignore)(fset 'lsp! #'ignore)(defmacro set-eglot-client! (mode server-call) "THIS FUNCTION DOES NOTHING BECAUSE (:tools . lsp) IS DISABLED\n\nAdd SERVER-CALL list as a possible lsp server for given major MODE.\n\nExample : (set-eglot-client! 'python-mode `(,(concat doom-data-dir \"lsp/mspyls/Microsoft.Python.LanguageServer\")))" (ignore mode server-call))(put 'set-eglot-client! 'doom-module '(:tools . lsp))(defmacro set-lsp-priority! (client priority) "THIS FUNCTION DOES NOTHING BECAUSE (:tools . lsp) IS DISABLED\n\nChange the PRIORITY of lsp CLIENT." (ignore client priority))(put 'set-lsp-priority! 'doom-module '(:tools . lsp))(defmacro set-editorconfig-indent-var! (mode &rest vars) "THIS FUNCTION DOES NOTHING BECAUSE (:tools . editorconfig) IS DISABLED\n\nAdd (MODE VARS...) to `editorconfig-indentation-alist'." (ignore mode vars))(put 'set-editorconfig-indent-var! 'doom-module '(:tools . editorconfig))(defmacro set-eshell-alias! (&rest aliases) "THIS FUNCTION DOES NOTHING BECAUSE (:term . eshell) IS DISABLED\n\nDefine aliases for eshell.\n\nALIASES is a flat list of alias -> command pairs. e.g.\n\n  (set-eshell-alias!\n    \"hi\"  \"echo hello world\"\n    \"bye\" \"echo goodbye world\")" (ignore aliases))(put 'set-eshell-alias! 'doom-module '(:term . eshell))(defmacro set-email-account! (label letvars &optional default-p) "THIS FUNCTION DOES NOTHING BECAUSE (:email . mu4e) IS DISABLED\n\nRegisters an email address for mu4e. The LABEL is a string. LETVARS are a\nlist of cons cells (VARIABLE . VALUE) -- you may want to modify:\n\n + `user-full-name' (used to populate the FROM field when composing mail)\n + `user-mail-address' (required in mu4e < 1.4)\n + `smtpmail-smtp-user' (required for sending mail from Emacs)\n\nOPTIONAL:\n + `mu4e-sent-folder'\n + `mu4e-drafts-folder'\n + `mu4e-trash-folder'\n + `mu4e-refile-folder'\n + `mu4e-compose-signature'\n + `+mu4e-personal-addresses'\n\nDEFAULT-P is a boolean. If non-nil, it marks that email account as the\ndefault/fallback account." (ignore label letvars default-p))(put 'set-email-account! 'doom-module '(:email . mu4e))(cl-defmacro set-rotate-patterns! (modes &key symbols words patterns) "THIS FUNCTION DOES NOTHING BECAUSE (:editor . rotate-text) IS DISABLED\n\nDeclare :symbols, :words or :patterns (all lists of strings) that\n`rotate-text' will cycle through." (ignore modes symbols words patterns))(put 'set-rotate-patterns! 'doom-module '(:editor . rotate-text))(cl-defmacro set-formatter! (name args &key modes) "THIS FUNCTION DOES NOTHING BECAUSE (:editor . format) IS DISABLED\n\nDefine (or modify) a formatter named NAME.\n\nSupported keywords: :modes\n\nNAME is a symbol that identifies this formatter.\n\nFORMATTER can be a symbol referring to another formatter, a function, string or\nnested list.\n\n  If a function, it should be a formatter function that\n    `apheleia--run-formatter-function' will accept.\n  If a string, it is assumed to be a shell command that the buffer's text will\n    be piped to (through stdin).\n  If a list, it should represent a shell command as a list of arguments. Each\n    element is either a string or list (STRING ARG) where STRING is a format\n    string and ARG is both a predicate and argument for STRING. If ARG is nil,\n    STRING will be omitted from the vector.\n\nIf you're trying to override this, ensure that you wrap the call in `after!' and\nwhichever package sets the initial formatter. See the ':editor format' README\nfor more.\n\nFor more information on how to structure the list to be compatible, see\n`apheleia--run-formatter-function'.\n\nMODES is a major mode, a list thereof, or a list of two-element sublists with\nthe structure: (MAJOR-MODE FORM). FORM is evaluated when the buffer is formatted\nand its return value serves two purposes:\n\n  1. It is a predicate for this formatter. Assuming the MAJOR-MODE matches the\n     current mode, if FORM evaluates to nil, the formatter is skipped.\n  2. It's return value is made available to FORMATTER if it is a function or\n     list of shell arguments via the `mode-result' variable.\n\nBasic examples:\n  (set-formatter! \\='asmfmt \"asmfmt\" :modes \\='(asm-mode nasm-mode))\n  (set-formatter! \\='black \"black -q -\")\n  (set-formatter! \\='html-tidy \"tidy -q -indent\" :modes \\='(html-mode web-mode))\n\nAdvanced examples:\n  (set-formatter!\n    \\='clang-format\n    \\='(\"clang-format\"\n      (\"-assume-filename=%S\" (or buffer-file-name mode-result \"\")))\n    :modes\n    \\='((c-mode \".c\")\n      (c++-mode \".cpp\")\n      (java-mode \".java\")\n      (objc-mode \".m\")\n      (protobuf-mode \".proto\")))\n\n  (set-formatter! \\='html-tidy\n    \\='(\"tidy\" \"-q\" \"-indent\"\n      (\"-xml\" (memq major-mode \\='(nxml-mode xml-mode))))\n    :modes\n    \\='(html-mode\n      (web-mode (and (equal \"none\" web-mode-engine)\n                     (car (member web-mode-content-type \\='(\"xml\" \"html\")))))))\n\n  (set-formatter! \\='html-tidy  ; overwrite predefined html-tidy formatter\n    \\='(\"tidy\" \"-q\" \"-indent\"\n      \"--tidy-mark\" \"no\"\n      \"--drop-empty-elements\" \"no\"\n      \"--show-body-only\" \"auto\"\n      (\"--indent-spaces\" \"%d\" tab-width)\n      (\"--indent-with-tabs\" \"%s\" (if indent-tabs-mode \"yes\" \"no\"))\n      (\"-xml\" (memq major-mode \\='(nxml-mode xml-mode)))))\n\n  (set-formatter! \\='elm-format\n    \"elm-format --yes --stdin\")" (ignore name args modes))(put 'set-formatter! 'doom-module '(:editor . format))(defmacro set-irc-server! (server plist) "THIS FUNCTION DOES NOTHING BECAUSE (:app . irc) IS DISABLED\n\nRegisters an irc SERVER for circe.\n\nSERVER can either be a name for the network (in which case you must specify a\n:host), or it may be the hostname itself, in which case it will be used as the\n:host.\n\nSee `circe-network-options' for details." (ignore server plist))(put 'set-irc-server! 'doom-module '(:app . irc))