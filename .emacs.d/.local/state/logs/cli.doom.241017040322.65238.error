;; -*- lisp-interaction -*-
;; vim: set ft=lisp:
;; command=("emacs" "--load" "/home/max/.emacs.d/bin/doom" "--" "doctor")
;; date="2024-10-17 04-03-22"

;;;; ENVIRONMENT

;;;; 0
((signal error
         ("use-package: Unrecognized keyword: :straight"))
 ((debugger-may-continue . t)
  (inhibit-redisplay)
  (inhibit-debugger . t)
  (inhibit-changing-match-data)))

;;;; 1
((error "use-package: %s" "Unrecognized keyword: :straight")
 nil)

;;;; 2
((use-package-normalize-plist webkit
                              (:straight
                               (:type git :host github :repo "akirakyle/emacs-webkit" :branch "main" :files
                                      (:defaults "*.js" "*.css" "*.so")
                                      :pre-build
                                      ("make"))
                               :bind
                               ("s-b" . webkit))
                              nil use-package-merge-keys)
 nil)

;;;; 3
((use-package-normalize-keywords webkit
                                 (:straight
                                  (:type git :host github :repo "akirakyle/emacs-webkit" :branch "main" :files
                                         (:defaults "*.js" "*.css" "*.so")
                                         :pre-build
                                         ("make"))
                                  :bind
                                  ("s-b" . webkit)))
 nil)

;;;; 4
((#[385 "\304\1>?\205\371\0\305\10\205\26\0\306\307\310\5D\311BBBC\11\312=\203p\0\313\4\4\"\11\314=\203Z\0\315\316\317\6\7\6\7BB!\320\316\317\6\11\6\6BB!\321\316\305\312\322\32\31\323\6\f\6\11\324\6\13\325\"\205Q\0\325\322D#*!!\260\6\202[\0\326\33\323\5\2\324\4\325\"\205i\0\325\322D#)\262\1\202\332\0\3271\311\0\313\4\4\"\11\314=\203\262\0\315\316\317\6\7\6\7BB!\320\316\317\6\11\6\6BB!\321\316\305\312\322\32\31\323\6\f\6\11\324\6\13\325\"\205\251\0\325\322D#*!!\260\6\202\263\0\326\33\323\5\2\324\4\325\"\205\301\0\325\322D#)\262\0010\202\332\0\330\317\331\332\6\10\333\6\6!#\334#\210\335\262\1\10\205\351\0\306\307\310\6\7D\336BBBCE\337\340\341\335\341\335C\6\6\"\"\"\262\1!\207"
        [use-package-compute-statistics use-package-verbose use-package-expand-minimally use-package--form :disabled macroexp-progn use-package-statistics-gather :use-package quote
                                        (nil)
                                        errors use-package-normalize-keywords debug "\n\n" pp-to-string use-package "\n  -->\n\n" "\n  ==>\n\n" t use-package-process-keywords plist-get :demand ""
                                        (debug error)
                                        display-warning format "Failed to parse package %s: %s" error-message-string :error nil
                                        (t)
                                        apply append delete]
        18
        ("/home/max/.emacs.d/.local/straight/build-29.4/use-package/use-package-core.elc" . 53135)]
  webkit :straight
  (:type git :host github :repo "akirakyle/emacs-webkit" :branch "main" :files
         (:defaults "*.js" "*.css" "*.so")
         :pre-build
         ("make"))
  :bind
  ("s-b" . webkit))
 nil)

;;;; 5
((macroexpand
  (use-package webkit :straight
    (:type git :host github :repo "akirakyle/emacs-webkit" :branch "main" :files
           (:defaults "*.js" "*.css" "*.so")
           :pre-build
           ("make"))
    :bind
    ("s-b" . webkit)))
 nil)

;;;; 6
((internal-macroexpand-for-load
  (use-package webkit :straight
    (:type git :host github :repo "akirakyle/emacs-webkit" :branch "main" :files
           (:defaults "*.js" "*.css" "*.so")
           :pre-build
           ("make"))
    :bind
    ("s-b" . webkit))
  nil)
 ((print-symbols-bare . t)
  (symbols-with-pos-enabled . t)
  (macroexp--pending-eager-loads "/home/max/.doom.d/config.el")))

;;;; 7
((eval-buffer #<buffer  *load*-673853> nil "/home/max/.doom.d/config.el" nil t)
 ((eval-buffer-list #<buffer  *load*-673853> #<buffer  *load*-638528> #<buffer  *load*-278617> #<buffer  *load*>)
  (standard-output)
  (lexical-binding . t)
  (standard-input . #<buffer  *load*-673853>)
  (macroexp--dynvars auto-minor-mode-magic-alist auto-minor-mode-alist gcmh-mode global-hide-mode-line-mode better-jumper-mode dtrt-indent-mode dtrt-indent-global-mode show-smartparens-global-mode smartparens-global-mode smartparens-global-strict-mode smartparens-mode-map ws-butler-global-mode which-key-mode global-smudge-remote-mode exwm-xsettings-mode exwm-xim-mode exwm-systemtray-mode exwm-randr-mode exwm-background-mode corfu-popupinfo-mode corfu-indexed-mode corfu-history-mode corfu-echo-mode global-corfu-mode corfu-terminal-mode vertico-unobtrusive-mode vertico-reverse-mode vertico-multiform-mode vertico-mouse-mode vertico-indexed-mode vertico-grid-mode vertico-flat-mode vertico-buffer-mode vertico-mode marginalia-mode solaire-global-mode global-hl-todo-mode doom-modeline-mode global-anzu-mode evil-goggles-mode projectile-mode global-diff-hl-show-hunk-mouse-mode diff-hl-margin-mode diff-hl-flydiff-mode global-diff-hl-amend-mode global-diff-hl-mode global-vi-tilde-fringe-mode persp-mode global-visual-fill-column-mode global-writeroom-mode expand-region-subword-enabled expand-region-smart-cursor expand-region-exclude-text-mode-expansions expand-region-reset-fast-key expand-region-contract-fast-key expand-region-fast-keys-enabled expand-region-skip-whitespace expand-region-autocopy-register expand-region-guess-python-mode expand-region-preferred-python-mode evil-escape-mode evil-lion-mode evil-snipe-override-mode evil-snipe-mode global-evil-surround-mode evil-traces-mode global-evil-visualstar-mode vimish-fold-global-mode global-evil-vimish-fold-mode dirvish-side-follow-mode dirvish-peek-mode dirvish-override-dired-mode diredfl-global-mode undo-fu-session-global-mode vundo-unicode-symbols vundo-ascii-symbols flyspell-lazy-mode eros-mode dumb-jump-mode dumb-jump-mode-map xclip-mode global-kkp-mode disaster-find-build-root-functions modern-c++-font-lock-global-mode lsp-treemacs-sync-mode dap-ui-controls-mode dap-ui-mode dap-tooltip-mode dap-auto-configure-mode dap-mode ace-window-posframe-mode ace-window-display-mode treemacs-tag-follow-mode treemacs-project-follow-mode treemacs-peek-mode treemacs-indicate-top-scroll-mode treemacs-git-commit-diff-mode eldoc-minor-mode-string semantic-token-modifier-cache lsp-dired-mode npm-global-mode yas-global-mode pdf-virtual-global-minor-mode pdf-tools-handle-upgrades pdf-occur-global-minor-mode shell-command-with-editor-mode magit-wip-before-change-mode magit-wip-after-apply-mode magit-wip-after-save-mode magit-wip-mode magit-auto-revert-mode magit-define-global-key-bindings git-rebase-filename-regexp dired-async-mode async-bytecomp-package-mode global-flycheck-mode project-mode-line project-prefix-map company-tng-mode global-company-mode orgtbl-exp-regexp org-num-skip-unnumbered org-num-skip-tags org-num-skip-footnotes org-num-skip-commented org-num-max-level org-num-face org-element-use-cache global-dash-fontify-mode elnode-wikiserver-wikiroot elnode-wikiserver-wikiroot-default elnode-do-init elnode-config-directory elnode-hostpath-default-table elnode-config-directory straight-x-pinned-packages +org-capture-frame-parameters inferior-julia-program-name +eval-runners +popup-defaults +popup--display-buffer-alist embark-quit-after-action +company-backend-alist doom-customize-theme-hook projectile-require-project-root projectile-enable-caching projectile-project-root doom-big-font-mode doom-big-font-increment doom-big-font doom-font-increment doom-docs-dir doom-debug-mode doom-debug-variables doom-before-reload-hook doom-after-reload-hook doom-fallback-buffer-name doom-real-buffer-p doom-unreal-buffer-functions doom-real-buffer-functions doom-incremental-idle-timer doom-incremental-first-idle-timer doom-incremental-packages doom-inhibit-local-var-hooks)
  (current-load-list "/home/max/.doom.d/config.el")))

;;;; 8
((load-with-code-conversion "/home/max/.doom.d/config.el" "/home/max/.doom.d/config.el" t t)
 ((load-in-progress . t)
  (inhibit-file-name-operation)
  (set-auto-coding-for-load . t)
  (load-file-name . "/home/max/.doom.d/config.el")
  (load-true-file-name . "/home/max/.doom.d/config.el")
  (read-symbol-shorthands)))

;;;; 9
((load "/home/max/.doom.d/config" t nomessage)
 ((lexical-binding)
  (lread--unescaped-character-literals)))

;;;; 10
((condition-case e
     (load path noerror 'nomessage)
   ((debug doom-error)
    (signal
     (car e)
     (cdr e)))
   ((debug error)
    (setq path
          (locate-file path load-path
                       (get-load-suffixes)))
    (if
        (not
         (and path
              (featurep 'doom)))
        (signal
         (car e)
         (cdr e))
      (cl-loop for
               (err . dir)
               in
               (list
                (cons 'doom-cli-error
                      (expand-file-name "cli" doom-core-dir))
                (cons 'doom-core-error doom-core-dir)
                (cons 'doom-user-error doom-user-dir)
                (cons 'doom-profile-error doom-profile-dir)
                (cons 'doom-module-error doom-modules-dir))
               if
               (file-in-directory-p path dir)
               do
               (signal err
                       (list
                        (file-relative-name path
                                            (expand-file-name "../" dir))
                        e))))))
 nil)

;;;; 11
((doom-load "/home/max/.doom.d/config" t)
 ((path . "/home/max/.doom.d/config")
  (noerror . t)))

;;;; 12
((let
     ((doom-module-context
       [1 105 -105 :user nil nil nil]))
   (doom-load
    (file-name-concat doom-user-dir "config")
    t))
 ((doom-module-context .
                       [1 105 -105 :user nil nil nil])))

;;;; 13
((let
     ((old-custom-file custom-file))
   (let
       ((doom-module-context
         [2 -111 -111 :config use-package nil nil]))
     (doom-load "~/.emacs.d/modules/config/use-package/init" t))
   (let
       ((doom-module-context
         [0 -110 -110 :core nil nil nil]))
     (doom-load
      (file-name-concat doom-core-dir "init")
      t))
   (doom-run-hooks 'doom-before-modules-init-hook)
   (let
       ((doom-module-context
         [17 0 0 :editor evil
             (+everywhere)
             nil]))
     (doom-load "~/.emacs.d/modules/editor/evil/init" t))
   (doom-run-hooks 'doom-after-modules-init-hook)
   (doom-run-hooks 'doom-before-modules-config-hook)
   (let
       ((doom-module-context
         [3 0 0 :completion company nil nil]))
     (doom-load "~/.emacs.d/modules/completion/company/config" t))
   (let
       ((doom-module-context
         [4 0 0 :completion corfu
            (+orderless)
            nil]))
     (doom-load "~/.emacs.d/modules/completion/corfu/config" t))
   (let
       ((doom-module-context
         [5 0 0 :completion vertico nil nil]))
     (doom-load "~/.emacs.d/modules/completion/vertico/config" t))
   (let
       ((doom-module-context
         [6 0 0 :ui doom nil nil]))
     (doom-load "~/.emacs.d/modules/ui/doom/config" t))
   (let
       ((doom-module-context
         [7 0 0 :ui doom-dashboard nil nil]))
     (doom-load "~/.emacs.d/modules/ui/doom-dashboard/config" t))
   (let
       ((doom-module-context
         [8 0 0 :ui hl-todo nil nil]))
     (doom-load "~/.emacs.d/modules/ui/hl-todo/config" t))
   (let
       ((doom-module-context
         [9 0 0 :ui modeline nil nil]))
     (doom-load "~/.emacs.d/modules/ui/modeline/config" t))
   (let
       ((doom-module-context
         [10 0 0 :ui ophints nil nil]))
     (doom-load "~/.emacs.d/modules/ui/ophints/config" t))
   (let
       ((doom-module-context
         [11 0 0 :ui popup
             (+defaults)
             nil]))
     (doom-load "~/.emacs.d/modules/ui/popup/config" t))
   (let
       ((doom-module-context
         [12 0 0 :ui treemacs nil nil]))
     (doom-load "~/.emacs.d/modules/ui/treemacs/config" t))
   (let
       ((doom-module-context
         [13 0 0 :ui vc-gutter
             (+pretty)
             nil]))
     (doom-load "~/.emacs.d/modules/ui/vc-gutter/config" t))
   (let
       ((doom-module-context
         [15 0 0 :ui workspaces nil nil]))
     (doom-load "~/.emacs.d/modules/ui/workspaces/config" t))
   (let
       ((doom-module-context
         [16 0 0 :ui zen nil nil]))
     (doom-load "~/.emacs.d/modules/ui/zen/config" t))
   (let
       ((doom-module-context
         [17 0 0 :editor evil
             (+everywhere)
             nil]))
     (doom-load "~/.emacs.d/modules/editor/evil/config" t))
   (let
       ((doom-module-context
         [18 0 0 :editor file-templates nil nil]))
     (doom-load "~/.emacs.d/modules/editor/file-templates/config" t))
   (let
       ((doom-module-context
         [19 0 0 :editor fold nil nil]))
     (doom-load "~/.emacs.d/modules/editor/fold/config" t))
   (let
       ((doom-module-context
         [20 0 0 :editor snippets nil nil]))
     (doom-load "~/.emacs.d/modules/editor/snippets/config" t))
   (let
       ((doom-module-context
         [21 0 0 :emacs dired nil nil]))
     (doom-load "~/.emacs.d/modules/emacs/dired/config" t))
   (let
       ((doom-module-context
         [22 0 0 :emacs electric nil nil]))
     (doom-load "~/.emacs.d/modules/emacs/electric/config" t))
   (let
       ((doom-module-context
         [23 0 0 :emacs undo nil nil]))
     (doom-load "~/.emacs.d/modules/emacs/undo/config" t))
   (let
       ((doom-module-context
         [24 0 0 :emacs vc nil nil]))
     (doom-load "~/.emacs.d/modules/emacs/vc/config" t))
   (let
       ((doom-module-context
         [25 0 0 :checkers syntax nil nil]))
     (doom-load "~/.emacs.d/modules/checkers/syntax/config" t))
   (let
       ((doom-module-context
         [26 0 0 :checkers spell
             (+flyspell)
             nil]))
     (doom-load "~/.emacs.d/modules/checkers/spell/config" t))
   (let
       ((doom-module-context
         [27 0 0 :checkers grammar nil nil]))
     (doom-load "~/.emacs.d/modules/checkers/grammar/config" t))
   (let
       ((doom-module-context
         [28 0 0 :tools eval
             (+overlay)
             nil]))
     (doom-load "~/.emacs.d/modules/tools/eval/config" t))
   (let
       ((doom-module-context
         [29 0 0 :tools lookup nil nil]))
     (doom-load "~/.emacs.d/modules/tools/lookup/config" t))
   (let
       ((doom-module-context
         [30 0 0 :tools magit nil nil]))
     (doom-load "~/.emacs.d/modules/tools/magit/config" t))
   (let
       ((doom-module-context
         [31 0 0 :tools pdf nil nil]))
     (doom-load "~/.emacs.d/modules/tools/pdf/config" t))
   (let
       ((doom-module-context
         [33 0 0 :os tty nil nil]))
     (doom-load "~/.emacs.d/modules/os/tty/config" t))
   (let
       ((doom-module-context
         [34 0 0 :lang cc
             (+lsp)
             nil]))
     (doom-load "~/.emacs.d/modules/lang/cc/config" t))
   (let
       ((doom-module-context
         [35 0 0 :lang emacs-lisp nil nil]))
     (doom-load "~/.emacs.d/modules/lang/emacs-lisp/config" t))
   (let
       ((doom-module-context
         [36 0 0 :lang java
             (+lsp)
             nil]))
     (doom-load "~/.emacs.d/modules/lang/java/config" t))
   (let
       ((doom-module-context
         [37 0 0 :lang javascript nil nil]))
     (doom-load "~/.emacs.d/modules/lang/javascript/config" t))
   (let
       ((doom-module-context
         [38 0 0 :lang julia nil nil]))
     (doom-load "~/.emacs.d/modules/lang/julia/config" t))
   (let
       ((doom-module-context
         [39 0 0 :lang latex nil nil]))
     (doom-load "~/.emacs.d/modules/lang/latex/config" t))
   (let
       ((doom-module-context
         [40 0 0 :lang markdown nil nil]))
     (doom-load "~/.emacs.d/modules/lang/markdown/config" t))
   (let
       ((doom-module-context
         [41 0 0 :lang org nil nil]))
     (doom-load "~/.emacs.d/modules/lang/org/config" t))
   (let
       ((doom-module-context
         [42 0 0 :lang rust
             (+lsp)
             nil]))
     (doom-load "~/.emacs.d/modules/lang/rust/config" t))
   (let
       ((doom-module-context
         [43 0 0 :lang sh nil nil]))
     (doom-load "~/.emacs.d/modules/lang/sh/config" t))
   (let
       ((doom-module-context
         [44 0 0 :app calendar nil nil]))
     (doom-load "~/.emacs.d/modules/app/calendar/config" t))
   (let
       ((doom-module-context
         [45 0 0 :config default
             (+bindings +smartparens)
             nil]))
     (doom-load "~/.emacs.d/modules/config/default/config" t))
   (doom-run-hooks 'doom-after-modules-config-hook)
   (let
       ((doom-module-context
         [1 105 -105 :user nil nil nil]))
     (doom-load
      (file-name-concat doom-user-dir "config")
      t))
   (if
       (eq custom-file old-custom-file)
       (progn
         (doom-load custom-file 'noerror))))
 ((old-custom-file . "/home/max/.doom.d/custom.el")))

;;;; 14
((let
     ((doom-context doom-context))
   (let
       ((tail
         (ensure-list 'modules)))
     (while tail
       (let
           ((context
             (car tail)))
         (doom-context-push context)
         (setq tail
               (cdr tail)))))
   (set 'doom-modules '#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data
                                     ((:core)
                                      (:path "/home/max/.emacs.d/lisp/" :depth -110)
                                      (:user)
                                      (:path "/home/max/.doom.d/" :depth
                                             (-105 . 105))
                                      (:config . use-package)
                                      (:path "/home/max/.emacs.d/modules/config/use-package" :depth -111)
                                      (:completion . company)
                                      (:path "/home/max/.emacs.d/modules/completion/company" :flags nil)
                                      (:completion . corfu)
                                      (:path "/home/max/.emacs.d/modules/completion/corfu" :flags
                                             (+orderless))
                                      (:completion . vertico)
                                      (:path "/home/max/.emacs.d/modules/completion/vertico" :flags nil)
                                      (:ui . doom)
                                      (:path "/home/max/.emacs.d/modules/ui/doom" :flags nil)
                                      (:ui . doom-dashboard)
                                      (:path "/home/max/.emacs.d/modules/ui/doom-dashboard" :flags nil)
                                      (:ui . hl-todo)
                                      (:path "/home/max/.emacs.d/modules/ui/hl-todo" :flags nil)
                                      (:ui . modeline)
                                      (:path "/home/max/.emacs.d/modules/ui/modeline" :flags nil)
                                      (:ui . ophints)
                                      (:path "/home/max/.emacs.d/modules/ui/ophints" :flags nil)
                                      (:ui . popup)
                                      (:path "/home/max/.emacs.d/modules/ui/popup" :flags
                                             (+defaults))
                                      (:ui . treemacs)
                                      (:path "/home/max/.emacs.d/modules/ui/treemacs" :flags nil)
                                      (:ui . vc-gutter)
                                      (:path "/home/max/.emacs.d/modules/ui/vc-gutter" :flags
                                             (+pretty))
                                      (:ui . vi-tilde-fringe)
                                      (:path "/home/max/.emacs.d/modules/ui/vi-tilde-fringe" :flags nil)
                                      (:ui . workspaces)
                                      (:path "/home/max/.emacs.d/modules/ui/workspaces" :flags nil)
                                      (:ui . zen)
                                      (:path "/home/max/.emacs.d/modules/ui/zen" :flags nil)
                                      (:editor . evil)
                                      (:path "/home/max/.emacs.d/modules/editor/evil" :flags
                                             (+everywhere))
                                      (:editor . file-templates)
                                      (:path "/home/max/.emacs.d/modules/editor/file-templates" :flags nil)
                                      (:editor . fold)
                                      (:path "/home/max/.emacs.d/modules/editor/fold" :flags nil)
                                      (:editor . snippets)
                                      (:path "/home/max/.emacs.d/modules/editor/snippets" :flags nil)
                                      (:emacs . dired)
                                      (:path "/home/max/.emacs.d/modules/emacs/dired" :flags nil)
                                      (:emacs . electric)
                                      (:path "/home/max/.emacs.d/modules/emacs/electric" :flags nil)
                                      (:emacs . undo)
                                      (:path "/home/max/.emacs.d/modules/emacs/undo" :flags nil)
                                      (:emacs . vc)
                                      (:path "/home/max/.emacs.d/modules/emacs/vc" :flags nil)
                                      (:checkers . syntax)
                                      (:path "/home/max/.emacs.d/modules/checkers/syntax" :flags nil)
                                      (:checkers . spell)
                                      (:path "/home/max/.emacs.d/modules/checkers/spell" :flags
                                             (+flyspell))
                                      (:checkers . grammar)
                                      (:path "/home/max/.emacs.d/modules/checkers/grammar" :flags nil)
                                      (:tools . eval)
                                      (:path "/home/max/.emacs.d/modules/tools/eval" :flags
                                             (+overlay))
                                      (:tools . lookup)
                                      (:path "/home/max/.emacs.d/modules/tools/lookup" :flags nil)
                                      (:tools . magit)
                                      (:path "/home/max/.emacs.d/modules/tools/magit" :flags nil)
                                      (:tools . pdf)
                                      (:path "/home/max/.emacs.d/modules/tools/pdf" :flags nil)
                                      (:tools . tmux)
                                      (:path "/home/max/.emacs.d/modules/tools/tmux" :flags nil)
                                      (:os . tty)
                                      (:path "/home/max/.emacs.d/modules/os/tty" :flags nil)
                                      (:lang . cc)
                                      (:path "/home/max/.emacs.d/modules/lang/cc" :flags
                                             (+lsp))
                                      (:lang . emacs-lisp)
                                      (:path "/home/max/.emacs.d/modules/lang/emacs-lisp" :flags nil)
                                      (:lang . java)
                                      (:path "/home/max/.emacs.d/modules/lang/java" :flags
                                             (+lsp))
                                      (:lang . javascript)
                                      (:path "/home/max/.emacs.d/modules/lang/javascript" :flags nil)
                                      (:lang . julia)
                                      (:path "/home/max/.emacs.d/modules/lang/julia" :flags nil)
                                      (:lang . latex)
                                      (:path "/home/max/.emacs.d/modules/lang/latex" :flags nil)
                                      (:lang . markdown)
                                      (:path "/home/max/.emacs.d/modules/lang/markdown" :flags nil)
                                      (:lang . org)
                                      (:path "/home/max/.emacs.d/modules/lang/org" :flags nil)
                                      (:lang . rust)
                                      (:path "/home/max/.emacs.d/modules/lang/rust" :flags
                                             (+lsp))
                                      (:lang . sh)
                                      (:path "/home/max/.emacs.d/modules/lang/sh" :flags nil)
                                      (:app . calendar)
                                      (:path "/home/max/.emacs.d/modules/app/calendar" :flags nil)
                                      (:config . default)
                                      (:path "/home/max/.emacs.d/modules/config/default" :flags
                                             (+bindings +smartparens)))))
   (set 'doom-disabled-packages 'nil)
   (setplist ':core
             '(nil
               [0 -110 -110 :core nil nil nil]))
   (setplist ':user
             '(nil
               [1 105 -105 :user nil nil nil]))
   (setplist ':completion
             '(company
               [3 0 0 :completion company nil nil]
               corfu
               [4 0 0 :completion corfu
                  (+orderless)
                  nil]
               vertico
               [5 0 0 :completion vertico nil nil]))
   (setplist ':ui
             '(doom
               [6 0 0 :ui doom nil nil]
               doom-dashboard
               [7 0 0 :ui doom-dashboard nil nil]
               hl-todo
               [8 0 0 :ui hl-todo nil nil]
               modeline
               [9 0 0 :ui modeline nil nil]
               ophints
               [10 0 0 :ui ophints nil nil]
               popup
               [11 0 0 :ui popup
                   (+defaults)
                   nil]
               treemacs
               [12 0 0 :ui treemacs nil nil]
               vc-gutter
               [13 0 0 :ui vc-gutter
                   (+pretty)
                   nil]
               vi-tilde-fringe
               [14 0 0 :ui vi-tilde-fringe nil nil]
               workspaces
               [15 0 0 :ui workspaces nil nil]
               zen
               [16 0 0 :ui zen nil nil]))
   (setplist ':editor
             '(evil
               [17 0 0 :editor evil
                   (+everywhere)
                   nil]
               file-templates
               [18 0 0 :editor file-templates nil nil]
               fold
               [19 0 0 :editor fold nil nil]
               snippets
               [20 0 0 :editor snippets nil nil]))
   (setplist ':emacs
             '(dired
               [21 0 0 :emacs dired nil nil]
               electric
               [22 0 0 :emacs electric nil nil]
               undo
               [23 0 0 :emacs undo nil nil]
               vc
               [24 0 0 :emacs vc nil nil]))
   (setplist ':checkers
             '(syntax
               [25 0 0 :checkers syntax nil nil]
               spell
               [26 0 0 :checkers spell
                   (+flyspell)
                   nil]
               grammar
               [27 0 0 :checkers grammar nil nil]))
   (setplist ':tools
             '(eval
               [28 0 0 :tools eval
                   (+overlay)
                   nil]
               lookup
               [29 0 0 :tools lookup nil nil]
               magit
               [30 0 0 :tools magit nil nil]
               pdf
               [31 0 0 :tools pdf nil nil]
               tmux
               [32 0 0 :tools tmux nil nil]))
   (setplist ':os
             '(tty
               [33 0 0 :os tty nil nil]))
   (setplist ':lang
             '(cc
               [34 0 0 :lang cc
                   (+lsp)
                   nil]
               emacs-lisp
               [35 0 0 :lang emacs-lisp nil nil]
               java
               [36 0 0 :lang java
                   (+lsp)
                   nil]
               javascript
               [37 0 0 :lang javascript nil nil]
               julia
               [38 0 0 :lang julia nil nil]
               latex
               [39 0 0 :lang latex nil nil]
               markdown
               [40 0 0 :lang markdown nil nil]
               org
               [41 0 0 :lang org nil nil]
               rust
               [42 0 0 :lang rust
                   (+lsp)
                   nil]
               sh
               [43 0 0 :lang sh nil nil]))
   (setplist ':app
             '(calendar
               [44 0 0 :app calendar nil nil]))
   (setplist ':config
             '(use-package
                [2 -111 -111 :config use-package nil nil]
                default
                [45 0 0 :config default
                    (+bindings +smartparens)
                    nil]))
   (let
       ((old-custom-file custom-file))
     (let
         ((doom-module-context
           [2 -111 -111 :config use-package nil nil]))
       (doom-load "~/.emacs.d/modules/config/use-package/init" t))
     (let
         ((doom-module-context
           [0 -110 -110 :core nil nil nil]))
       (doom-load
        (file-name-concat doom-core-dir "init")
        t))
     (doom-run-hooks 'doom-before-modules-init-hook)
     (let
         ((doom-module-context
           [17 0 0 :editor evil
               (+everywhere)
               nil]))
       (doom-load "~/.emacs.d/modules/editor/evil/init" t))
     (doom-run-hooks 'doom-after-modules-init-hook)
     (doom-run-hooks 'doom-before-modules-config-hook)
     (let
         ((doom-module-context
           [3 0 0 :completion company nil nil]))
       (doom-load "~/.emacs.d/modules/completion/company/config" t))
     (let
         ((doom-module-context
           [4 0 0 :completion corfu
              (+orderless)
              nil]))
       (doom-load "~/.emacs.d/modules/completion/corfu/config" t))
     (let
         ((doom-module-context
           [5 0 0 :completion vertico nil nil]))
       (doom-load "~/.emacs.d/modules/completion/vertico/config" t))
     (let
         ((doom-module-context
           [6 0 0 :ui doom nil nil]))
       (doom-load "~/.emacs.d/modules/ui/doom/config" t))
     (let
         ((doom-module-context
           [7 0 0 :ui doom-dashboard nil nil]))
       (doom-load "~/.emacs.d/modules/ui/doom-dashboard/config" t))
     (let
         ((doom-module-context
           [8 0 0 :ui hl-todo nil nil]))
       (doom-load "~/.emacs.d/modules/ui/hl-todo/config" t))
     (let
         ((doom-module-context
           [9 0 0 :ui modeline nil nil]))
       (doom-load "~/.emacs.d/modules/ui/modeline/config" t))
     (let
         ((doom-module-context
           [10 0 0 :ui ophints nil nil]))
       (doom-load "~/.emacs.d/modules/ui/ophints/config" t))
     (let
         ((doom-module-context
           [11 0 0 :ui popup
               (+defaults)
               nil]))
       (doom-load "~/.emacs.d/modules/ui/popup/config" t))
     (let
         ((doom-module-context
           [12 0 0 :ui treemacs nil nil]))
       (doom-load "~/.emacs.d/modules/ui/treemacs/config" t))
     (let
         ((doom-module-context
           [13 0 0 :ui vc-gutter
               (+pretty)
               nil]))
       (doom-load "~/.emacs.d/modules/ui/vc-gutter/config" t))
     (let
         ((doom-module-context
           [15 0 0 :ui workspaces nil nil]))
       (doom-load "~/.emacs.d/modules/ui/workspaces/config" t))
     (let
         ((doom-module-context
           [16 0 0 :ui zen nil nil]))
       (doom-load "~/.emacs.d/modules/ui/zen/config" t))
     (let
         ((doom-module-context
           [17 0 0 :editor evil
               (+everywhere)
               nil]))
       (doom-load "~/.emacs.d/modules/editor/evil/config" t))
     (let
         ((doom-module-context
           [18 0 0 :editor file-templates nil nil]))
       (doom-load "~/.emacs.d/modules/editor/file-templates/config" t))
     (let
         ((doom-module-context
           [19 0 0 :editor fold nil nil]))
       (doom-load "~/.emacs.d/modules/editor/fold/config" t))
     (let
         ((doom-module-context
           [20 0 0 :editor snippets nil nil]))
       (doom-load "~/.emacs.d/modules/editor/snippets/config" t))
     (let
         ((doom-module-context
           [21 0 0 :emacs dired nil nil]))
       (doom-load "~/.emacs.d/modules/emacs/dired/config" t))
     (let
         ((doom-module-context
           [22 0 0 :emacs electric nil nil]))
       (doom-load "~/.emacs.d/modules/emacs/electric/config" t))
     (let
         ((doom-module-context
           [23 0 0 :emacs undo nil nil]))
       (doom-load "~/.emacs.d/modules/emacs/undo/config" t))
     (let
         ((doom-module-context
           [24 0 0 :emacs vc nil nil]))
       (doom-load "~/.emacs.d/modules/emacs/vc/config" t))
     (let
         ((doom-module-context
           [25 0 0 :checkers syntax nil nil]))
       (doom-load "~/.emacs.d/modules/checkers/syntax/config" t))
     (let
         ((doom-module-context
           [26 0 0 :checkers spell
               (+flyspell)
               nil]))
       (doom-load "~/.emacs.d/modules/checkers/spell/config" t))
     (let
         ((doom-module-context
           [27 0 0 :checkers grammar nil nil]))
       (doom-load "~/.emacs.d/modules/checkers/grammar/config" t))
     (let
         ((doom-module-context
           [28 0 0 :tools eval
               (+overlay)
               nil]))
       (doom-load "~/.emacs.d/modules/tools/eval/config" t))
     (let
         ((doom-module-context
           [29 0 0 :tools lookup nil nil]))
       (doom-load "~/.emacs.d/modules/tools/lookup/config" t))
     (let
         ((doom-module-context
           [30 0 0 :tools magit nil nil]))
       (doom-load "~/.emacs.d/modules/tools/magit/config" t))
     (let
         ((doom-module-context
           [31 0 0 :tools pdf nil nil]))
       (doom-load "~/.emacs.d/modules/tools/pdf/config" t))
     (let
         ((doom-module-context
           [33 0 0 :os tty nil nil]))
       (doom-load "~/.emacs.d/modules/os/tty/config" t))
     (let
         ((doom-module-context
           [34 0 0 :lang cc
               (+lsp)
               nil]))
       (doom-load "~/.emacs.d/modules/lang/cc/config" t))
     (let
         ((doom-module-context
           [35 0 0 :lang emacs-lisp nil nil]))
       (doom-load "~/.emacs.d/modules/lang/emacs-lisp/config" t))
     (let
         ((doom-module-context
           [36 0 0 :lang java
               (+lsp)
               nil]))
       (doom-load "~/.emacs.d/modules/lang/java/config" t))
     (let
         ((doom-module-context
           [37 0 0 :lang javascript nil nil]))
       (doom-load "~/.emacs.d/modules/lang/javascript/config" t))
     (let
         ((doom-module-context
           [38 0 0 :lang julia nil nil]))
       (doom-load "~/.emacs.d/modules/lang/julia/config" t))
     (let
         ((doom-module-context
           [39 0 0 :lang latex nil nil]))
       (doom-load "~/.emacs.d/modules/lang/latex/config" t))
     (let
         ((doom-module-context
           [40 0 0 :lang markdown nil nil]))
       (doom-load "~/.emacs.d/modules/lang/markdown/config" t))
     (let
         ((doom-module-context
           [41 0 0 :lang org nil nil]))
       (doom-load "~/.emacs.d/modules/lang/org/config" t))
     (let
         ((doom-module-context
           [42 0 0 :lang rust
               (+lsp)
               nil]))
       (doom-load "~/.emacs.d/modules/lang/rust/config" t))
     (let
         ((doom-module-context
           [43 0 0 :lang sh nil nil]))
       (doom-load "~/.emacs.d/modules/lang/sh/config" t))
     (let
         ((doom-module-context
           [44 0 0 :app calendar nil nil]))
       (doom-load "~/.emacs.d/modules/app/calendar/config" t))
     (let
         ((doom-module-context
           [45 0 0 :config default
               (+bindings +smartparens)
               nil]))
       (doom-load "~/.emacs.d/modules/config/default/config" t))
     (doom-run-hooks 'doom-after-modules-config-hook)
     (let
         ((doom-module-context
           [1 105 -105 :user nil nil nil]))
       (doom-load
        (file-name-concat doom-user-dir "config")
        t))
     (if
         (eq custom-file old-custom-file)
         (progn
           (doom-load custom-file 'noerror)))))
 ((doom-context modules init cli t)))

;;;; 15
((if
     (or
      (doom-context-p 'init)
      (doom-context-p 'reload))
     (let
         ((doom-context doom-context))
       (let
           ((tail
             (ensure-list 'modules)))
         (while tail
           (let
               ((context
                 (car tail)))
             (doom-context-push context)
             (setq tail
                   (cdr tail)))))
       (set 'doom-modules '#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data
                                         ((:core)
                                          (:path "/home/max/.emacs.d/lisp/" :depth -110)
                                          (:user)
                                          (:path "/home/max/.doom.d/" :depth
                                                 (-105 . 105))
                                          (:config . use-package)
                                          (:path "/home/max/.emacs.d/modules/config/use-package" :depth -111)
                                          (:completion . company)
                                          (:path "/home/max/.emacs.d/modules/completion/company" :flags nil)
                                          (:completion . corfu)
                                          (:path "/home/max/.emacs.d/modules/completion/corfu" :flags
                                                 (+orderless))
                                          (:completion . vertico)
                                          (:path "/home/max/.emacs.d/modules/completion/vertico" :flags nil)
                                          (:ui . doom)
                                          (:path "/home/max/.emacs.d/modules/ui/doom" :flags nil)
                                          (:ui . doom-dashboard)
                                          (:path "/home/max/.emacs.d/modules/ui/doom-dashboard" :flags nil)
                                          (:ui . hl-todo)
                                          (:path "/home/max/.emacs.d/modules/ui/hl-todo" :flags nil)
                                          (:ui . modeline)
                                          (:path "/home/max/.emacs.d/modules/ui/modeline" :flags nil)
                                          (:ui . ophints)
                                          (:path "/home/max/.emacs.d/modules/ui/ophints" :flags nil)
                                          (:ui . popup)
                                          (:path "/home/max/.emacs.d/modules/ui/popup" :flags
                                                 (+defaults))
                                          (:ui . treemacs)
                                          (:path "/home/max/.emacs.d/modules/ui/treemacs" :flags nil)
                                          (:ui . vc-gutter)
                                          (:path "/home/max/.emacs.d/modules/ui/vc-gutter" :flags
                                                 (+pretty))
                                          (:ui . vi-tilde-fringe)
                                          (:path "/home/max/.emacs.d/modules/ui/vi-tilde-fringe" :flags nil)
                                          (:ui . workspaces)
                                          (:path "/home/max/.emacs.d/modules/ui/workspaces" :flags nil)
                                          (:ui . zen)
                                          (:path "/home/max/.emacs.d/modules/ui/zen" :flags nil)
                                          (:editor . evil)
                                          (:path "/home/max/.emacs.d/modules/editor/evil" :flags
                                                 (+everywhere))
                                          (:editor . file-templates)
                                          (:path "/home/max/.emacs.d/modules/editor/file-templates" :flags nil)
                                          (:editor . fold)
                                          (:path "/home/max/.emacs.d/modules/editor/fold" :flags nil)
                                          (:editor . snippets)
                                          (:path "/home/max/.emacs.d/modules/editor/snippets" :flags nil)
                                          (:emacs . dired)
                                          (:path "/home/max/.emacs.d/modules/emacs/dired" :flags nil)
                                          (:emacs . electric)
                                          (:path "/home/max/.emacs.d/modules/emacs/electric" :flags nil)
                                          (:emacs . undo)
                                          (:path "/home/max/.emacs.d/modules/emacs/undo" :flags nil)
                                          (:emacs . vc)
                                          (:path "/home/max/.emacs.d/modules/emacs/vc" :flags nil)
                                          (:checkers . syntax)
                                          (:path "/home/max/.emacs.d/modules/checkers/syntax" :flags nil)
                                          (:checkers . spell)
                                          (:path "/home/max/.emacs.d/modules/checkers/spell" :flags
                                                 (+flyspell))
                                          (:checkers . grammar)
                                          (:path "/home/max/.emacs.d/modules/checkers/grammar" :flags nil)
                                          (:tools . eval)
                                          (:path "/home/max/.emacs.d/modules/tools/eval" :flags
                                                 (+overlay))
                                          (:tools . lookup)
                                          (:path "/home/max/.emacs.d/modules/tools/lookup" :flags nil)
                                          (:tools . magit)
                                          (:path "/home/max/.emacs.d/modules/tools/magit" :flags nil)
                                          (:tools . pdf)
                                          (:path "/home/max/.emacs.d/modules/tools/pdf" :flags nil)
                                          (:tools . tmux)
                                          (:path "/home/max/.emacs.d/modules/tools/tmux" :flags nil)
                                          (:os . tty)
                                          (:path "/home/max/.emacs.d/modules/os/tty" :flags nil)
                                          (:lang . cc)
                                          (:path "/home/max/.emacs.d/modules/lang/cc" :flags
                                                 (+lsp))
                                          (:lang . emacs-lisp)
                                          (:path "/home/max/.emacs.d/modules/lang/emacs-lisp" :flags nil)
                                          (:lang . java)
                                          (:path "/home/max/.emacs.d/modules/lang/java" :flags
                                                 (+lsp))
                                          (:lang . javascript)
                                          (:path "/home/max/.emacs.d/modules/lang/javascript" :flags nil)
                                          (:lang . julia)
                                          (:path "/home/max/.emacs.d/modules/lang/julia" :flags nil)
                                          (:lang . latex)
                                          (:path "/home/max/.emacs.d/modules/lang/latex" :flags nil)
                                          (:lang . markdown)
                                          (:path "/home/max/.emacs.d/modules/lang/markdown" :flags nil)
                                          (:lang . org)
                                          (:path "/home/max/.emacs.d/modules/lang/org" :flags nil)
                                          (:lang . rust)
                                          (:path "/home/max/.emacs.d/modules/lang/rust" :flags
                                                 (+lsp))
                                          (:lang . sh)
                                          (:path "/home/max/.emacs.d/modules/lang/sh" :flags nil)
                                          (:app . calendar)
                                          (:path "/home/max/.emacs.d/modules/app/calendar" :flags nil)
                                          (:config . default)
                                          (:path "/home/max/.emacs.d/modules/config/default" :flags
                                                 (+bindings +smartparens)))))
       (set 'doom-disabled-packages 'nil)
       (setplist ':core
                 '(nil
                   [0 -110 -110 :core nil nil nil]))
       (setplist ':user
                 '(nil
                   [1 105 -105 :user nil nil nil]))
       (setplist ':completion
                 '(company
                   [3 0 0 :completion company nil nil]
                   corfu
                   [4 0 0 :completion corfu
                      (+orderless)
                      nil]
                   vertico
                   [5 0 0 :completion vertico nil nil]))
       (setplist ':ui
                 '(doom
                   [6 0 0 :ui doom nil nil]
                   doom-dashboard
                   [7 0 0 :ui doom-dashboard nil nil]
                   hl-todo
                   [8 0 0 :ui hl-todo nil nil]
                   modeline
                   [9 0 0 :ui modeline nil nil]
                   ophints
                   [10 0 0 :ui ophints nil nil]
                   popup
                   [11 0 0 :ui popup
                       (+defaults)
                       nil]
                   treemacs
                   [12 0 0 :ui treemacs nil nil]
                   vc-gutter
                   [13 0 0 :ui vc-gutter
                       (+pretty)
                       nil]
                   vi-tilde-fringe
                   [14 0 0 :ui vi-tilde-fringe nil nil]
                   workspaces
                   [15 0 0 :ui workspaces nil nil]
                   zen
                   [16 0 0 :ui zen nil nil]))
       (setplist ':editor
                 '(evil
                   [17 0 0 :editor evil
                       (+everywhere)
                       nil]
                   file-templates
                   [18 0 0 :editor file-templates nil nil]
                   fold
                   [19 0 0 :editor fold nil nil]
                   snippets
                   [20 0 0 :editor snippets nil nil]))
       (setplist ':emacs
                 '(dired
                   [21 0 0 :emacs dired nil nil]
                   electric
                   [22 0 0 :emacs electric nil nil]
                   undo
                   [23 0 0 :emacs undo nil nil]
                   vc
                   [24 0 0 :emacs vc nil nil]))
       (setplist ':checkers
                 '(syntax
                   [25 0 0 :checkers syntax nil nil]
                   spell
                   [26 0 0 :checkers spell
                       (+flyspell)
                       nil]
                   grammar
                   [27 0 0 :checkers grammar nil nil]))
       (setplist ':tools
                 '(eval
                   [28 0 0 :tools eval
                       (+overlay)
                       nil]
                   lookup
                   [29 0 0 :tools lookup nil nil]
                   magit
                   [30 0 0 :tools magit nil nil]
                   pdf
                   [31 0 0 :tools pdf nil nil]
                   tmux
                   [32 0 0 :tools tmux nil nil]))
       (setplist ':os
                 '(tty
                   [33 0 0 :os tty nil nil]))
       (setplist ':lang
                 '(cc
                   [34 0 0 :lang cc
                       (+lsp)
                       nil]
                   emacs-lisp
                   [35 0 0 :lang emacs-lisp nil nil]
                   java
                   [36 0 0 :lang java
                       (+lsp)
                       nil]
                   javascript
                   [37 0 0 :lang javascript nil nil]
                   julia
                   [38 0 0 :lang julia nil nil]
                   latex
                   [39 0 0 :lang latex nil nil]
                   markdown
                   [40 0 0 :lang markdown nil nil]
                   org
                   [41 0 0 :lang org nil nil]
                   rust
                   [42 0 0 :lang rust
                       (+lsp)
                       nil]
                   sh
                   [43 0 0 :lang sh nil nil]))
       (setplist ':app
                 '(calendar
                   [44 0 0 :app calendar nil nil]))
       (setplist ':config
                 '(use-package
                    [2 -111 -111 :config use-package nil nil]
                    default
                    [45 0 0 :config default
                        (+bindings +smartparens)
                        nil]))
       (let
           ((old-custom-file custom-file))
         (let
             ((doom-module-context
               [2 -111 -111 :config use-package nil nil]))
           (doom-load "~/.emacs.d/modules/config/use-package/init" t))
         (let
             ((doom-module-context
               [0 -110 -110 :core nil nil nil]))
           (doom-load
            (file-name-concat doom-core-dir "init")
            t))
         (doom-run-hooks 'doom-before-modules-init-hook)
         (let
             ((doom-module-context
               [17 0 0 :editor evil
                   (+everywhere)
                   nil]))
           (doom-load "~/.emacs.d/modules/editor/evil/init" t))
         (doom-run-hooks 'doom-after-modules-init-hook)
         (doom-run-hooks 'doom-before-modules-config-hook)
         (let
             ((doom-module-context
               [3 0 0 :completion company nil nil]))
           (doom-load "~/.emacs.d/modules/completion/company/config" t))
         (let
             ((doom-module-context
               [4 0 0 :completion corfu
                  (+orderless)
                  nil]))
           (doom-load "~/.emacs.d/modules/completion/corfu/config" t))
         (let
             ((doom-module-context
               [5 0 0 :completion vertico nil nil]))
           (doom-load "~/.emacs.d/modules/completion/vertico/config" t))
         (let
             ((doom-module-context
               [6 0 0 :ui doom nil nil]))
           (doom-load "~/.emacs.d/modules/ui/doom/config" t))
         (let
             ((doom-module-context
               [7 0 0 :ui doom-dashboard nil nil]))
           (doom-load "~/.emacs.d/modules/ui/doom-dashboard/config" t))
         (let
             ((doom-module-context
               [8 0 0 :ui hl-todo nil nil]))
           (doom-load "~/.emacs.d/modules/ui/hl-todo/config" t))
         (let
             ((doom-module-context
               [9 0 0 :ui modeline nil nil]))
           (doom-load "~/.emacs.d/modules/ui/modeline/config" t))
         (let
             ((doom-module-context
               [10 0 0 :ui ophints nil nil]))
           (doom-load "~/.emacs.d/modules/ui/ophints/config" t))
         (let
             ((doom-module-context
               [11 0 0 :ui popup
                   (+defaults)
                   nil]))
           (doom-load "~/.emacs.d/modules/ui/popup/config" t))
         (let
             ((doom-module-context
               [12 0 0 :ui treemacs nil nil]))
           (doom-load "~/.emacs.d/modules/ui/treemacs/config" t))
         (let
             ((doom-module-context
               [13 0 0 :ui vc-gutter
                   (+pretty)
                   nil]))
           (doom-load "~/.emacs.d/modules/ui/vc-gutter/config" t))
         (let
             ((doom-module-context
               [15 0 0 :ui workspaces nil nil]))
           (doom-load "~/.emacs.d/modules/ui/workspaces/config" t))
         (let
             ((doom-module-context
               [16 0 0 :ui zen nil nil]))
           (doom-load "~/.emacs.d/modules/ui/zen/config" t))
         (let
             ((doom-module-context
               [17 0 0 :editor evil
                   (+everywhere)
                   nil]))
           (doom-load "~/.emacs.d/modules/editor/evil/config" t))
         (let
             ((doom-module-context
               [18 0 0 :editor file-templates nil nil]))
           (doom-load "~/.emacs.d/modules/editor/file-templates/config" t))
         (let
             ((doom-module-context
               [19 0 0 :editor fold nil nil]))
           (doom-load "~/.emacs.d/modules/editor/fold/config" t))
         (let
             ((doom-module-context
               [20 0 0 :editor snippets nil nil]))
           (doom-load "~/.emacs.d/modules/editor/snippets/config" t))
         (let
             ((doom-module-context
               [21 0 0 :emacs dired nil nil]))
           (doom-load "~/.emacs.d/modules/emacs/dired/config" t))
         (let
             ((doom-module-context
               [22 0 0 :emacs electric nil nil]))
           (doom-load "~/.emacs.d/modules/emacs/electric/config" t))
         (let
             ((doom-module-context
               [23 0 0 :emacs undo nil nil]))
           (doom-load "~/.emacs.d/modules/emacs/undo/config" t))
         (let
             ((doom-module-context
               [24 0 0 :emacs vc nil nil]))
           (doom-load "~/.emacs.d/modules/emacs/vc/config" t))
         (let
             ((doom-module-context
               [25 0 0 :checkers syntax nil nil]))
           (doom-load "~/.emacs.d/modules/checkers/syntax/config" t))
         (let
             ((doom-module-context
               [26 0 0 :checkers spell
                   (+flyspell)
                   nil]))
           (doom-load "~/.emacs.d/modules/checkers/spell/config" t))
         (let
             ((doom-module-context
               [27 0 0 :checkers grammar nil nil]))
           (doom-load "~/.emacs.d/modules/checkers/grammar/config" t))
         (let
             ((doom-module-context
               [28 0 0 :tools eval
                   (+overlay)
                   nil]))
           (doom-load "~/.emacs.d/modules/tools/eval/config" t))
         (let
             ((doom-module-context
               [29 0 0 :tools lookup nil nil]))
           (doom-load "~/.emacs.d/modules/tools/lookup/config" t))
         (let
             ((doom-module-context
               [30 0 0 :tools magit nil nil]))
           (doom-load "~/.emacs.d/modules/tools/magit/config" t))
         (let
             ((doom-module-context
               [31 0 0 :tools pdf nil nil]))
           (doom-load "~/.emacs.d/modules/tools/pdf/config" t))
         (let
             ((doom-module-context
               [33 0 0 :os tty nil nil]))
           (doom-load "~/.emacs.d/modules/os/tty/config" t))
         (let
             ((doom-module-context
               [34 0 0 :lang cc
                   (+lsp)
                   nil]))
           (doom-load "~/.emacs.d/modules/lang/cc/config" t))
         (let
             ((doom-module-context
               [35 0 0 :lang emacs-lisp nil nil]))
           (doom-load "~/.emacs.d/modules/lang/emacs-lisp/config" t))
         (let
             ((doom-module-context
               [36 0 0 :lang java
                   (+lsp)
                   nil]))
           (doom-load "~/.emacs.d/modules/lang/java/config" t))
         (let
             ((doom-module-context
               [37 0 0 :lang javascript nil nil]))
           (doom-load "~/.emacs.d/modules/lang/javascript/config" t))
         (let
             ((doom-module-context
               [38 0 0 :lang julia nil nil]))
           (doom-load "~/.emacs.d/modules/lang/julia/config" t))
         (let
             ((doom-module-context
               [39 0 0 :lang latex nil nil]))
           (doom-load "~/.emacs.d/modules/lang/latex/config" t))
         (let
             ((doom-module-context
               [40 0 0 :lang markdown nil nil]))
           (doom-load "~/.emacs.d/modules/lang/markdown/config" t))
         (let
             ((doom-module-context
               [41 0 0 :lang org nil nil]))
           (doom-load "~/.emacs.d/modules/lang/org/config" t))
         (let
             ((doom-module-context
               [42 0 0 :lang rust
                   (+lsp)
                   nil]))
           (doom-load "~/.emacs.d/modules/lang/rust/config" t))
         (let
             ((doom-module-context
               [43 0 0 :lang sh nil nil]))
           (doom-load "~/.emacs.d/modules/lang/sh/config" t))
         (let
             ((doom-module-context
               [44 0 0 :app calendar nil nil]))
           (doom-load "~/.emacs.d/modules/app/calendar/config" t))
         (let
             ((doom-module-context
               [45 0 0 :config default
                   (+bindings +smartparens)
                   nil]))
           (doom-load "~/.emacs.d/modules/config/default/config" t))
         (doom-run-hooks 'doom-after-modules-config-hook)
         (let
             ((doom-module-context
               [1 105 -105 :user nil nil nil]))
           (doom-load
            (file-name-concat doom-user-dir "config")
            t))
         (if
             (eq custom-file old-custom-file)
             (progn
               (doom-load custom-file 'noerror))))))
 nil)

;;;; 16
((eval-buffer #<buffer  *load*-638528> nil "/home/max/.emacs.d/.local/etc/@/init.29.el" nil t)
 ((eval-buffer-list #<buffer  *load*-638528> #<buffer  *load*-278617> #<buffer  *load*>)
  (standard-output)
  (lexical-binding . t)
  (standard-input . #<buffer  *load*-638528>)
  (macroexp--dynvars auto-minor-mode-magic-alist auto-minor-mode-alist gcmh-mode global-hide-mode-line-mode better-jumper-mode dtrt-indent-mode dtrt-indent-global-mode show-smartparens-global-mode smartparens-global-mode smartparens-global-strict-mode smartparens-mode-map ws-butler-global-mode which-key-mode global-smudge-remote-mode exwm-xsettings-mode exwm-xim-mode exwm-systemtray-mode exwm-randr-mode exwm-background-mode corfu-popupinfo-mode corfu-indexed-mode corfu-history-mode corfu-echo-mode global-corfu-mode corfu-terminal-mode vertico-unobtrusive-mode vertico-reverse-mode vertico-multiform-mode vertico-mouse-mode vertico-indexed-mode vertico-grid-mode vertico-flat-mode vertico-buffer-mode vertico-mode marginalia-mode solaire-global-mode global-hl-todo-mode doom-modeline-mode global-anzu-mode evil-goggles-mode projectile-mode global-diff-hl-show-hunk-mouse-mode diff-hl-margin-mode diff-hl-flydiff-mode global-diff-hl-amend-mode global-diff-hl-mode global-vi-tilde-fringe-mode persp-mode global-visual-fill-column-mode global-writeroom-mode expand-region-subword-enabled expand-region-smart-cursor expand-region-exclude-text-mode-expansions expand-region-reset-fast-key expand-region-contract-fast-key expand-region-fast-keys-enabled expand-region-skip-whitespace expand-region-autocopy-register expand-region-guess-python-mode expand-region-preferred-python-mode evil-escape-mode evil-lion-mode evil-snipe-override-mode evil-snipe-mode global-evil-surround-mode evil-traces-mode global-evil-visualstar-mode vimish-fold-global-mode global-evil-vimish-fold-mode dirvish-side-follow-mode dirvish-peek-mode dirvish-override-dired-mode diredfl-global-mode undo-fu-session-global-mode vundo-unicode-symbols vundo-ascii-symbols flyspell-lazy-mode eros-mode dumb-jump-mode dumb-jump-mode-map xclip-mode global-kkp-mode disaster-find-build-root-functions modern-c++-font-lock-global-mode lsp-treemacs-sync-mode dap-ui-controls-mode dap-ui-mode dap-tooltip-mode dap-auto-configure-mode dap-mode ace-window-posframe-mode ace-window-display-mode treemacs-tag-follow-mode treemacs-project-follow-mode treemacs-peek-mode treemacs-indicate-top-scroll-mode treemacs-git-commit-diff-mode eldoc-minor-mode-string semantic-token-modifier-cache lsp-dired-mode npm-global-mode yas-global-mode pdf-virtual-global-minor-mode pdf-tools-handle-upgrades pdf-occur-global-minor-mode shell-command-with-editor-mode magit-wip-before-change-mode magit-wip-after-apply-mode magit-wip-after-save-mode magit-wip-mode magit-auto-revert-mode magit-define-global-key-bindings git-rebase-filename-regexp dired-async-mode async-bytecomp-package-mode global-flycheck-mode project-mode-line project-prefix-map company-tng-mode global-company-mode orgtbl-exp-regexp org-num-skip-unnumbered org-num-skip-tags org-num-skip-footnotes org-num-skip-commented org-num-max-level org-num-face org-element-use-cache global-dash-fontify-mode elnode-wikiserver-wikiroot elnode-wikiserver-wikiroot-default elnode-do-init elnode-config-directory elnode-hostpath-default-table elnode-config-directory straight-x-pinned-packages +org-capture-frame-parameters inferior-julia-program-name +eval-runners +popup-defaults +popup--display-buffer-alist embark-quit-after-action +company-backend-alist doom-customize-theme-hook projectile-require-project-root projectile-enable-caching projectile-project-root doom-big-font-mode doom-big-font-increment doom-big-font doom-font-increment doom-docs-dir doom-debug-mode doom-debug-variables doom-before-reload-hook doom-after-reload-hook doom-fallback-buffer-name doom-real-buffer-p doom-unreal-buffer-functions doom-real-buffer-functions doom-incremental-idle-timer doom-incremental-first-idle-timer doom-incremental-packages doom-inhibit-local-var-hooks)
  (current-load-list
   (require . bytecomp)
   (defun . describe-personal-keybindings)
   (defun . bind-keys*)
   (defun . bind-keys)
   (defun . bind-key*)
   (defun . unbind-key)
   (defun . bind-key)
   (defun . use-package-lint)
   (defun . use-package-jump-to-package-form)
   (defun . use-package-handler/:ensure)
   (defun . use-package-normalize/:ensure)
   (defun . use-package-handler/:diminish)
   (defun . use-package-normalize/:diminish)
   (defun . use-package-handler/:delight)
   (defun . use-package-normalize/:delight)
   (defun . use-package)
   (defun . use-package-handler/:bind-keymap*)
   (defun . use-package-handler/:bind-keymap)
   (defun . use-package-normalize/:bind-keymap*)
   (defun . use-package-normalize/:bind-keymap)
   (defun . use-package-handler/:bind)
   (defun . use-package-autoloads/:bind*)
   (defun . use-package-autoloads/:bind)
   (defun . use-package-normalize/:bind*)
   (defun . use-package-normalize/:bind)
   (defun . use-package-normalize-binder)
   (defun . use-package-autoload-keymap)
   (defun . auto-minor-mode-set)
   auto-minor-mode-magic-alist auto-minor-mode-alist
   (defun . gcmh-mode)
   gcmh-mode
   (defun . turn-off-hide-mode-line-mode)
   (defun . turn-on-hide-mode-line-mode)
   (defun . global-hide-mode-line-mode)
   global-hide-mode-line-mode
   (defun . hide-mode-line-mode)
   (defun . highlight-numbers-mode)
   (defun . rainbow-delimiters-mode-disable)
   (defun . rainbow-delimiters-mode-enable)
   (defun . rainbow-delimiters-mode)
   (defun . restart-emacs-start-new-emacs)
   (defun . restart-emacs-handle-command-line-args)
   (defun . better-jumper-mode)
   better-jumper-mode
   (defun . better-jumper-local-mode)
   (defun . turn-off-better-jumper-mode)
   (defun . turn-on-better-jumper-mode)
   (defun . better-jumper-set-jumps)
   (defun . better-jumper-get-jumps)
   (defun . better-jumper-clear-jumps)
   (defun . better-jumper-jump-newest)
   (defun . better-jumper-jump-forward)
   (defun . better-jumper-jump-backward)
   (defun . better-jumper-set-jump)
   dtrt-indent-mode
   (defun . dtrt-indent-global-mode)
   dtrt-indent-global-mode
   (defun . dtrt-indent-mode)
   (defun . turn-off-show-smartparens-mode)
   (defun . turn-on-show-smartparens-mode)
   (defun . show-smartparens-global-mode)
   show-smartparens-global-mode
   (defun . show-smartparens-mode)
   (defun . turn-off-smartparens-mode)
   (defun . turn-on-smartparens-mode)
   (defun . smartparens-global-mode)
   smartparens-global-mode
   (defun . turn-off-smartparens-strict-mode)
   (defun . turn-on-smartparens-strict-mode)
   (defun . smartparens-global-strict-mode)
   smartparens-global-strict-mode
   (defun . smartparens-strict-mode)
   (defun . smartparens-mode)
   (defun . sp-use-smartparens-bindings)
   (defun . sp-use-paredit-bindings)
   smartparens-mode-map
   (defun . sp-cheat-sheet)
   (defun . ws-butler-global-mode)
   ws-butler-global-mode
   (defun . ws-butler-mode)
   (defun . general-evil-setup)
   (defun . general-remove-advice)
   (defun . general-advice-remove)
   (defun . general-add-advice)
   (defun . general-advice-add)
   (defun . general-remove-hook)
   (defun . general-add-hook)
   (defun . general-auto-unbind-keys)
   (defun . general-swap-key)
   (defun . general-translate-key)
   (defun . general-predicate-dispatch)
   (defun . general-key-dispatch)
   (defun . general-simulate-key)
   (defun . general-simulate-keys)
   (defun . general-key)
   (defun . general-describe-keybindings)
   (defun . general-unbind)
   (defun . general-defs)
   (defun . general-create-definer)
   (defun . general-def)
   (defun . general-evil-define-key)
   (defun . general-emacs-define-key)
   (defun . general-define-key)
   (defun . which-key-show-full-minor-mode-keymap)
   (defun . which-key-show-minor-mode-keymap)
   (defun . which-key-show-full-keymap)
   (defun . which-key-show-keymap)
   (defun . which-key-C-h-dispatch)
   (defun . which-key-undo-key)
   (defun . which-key-dump-bindings)
   (defun . which-key-show-full-major-mode)
   (defun . which-key-show-major-mode)
   (defun . which-key-show-top-level)
   (defun . which-key-show-previous-page-cycle)
   (defun . which-key-show-next-page-cycle)
   (defun . which-key-show-previous-page-no-cycle)
   (defun . which-key-show-next-page-no-cycle)
   (defun . which-key-show-standard-help)
   (defun . which-key-reload-key-sequence)
   (defun . which-key-add-major-mode-key-based-replacements)
   (defun . which-key-add-key-based-replacements)
   (defun . which-key-add-keymap-based-replacements)
   (defun . which-key-setup-minibuffer)
   (defun . which-key-setup-side-window-bottom)
   (defun . which-key-setup-side-window-right-bottom)
   (defun . which-key-setup-side-window-right)
   (defun . which-key-mode)
   which-key-mode
   (defun . oauth2-url-retrieve)
   (defun . oauth2-url-retrieve-synchronously)
   (defun . oauth2-auth-and-store)
   (defun . oauth2-auth)
   (defun . oauth2-refresh-access)
   (defun . global-smudge-remote-mode)
   global-smudge-remote-mode
   (defun . smudge-select-device)
   (defun . smudge-create-playlist)
   (defun . smudge-featured-playlists)
   (defun . smudge-user-playlists)
   (defun . smudge-my-playlists)
   (defun . smudge-recently-played)
   (defun . smudge-playlist-search)
   (defun . smudge-track-search)
   (defun . exwm-xsettings-mode)
   exwm-xsettings-mode
   (defun . exwm-xim-mode)
   exwm-xim-mode
   (defun . exwm-workspace-toggle-minibuffer)
   (defun . exwm-workspace-detach-minibuffer)
   (defun . exwm-workspace-attach-minibuffer)
   (defun . exwm-workspace-switch-to-buffer)
   (defun . exwm-workspace-move-window)
   (defun . exwm-workspace-delete)
   (defun . exwm-workspace-add)
   (defun . exwm-workspace-move)
   (defun . exwm-workspace-swap)
   (defun . exwm-workspace-switch-create)
   (defun . exwm-workspace-switch)
   (defun . exwm-workspace--minibuffer-own-frame-p)
   (defun . exwm-workspace--current-height)
   (defun . exwm-workspace--get-geometry)
   (defun . exwm-systemtray-mode)
   exwm-systemtray-mode
   (defun . exwm-randr-refresh)
   (defun . exwm-randr-mode)
   exwm-randr-mode
   (defun . exwm-layout-toggle-mode-line)
   (defun . exwm-layout-show-mode-line)
   (defun . exwm-layout-hide-mode-line)
   (defun . exwm-layout-shrink-window-horizontally)
   (defun . exwm-layout-shrink-window)
   (defun . exwm-layout-enlarge-window-horizontally)
   (defun . exwm-layout-enlarge-window)
   (defun . exwm-layout-toggle-fullscreen)
   (defun . exwm-layout-unset-fullscreen)
   (defun . exwm-layout-set-fullscreen)
   (defun . exwm-input-invoke-factory)
   (defun . exwm-input-send-simulation-key)
   (defun . exwm-input-set-simulation-key)
   (defun . exwm-input-send-next-key)
   (defun . exwm-input-toggle-keyboard)
   (defun . exwm-input-release-keyboard)
   (defun . exwm-input-grab-keyboard)
   (defun . exwm-input-set-key)
   (defun . exwm-floating-hide)
   (defun . exwm-floating-toggle-floating)
   (defun . exwm-background-mode)
   exwm-background-mode
   (defun . exwm-enable)
   (defun . exwm-exit)
   (defun . exwm-init)
   (defun . exwm-restart)
   (defun . company-dict)
   (defun . company-dict-refresh)
   (defun . cape-keyword)
   (defun . cape-emoji)
   (defun . cape-rfc1345)
   (defun . cape-sgml)
   (defun . cape-tex)
   (defun . cape-prefix-map)
   (defun . cape-capf-super)
   (defun . cape-capf-silent)
   (defun . cape-capf-purify)
   (defun . cape-capf-properties)
   (defun . cape-capf-prefix-length)
   (defun . cape-capf-predicate)
   (defun . cape-capf-passthrough)
   (defun . cape-capf-noninterruptible)
   (defun . cape-capf-nonexclusive)
   (defun . cape-capf-inside-string)
   (defun . cape-capf-inside-faces)
   (defun . cape-capf-inside-comment)
   (defun . cape-capf-inside-code)
   (defun . cape-capf-debug)
   (defun . cape-capf-case-fold)
   (defun . cape-capf-buster)
   (defun . cape-capf-accept-all)
   (defun . cape-wrap-accept-all)
   (defun . cape-wrap-purify)
   (defun . cape-wrap-inside-string)
   (defun . cape-wrap-inside-comment)
   (defun . cape-wrap-inside-code)
   (defun . cape-wrap-inside-faces)
   (defun . cape-wrap-prefix-length)
   (defun . cape-wrap-noninterruptible)
   (defun . cape-wrap-case-fold)
   (defun . cape-wrap-silent)
   (defun . cape-wrap-predicate)
   (defun . cape-wrap-nonexclusive)
   (defun . cape-wrap-properties)
   (defun . cape-wrap-passthrough)
   (defun . cape-wrap-buster)
   (defun . cape-wrap-debug)
   (defun . cape-wrap-super)
   (defun . cape-capf-interactive)
   (defun . cape-interactive)
   (defun . cape-company-to-capf)
   (defun . cape-line)
   (defun . cape-abbrev)
   (defun . cape-dict)
   (defun . cape-dabbrev)
   (defun . cape-elisp-block)
   (defun . cape-elisp-symbol)
   (defun . cape-file)
   (defun . cape-history)
   (defun . popon-kill-all)
   (defun . popon-x-y-at-pos)
   (defun . popon-x-y-at-posn)
   (defun . popon-update)
   (defun . popon-redisplay)
   (defun . popon-kill)
   (defun . popon-create)
   (defun . popon-text)
   (defun . popon-buffer)
   (defun . popon-window)
   (defun . popon-size)
   (defun . popon-position)
   (defun . popon-properties)
   (defun . popon-put)
   (defun . popon-get)
   (defun . popon-live-p)
   (defun . poponp)
   (defun . corfu-quick-complete)
   (defun . corfu-quick-insert)
   (defun . corfu-quick-jump)
   (defun . corfu-popupinfo-mode)
   corfu-popupinfo-mode
   (defun . corfu-info-location)
   (defun . corfu-info-documentation)
   (defun . corfu-indexed-mode)
   corfu-indexed-mode
   (defun . corfu-history-mode)
   corfu-history-mode
   (defun . corfu-echo-mode)
   corfu-echo-mode
   (defun . global-corfu-mode)
   global-corfu-mode
   (defun . corfu-mode)
   (defun . corfu-terminal-mode)
   corfu-terminal-mode
   (defun . yasnippet-capf)
   (defun . vertico-unobtrusive-mode)
   vertico-unobtrusive-mode
   (defun . vertico-suspend)
   (defun . vertico-reverse-mode)
   vertico-reverse-mode
   (defun . vertico-repeat)
   (defun . vertico-repeat-select)
   (defun . vertico-repeat-previous)
   (defun . vertico-repeat-next)
   (defun . vertico-repeat-save)
   (defun . vertico-quick-insert)
   (defun . vertico-quick-exit)
   (defun . vertico-quick-jump)
   (defun . vertico-multiform-mode)
   vertico-multiform-mode
   (defun . vertico-mouse-mode)
   vertico-mouse-mode
   (defun . vertico-indexed-mode)
   vertico-indexed-mode
   (defun . vertico-grid-mode)
   vertico-grid-mode
   (defun . vertico-flat-mode)
   vertico-flat-mode
   (defun . vertico-directory-tidy)
   (defun . vertico-directory-delete-word)
   (defun . vertico-directory-delete-char)
   (defun . vertico-directory-up)
   (defun . vertico-directory-enter)
   (defun . vertico-buffer-mode)
   vertico-buffer-mode
   (defun . vertico-mode)
   vertico-mode
   (defun . orderless-kwd-dispatch)
   (defun . orderless-ivy-re-builder)
   (defun . orderless-try-completion)
   (defun . orderless-all-completions)
   (defun . consult-dir)
   (defun . consult-dir-jump-file)
   (defun . consult-flycheck)
   (defun . embark-select)
   (defun . embark-export)
   (defun . embark-live)
   (defun . embark-collect)
   (defun . embark-become)
   (defun . embark-dwim)
   (defun . embark-act-all)
   (defun . embark-act)
   (defun . embark-prefix-help-command)
   (defun . embark-bindings-at-point)
   (defun . embark-bindings)
   (defun . embark-bindings-in-keymap)
   (defun . embark-eldoc-target-types)
   (defun . embark-eldoc-first-target)
   (defun . embark--record-this-command)
   (defun . marginalia-cycle)
   (defun . marginalia-mode)
   marginalia-mode
   (defun . wgrep-setup)
   (defun . consult-xref)
   (defun . consult-register-store)
   (defun . consult-register-load)
   (defun . consult-register)
   (defun . consult-register-format)
   (defun . consult-register-window)
   (defun . consult-org-agenda)
   (defun . consult-org-heading)
   (defun . consult-kmacro)
   (defun . consult-info)
   (defun . consult-imenu-multi)
   (defun . consult-imenu)
   (defun . consult-flymake)
   (defun . consult-compile-error)
   (defun . consult-man)
   (defun . consult-locate)
   (defun . consult-fd)
   (defun . consult-find)
   (defun . consult-ripgrep)
   (defun . consult-git-grep)
   (defun . consult-grep)
   (defun . consult-buffer-other-tab)
   (defun . consult-buffer-other-frame)
   (defun . consult-buffer-other-window)
   (defun . consult-project-buffer)
   (defun . consult-buffer)
   (defun . consult-theme)
   (defun . consult-minor-mode-menu)
   (defun . consult-isearch-history)
   (defun . consult-history)
   (defun . consult-complex-command)
   (defun . consult-bookmark)
   (defun . consult-yank-replace)
   (defun . consult-yank-pop)
   (defun . consult-yank-from-kill-ring)
   (defun . consult-mode-command)
   (defun . consult-recent-file)
   (defun . consult-goto-line)
   (defun . consult-focus-lines)
   (defun . consult-keep-lines)
   (defun . consult-line-multi)
   (defun . consult-line)
   (defun . consult-global-mark)
   (defun . consult-mark)
   (defun . consult-outline)
   (defun . consult-completion-in-region)
   (defun . consult-yasnippet)
   (defun . consult-yasnippet-visit-snippet-file)
   (defun . doom-themes-visual-bell-config)
   (defun . doom-themes-visual-bell-fn)
   (defun . doom-themes-treemacs-config)
   (defun . doom-themes-org-config)
   (defun . doom-themes-neotree-config)
   (defun . doom-themes-set-faces)
   (defun . doom-ref)
   (defun . doom-color)
   (defun . doom-lighten)
   (defun . doom-darken)
   (defun . doom-blend)
   (defun . doom-name-to-rgb)
   (defun . solaire-mode--prepare-for-theme-a)
   (defun . solaire-mode-reset-buffer)
   (defun . solaire-mode-reset)
   (defun . turn-off-solaire-mode)
   (defun . turn-on-solaire-mode)
   (defun . solaire-global-mode)
   solaire-global-mode
   (defun . solaire-mode)
   (defface . solaire-default-face)
   (defun . hl-todo-insert)
   (defun . hl-todo-flymake)
   (defun . hl-todo-rgrep)
   (defun . hl-todo-occur)
   (defun . hl-todo-previous)
   (defun . hl-todo-next)
   (defun . global-hl-todo-mode)
   global-hl-todo-mode
   (defun . hl-todo-mode)
   (defun . doom-modeline-env-setup-rust)
   (defun . doom-modeline-env-setup-elixir)
   (defun . doom-modeline-env-setup-go)
   (defun . doom-modeline-env-setup-perl)
   (defun . doom-modeline-env-setup-ruby)
   (defun . doom-modeline-env-setup-python)
   (defun . doom-modeline-mode)
   doom-modeline-mode
   (defun . doom-modeline-set-main-modeline)
   (defun . anzu-isearch-query-replace-regexp)
   (defun . anzu-isearch-query-replace)
   (defun . anzu-replace-at-cursor-thing)
   (defun . anzu-query-replace-regexp)
   (defun . anzu-query-replace)
   (defun . anzu-query-replace-at-cursor-thing)
   (defun . anzu-query-replace-at-cursor)
   (defun . global-anzu-mode)
   global-anzu-mode
   (defun . anzu-mode)
   (defun . evil-goggles-mode)
   evil-goggles-mode
   (defun . nerd-icons-icon-for-buffer)
   (defun . nerd-icons-icon-for-url)
   (defun . nerd-icons-icon-for-mode)
   (defun . nerd-icons-icon-for-extension)
   (defun . nerd-icons-icon-for-file)
   (defun . nerd-icons-icon-for-dir)
   (defun . nerd-icons-insert)
   (defun . nerd-icons-install-fonts)
   (defun . projectile-global-mode)
   (defun . projectile-mode)
   projectile-mode
   (defun . projectile-edit-dir-locals)
   (defun . projectile-browse-dirty-projects)
   (defun . projectile-commander)
   (defun . projectile-ibuffer)
   (defun . projectile-add-known-project)
   (defun . projectile-remove-current-project-from-known-projects)
   (defun . projectile-remove-known-project)
   (defun . projectile-reset-known-projects)
   (defun . projectile-clear-known-projects)
   (defun . projectile-cleanup-known-projects)
   (defun . projectile-find-file-in-known-projects)
   (defun . projectile-find-file-in-directory)
   (defun . projectile-switch-open-project)
   (defun . projectile-switch-project)
   (defun . projectile-repeat-last-command)
   (defun . projectile-run-project)
   (defun . projectile-package-project)
   (defun . projectile-install-project)
   (defun . projectile-test-project)
   (defun . projectile-compile-project)
   (defun . projectile-configure-project)
   (defun . projectile-recentf)
   (defun . projectile-vc)
   (defun . projectile-dired-other-frame)
   (defun . projectile-dired-other-window)
   (defun . projectile-dired)
   (defun . projectile-save-project-buffers)
   (defun . projectile-kill-buffers)
   (defun . projectile-replace-regexp)
   (defun . projectile-replace)
   (defun . projectile-run-vterm-other-window)
   (defun . projectile-run-vterm)
   (defun . projectile-run-term)
   (defun . projectile-run-ielm)
   (defun . projectile-run-eshell)
   (defun . projectile-run-shell)
   (defun . projectile-run-gdb)
   (defun . projectile-run-async-shell-command-in-root)
   (defun . projectile-run-shell-command-in-root)
   (defun . projectile-run-command-in-root)
   (defun . projectile-find-tag)
   (defun . projectile-regenerate-tags)
   (defun . projectile-ripgrep)
   (defun . projectile-ag)
   (defun . projectile-grep)
   (defun . projectile-toggle-between-implementation-and-test)
   (defun . projectile-find-implementation-or-test-other-frame)
   (defun . projectile-find-implementation-or-test-other-window)
   (defun . projectile-project-info)
   (defun . projectile-related-files-fn-test-with-suffix)
   (defun . projectile-related-files-fn-test-with-prefix)
   (defun . projectile-related-files-fn-extensions)
   (defun . projectile-related-files-fn-groups)
   (defun . projectile-find-related-file)
   (defun . projectile-find-related-file-other-frame)
   (defun . projectile-find-related-file-other-window)
   (defun . projectile-find-test-file)
   (defun . projectile-find-dir-other-frame)
   (defun . projectile-find-dir-other-window)
   (defun . projectile-find-dir)
   (defun . projectile-delete-dir-local-variable)
   (defun . projectile-add-dir-local-variable)
   (defun . projectile-toggle-project-read-only)
   (defun . projectile-find-file-other-frame)
   (defun . projectile-find-file-other-window)
   (defun . projectile-find-file)
   (defun . projectile-find-file-dwim-other-frame)
   (defun . projectile-find-file-dwim-other-window)
   (defun . projectile-find-file-dwim)
   (defun . projectile-find-other-file-other-frame)
   (defun . projectile-find-other-file-other-window)
   (defun . projectile-find-other-file)
   (defun . projectile-multi-occur)
   (defun . projectile-project-buffers-other-buffer)
   (defun . projectile-display-buffer)
   (defun . projectile-switch-to-buffer-other-frame)
   (defun . projectile-switch-to-buffer-other-window)
   (defun . projectile-switch-to-buffer)
   (defun . projectile-discover-projects-in-search-path)
   (defun . projectile-discover-projects-in-directory)
   (defun . projectile-cache-current-file)
   (defun . projectile-purge-dir-from-cache)
   (defun . projectile-purge-file-from-cache)
   (defun . projectile-invalidate-cache)
   (defun . projectile-version)
   (defun . treemacs-projectile)
   (defun . diff-hl-show-hunk-posframe)
   (defun . global-diff-hl-show-hunk-mouse-mode)
   global-diff-hl-show-hunk-mouse-mode
   (defun . diff-hl-show-hunk-mouse-mode)
   (defun . diff-hl-show-hunk)
   (defun . diff-hl-show-hunk-next)
   (defun . diff-hl-show-hunk-previous)
   (defun . diff-hl-show-hunk-inline-popup)
   (defun . diff-hl-margin-local-mode)
   (defun . diff-hl-margin-mode)
   diff-hl-margin-mode
   (defun . diff-hl-inline-popup-show)
   (defun . diff-hl-inline-popup-hide)
   (defun . diff-hl-flydiff-mode)
   diff-hl-flydiff-mode
   (defun . diff-hl-dired-mode-unless-remote)
   (defun . diff-hl-dired-mode)
   (defun . global-diff-hl-amend-mode)
   global-diff-hl-amend-mode
   (defun . diff-hl-amend-mode)
   (defun . global-diff-hl-mode)
   global-diff-hl-mode
   (defun . diff-hl-reset-reference-rev)
   (defun . diff-hl-set-reference-rev)
   (defun . diff-hl--global-turn-on)
   (defun . turn-on-diff-hl-mode)
   (defun . diff-hl-mode)
   (defun . global-vi-tilde-fringe-mode)
   global-vi-tilde-fringe-mode
   (defun . vi-tilde-fringe-mode)
   (defun . persp-mode)
   persp-mode
   (defun . def-persp-buffer-save/load)
   (defun . persp-def-buffer-save/load)
   (defun . def-auto-persp)
   (defun . persp-def-auto-persp)
   (defun . visual-fill-column-split-window-sensibly)
   (defun . visual-line-fill-column-mode)
   (defun . global-visual-fill-column-mode)
   global-visual-fill-column-mode
   (defun . visual-fill-column-mode)
   (defun . global-writeroom-mode)
   global-writeroom-mode
   (defun . writeroom-mode)
   (defun . mixed-pitch-mode)
   (defun . evil-jump-out-args)
   (defun . evil-outer-arg)
   (defun . evil-inner-arg)
   (defun . evil-forward-arg)
   (defun . evil-backward-arg)
   (defun . evilem-default-keybindings)
   (defun . evilem-motion-next-line-first-non-blank)
   (defun . evilem-motion-previous-line-first-non-blank)
   (defun . evilem-motion-search-word-backward)
   (defun . evilem-motion-search-word-forward)
   (defun . evilem-motion-search-previous)
   (defun . evilem-motion-search-next)
   (defun . evilem-motion-forward-sentence-begin)
   (defun . evilem-motion-backward-sentence-begin)
   (defun . evilem-motion-forward-section-end)
   (defun . evilem-motion-forward-section-begin)
   (defun . evilem-motion-backward-section-end)
   (defun . evilem-motion-backward-section-begin)
   (defun . evilem-motion-find-char-backward)
   (defun . evilem-motion-find-char)
   (defun . evilem-motion-find-char-to-backward)
   (defun . evilem-motion-find-char-to)
   (defun . evilem-motion-previous-visual-line)
   (defun . evilem-motion-next-visual-line)
   (defun . evilem-motion-previous-line)
   (defun . evilem-motion-next-line)
   (defun . evilem-motion-backward-WORD-end)
   (defun . evilem-motion-backward-word-end)
   (defun . evilem-motion-backward-WORD-begin)
   (defun . evilem-motion-backward-word-begin)
   (defun . evilem-motion-forward-WORD-end)
   (defun . evilem-motion-forward-word-end)
   (defun . evilem-motion-forward-WORD-begin)
   (defun . evilem-motion-forward-word-begin)
   (defun . evilem--collect)
   expand-region-subword-enabled er/enable-subword-mode? expand-region-smart-cursor expand-region-exclude-text-mode-expansions expand-region-reset-fast-key expand-region-contract-fast-key expand-region-fast-keys-enabled expand-region-skip-whitespace expand-region-autocopy-register expand-region-guess-python-mode expand-region-preferred-python-mode
   (defun . er/contract-region)
   (defun . er/expand-region)
   (defun . embrace-emacs-lisp-mode-hook)
   (defun . embrace-ruby-mode-hook)
   (defun . embrace-org-mode-hook)
   (defun . embrace-LaTeX-mode-hook)
   (defun . embrace-commander)
   (defun . embrace-add)
   (defun . embrace-change)
   (defun . embrace-delete)
   (defun . evil-embrace-disable-evil-surround-integration)
   (defun . evil-embrace-enable-evil-surround-integration)
   (defun . evil-escape-mode)
   evil-escape-mode
   (defun . evil-exchange-cx-install)
   (defun . evil-exchange-install)
   (defun . evil-exchange-cancel)
   (defun . evil-exchange)
   (defun . evil-indent-plus-default-bindings)
   (defun . evil-indent-plus-a-indent-up-down)
   (defun . evil-indent-plus-i-indent-up-down)
   (defun . evil-indent-plus-a-indent-up)
   (defun . evil-indent-plus-i-indent-up)
   (defun . evil-indent-plus-a-indent)
   (defun . evil-indent-plus-i-indent)
   (defun . evil-lion-mode)
   evil-lion-mode
   (defun . evil-lion-right)
   (defun . evil-lion-left)
   (defun . evilnc-comment-or-uncomment-html-paragraphs)
   (defun . evilnc-comment-or-uncomment-html-tag)
   (defun . evilnc-imenu-create-index-function)
   (defun . evilnc-default-hotkeys)
   (defun . evilnc-version)
   (defun . evilnc-kill-to-line)
   (defun . evilnc-copy-to-line)
   (defun . evilnc-comment-and-kill-ring-save)
   (defun . evilnc-copy-and-comment-lines)
   (defun . evilnc-comment-or-uncomment-lines)
   (defun . evilnc-toggle-comment-empty-lines)
   (defun . evilnc-toggle-invert-comment-line-by-line)
   (defun . evilnc-quick-comment-or-uncomment-to-the-line)
   (defun . evilnc-comment-or-uncomment-to-the-line)
   (defun . evilnc-comment-or-uncomment-paragraphs)
   (defun . evilnc-comment-or-uncomment-region)
   (defun . evilnc-comment-or-uncomment-region-internal)
   (defun . evil-numbers/dec-at-pt-incremental)
   (defun . evil-numbers/inc-at-pt-incremental)
   (defun . evil-numbers/dec-at-pt)
   (defun . evil-numbers/inc-at-pt)
   (defun . evil-snipe-override-mode)
   evil-snipe-override-mode
   (defun . evil-snipe-mode)
   evil-snipe-mode
   (defun . evil-snipe-override-local-mode)
   (defun . evil-snipe-local-mode)
   (defun . turn-off-evil-snipe-override-mode)
   (defun . turn-off-evil-snipe-mode)
   (defun . turn-on-evil-snipe-override-mode)
   (defun . turn-on-evil-snipe-mode)
   (defun . evil-snipe-T)
   (defun . evil-snipe-t)
   (defun . evil-snipe-F)
   (defun . evil-snipe-f)
   (defun . evil-snipe-X)
   (defun . evil-snipe-x)
   (defun . evil-snipe-S)
   (defun . evil-snipe-s)
   (defun . evil-snipe-def)
   (defun . global-evil-surround-mode)
   global-evil-surround-mode
   (defun . turn-off-evil-surround-mode)
   (defun . turn-on-evil-surround-mode)
   (defun . evil-surround-mode)
   (defun . evil-surround-change)
   (defun . evil-surround-delete)
   (defun . evil-textobj-anyblock-backward-any-block-end)
   (defun . evil-textobj-anyblock-backward-any-block-start)
   (defun . evil-textobj-anyblock-forward-any-block-end)
   (defun . evil-textobj-anyblock-forward-any-block-start)
   (defun . evil-textobj-anyblock-backward-close-block-end)
   (defun . evil-textobj-anyblock-backward-close-block-start)
   (defun . evil-textobj-anyblock-backward-open-block-end)
   (defun . evil-textobj-anyblock-backward-open-block-start)
   (defun . evil-textobj-anyblock-forward-close-block-end)
   (defun . evil-textobj-anyblock-forward-close-block-start)
   (defun . evil-textobj-anyblock-forward-open-block-end)
   (defun . evil-textobj-anyblock-forward-open-block-start)
   (defun . evil-textobj-anyblock-a-block)
   (defun . evil-textobj-anyblock-inner-block)
   (defun . evil-traces-mode)
   evil-traces-mode
   (defun . turn-off-evil-visualstar-mode)
   (defun . turn-on-evil-visualstar-mode)
   (defun . global-evil-visualstar-mode)
   global-evil-visualstar-mode
   (defun . evil-visualstar-mode)
   (defun . evil-quick-diff-install)
   (defun . evil-quick-diff-cancel)
   (defun . evil-quick-diff)
   (defun . annalist-describe)
   (defun . annalist-record)
   (defun . evil-collection-init)
   (defun . evil-collection-require)
   (defun . evil-collection-swap-minor-mode-key)
   (defun . evil-collection-swap-key)
   (defun . evil-collection-translate-key)
   (defun . evil-collection-translate-minor-mode-key)
   (defun . vimish-fold-global-mode)
   vimish-fold-global-mode
   (defun . vimish-fold-mode)
   (defun . vimish-fold-from-marks)
   (defun . vimish-fold-previous-fold)
   (defun . vimish-fold-next-fold)
   (defun . vimish-fold-avy)
   (defun . vimish-fold-toggle-all)
   (defun . vimish-fold-toggle)
   (defun . vimish-fold-delete-all)
   (defun . vimish-fold-refold-all)
   (defun . vimish-fold-unfold-all)
   (defun . vimish-fold-delete)
   (defun . vimish-fold-refold)
   (defun . vimish-fold-unfold)
   (defun . vimish-fold)
   (defun . turn-off-evil-vimish-fold-mode)
   (defun . turn-on-evil-vimish-fold-mode)
   (defun . global-evil-vimish-fold-mode)
   global-evil-vimish-fold-mode
   (defun . evil-vimish-fold-mode)
   (defun . aya-yank-snippet-from-history)
   (defun . aya-yank-snippet)
   (defun . aya-open-line)
   (defun . aya-delete-from-history)
   (defun . aya-expand-from-history)
   (defun . aya-expand)
   (defun . aya-create-one-line)
   (defun . aya-create)
   (defun . doom-snippets-initialize)
   (defun . doom-snippets-remove-compiled-snippets)
   (defun . dirvish-yank--rsync-apply-switches-and-copy)
   (defun . dirvish-rsync-transient)
   (defun . dirvish-rsync)
   (defun . dirvish-hardlink)
   (defun . dirvish-relative-symlink)
   (defun . dirvish-symlink)
   (defun . dirvish-move)
   (defun . dirvish-yank)
   (defun . dirvish-yank-menu)
   (defun . dirvish-vc-menu)
   (defun . dirvish-subtree-menu)
   (defun . dirvish-subtree-toggle)
   (defun . dirvish-subtree-clear)
   (defun . dirvish-subtree-remove)
   (defun . dirvish-subtree-up)
   (defun . dirvish-side)
   (defun . dirvish-side-follow-mode)
   dirvish-side-follow-mode
   (defun . dirvish-quick-access)
   (defun . dirvish-peek-mode)
   dirvish-peek-mode
   (defun . dirvish-narrow)
   (defun . dirvish-ls-switches-menu)
   (defun . dirvish-quicksort)
   (defun . dirvish-history-menu)
   (defun . dirvish-history-go-backward)
   (defun . dirvish-history-go-forward)
   (defun . dirvish-history-last)
   (defun . dirvish-history-jump)
   (defun . dirvish-fd-ask)
   (defun . dirvish-fd)
   (defun . dirvish-fd-jump)
   (defun . dirvish-fd-switches-menu)
   (defun . dirvish-dired-cheatsheet)
   (defun . dirvish-mark-menu)
   (defun . dirvish-chxxx-menu)
   (defun . dirvish-file-info-menu)
   (defun . dirvish-layout-switch)
   (defun . dirvish-layout-toggle)
   (defun . dirvish-total-file-size)
   (defun . dirvish-copy-file-path)
   (defun . dirvish-copy-file-name)
   (defun . dirvish-setup-menu)
   (defun . dirvish-emerge-mode)
   (defun . dirvish-emerge-menu)
   (defun . dirvish-dwim)
   (defun . dirvish)
   (defun . dirvish-override-dired-mode)
   dirvish-override-dired-mode
   (defun . diredfl-global-mode)
   diredfl-global-mode
   (defun . diredfl-mode)
   (defun . undo-fu-clear-all)
   (defun . undo-fu-only-undo)
   (defun . undo-fu-only-redo)
   (defun . undo-fu-only-redo-all)
   (defun . undo-fu-disable-checkpoint)
   (defun . undo-fu-session-global-mode)
   undo-fu-session-global-mode
   (defun . undo-fu-session-mode)
   (defun . undo-fu-session-compression-update)
   (defun . undo-fu-session-recover)
   (defun . undo-fu-session-save)
   (defun . vundo-diff)
   (defun . vundo-diff-unmark)
   (defun . vundo-diff-mark)
   (defun . vundo)
   vundo-unicode-symbols vundo-ascii-symbols
   (defun . bar-to-clipboard)
   (defun . bar-browse)
   (defun . browse-at-remote-kill)
   (defun . browse-at-remote)
   (defun . git-timemachine-switch-branch)
   (defun . git-timemachine)
   (defun . git-timemachine-toggle)
   (defun . gitignore-mode)
   (defun . gitconfig-mode)
   (defun . gitattributes-mode)
   (defun . flycheck-popup-tip-mode)
   (defun . flyspell-correct-ido)
   (defun . flyspell-correct-auto-mode)
   (defun . flyspell-correct-move)
   (defun . flyspell-correct-wrapper)
   (defun . flyspell-correct-next)
   (defun . flyspell-correct-previous)
   (defun . flyspell-correct-at-point)
   (defun . flyspell-lazy-check-buffer)
   (defun . flyspell-lazy-mode)
   flyspell-lazy-mode
   (defun . langtool-switch-default-language)
   (defun . langtool-check-buffer)
   (defun . langtool-check)
   (defun . writegood-mode)
   (defun . writegood-grade-level)
   (defun . writegood-reading-ease)
   (defun . helm-quickrun)
   (defun . anything-quickrun)
   (defun . quickrun-autorun-mode)
   (defun . quickrun-shell)
   (defun . quickrun-compile-only-select)
   (defun . quickrun-compile-only)
   (defun . quickrun-eval-print)
   (defun . quickrun-replace-region)
   (defun . quickrun-region)
   (defun . quickrun-with-arg)
   (defun . quickrun-select)
   (defun . quickrun)
   (defun . quickrun-add-command)
   (defun . quickrun-select-default)
   (defun . quickrun-set-default)
   (defun . eros-mode)
   eros-mode
   (defun . eros-eval-defun)
   (defun . eros-eval-last-sexp)
   (defun . dumb-jump-xref-activate)
   (defun . dumb-jump-mode)
   dumb-jump-mode
   (defun . dumb-jump-go)
   (defun . dumb-jump-go-prefer-external-other-window)
   (defun . dumb-jump-go-prompt)
   (defun . dumb-jump-go-prefer-external)
   (defun . dumb-jump-go-current-window)
   (defun . dumb-jump-go-other-window)
   (defun . dumb-jump-quick-look)
   (defun . dumb-jump-back)
   dumb-jump-mode-map
   (defun . xclip-mode)
   xclip-mode
   (defun . etcc-off)
   (defun . evil-terminal-cursor-changer-deactivate)
   (defun . etcc-on)
   (defun . evil-terminal-cursor-changer-activate)
   (defun . kkp-status)
   (defun . global-kkp-mode)
   global-kkp-mode
   (defun . kkp-disable-in-terminal)
   (defun . cmake-help)
   (defun . cmake-help-property)
   (defun . cmake-help-variable)
   (defun . cmake-help-module)
   (defun . cmake-help-command)
   (defun . cmake-help-list-commands)
   (defun . cmake-command-run-help)
   (defun . cmake-command-run)
   (defun . cmake-mode)
   (defun . cuda-mode)
   (defun . demangle-mode)
   (defun . disaster)
   disaster-find-build-root-functions
   (defun . opencl-c-mode)
   (defun . modern-c++-font-lock-global-mode)
   modern-c++-font-lock-global-mode
   (defun . modern-c++-font-lock-mode)
   (defun . glsl-mode)
   (defun . highlight-quoted-mode)
   (defun . elisp-refs-symbol)
   (defun . elisp-refs-variable)
   (defun . elisp-refs-special)
   (defun . elisp-refs-macro)
   (defun . elisp-refs-function)
   (defun . helpful-at-point)
   (defun . helpful-variable)
   (defun . helpful-symbol)
   (defun . helpful-callable)
   (defun . helpful-macro)
   (defun . helpful-key)
   (defun . helpful-command)
   (defun . helpful-function)
   (defun . macrostep-c-mode-hook)
   (defun . macrostep-expand)
   (defun . macrostep-mode)
   (defun . pkg-info-version-info)
   (defun . pkg-info-package-version)
   (defun . pkg-info-defining-library-version)
   (defun . pkg-info-defining-library-original-version)
   (defun . pkg-info-library-version)
   (defun . pkg-info-library-original-version)
   (defun . overseer-enable-mode)
   (defun . overseer-mode)
   (defun . overseer-version)
   (defun . elisp-def-mode)
   (defun . elisp-def)
   (defun . elisp-demos-for-helpful)
   (defun . elisp-demos-advice-helpful-update)
   (defun . elisp-demos-advice-describe-function-1)
   (defun . package-lint-looks-like-a-package-p)
   (defun . package-lint-batch-and-exit)
   (defun . package-lint-current-buffer)
   (defun . package-lint-buffer)
   (defun . package-lint-describe-symbol-history)
   (defun . flycheck-package-setup)
   (defun . flycheck-cask-setup)
   (defun . buttercup-minor-mode)
   (defun . buttercup-run-markdown-file)
   (defun . buttercup-run-markdown)
   (defun . buttercup-run-markdown-buffer)
   (defun . buttercup-run-discover)
   (defun . buttercup-run-at-point)
   (defun . android-mode)
   (defun . run-groovy)
   (defun . inferior-groovy-mode)
   (defun . inf-groovy-keys)
   (defun . groovy-mode)
   (defun . groovy-electric-mode)
   (defun . lsp-treemacs-errors-list)
   (defun . lsp-treemacs-type-hierarchy)
   (defun . lsp-treemacs-call-hierarchy)
   (defun . lsp-treemacs-implementations)
   (defun . lsp-treemacs-references)
   (defun . lsp-treemacs-sync-mode)
   lsp-treemacs-sync-mode
   (defun . lsp-treemacs-java-deps-follow)
   (defun . lsp-treemacs-java-deps-list)
   (defun . lsp-treemacs-symbols)
   (defun . dap-ui-repl)
   (defun . dap-ui-hide-many-windows)
   (defun . dap-ui-show-many-windows)
   (defun . dap-ui-locals)
   (defun . dap-ui-sessions)
   (defun . dap-ui-controls-mode)
   dap-ui-controls-mode
   (defun . dap-ui-breakpoints-list)
   (defun . dap-ui-mode)
   dap-ui-mode
   (defun . dap-tooltip-mode)
   dap-tooltip-mode
   (defun . dap-auto-configure-mode)
   dap-auto-configure-mode
   (defun . dap-mode)
   dap-mode
   (defun . dap-debug)
   (defun . dap-hydra)
   (defun . posframe-benchmark)
   (defun . posframe-delete-all)
   (defun . posframe-hide-all)
   (defun . posframe-show)
   (defun . posframe-workable-p)
   (defun . cfrs-read)
   (defun . defhydra)
   (defun . pfuture-new)
   (defun . ace-window-posframe-mode)
   ace-window-posframe-mode
   (defun . ace-window-display-mode)
   ace-window-display-mode
   (defun . ace-window)
   (defun . ace-display-buffer)
   (defun . ace-delete-other-windows)
   (defun . ace-swap-window)
   (defun . ace-delete-window)
   (defun . ace-select-window)
   (defun . treemacs--create-imenu-index-function)
   (defun . treemacs--goto-tag)
   (defun . treemacs--collapse-tag-node)
   (defun . treemacs--expand-tag-node)
   (defun . treemacs--visit-or-expand/collapse-tag-node)
   (defun . treemacs--collapse-file-node)
   (defun . treemacs--expand-file-node)
   (defun . treemacs-tag-follow-mode)
   treemacs-tag-follow-mode
   (defun . treemacs--flatten&sort-imenu-index)
   (defun . treemacs-project-follow-mode)
   treemacs-project-follow-mode
   (defun . treemacs-peek-mode)
   treemacs-peek-mode
   (defun . treemacs-rightclick-menu)
   (defun . treemacs-node-buffer-and-position)
   (defun . treemacs-define-doubleclick-action)
   (defun . treemacs-dragleftclick-action)
   (defun . treemacs-single-click-expand-action)
   (defun . treemacs-doubleclick-action)
   (defun . treemacs-leftclick-action)
   (defun . treemacs-mode)
   (defun . treemacs-map-icons-with-auto-mode-alist)
   (defun . treemacs-define-custom-image-icon)
   (defun . treemacs-define-custom-icon)
   (defun . treemacs-resize-icons)
   (defun . treemacs-advanced-helpful-hydra)
   (defun . treemacs-common-helpful-hydra)
   (defun . treemacs-indicate-top-scroll-mode)
   treemacs-indicate-top-scroll-mode
   (defun . treemacs-git-commit-diff-mode)
   treemacs-git-commit-diff-mode
   (defun . treemacs-create-dir)
   (defun . treemacs-create-file)
   (defun . treemacs-bulk-file-actions)
   (defun . treemacs-delete-marked-paths)
   (defun . treemacs-reset-marks)
   (defun . treemacs-mark-or-unmark-path-at-point)
   (defun . treemacs-show-marked-files)
   (defun . treemacs-rename-file)
   (defun . treemacs-copy-marked-files)
   (defun . treemacs-move-marked-files)
   (defun . treemacs-copy-file)
   (defun . treemacs-move-file)
   (defun . treemacs-delete-marked-files)
   (defun . treemacs-delete-file)
   (defun . treemacs-add-bookmark)
   (defun . treemacs--bookmark-handler)
   (defun . treemacs-bookmark)
   (defun . treemacs-add-and-display-current-project)
   (defun . treemacs-add-and-display-current-project-exclusively)
   (defun . treemacs-edit-workspaces)
   (defun . treemacs-show-changelog)
   (defun . treemacs-select-window)
   (defun . treemacs-start-on-boot)
   (defun . treemacs-find-tag)
   (defun . treemacs-find-file)
   (defun . treemacs-select-directory)
   (defun . treemacs)
   (defun . treemacs-version)
   global-eldoc-mode global-eldoc-mode eldoc-minor-mode-string
   (defun . lsp-semantic-tokens-mode)
   (defun . lsp-semantic-tokens--enable)
   (defun . lsp-semantic-tokens--warn-about-deprecated-setting)
   (defun . lsp--semantic-tokens-initialize-workspace)
   (defun . lsp--semantic-tokens-initialize-buffer)
   semantic-token-modifier-cache
   (defun . lsp-modeline-workspace-status-mode)
   (defun . lsp-modeline-diagnostics-mode)
   (defun . lsp-diagnostics-modeline-mode)
   (defun . lsp-modeline-code-actions-mode)
   lsp-diagnostics-modeline-scope
   (defun . lsp-start-plain)
   (defun . lsp-deferred)
   (defun . lsp)
   (defun . lsp-ensure-server)
   (defun . lsp-update-servers)
   (defun . lsp-update-server)
   (defun . lsp-uninstall-servers)
   (defun . lsp-uninstall-server)
   (defun . lsp-install-server)
   (defun . lsp-save-vscode-workspace)
   (defun . lsp-load-vscode-workspace)
   (defun . lsp--string-listp)
   (defun . lsp-lisp-alive-start-ls)
   (defun . lsp-avy-lens)
   (defun . lsp-lens-mode)
   (defun . lsp-lens-hide)
   (defun . lsp-lens-show)
   (defun . lsp-lens--enable)
   (defun . lsp-evil-state-linked-ranges)
   (defun . lsp-evil-state-highlights)
   (defun . lsp-evil-multiedit-linked-ranges)
   (defun . lsp-evil-multiedit-highlights)
   (defun . lsp-iedit-linked-ranges)
   (defun . lsp-iedit-highlights)
   (defun . lsp-ido-workspace-symbol)
   (defun . lsp-breadcrumb-narrow-to-symbol)
   (defun . lsp-breadcrumb-go-to-symbol)
   (defun . lsp-headerline-breadcrumb-mode)
   (defun . lsp-fsharp--workspace-load)
   (defun . lsp-dired-mode)
   lsp-dired-mode
   (defun . lsp-diagnostics-mode)
   (defun . lsp-diagnostics--enable)
   (defun . lsp-diagnostics-lsp-checker-if-needed)
   lsp-flycheck-default-level lsp-diagnostic-package
   (defun . lsp-completion-mode)
   (defun . lsp-completion--enable)
   (defun . lsp-completion-at-point)
   lsp-enable-completion-at-point lsp-prefer-capf
   (defun . lsp-cobol-start-ls)
   (defun . lsp-clojure-show-project-tree)
   (defun . lsp-clojure-show-test-tree)
   (defun . lsp-cpp-flycheck-clang-tidy-error-explainer)
   (defun . lsp-jt-browser)
   (defun . lsp-jt-lens-mode)
   (defun . lsp-java-boot-lens-mode)
   (defun . lsp-java-lens-mode)
   (defun . rjsx-comment-dwim)
   (defun . rjsx-minor-mode)
   (defun . rjsx-mode)
   (defun . typescript-mode)
   (defun . rectangular-region-mode)
   (defun . set-rectangular-region-anchor)
   (defun . multiple-cursors-mode)
   (defun . activate-cursor-for-undo)
   (defun . mc/vertical-align-with-space)
   (defun . mc/vertical-align)
   (defun . mc/sort-regions)
   (defun . mc/reverse-regions)
   (defun . mc/insert-letters)
   (defun . mc/insert-numbers)
   (defun . mc/mark-pop)
   (defun . mc/mark-sgml-tag-pair)
   (defun . mc/add-cursor-on-click)
   (defun . mc/toggle-cursor-on-click)
   (defun . mc/mark-all-symbols-like-this-in-defun)
   (defun . mc/mark-all-words-like-this-in-defun)
   (defun . mc/mark-all-like-this-in-defun)
   (defun . mc/mark-all-dwim)
   (defun . mc/mark-all-like-this-dwim)
   (defun . mc/mark-more-like-this-extended)
   (defun . mc/mark-all-in-region-regexp)
   (defun . mc/mark-all-in-region)
   (defun . mc/mark-all-symbols-like-this)
   (defun . mc/mark-all-words-like-this)
   (defun . mc/mark-all-like-this)
   (defun . mc/skip-to-previous-like-this)
   (defun . mc/skip-to-next-like-this)
   (defun . mc/unmark-previous-like-this)
   (defun . mc/unmark-next-like-this)
   (defun . mc/mark-previous-lines)
   (defun . mc/mark-next-lines)
   (defun . mc/mark-previous-symbol-like-this)
   (defun . mc/mark-previous-word-like-this)
   (defun . mc/mark-previous-like-this-word)
   (defun . mc/mark-previous-like-this)
   (defun . mc/mark-next-symbol-like-this)
   (defun . mc/mark-next-word-like-this)
   (defun . mc/mark-next-like-this-word)
   (defun . mc/mark-next-like-this)
   (defun . mc-hide-unmatched-lines-mode)
   (defun . mc/edit-beginnings-of-lines)
   (defun . mc/edit-ends-of-lines)
   (defun . mc/edit-lines)
   (defun . js2r-extract-const)
   (defun . js2r-extract-let)
   (defun . js2r-extract-var)
   (defun . js2r-rename-var)
   (defun . js2r-add-keybindings-with-modifier)
   (defun . js2r-add-keybindings-with-prefix)
   (defun . js2-refactor-mode)
   (defun . npm-global-mode)
   npm-global-mode
   (defun . npm-mode)
   (defun . nodejs-repl-minor-mode)
   (defun . nodejs-repl)
   (defun . nodejs-repl-switch-to-repl)
   (defun . nodejs-repl-send-last-expression)
   (defun . nodejs-repl-load-file)
   (defun . nodejs-repl-send-buffer)
   (defun . nodejs-repl-send-region)
   (defun . nodejs-repl-send-line)
   (defun . httpd-serve-directory)
   (defun . httpd-running-p)
   (defun . httpd-stop)
   (defun . httpd-start)
   (defun . skewer-setup)
   (defun . skewer-repl)
   (defun . skewer-repl--response-hook)
   (defun . skewer-run-phantomjs)
   (defun . run-skewer)
   (defun . skewer-mode)
   (defun . list-skewer-clients)
   (defun . skewer-html-mode)
   (defun . skewer-css-mode)
   (defun . skewer-bower-load)
   (defun . skewer-bower-refresh)
   (defun . tide-hl-identifier-mode)
   (defun . tide-hl-identifier)
   (defun . tide-unhighlight-identifiers)
   (defun . tide-project-errors)
   (defun . tide-mode)
   (defun . tide-setup)
   (defun . tide-format)
   (defun . tide-format-before-save)
   (defun . company-tide)
   (defun . js2-jsx-mode)
   (defun . js2-mode)
   (defun . js2-minor-mode)
   (defun . js2-highlight-unused-variables-mode)
   (defun . js2-imenu-extras-mode)
   (defun . js2-imenu-extras-setup)
   (defun . xref-js2-xref-backend)
   (defun . julia-mode)
   (defun . julia-repl-mode)
   (defun . julia-repl)
   (defun . adaptive-wrap-prefix-mode)
   (defun . latex-preview-pane-mode)
   (defun . latex-preview-pane-update-p)
   (defun . latex-preview-pane-update)
   (defun . latex-preview-update)
   (defun . init-latex-preview-pane)
   (defun . latex-preview-pane-enable)
   (defun . evil-tex-mode)
   (defun . toolbarx-install-toolbar)
   (defun . texmathp-match-switch)
   (defun . texmathp)
   (require . tex-site)
   (defun . japanese-latex-mode)
   (defun . japanese-LaTeX-mode)
   (defun . japanese-plain-tex-mode)
   (defun . japanese-plain-TeX-mode)
   (defun . Texinfo-mode)
   (defun . tex-font-setup)
   (defun . tex-fold-mode)
   (defun . TeX-fold-mode)
   (defun . LaTeX-install-toolbar)
   (defun . TeX-install-toolbar)
   (defun . TeX-submit-bug-report)
   (defun . TeX-auto-generate-global)
   (defun . TeX-auto-generate)
   (defun . TeX-mode)
   (defun . TeX-tex-mode)
   (defun . preview-report-bug)
   (defun . LaTeX-preview-setup)
   (defun . preview-install-styles)
   (defun . desktop-buffer-preview)
   (defun . ams-tex-mode)
   (defun . AmSTeX-mode)
   (defun . plain-TeX-mode)
   (defun . plain-TeX-mode)
   (defun . multi-prompt-key-value)
   (defun . multi-prompt)
   (defun . docTeX-mode)
   (defun . LaTeX-mode)
   (defun . LaTeX-mode)
   (defun . BibTeX-auto-store)
   (defun . font-latex-setup)
   (defun . ConTeXt-mode)
   (defun . context-mode)
   (defun . turn-on-bib-cite)
   (defun . bib-cite-minor-mode)
   (defun . snippet-mode)
   (defun . yas-global-mode)
   yas-global-mode
   (defun . yas-minor-mode)
   (defun . company-auctex-init)
   (defun . company-auctex-bibs)
   (defun . company-auctex-labels)
   (defun . company-auctex-environments)
   (defun . company-auctex-symbols)
   (defun . company-auctex-macros)
   (defun . company-reftex-labels)
   (defun . company-reftex-citations)
   (defun . company-math-symbols-unicode)
   (defun . company-math-symbols-latex)
   (defun . company-latex-commands)
   (defun . markdown-toc-mode)
   (defun . markdown-toc-follow-link-at-point)
   (defun . markdown-toc-delete-toc)
   (defun . markdown-toc-refresh-toc)
   (defun . markdown-toc-generate-or-refresh-toc)
   (defun . markdown-toc-generate-toc)
   (defun . markdown-toc-version)
   (defun . edit-indirect-region)
   (defun . evil-markdown-set-key-theme)
   (defun . evil-markdown-mode)
   (defun . org-taskjuggler-export-process-and-open)
   (defun . org-taskjuggler-export-and-process)
   (defun . org-taskjuggler-export)
   (defun . org-freemind-export-to-freemind)
   (defun . org-toc-show)
   (defun . org-screenshot-show-unused)
   (defun . org-screenshot-rotate-next)
   (defun . org-screenshot-rotate-prev)
   (defun . org-screenshot-take)
   (defun . org-registry-update)
   (defun . org-registry-insinuate)
   (defun . org-registry-initialize)
   (defun . org-registry-visit)
   (defun . org-registry-show)
   (defun . org-eldoc-load)
   (defun . org-annotate-file-show-section)
   (defun . org-annotate-file)
   (defun . htmlize-many-files-dired)
   (defun . htmlize-many-files)
   (defun . htmlize-file)
   (defun . htmlize-region)
   (defun . htmlize-buffer)
   (defun . ox-clip-image-to-clipboard)
   (defun . ox-clip-formatted-copy)
   (defun . ox-clip-get-command)
   (defun . toc-org-mode)
   (defun . toc-org-enable)
   (defun . org-cliplink-capture)
   (defun . org-cliplink)
   (defun . org-cliplink-retrieve-title-synchronously)
   (defun . org-cliplink-insert-transformed-title)
   (defun . org-cliplink-retrieve-title)
   (defun . goto-last-change-reverse)
   (defun . goto-last-change)
   (defun . evil-digraph)
   (defun . evil-mode)
   (defun . evil-org-agenda-mode)
   (defun . evil-org-mode)
   (defun . org-noter-start-from-dired)
   (defun . org-noter)
   (defun . tablist-mode)
   (defun . tablist-minor-mode)
   (defun . pdf-virtual-buffer-create)
   (defun . pdf-virtual-global-minor-mode)
   pdf-virtual-global-minor-mode
   (defun . pdf-virtual-view-mode)
   (defun . pdf-virtual-edit-mode)
   (defun . pdf-view-bookmark-jump-handler)
   (defun . pdf-tools-help)
   (defun . pdf-tools-enable-minor-modes)
   (defun . pdf-tools-install)
   pdf-tools-handle-upgrades
   (defun . pdf-sync-minor-mode)
   (defun . pdf-outline-imenu-enable)
   (defun . pdf-outline)
   (defun . pdf-outline-minor-mode)
   (defun . pdf-occur-dired-minor-mode)
   (defun . pdf-occur-ibuffer-minor-mode)
   (defun . pdf-occur-global-minor-mode)
   pdf-occur-global-minor-mode
   (defun . pdf-occur-multi-command)
   (defun . pdf-occur)
   (defun . pdf-misc-context-menu-minor-mode)
   (defun . pdf-misc-menu-bar-minor-mode)
   (defun . pdf-misc-size-indication-minor-mode)
   (defun . pdf-misc-minor-mode)
   (defun . pdf-loader-install)
   (defun . pdf-links-action-perform)
   (defun . pdf-links-minor-mode)
   (defun . pdf-isearch-minor-mode)
   (defun . pdf-history-minor-mode)
   (defun . pdf-annot-minor-mode)
   (defun . org-pdftools-complete-link)
   (defun . org-pdftools-setup-link)
   (defun . org-pdftools-export)
   (defun . org-pdftools-store-link)
   (defun . org-pdftools-open)
   (defun . with-editor-shell-command)
   (defun . with-editor-async-shell-command)
   (defun . shell-command-with-editor-mode)
   shell-command-with-editor-mode
   (defun . with-editor-export-hg-editor)
   (defun . with-editor-export-git-editor)
   (defun . with-editor-export-editor)
   (defun . transient-remove-suffix)
   (defun . transient-replace-suffix)
   (defun . transient-append-suffix)
   (defun . transient-insert-suffix)
   (defun . magit--handle-bookmark)
   (defun . magit-add-section-hook)
   (defun . magit-worktree-move)
   (defun . magit-worktree-branch)
   (defun . magit-worktree-checkout)
   (defun . magit-worktree)
   (defun . magit-wip-commit-initial-backup)
   (defun . magit-wip-before-change-mode)
   magit-wip-before-change-mode
   (defun . magit-wip-after-apply-mode)
   magit-wip-after-apply-mode
   (defun . magit-wip-after-save-mode)
   magit-wip-after-save-mode
   (defun . magit-wip-mode)
   magit-wip-mode
   (defun . magit-tag-release)
   (defun . magit-tag-prune)
   (defun . magit-tag-delete)
   (defun . magit-tag-create)
   (defun . magit-tag)
   (defun . magit-subtree-split)
   (defun . magit-subtree-push)
   (defun . magit-subtree-pull)
   (defun . magit-subtree-merge)
   (defun . magit-subtree-add-commit)
   (defun . magit-subtree-add)
   (defun . magit-subtree-export)
   (defun . magit-subtree-import)
   (defun . magit-subtree)
   (defun . magit-list-submodules)
   (defun . magit-insert-modules-unpushed-to-pushremote)
   (defun . magit-insert-modules-unpushed-to-upstream)
   (defun . magit-insert-modules-unpulled-from-pushremote)
   (defun . magit-insert-modules-unpulled-from-upstream)
   (defun . magit-insert-modules-overview)
   (defun . magit-insert-modules)
   (defun . magit-submodule-remove)
   (defun . magit-submodule-unpopulate)
   (defun . magit-submodule-synchronize)
   (defun . magit-submodule-update)
   (defun . magit-submodule-populate)
   (defun . magit-submodule-register)
   (defun . magit-submodule-read-name-for-path)
   (defun . magit-submodule-add)
   (defun . magit-submodule)
   (defun . magit-status-setup-buffer)
   (defun . magit-status-quick)
   (defun . magit-status-here)
   (defun . magit)
   (defun . magit-status)
   (defun . magit-init)
   (defun . magit-stash-show)
   (defun . magit-stash-list)
   (defun . magit-stash-format-patch)
   (defun . magit-stash-branch-here)
   (defun . magit-stash-branch)
   (defun . magit-stash-clear)
   (defun . magit-stash-drop)
   (defun . magit-stash-pop)
   (defun . magit-stash-apply)
   (defun . magit-stash-push)
   (defun . magit-snapshot-worktree)
   (defun . magit-snapshot-index)
   (defun . magit-snapshot-both)
   (defun . magit-stash-keep-index)
   (defun . magit-stash-worktree)
   (defun . magit-stash-index)
   (defun . magit-stash-both)
   (defun . magit-stash)
   (defun . magit-sparse-checkout-disable)
   (defun . magit-sparse-checkout-reapply)
   (defun . magit-sparse-checkout-add)
   (defun . magit-sparse-checkout-set)
   (defun . magit-sparse-checkout-enable)
   (defun . magit-sparse-checkout)
   (defun . magit-rebase-abort)
   (defun . magit-rebase-edit)
   (defun . magit-rebase-skip)
   (defun . magit-rebase-continue)
   (defun . magit-rebase-remove-commit)
   (defun . magit-rebase-reword-commit)
   (defun . magit-rebase-edit-commit)
   (defun . magit-rebase-autosquash)
   (defun . magit-rebase-interactive)
   (defun . magit-rebase-subset)
   (defun . magit-rebase-branch)
   (defun . magit-rebase-onto-upstream)
   (defun . magit-rebase-onto-pushremote)
   (defun . magit-rebase)
   (defun . magit-am-abort)
   (defun . magit-am-skip)
   (defun . magit-am-continue)
   (defun . magit-am-apply-maildir)
   (defun . magit-am-apply-patches)
   (defun . magit-am)
   (defun . magit-revert-no-commit)
   (defun . magit-revert-and-commit)
   (defun . magit-revert)
   (defun . magit-cherry-spinoff)
   (defun . magit-cherry-spinout)
   (defun . magit-cherry-donate)
   (defun . magit-cherry-harvest)
   (defun . magit-cherry-apply)
   (defun . magit-cherry-copy)
   (defun . magit-cherry-pick)
   (defun . magit-sequencer-abort)
   (defun . magit-sequencer-skip)
   (defun . magit-sequencer-continue)
   (defun . magit-reset-quickly)
   (defun . magit-reset-worktree)
   (defun . magit-reset-index)
   (defun . magit-reset-keep)
   (defun . magit-reset-hard)
   (defun . magit-reset-soft)
   (defun . magit-reset-mixed)
   (defun . magit-reset)
   (defun . magit-list-repositories)
   (defun . magit-remote-configure)
   (defun . magit-remote-unshallow)
   (defun . magit-update-default-branch)
   (defun . magit-remote-unset-head)
   (defun . magit-remote-set-head)
   (defun . magit-remote-prune-refspecs)
   (defun . magit-remote-prune)
   (defun . magit-remote-remove)
   (defun . magit-remote-rename)
   (defun . magit-remote-add)
   (defun . magit-remote)
   (defun . magit-show-refs-other)
   (defun . magit-show-refs-current)
   (defun . magit-show-refs-head)
   (defun . magit-show-refs)
   (defun . magit-reflog-head)
   (defun . magit-reflog-other)
   (defun . magit-reflog-current)
   (defun . magit-push-to-remote)
   (defun . magit-push-implicitly)
   (defun . magit-push-notes-ref)
   (defun . magit-push-tag)
   (defun . magit-push-tags)
   (defun . magit-push-matching)
   (defun . magit-push-refspecs)
   (defun . magit-push-other)
   (defun . magit-push-current)
   (defun . magit-push-current-to-upstream)
   (defun . magit-push-current-to-pushremote)
   (defun . magit-push)
   (defun . magit-pull-branch)
   (defun . magit-pull-from-upstream)
   (defun . magit-pull-from-pushremote)
   (defun . magit-pull)
   (defun . magit-request-pull)
   (defun . magit-patch-save)
   (defun . magit-patch-apply)
   (defun . magit-patch-create)
   (defun . magit-patch)
   (defun . magit-notes)
   (defun . magit-info)
   (defun . magit-merge-abort)
   (defun . magit-merge-preview)
   (defun . magit-merge-squash)
   (defun . magit-merge-absorb)
   (defun . magit-merge-into)
   (defun . magit-merge-nocommit)
   (defun . magit-merge-editmsg)
   (defun . magit-merge-plain)
   (defun . magit-merge)
   (defun . magit-cherry)
   (defun . magit-shortlog-range)
   (defun . magit-shortlog-since)
   (defun . magit-shortlog)
   (defun . magit-log-move-to-parent)
   (defun . magit-log-merged)
   (defun . magit-log-trace-definition)
   (defun . magit-log-buffer-file)
   (defun . magit-log-all)
   (defun . magit-log-all-branches)
   (defun . magit-log-matching-tags)
   (defun . magit-log-matching-branches)
   (defun . magit-log-branches)
   (defun . magit-log-other)
   (defun . magit-log-related)
   (defun . magit-log-head)
   (defun . magit-log-current)
   (defun . magit-log-refresh)
   (defun . magit-log)
   (defun . magit-no-assume-unchanged)
   (defun . magit-assume-unchanged)
   (defun . magit-no-skip-worktree)
   (defun . magit-skip-worktree)
   (defun . magit-gitignore-on-system)
   (defun . magit-gitignore-in-gitdir)
   (defun . magit-gitignore-in-subdir)
   (defun . magit-gitignore-in-topdir)
   (defun . magit-gitignore)
   (defun . magit-file-checkout)
   (defun . magit-blob-visit-file)
   (defun . magit-file-dispatch)
   (defun . magit-find-file-other-frame)
   (defun . magit-find-file-other-window)
   (defun . magit-find-file)
   (defun . magit-fetch-modules)
   (defun . magit-fetch-all-no-prune)
   (defun . magit-fetch-all-prune)
   (defun . magit-fetch-all)
   (defun . magit-fetch-refspec)
   (defun . magit-fetch-branch)
   (defun . magit-fetch-other)
   (defun . magit-fetch-from-upstream)
   (defun . magit-fetch-from-pushremote)
   (defun . magit-fetch)
   (defun . magit-back-to-indentation)
   (defun . magit-abort-dwim)
   (defun . magit-switch-to-repository-buffer-other-frame)
   (defun . magit-switch-to-repository-buffer-other-window)
   (defun . magit-switch-to-repository-buffer)
   (defun . magit-display-repository-buffer)
   (defun . magit-copy-buffer-revision)
   (defun . magit-copy-section-value)
   (defun . magit-pop-revision-stack)
   (defun . magit-reshelve-since)
   (defun . magit-diff-edit-hunk-commit)
   (defun . magit-edit-line-commit)
   (defun . magit-add-change-log-entry-other-window)
   (defun . magit-add-change-log-entry)
   (defun . magit-generate-changelog)
   (defun . magit-clean)
   (defun . magit-next-line)
   (defun . magit-previous-line)
   (defun . magit-do-async-shell-command)
   (defun . magit-dired-am-apply-patches)
   (defun . magit-dired-log)
   (defun . magit-dired-jump)
   (defun . magit-project-status)
   (defun . ido-enter-magit-status)
   (defun . magit-run-gitk-all)
   (defun . magit-run-gitk-branches)
   (defun . magit-run-gitk)
   (defun . magit-run-git-gui)
   (defun . magit-run-git-gui-blame)
   (defun . magit-git-mergetool)
   (defun . magit-ediff-show-stash)
   (defun . magit-ediff-show-commit)
   (defun . magit-ediff-show-working-tree)
   (defun . magit-ediff-show-unstaged)
   (defun . magit-ediff-show-staged)
   (defun . magit-ediff-dwim)
   (defun . magit-ediff-compare)
   (defun . magit-ediff-stage)
   (defun . magit-ediff-resolve-rest)
   (defun . magit-ediff-resolve-all)
   (defun . magit-ediff)
   (defun . magit-show-commit)
   (defun . magit-diff-paths)
   (defun . magit-diff-buffer-file)
   (defun . magit-diff-while-committing)
   (defun . magit-diff-unmerged)
   (defun . magit-diff-unstaged)
   (defun . magit-diff-staged)
   (defun . magit-diff-working-tree)
   (defun . magit-diff-range)
   (defun . magit-diff-dwim)
   (defun . magit-diff-refresh)
   (defun . magit-diff)
   (defun . magit-commit-autofixup)
   (defun . magit-commit-absorb)
   (defun . magit-commit-absorb-modules)
   (defun . magit-commit-reshelve)
   (defun . magit-commit-instant-squash)
   (defun . magit-commit-instant-fixup)
   (defun . magit-commit-augment)
   (defun . magit-commit-squash)
   (defun . magit-commit-fixup)
   (defun . magit-commit-reword)
   (defun . magit-commit-extend)
   (defun . magit-commit-amend)
   (defun . magit-commit-create)
   (defun . magit-commit)
   (defun . magit-clone-sparse)
   (defun . magit-clone-mirror)
   (defun . magit-clone-bare)
   (defun . magit-clone-shallow-exclude)
   (defun . magit-clone-shallow-since)
   (defun . magit-clone-shallow)
   (defun . magit-clone-regular)
   (defun . magit-clone)
   (defun . magit-bundle-list-heads)
   (defun . magit-bundle-verify)
   (defun . magit-bundle-update-tracked)
   (defun . magit-bundle-create-tracked)
   (defun . magit-bundle-import)
   (defun . magit-bundle)
   (defun . magit-branch-configure)
   (defun . magit-branch-unshelve)
   (defun . magit-branch-shelve)
   (defun . magit-branch-rename)
   (defun . magit-branch-delete)
   (defun . magit-branch-reset)
   (defun . magit-branch-spinoff)
   (defun . magit-branch-spinout)
   (defun . magit-branch-orphan)
   (defun . magit-branch-checkout)
   (defun . magit-branch-or-checkout)
   (defun . magit-branch-and-checkout)
   (defun . magit-branch-create)
   (defun . magit-checkout)
   (defun . magit-branch)
   (defun . magit-blame)
   (defun . magit-blame-reverse)
   (defun . magit-blame-removal)
   (defun . magit-blame-addition)
   (defun . magit-blame-echo)
   (defun . magit-bisect-run)
   (defun . magit-bisect-skip)
   (defun . magit-bisect-mark)
   (defun . magit-bisect-bad)
   (defun . magit-bisect-good)
   (defun . magit-bisect-reset)
   (defun . magit-bisect-start)
   (defun . magit-bisect)
   (defun . org-man-export@gitman)
   (defun . Info-follow-nearest-node@gitman)
   (defun . magit-emacs-Q-command)
   (defun . magit-auto-revert-mode)
   magit-auto-revert-mode
   (defun . magit-unstage-all)
   (defun . magit-unstage-file)
   (defun . magit-unstage-buffer-file)
   (defun . magit-stage-modified)
   (defun . magit-stage-file)
   (defun . magit-stage-buffer-file)
   (defun . magit-version)
   (defun . magit-shell-command-topdir)
   (defun . magit-shell-command)
   (defun . magit-git-command-topdir)
   (defun . magit-git-command)
   (defun . magit-run)
   (defun . magit-dispatch)
   (defun . magit-maybe-define-global-key-bindings)
   magit-define-global-key-bindings git-rebase-filename-regexp
   (defun . git-rebase-mode)
   (defun . git-rebase-current-line)
   (defun . orgit-rev-complete-link)
   (defun . orgit-rev-export)
   (defun . orgit-rev-open)
   (defun . orgit-rev-store)
   (defun . orgit-log-complete-link)
   (defun . orgit-log-export)
   (defun . orgit-log-open)
   (defun . orgit-log-store)
   (defun . orgit-status-complete-link)
   (defun . orgit-status-export)
   (defun . orgit-status-open)
   (defun . orgit-status-store)
   (defun . orgit-store-link)
   (defun . dired-async-do-rename)
   (defun . dired-async-do-hardlink)
   (defun . dired-async-do-symlink)
   (defun . dired-async-do-copy)
   (defun . dired-async-mode)
   dired-async-mode
   (defun . async-byte-compile-file)
   (defun . async-bytecomp-package-mode)
   async-bytecomp-package-mode
   (defun . async-byte-recompile-directory)
   (defun . async-start)
   (defun . async-start-process)
   (defun . ob-async-org-babel-execute-src-block)
   (defun . org-babel-execute-src-block:async)
   (defun . flycheck-define-checker)
   (defun . flycheck-def-option-var)
   (defun . flycheck-def-config-file-var)
   (defun . flycheck-define-command-checker)
   (defun . flycheck-define-error-level)
   (defun . global-flycheck-mode)
   global-flycheck-mode
   (defun . flycheck-mode)
   (defun . flycheck-quick-help)
   (defun . flycheck-manual)
   (defun . xterm-color-test-raw)
   (defun . xterm-color-test)
   (defun . xterm-color-clear-cache)
   (defun . xterm-color-colorize-buffer)
   (defun . xterm-color-256)
   (defun . xterm-color-filter)
   (defun . xterm-color-filter-strip)
   (defun . spinner-start)
   (defun . spinner-create)
   (defun . xref-matches-in-files)
   (defun . xref-matches-in-directory)
   (defun . xref-references-in-directory)
   (defun . xref-find-apropos)
   (defun . xref-find-references-at-mouse)
   (defun . xref-find-definitions-at-mouse)
   (defun . xref-find-references)
   (defun . xref-find-definitions-other-frame)
   (defun . xref-find-definitions-other-window)
   (defun . xref-find-definitions)
   (defun . xref-show-xrefs)
   (defun . xref-forward-history-empty-p)
   (defun . xref-marker-stack-empty-p)
   (defun . xref-go-forward)
   (defun . xref-go-back)
   (defun . xref-pop-marker-stack)
   (defun . xref-find-backend)
   project-mode-line
   (defun . project-uniquify-dirname-transform)
   (defun . project-switch-project)
   (defun . project-prefix-or-any-command)
   (defun . project-any-command)
   (defun . project-execute-extended-command)
   (defun . project-known-project-roots)
   (defun . project-forget-project)
   (defun . project-remember-project)
   (defun . project-kill-buffers)
   (defun . project-list-buffers)
   (defun . project-display-buffer-other-frame)
   (defun . project-display-buffer)
   (defun . project-switch-to-buffer)
   (defun . project-compile)
   (defun . project-query-replace-regexp)
   (defun . project-search)
   (defun . project-shell-command)
   (defun . project-async-shell-command)
   (defun . project-eshell)
   (defun . project-shell)
   (defun . project-vc-dir)
   (defun . project-dired)
   (defun . project-find-dir)
   (defun . project-or-external-find-file)
   (defun . project-find-file)
   (defun . project-or-external-find-regexp)
   (defun . project-find-regexp)
   (defun . project-other-tab-command)
   (defun . project-other-frame-command)
   (defun . project-other-window-command)
   project-prefix-map
   (defun . project-current)
   (defun . markdown-live-preview-mode)
   (defun . gfm-view-mode)
   (defun . markdown-view-mode)
   (defun . gfm-mode)
   (defun . markdown-mode)
   (defun . rust-dbg-wrap-or-unwrap)
   (defun . rust-mode)
   (defun . rustic-cargo-spellcheck-rerun)
   (defun . rustic-cargo-spellcheck)
   (defun . rustic-format-file)
   (defun . rustic-format-buffer)
   (defun . rustic-format-region)
   (defun . rustic-cargo-fmt)
   (defun . rustic-rustfix)
   (defun . rustic-popup-kill-help-buffer)
   (defun . rustic-popup-cargo-command-help)
   (defun . rustic-popup-default-action)
   (defun . rustic-popup-invoke-popup-action)
   (defun . rustic-popup)
   (defun . rustic-playground)
   (defun . rustic-analyzer-macro-expand)
   (defun . rustic-open-dependency-file)
   (defun . rustic-flycheck-setup)
   (defun . rustic-cargo-expand-rerun)
   (defun . rustic-cargo-expand)
   (defun . rustic-doc-mode)
   (defun . rustic-doc-setup)
   (defun . rustic-doc-convert-current-package)
   (defun . rustic-doc-search)
   (defun . rustic-doc-dumb-search)
   (defun . rustic-recompile)
   (defun . rustic-compile)
   (defun . rustic-cargo-plain-run)
   (defun . rustic-cargo-comint-run-rerun)
   (defun . rustic-cargo-comint-run)
   (defun . rustic-cargo-clippy-rerun)
   (defun . rustic-cargo-clippy)
   (defun . rustic-cargo-lints)
   (defun . rustic-cargo-clippy-run)
   (defun . rustic-cargo-install)
   (defun . rustic-cargo-install-rerun)
   (defun . rustic-cargo-login)
   (defun . rustic-cargo-update)
   (defun . rustic-cargo-upgrade)
   (defun . rustic-cargo-rm)
   (defun . rustic-cargo-add)
   (defun . rustic-cargo-doc)
   (defun . rustic-cargo-build-doc)
   (defun . rustic-cargo-bench)
   (defun . rustic-cargo-check)
   (defun . rustic-cargo-clean)
   (defun . rustic-cargo-build)
   (defun . rustic-run-shell-command)
   (defun . rustic-cargo-run-rerun)
   (defun . rustic-cargo-run)
   (defun . rustic-cargo-run-command)
   (defun . rustic-cargo-init)
   (defun . rustic-cargo-new)
   (defun . rustic-cargo-upgrade-execute)
   (defun . rustic-cargo-menu-mark-unmark)
   (defun . rustic-cargo-mark-all-upgrades)
   (defun . rustic-cargo-mark-all-upgrades-latest)
   (defun . rustic-cargo-mark-latest-upgrade)
   (defun . rustic-cargo-mark-upgrade)
   (defun . rustic-cargo-reload-outdated)
   (defun . rustic-cargo-outdated)
   (defun . rustic-cargo-test-dwim)
   (defun . rustic-cargo-current-test)
   (defun . rustic-cargo-test-rerun)
   (defun . rustic-cargo-test)
   (defun . rustic-cargo-test-run)
   (defun . rustic-mode)
   (defun . company-yasnippet)
   (defun . company-tng-mode)
   company-tng-mode
   (defun . company-tng-configure-default)
   (defun . company-tng-frontend)
   (defun . company-tempo)
   (defun . company-semantic)
   (defun . company-oddmuse)
   (defun . company-nxml)
   (defun . company-keywords)
   (defun . company-ispell)
   (defun . company-gtags)
   (defun . company-files)
   (defun . company-etags)
   (defun . company-dabbrev-code)
   (defun . company-dabbrev)
   (defun . company-css)
   (defun . company-bbdb)
   (defun . company-abbrev)
   (defun . company-complete)
   (defun . company-manual-begin)
   (defun . global-company-mode)
   global-company-mode
   (defun . company-mode)
   (defun . company-shell-env)
   (defun . company-shell)
   (defun . company-fish-shell)
   (defun . company-shell-rebuild-cache)
   (defun . request-abort)
   (defun . request-untrampify-filename)
   (defun . request)
   (defun . request-response-headers)
   (defun . request-response-header)
   (defun . org-texinfo-convert-region-to-texinfo)
   (defun . org-texinfo-publish-to-texinfo)
   (defun . org-texinfo-export-to-info)
   (defun . org-texinfo-export-to-texinfo)
   (defun . org-publish-current-project)
   (defun . org-publish-current-file)
   (defun . org-publish-all)
   (defun . org-publish)
   (defun . org-publish-project)
   (defun . org-org-publish-to-org)
   (defun . org-org-export-to-org)
   (defun . org-org-export-as-org)
   (defun . org-odt-convert)
   (defun . org-odt-export-to-odt)
   (defun . org-odt-export-as-odf-and-open)
   (defun . org-odt-export-as-odf)
   (defun . org-md-publish-to-md)
   (defun . org-md-export-to-markdown)
   (defun . org-md-convert-region-to-md)
   (defun . org-md-export-as-markdown)
   (defun . org-latex-publish-to-pdf)
   (defun . org-latex-publish-to-latex)
   (defun . org-latex-export-to-pdf)
   (defun . org-latex-export-to-latex)
   (defun . org-latex-convert-region-to-latex)
   (defun . org-latex-export-as-latex)
   (defun . org-latex-make-preamble)
   (defun . org-koma-letter-export-to-pdf)
   (defun . org-koma-letter-export-to-latex)
   (defun . org-koma-letter-export-as-latex)
   (defun . org-icalendar-combine-agenda-files)
   (defun . org-icalendar-export-agenda-files)
   (defun . org-icalendar-export-to-ics)
   (defun . org-html-publish-to-html)
   (defun . org-html-export-to-html)
   (defun . org-html-convert-region-to-html)
   (defun . org-html-export-as-html)
   (defun . org-html-htmlize-generate-css)
   (defun . org-beamer-publish-to-pdf)
   (defun . org-beamer-publish-to-latex)
   (defun . org-beamer-select-environment)
   (defun . org-beamer-export-to-pdf)
   (defun . org-beamer-export-to-latex)
   (defun . org-beamer-export-as-latex)
   (defun . org-beamer-mode)
   (defun . org-ascii-publish-to-utf8)
   (defun . org-ascii-publish-to-latin1)
   (defun . org-ascii-publish-to-ascii)
   (defun . org-ascii-export-to-ascii)
   (defun . org-ascii-export-as-ascii)
   (defun . org-ascii-convert-region-to-utf8)
   (defun . org-ascii-convert-region-to-ascii)
   (defun . org-export-dispatch)
   (defun . org-export-to-file)
   (defun . org-export-to-buffer)
   (defun . org-export-raw-string)
   (defun . org-export-insert-default-template)
   (defun . org-export-replace-region-by)
   (defun . org-export-string-as)
   (defun . org-export-as)
   (defun . org-export-data)
   (defun . org-export-get-environment)
   (defun . org-export-derived-backend-p)
   (defun . org-export-get-backend)
   (defun . org-timer-set-timer)
   (defun . org-timer-item)
   (defun . org-timer-change-times-in-region)
   (defun . org-timer)
   (defun . org-timer-stop)
   (defun . org-timer-pause-or-continue)
   (defun . org-timer-start)
   (defun . orgtbl-ascii-plot)
   (defun . orgtbl-to-orgtbl)
   (defun . orgtbl-to-texinfo)
   (defun . orgtbl-to-html)
   (defun . orgtbl-to-latex)
   (defun . orgtbl-to-csv)
   (defun . orgtbl-to-tsv)
   (defun . orgtbl-to-generic)
   (defun . org-table-to-lisp)
   orgtbl-exp-regexp
   (defun . orgtbl-mode)
   (defun . turn-on-orgtbl)
   (defun . org-table-analyze)
   (defun . org-table-sum)
   (defun . org-table-wrap-region)
   (defun . org-table-sort-lines)
   (defun . org-table-justify-field-maybe)
   (defun . org-table--align-field)
   (defun . org-table-export)
   (defun . org-table-map-tables)
   (defun . org-table-expand)
   (defun . org-table-shrink)
   (defun . org-table-toggle-column-width)
   (defun . org-table-toggle-formula-debugger)
   (defun . org-table-toggle-coordinate-overlays)
   (defun . org-table-edit-formulas)
   (defun . org-table-iterate-buffer-tables)
   (defun . org-table-recalculate-buffer-tables)
   (defun . org-table-iterate)
   (defun . org-table-recalculate)
   (defun . org-table-eval-formula)
   (defun . org-table-maybe-recalculate-line)
   (defun . org-table-rotate-recalc-marks)
   (defun . org-table-maybe-eval-formula)
   (defun . org-table-get-stored-formulas)
   (defun . org-table-edit-field)
   (defun . org-table-paste-rectangle)
   (defun . org-table-copy-region)
   (defun . org-table-copy-down)
   (defun . org-table-cut-region)
   (defun . org-table-kill-row)
   (defun . org-table-hline-and-move)
   (defun . org-table-insert-hline)
   (defun . org-table-insert-row)
   (defun . org-table-move-row)
   (defun . org-table-move-row-up)
   (defun . org-table-move-row-down)
   (defun . org-table-move-column)
   (defun . org-table-move-column-left)
   (defun . org-table-move-column-right)
   (defun . org-table-delete-column)
   (defun . org-table-move-cell-right)
   (defun . org-table-move-cell-left)
   (defun . org-table-move-cell-down)
   (defun . org-table-move-cell-up)
   (defun . org-table-insert-column)
   (defun . org-table-goto-column)
   (defun . org-table-field-info)
   (defun . org-table-blank-field)
   (defun . org-table-next-row)
   (defun . org-table-previous-field)
   (defun . org-table-next-field)
   (defun . org-table-end)
   (defun . org-table-begin)
   (defun . org-table-import)
   (defun . org-table-convert-region)
   (defun . org-table-create)
   (defun . org-table-create-or-convert-from-region)
   (defun . org-table-create-with-table.el)
   (defun . org-table-header-line-mode)
   (defun . org-refile)
   (defun . org-refile-reverse)
   (defun . org-refile-copy)
   (defun . org-plot/gnuplot)
   (defun . org-num-mode)
   (defun . org-num-default-format)
   org-num-skip-unnumbered org-num-skip-tags org-num-skip-footnotes org-num-skip-commented org-num-max-level org-num-face
   (defun . org-mobile-pull)
   (defun . org-mobile-push)
   (defun . org-element-with-disabled-cache)
   (defun . org-load-noerror-mustsuffix)
   (defun . org-list-checkbox-radio-mode)
   (defun . org-lint)
   (defun . org-lint-add-checker)
   (defun . org-babel-describe-bindings)
   (defun . org-indent-mode)
   (defun . org-id-store-link-maybe)
   (defun . org-id-store-link)
   (defun . org-id-find-id-file)
   (defun . org-id-update-id-locations)
   (defun . org-id-new)
   (defun . org-id-find)
   (defun . org-id-goto)
   (defun . org-id-get-with-outline-drilling)
   (defun . org-id-get-with-outline-path-completion)
   (defun . org-id-get)
   (defun . org-id-copy)
   (defun . org-id-get-create)
   (defun . org-goto)
   (defun . org-goto-location)
   (defun . org-footnote-action)
   (defun . org-feed-show-raw-feed)
   (defun . org-feed-goto-inbox)
   (defun . org-feed-update)
   (defun . org-feed-update-all)
   (defun . org-element-context)
   (defun . org-element-at-point-no-context)
   (defun . org-element-at-point)
   (defun . org-element-cache-map)
   (defun . org-element-cache-refresh)
   (defun . org-element-cache-get-key)
   (defun . org-element-cache-store-key)
   (defun . org-element-cache-reset)
   org-element-use-cache
   (defun . org-element-interpret-data)
   (defun . org-element-update-syntax)
   (defun . org-duration-h:mm-only-p)
   (defun . org-duration-from-minutes)
   (defun . org-duration-to-minutes)
   (defun . org-duration-p)
   (defun . org-duration-set-regexps)
   (defun . org-datetree-find-iso-week-create)
   (defun . org-datetree-find-month-create)
   (defun . org-datetree-find-date-create)
   (defun . org-cycle-global)
   (defun . org-cycle)
   (defun . org-crypt-use-before-save-magic)
   (defun . org-decrypt-entries)
   (defun . org-encrypt-entries)
   (defun . org-decrypt-entry)
   (defun . org-encrypt-entry)
   (defun . org-check-version)
   (defun . org-list-of-strings-p)
   (defun . org-agenda-columns)
   (defun . org-columns-insert-dblock)
   (defun . org-dblock-write:columnview)
   (defun . org-columns-compute)
   (defun . org-columns)
   (defun . org-columns-get-format-and-top-level)
   (defun . org-columns-remove-overlays)
   (defun . org-clock-update-time-maybe)
   (defun . org-dblock-write:clocktable)
   (defun . org-clocktable-shift)
   (defun . org-clock-report)
   (defun . org-clock-get-clocktable)
   (defun . org-clock-out-if-current)
   (defun . org-clock-remove-overlays)
   (defun . org-clock-display)
   (defun . org-clock-sum)
   (defun . org-clock-sum-today)
   (defun . org-clock-goto)
   (defun . org-clock-cancel)
   (defun . org-clock-out)
   (defun . org-clock-in-last)
   (defun . org-clock-toggle-auto-clockout)
   (defun . org-clock-in)
   (defun . org-resolve-clocks)
   (defun . org-clock-modify-effort-estimate)
   (defun . org-capture-import-remember-templates)
   (defun . org-capture)
   (defun . org-capture-string)
   (defun . org-attach-dired-to-subtree)
   (defun . org-attach-dir)
   (defun . org-attach)
   (defun . org-archive-subtree-default-with-confirmation)
   (defun . org-archive-subtree-default)
   (defun . org-toggle-archive-tag)
   (defun . org-archive-to-archive-sibling)
   (defun . org-archive-subtree)
   (defun . org-add-archive-files)
   (defun . org-agenda-to-appt)
   (defun . org-calendar-goto-agenda)
   (defun . org-agenda-set-restriction-lock)
   (defun . org-agenda-check-for-timestamp-as-reason-to-ignore-todo-item)
   (defun . org-diary)
   (defun . org-agenda-list-stuck-projects)
   (defun . org-tags-view)
   (defun . org-todo-list)
   (defun . org-search-view)
   (defun . org-agenda-list)
   (defun . org-batch-store-agenda-views)
   (defun . org-store-agenda-views)
   (defun . org-batch-agenda-csv)
   (defun . org-batch-agenda)
   (defun . org-agenda)
   (defun . org-toggle-sticky-agenda)
   (defun . org-customize)
   (defun . org-reload)
   (defun . org-submit-bug-report)
   (defun . org-cycle-agenda-files)
   (defun . org-switchb)
   (defun . org-offer-links-in-entry)
   (defun . org-open-at-point-global)
   (defun . org-open-file)
   (defun . org-run-like-in-org-mode)
   (defun . org-mode)
   (defun . org-clock-persistence-insinuate)
   (defun . org-load-modules-maybe)
   (defun . org-version)
   (defun . org-babel-load-file)
   (defun . org-babel-do-load-languages)
   (defun . org-irc-store-link)
   (defun . org-bbdb-anniversaries)
   (defun . org-update-radio-target-regexp)
   (defun . org-insert-link-global)
   (defun . org-insert-last-stored-link)
   (defun . org-insert-all-links)
   (defun . org-insert-link)
   (defun . org-store-link)
   (defun . org-toggle-link-display)
   (defun . org-previous-link)
   (defun . org-next-link)
   (defun . org-cite-insert)
   (defun . org-babel-tangle)
   (defun . org-babel-tangle-file)
   (defun . org-babel-lob-get-info)
   (defun . org-babel-lob-execute-maybe)
   (defun . org-babel-mark-block)
   (defun . org-babel-previous-src-block)
   (defun . org-babel-next-src-block)
   (defun . org-babel-goto-named-result)
   (defun . org-babel-goto-named-src-block)
   (defun . org-babel-goto-src-block-head)
   (defun . org-babel-hide-result-toggle-maybe)
   (defun . org-babel-sha1-hash)
   (defun . org-babel-execute-subtree)
   (defun . org-babel-execute-buffer)
   (defun . org-babel-map-executables)
   (defun . org-babel-map-call-lines)
   (defun . org-babel-map-inline-src-blocks)
   (defun . org-babel-map-src-blocks)
   (defun . org-babel-open-src-block-result)
   (defun . org-babel-do-in-edit-buffer)
   (defun . org-babel-switch-to-session-with-code)
   (defun . org-babel-switch-to-session)
   (defun . org-babel-initiate-session)
   (defun . org-babel-load-in-session)
   (defun . org-babel-insert-header-arg)
   (defun . org-babel-check-src-block)
   (defun . org-babel-expand-src-block)
   (defun . org-babel-execute-src-block)
   (defun . org-babel-pop-to-session-maybe)
   (defun . org-babel-load-in-session-maybe)
   (defun . org-babel-expand-src-block-maybe)
   (defun . org-babel-view-src-block-info)
   (defun . org-babel-execute-maybe)
   (defun . org-babel-execute-safely-maybe)
   (defun . creole-wiki)
   (defun . dash-register-info-lookup)
   (defun . global-dash-fontify-mode)
   global-dash-fontify-mode
   (defun . dash-fontify-mode)
   (defun . web-get)
   (defun . web-json-post)
   (defun . web-http-post)
   (defun . web-http-get)
   (defun . web-http-call)
   (defun . elnode-wikiserver)
   (defun . elnode-wikiserver-test)
   elnode-wikiserver-wikiroot elnode-wikiserver-wikiroot-default
   (defun . elnode-make-proxy-server)
   (defun . elnode-make-proxy)
   (defun . elnode-log-mode)
   (defun . list-elnode-servers)
   (defun . elnode-server-list)
   (defun . list-elnode-deferreds)
   (defun . elnode-deferred-list)
   (defun . elnode-deferred-queue)
   elnode-do-init
   (defun . elnode-init)
   (defun . elnode-webserver)
   (defun . elnode-make-webserver)
   (defun . elnode--webserver-handler-proc)
   elnode-config-directory elnode-hostpath-default-table
   (defun . elnode-start)
   (defun . elnode-app)
   elnode-config-directory
   (defun . log4e:insert-start-log-quickly)
   (defun . log4e-mode)
   (defun . gntp-notify)
   (defun . alert)
   (defun . alert-add-rule)
   (defun . org-generic-id-find-id-file)
   (defun . org-generic-id-add-location)
   (defun . org-generic-id-locations-load)
   (defun . org-generic-id-update-id-locations)
   (defun . org-generic-id-find)
   (defun . org-generic-id-get)
   (defun . org-gcal-sync-tokens-clear)
   (defun . org-gcal-delete-at-point)
   (defun . org-gcal-post-at-point)
   (defun . org-gcal-toggle-debug)
   (defun . org-gcal-fetch-buffer)
   (defun . org-gcal-sync-buffer)
   (defun . org-gcal-fetch)
   (defun . org-gcal-sync)
   (defun . oauth2-auto-access-token-sync)
   (defun . oauth2-auto-plist-sync)
   (defun . avy-transpose-lines-in-region)
   (defun . avy-goto-char-timer)
   (defun . avy-setup-default)
   (defun . avy-kill-ring-save-whole-line)
   (defun . avy-kill-whole-line)
   (defun . avy-kill-ring-save-region)
   (defun . avy-kill-region)
   (defun . avy-move-region)
   (defun . avy-copy-region)
   (defun . avy-move-line)
   (defun . avy-copy-line)
   (defun . avy-goto-end-of-line)
   (defun . avy-goto-line-below)
   (defun . avy-goto-line-above)
   (defun . avy-goto-line)
   (defun . avy-goto-word-or-subword-1)
   (defun . avy-goto-subword-1)
   (defun . avy-goto-subword-0)
   (defun . avy-goto-symbol-1-below)
   (defun . avy-goto-symbol-1-above)
   (defun . avy-goto-symbol-1)
   (defun . avy-goto-word-1-below)
   (defun . avy-goto-word-1-above)
   (defun . avy-goto-word-1)
   (defun . avy-goto-whitespace-end)
   (defun . avy-goto-word-0)
   (defun . avy-isearch)
   (defun . avy-goto-char-2-below)
   (defun . avy-goto-char-2-above)
   (defun . avy-goto-char-2)
   (defun . avy-goto-char-in-line)
   (defun . avy-goto-char)
   (defun . avy-process)
   (defun . link-hint-copy-link-at-point)
   (defun . link-hint-open-link-at-point)
   (defun . link-hint-copy-all-links)
   (defun . link-hint-open-all-links)
   (defun . link-hint-copy-multiple-links)
   (defun . link-hint-open-multiple-links)
   (defun . link-hint-copy-link)
   (defun . link-hint-open-link)
   (defun . link-hint-define-type)
   straight-x-pinned-packages
   (defun . straight-dependents)
   (defun . straight-dependencies)
   (defun . straight-bug-report)
   (defun . straight-thaw-versions)
   (defun . straight-freeze-versions)
   (defun . straight-push-all)
   (defun . straight-push-package)
   (defun . straight-pull-all)
   (defun . straight-pull-package-and-deps)
   (defun . straight-pull-package)
   (defun . straight-merge-all)
   (defun . straight-merge-package-and-deps)
   (defun . straight-merge-package)
   (defun . straight-fetch-all)
   (defun . straight-fetch-package-and-deps)
   (defun . straight-fetch-package)
   (defun . straight-normalize-all)
   (defun . straight-normalize-package)
   (defun . straight-prune-build)
   (defun . straight-prune-build-directory)
   (defun . straight-prune-build-cache)
   (defun . straight-rebuild-all)
   (defun . straight-rebuild-package)
   (defun . straight-check-all)
   (defun . straight-check-package)
   (defun . straight-override-recipe)
   (defun . straight-use-recipes)
   (defun . straight-use-package-lazy)
   (defun . straight-use-package-no-build)
   (defun . straight-register-package)
   (defun . straight-use-package)
   (defun . straight-visit-package)
   (defun . straight-visit-package-website)
   (defun . straight-get-recipe)
   (defun . straight-remove-unused-repos)
   (defun . set-irc-server!)
   (defun . set-formatter!)
   (defun . set-rotate-patterns!)
   (defun . set-email-account!)
   (defun . set-eshell-alias!)
   (defun . set-editorconfig-indent-var!)
   (defun . set-lsp-priority!)
   (defun . set-eglot-client!)
   (defun . set-font-ligatures!)
   (defun . set-ligatures!)
   (defun . +default--delete-backward-char-a)
   (defun . doom/backward-delete-whitespace-to-column)
   (defun . +default/insert-file-path)
   (defun . +default/yank-buffer-path-relative-to-project)
   (defun . +default/yank-buffer-path)
   (defun . +default/yank-buffer-contents)
   (defun . +default/yank-pop)
   (defun . +default/newline-below)
   (defun . +default/newline-above)
   (defun . +default/newline)
   (defun . +default/org-notes-headlines)
   (defun . +default/org-notes-search)
   (defun . +default/search-notes-for-symbol-at-point)
   (defun . +default/search-project-for-symbol-at-point)
   (defun . +default/search-other-project)
   (defun . +default/search-project)
   (defun . +default/search-buffer)
   (defun . +default/search-emacsd)
   (defun . +default/search-other-cwd)
   (defun . +default/search-cwd)
   (defun . +default/dired)
   (defun . +default/discover-projects)
   (defun . +default/find-file-under-here)
   (defun . +default/find-in-notes)
   (defun . +default/browse-notes)
   (defun . +default/find-in-templates)
   (defun . +default/browse-templates)
   (defun . +default/browse-project)
   (defun . +default/lsp-command-map)
   (defun . +default/diagnostics)
   (defun . +default/restart-server)
   (defun . +default/new-buffer)
   (defun . +default/man-or-woman)
   (defun . +default/compile)
   (defun . +calendar-cfw:render-button-a)
   (defun . +calendar/open-calendar)
   (defun . +calendar/quit)
   (defun . =calendar)
   (defun . +sh-lookup-documentation-handler)
   (defun . +sh/open-repl)
   (defun . +sh--match-command-subst-in-quotes)
   (defun . +sh--match-variables-in-quotes)
   (defun . +rust/cargo-audit)
   (defun . +rust-cargo-project-p)
   (defun . +org-remove-occur-highlights-h)
   (defun . +org-make-last-point-visible-h)
   (defun . +org-cycle-only-current-subtree-h)
   (defun . +org-yas-expand-maybe-h)
   (defun . +org-indent-maybe-h)
   (defun . +org/hide-next-fold-level)
   (defun . +org/show-next-fold-level)
   (defun . +org/open-all-folds)
   (defun . +org/close-all-folds)
   (defun . +org/close-fold)
   (defun . +org/open-fold)
   (defun . +org/toggle-fold)
   (defun . +org/reformat-at-point)
   (defun . +org/toggle-last-clock)
   (defun . +org/insert-item-above)
   (defun . +org/insert-item-below)
   (defun . +org/shift-return)
   (defun . +org/dwim-at-point)
   (defun . +org/return)
   (defun . +org-pretty-mode)
   (defun . +org-get-todo-keywords-for)
   (defun . +org-realign-table-maybe-a)
   (defun . +org-delete-backward-char-and-realign-table-maybe-h)
   (defun . +org-realign-table-maybe-h)
   (defun . +org/table-insert-row-below)
   (defun . +org/table-insert-column-left)
   (defun . +org/table-previous-row)
   (defun . +org/refile-to-visible)
   (defun . +org/refile-to-last-location)
   (defun . +org/refile-to-running-clock)
   (defun . +org/refile-to-other-buffer)
   (defun . +org/refile-to-other-window)
   (defun . +org/refile-to-file)
   (defun . +org/refile-to-current-file)
   (defun . +org/play-gif-at-point)
   (defun . +org/yank-link)
   (defun . +org/remove-link)
   (defun . +org-play-all-gifs-h)
   (defun . +org-play-gif-at-point-h)
   (defun . +org-http-image-data-fn)
   (defun . +org-inline-image-data-fn)
   (defun . +org-image-file-data-fn)
   (defun . +org-link--doom-executable-link-activate-fn)
   (defun . +org-link--doom-package-link-follow-fn)
   (defun . +org-link--doom-package-link-activate-fn)
   (defun . +org-link--doom-module-link-activate-fn)
   (defun . +org-link--doom-module-link-follow-fn)
   (defun . +org-link--command-link-activate-fn)
   (defun . +org-link--face-link-activate-fn)
   (defun . +org-link--fn-link-activate-fn)
   (defun . +org-link--var-link-activate-fn)
   (defun . +org-link-read-kbd-at-point)
   (defun . +org-link-read-desc-at-point)
   (defun . +org-define-basic-link)
   (defun . +org/export-to-clipboard-as-rich-text)
   (defun . +org/export-to-clipboard)
   (defun . +org-capture-central-project-changelog-file)
   (defun . +org-capture-central-project-notes-file)
   (defun . +org-capture-central-project-todo-file)
   (defun . +org-capture-project-changelog-file)
   (defun . +org-capture-project-notes-file)
   (defun . +org-capture-project-todo-file)
   (defun . +org-capture-notes-file)
   (defun . +org-capture-todo-file)
   (defun . +org-capture-available-keys)
   (defun . +org-capture/open-frame)
   (defun . +org-capture-frame-p)
   (defun . +org-capture-cleanup-frame-h)
   +org-capture-frame-parameters
   (defun . +org-clear-babel-results-h)
   (defun . +org/remove-result-blocks)
   (defun . +org-lookup-documentation-handler)
   (defun . +org-lookup-references-handler)
   (defun . +org-lookup-definition-handler)
   (defun . +org-eval-handler)
   (defun . +org/goto-visible)
   (defun . +org-headline-avy)
   (defun . +org/attach-file-and-insert-link)
   (defun . +org/find-file-in-attachments)
   (defun . +org/open-gallery-from-attachments)
   (defun . +org-attach-icon-for)
   (defun . +markdown/insert-del)
   (defun . +markdown-compile-markdown)
   (defun . +markdown-compile-multimarkdown)
   (defun . +markdown-compile-pandoc)
   (defun . +markdown-compile-marked)
   (defun . +markdown-compile)
   (defun . +markdown-flyspell-word-p)
   (defun . +latex-symbols-company-backend)
   (defun . +latex-fold-last-macro-a)
   (defun . +latex-indent-item-fn)
   (defun . +julia/open-snail-repl)
   (defun . +julia/open-repl)
   inferior-julia-program-name
   (defun . +javascript-tide-project-root-a)
   (defun . +javascript-cleanup-tide-processes-h)
   (defun . +javascript/skewer-cleanup)
   (defun . +javascript/skewer-this-buffer)
   (defun . +javascript/open-repl)
   (defun . +javascript-add-npm-path-h)
   (defun . +javascript-npm-dep-p)
   (defun . +javascript-npm-conf)
   (defun . +java/open-groovy-repl)
   (defun . +java-current-class)
   (defun . +java-current-package)
   (defun . +java-android-mode-maybe-h)
   (defun . +java-android-mode-tag-name)
   (defun . +java-android-mode-in-tags)
   (defun . +java-android-mode-is-layout-file)
   (defun . +emacs-lisp--calculate-lisp-indent-a)
   (defun . +emacs-lisp-highlight-vars-and-faces)
   (defun . +emacs-lisp-non-package-mode)
   (defun . +emacs-lisp-extend-imenu-h)
   (defun . +emacs-lisp-init-straight-maybe-h)
   (defun . +emacs-lisp/edebug-instrument-defun-off)
   (defun . +emacs-lisp/edebug-instrument-defun-on)
   (defun . +emacs-lisp/buttercup-run-project)
   (defun . +emacs-lisp/buttercup-run-file)
   (defun . +emacs-lisp/open-repl)
   (defun . +emacs-lisp-indent-function)
   (defun . +emacs-lisp-lookup-documentation)
   (defun . +emacs-lisp-lookup-definition)
   (defun . +emacs-lisp-outline-level)
   (defun . +emacs-lisp-eval)
   (defun . +cc/ccls-show-references-write)
   (defun . +cc/ccls-show-references-read)
   (defun . +cc/ccls-show-references-not-call)
   (defun . +cc/ccls-show-references-macro)
   (defun . +cc/ccls-show-references-address)
   (defun . +cc/ccls-show-member)
   (defun . +cc/ccls-show-derived)
   (defun . +cc/ccls-show-base)
   (defun . +cc/ccls-show-vars)
   (defun . +cc/ccls-show-caller)
   (defun . +cc/ccls-show-callee)
   (defun . +cc-init-ffap-integration-h)
   (defun . +cc-fontify-constants-h)
   (defun . +cc-cmake-lookup-documentation-fn)
   (defun . +cc/eglot-ccls-show-inheritance-hierarchy)
   (defun . +cc-c-c++-objc-mode)
   (defun . +cc-lineup-arglist-close)
   (defun . +cc-c++-lineup-inclass)
   cpp-mode-map
   (defun . cpp-mode)
   (defun . +tmux-list-panes)
   (defun . +tmux-list-windows)
   (defun . +tmux-list-sessions)
   (defun . +tmux/cd-to-project)
   (defun . +tmux/cd-to-here)
   (defun . +tmux/cd)
   (defun . +tmux/rerun)
   (defun . +tmux/send-region)
   (defun . +tmux/run)
   (defun . +tmux)
   (defun . +tmux:cd-here)
   (defun . +tmux:run)
   (defun . +magit/start-code-review)
   (defun . +magit/quit-all)
   (defun . +magit/quit)
   (defun . +magit-revert-buffer-maybe-h)
   (defun . +magit-mark-stale-buffers-h)
   (defun . +magit-display-buffer-fn)
   (defun . +magit--ignore-version-a)
   (defun . +lookup-xwidget-webkit-open-url-fn)
   (defun . +lookup--online-backend-duckduckgo)
   (defun . +lookup--online-backend-google)
   (defun . +lookup/online-select)
   (defun . +lookup/online)
   (defun . +lookup-online-backend-fn)
   (defun . set-lookup-handlers!)
   (defun . +lookup/synonyms)
   (defun . +lookup/dictionary-definition)
   (defun . +lookup/file)
   (defun . +lookup/documentation)
   (defun . +lookup/references)
   (defun . +lookup/type-definition)
   (defun . +lookup/implementations)
   (defun . +lookup/definition)
   (defun . +lookup:dash)
   (defun . +lookup:online)
   (defun . set-docsets!)
   (defun . set-eval-handler!)
   (defun . set-repl-handler!)
   +eval-runners
   (defun . +eval/send-region-to-repl)
   (defun . +eval/open-repl-other-window)
   (defun . +eval/open-repl-same-window)
   (defun . +eval:repl)
   (defun . +eval:replace-region)
   (defun . +eval:region)
   (defun . +eval/region-and-replace)
   (defun . +eval/buffer-or-region)
   (defun . +eval/line-or-region)
   (defun . +eval/region)
   (defun . +eval/buffer)
   (defun . +eval-region-as-major-mode)
   (defun . +eval-display-results)
   (defun . +eval-display-results-in-overlay)
   (defun . +eval-display-results-in-popup)
   (defun . set-flyspell-predicate!)
   (defun . flyspell-mode!)
   (defun . +spell/previous-error)
   (defun . +spell/next-error)
   (defun . +spell/remove-word)
   (defun . +spell/add-word)
   (defun . +spell-correction-at-point-p)
   (defun . +spell-init-flyspell-predicate-h)
   (defun . set-next-checker!)
   (defun . +syntax-init-popups-h)
   (defun . +vc/browse-at-remote-kill-homepage)
   (defun . +vc/browse-at-remote-homepage)
   (defun . +vc/browse-at-remote-kill)
   (defun . +vc/browse-at-remote)
   (defun . browse-at-remote--format-commit-url-as-codeberg)
   (defun . browse-at-remote--format-region-url-as-codeberg)
   (defun . set-electric!)
   (defun . +dired/dirvish-side-and-follow)
   (defun . +dired-enable-git-info-h)
   (defun . +dired/quit-all)
   (defun . +snippets-expand-on-region-a)
   (defun . +snippets-read-only-maybe-h)
   (defun . +snippets-enable-project-modes-h)
   (defun . +snippets-show-hints-in-header-line-h)
   (defun . +snippets/edit)
   (defun . +snippets/new-alias)
   (defun . +snippets/new)
   (defun . +snippets/find-for-current-mode)
   (defun . +snippets/find-private)
   (defun . +snippets/find)
   (defun . +snippets/delete-to-start-of-field)
   (defun . +snippets/delete-forward-char-or-field)
   (defun . +snippets/delete-backward-char)
   (defun . +snippets/goto-end-of-field)
   (defun . +snippets/goto-start-of-field)
   (defun . +snippets-prompt-private)
   (defun . set-yas-minor-mode!)
   (defun . +fold-hideshow-set-up-overlay-fn)
   (defun . +fold-hideshow-forward-block-by-indent-fn)
   (defun . +fold-hideshow-haml-forward-sexp-fn)
   (defun . +fold/previous)
   (defun . +fold/next)
   (defun . +fold/close-all)
   (defun . +fold/open-all)
   (defun . +fold/close)
   (defun . +fold/open)
   (defun . +fold/open-rec)
   (defun . +fold/toggle)
   (defun . set-file-templates!)
   (defun . set-file-template!)
   (defun . +file-templates/debug)
   (defun . +file-templates/insert-license)
   (defun . +file-templates-module-for-path)
   (defun . +file-templates-get-short-path)
   (defun . +file-templates--expand)
   (defun . +evil/reselect-paste)
   (defun . +evil:c-string-decode)
   (defun . +evil:c-string-encode)
   (defun . +evil:url-decode)
   (defun . +evil:url-encode)
   (defun . +evil/previous-file)
   (defun . +evil/next-file)
   (defun . +evil/previous-frame)
   (defun . +evil/next-frame)
   (defun . +evil/insert-newline-above)
   (defun . +evil/insert-newline-below)
   (defun . +evil/previous-comment)
   (defun . +evil/next-comment)
   (defun . +evil/previous-preproc-directive)
   (defun . +evil/next-preproc-directive)
   (defun . +evil/previous-end-of-method)
   (defun . +evil/next-end-of-method)
   (defun . +evil/previous-beginning-of-method)
   (defun . +evil/next-beginning-of-method)
   (defun . +evil:outer-any-quote)
   (defun . +evil:inner-any-quote)
   (defun . +evil:outer-url-txtobj)
   (defun . +evil:inner-url-txtobj)
   (defun . +evil:defun-txtobj)
   (defun . +evil:whole-buffer-txtobj)
   (defun . +evil:copy-this-file)
   (defun . +evil:move-this-file)
   (defun . +evil:delete-this-file)
   (defun . +evil:read)
   (defun . +evil:help)
   (defun . +evil:kill-matching-buffers)
   (defun . +evil:kill-all-buffers)
   (defun . +evil:cd)
   (defun . +evil:reverse-lines)
   (defun . +evil:compile)
   (defun . +evil:make)
   (defun . +evil:pwd)
   (defun . +evil:open-scratch-buffer)
   (defun . +evil:align-right)
   (defun . +evil:align)
   (defun . +evil-ex-regexp-match)
   (defun . set-evil-initial-state!)
   (defun . +evil-delete)
   (defun . +evil:yank-unindented)
   (defun . +evil:narrow-buffer)
   (defun . +evil:retab)
   (defun . +evil:apply-macro)
   (defun . +evil/window-vsplit-and-follow)
   (defun . +evil/window-split-and-follow)
   (defun . +evil/window-move-down)
   (defun . +evil/window-move-up)
   (defun . +evil/window-move-right)
   (defun . +evil/window-move-left)
   (defun . +evil/alt-paste)
   (defun . +evil/shift-left)
   (defun . +evil/shift-right)
   (defun . +evil--embrace-angle-brackets)
   (defun . +evil--embrace-elisp-fn)
   (defun . +evil--embrace-latex)
   (defun . +evil--embrace-escaped)
   (defun . +evil--embrace-get-pair)
   (defun . +evil--fix-dabbrev-in-minibuffer-h)
   (defun . +evil-join-a)
   (defun . +evil-window-vsplit-a)
   (defun . +evil-window-split-a)
   (defun . +evil--insert-newline-above-and-respect-comments-a)
   (defun . +evil--insert-newline-below-and-respect-comments-a)
   (defun . +evil-replace-filename-modifiers-a)
   (defun . +evil-escape-a)
   (defun . +zen/toggle-fullscreen)
   (defun . +zen/toggle)
   (defun . +workspaces-autosave-real-buffers-a)
   (defun . +workspaces-load-tab-bar-data-from-file-h)
   (defun . +workspaces-load-tab-bar-data-h)
   (defun . +workspaces-save-tab-bar-data-to-file-h)
   (defun . +workspaces-save-tab-bar-data-h)
   (defun . +workspaces-switch-to-project-h)
   (defun . +workspaces-set-project-action-fn)
   (defun . +workspaces-associate-frame-fn)
   (defun . +workspaces-delete-associated-workspace-h)
   (defun . +workspace/display)
   (defun . +workspace-error)
   (defun . +workspace-message)
   (defun . +workspace/swap-right)
   (defun . +workspace/swap-left)
   (defun . +workspace/close-window-or-workspace)
   (defun . +workspace/switch-right)
   (defun . +workspace/switch-left)
   (defun . +workspace/cycle)
   (defun . +workspace/other)
   (defun . +workspace/switch-to-final)
   (defun . +workspace/switch-to-8)
   (defun . +workspace/switch-to-7)
   (defun . +workspace/switch-to-6)
   (defun . +workspace/switch-to-5)
   (defun . +workspace/switch-to-4)
   (defun . +workspace/switch-to-3)
   (defun . +workspace/switch-to-2)
   (defun . +workspace/switch-to-1)
   (defun . +workspace/switch-to-0)
   (defun . +workspace/switch-to)
   (defun . +workspace/new-named)
   (defun . +workspace/new)
   (defun . +workspace/kill-session-and-quit)
   (defun . +workspace/kill-session)
   (defun . +workspace/delete)
   (defun . +workspace/kill)
   (defun . +workspace/rename)
   (defun . +workspace/save)
   (defun . +workspace/load)
   (defun . +workspace/restore-last-session)
   (defun . +workspace-switch)
   (defun . +workspace-kill)
   (defun . +workspace-rename)
   (defun . +workspace-new)
   (defun . +workspace-delete)
   (defun . +workspace-save)
   (defun . +workspace-load)
   (defun . +workspace-orphaned-buffer-list)
   (defun . +workspace-buffer-list)
   (defun . +workspace-list)
   (defun . +workspace-list-names)
   (defun . +workspace-current-name)
   (defun . +workspace-get)
   (defun . +workspace-current)
   (defun . +workspace-contains-buffer-p)
   (defun . +workspace-exists-p)
   (defun . +workspace-p)
   (defface . +workspace-tab-face)
   (defface . +workspace-tab-selected-face)
   (defun . +workspace:switch-previous)
   (defun . +workspace:switch-next)
   (defun . +workspace:delete)
   (defun . +workspace:rename)
   (defun . +workspace:new)
   (defun . +workspace:load)
   (defun . +workspace:save)
   (defun . +vc-gutter/save-and-revert-hunk)
   (defun . +vc-gutter/revert-hunk)
   (defun . +vc-gutter/previous-hunk)
   (defun . +vc-gutter/next-hunk)
   (defun . +vc-gutter/stage-hunk)
   (defun . +treemacs/toggle)
   (defun . set-popup-rules!)
   (defun . set-popup-rule!)
   (defun . +popup-make-rule)
   +popup-defaults +popup--display-buffer-alist
   (defun . +popup-display-buffer-stacked-side-window-fn)
   (defun . +popup-display-buffer-fullframe-fn)
   (defun . +popup-save-a)
   (defun . +popup-close-a)
   (defun . +popup/diagnose)
   (defun . +popup/raise)
   (defun . +popup/restore)
   (defun . +popup/toggle)
   (defun . +popup/close-all)
   (defun . +popup/close)
   (defun . +popup/other)
   (defun . +popup/buffer)
   (defun . other-popup)
   (defun . +popup-kill-buffer-hook-h)
   (defun . +popup-cleanup-rules-h)
   (defun . +popup-close-on-escape-h)
   (defun . +popup-unset-modeline-on-disable-h)
   (defun . +popup-set-modeline-on-enable-h)
   (defun . +popup-adjust-margins-h)
   (defun . +popup-adjust-fringes-h)
   (defun . +popup-alist-from-window-state)
   (defun . +popup-shrink-to-fit)
   (defun . +popup-windows)
   (defun . +popup-parameter-fn)
   (defun . +popup-parameter)
   (defun . +popup-buffer)
   (defun . +popup-window-p)
   (defun . +popup-buffer-p)
   (defun . +popup--init)
   (defun . +modeline-clear-env-in-all-windows-h)
   (defun . +modeline-update-env-in-all-windows-h)
   (defun . +modeline-resize-for-font-h)
   (defun . +doom-dashboard/backward-button)
   (defun . +doom-dashboard/forward-button)
   (defun . +doom-dashboard/open)
   (defun . +vertico/embark-open-in-new-workspace)
   (defun . +vertico/switch-workspace-buffer)
   (defun . +vertico-orderless-disambiguation-dispatch)
   (defun . +vertico-orderless-dispatch)
   (defun . +vertico-basic-remote-all-completions)
   (defun . +vertico-basic-remote-try-completion)
   (defun . +vertico/consult-fd-or-find)
   (defun . +vertico-embark-which-key-indicator)
   (defun . +vertico/jump-list)
   (defun . +vertico/enter-or-preview)
   (defun . +vertico/embark-preview)
   (defun . +vertico/embark-export-write)
   (defun . +vertico-embark-target-package-fn)
   (defun . +vertico/search-symbol-at-point)
   (defun . +vertico/project-search-from-cwd)
   (defun . +vertico/project-search)
   (defun . +vertico-file-search)
   (defun . +vertico/embark-magit-status)
   (defun . +vertico:project-search-from-cwd)
   (defun . +vertico:project-search)
   (defun . +corfu/dabbrev-or-last)
   (defun . +corfu/dabbrev-or-next)
   (defun . +corfu/toggle-auto-complete)
   (defun . +corfu/dabbrev-this-buffer)
   (defun . +corfu/smart-sep-toggle-escape)
   (defun . +corfu/move-to-minibuffer)
   (defun . set-company-backend!)
   (defun . +company/completing-read)
   (defun . +company/dabbrev-code-previous)
   (defun . +company/dict-or-keywords)
   (defun . +company/whole-lines)
   (defun . +company/dabbrev)
   (defun . +company/complete)
   (defun . +company/toggle-auto-completion)
   (defun . +company-has-completion-p)
   (defun . +company-init-backends-h)
   +company-backend-alist
   (defun . doom/toggle-narrow-buffer)
   (defun . doom/widen-indirectly-narrowed-buffer)
   (defun . doom/narrow-buffer-indirectly)
   (defun . doom/set-frame-opacity)
   (defun . doom/window-maximize-vertically)
   (defun . doom/window-maximize-horizontally)
   (defun . doom/window-enlargen)
   (defun . doom/window-maximize-buffer)
   (defun . doom/delete-frame-with-prompt)
   (defun . doom/toggle-line-numbers)
   (defun . doom-disable-line-numbers-h)
   (defun . doom-enable-line-numbers-h)
   (defun . doom-disable-show-paren-mode-h)
   (defun . doom-apply-ansi-color-to-compilation-buffer-h)
   (defun . doom-shut-up-a)
   (defun . doom-preserve-window-position-a)
   (defun . doom-recenter-a)
   (defun . doom-quit-p)
   (defun . doom-resize-window)
   (defun . doom-theme-face-attribute)
   (defun . doom/reload-theme)
   (defun . custom-set-faces!)
   (defun . custom-theme-set-faces!)
   (defun . doom--run-customize-theme-hook)
   doom-customize-theme-hook
   (defun . doom-disable-show-trailing-whitespace-h)
   (defun . doom-enable-show-trailing-whitespace-h)
   (defun . doom-disable-delete-trailing-whitespace-h)
   (defun . doom-enable-delete-trailing-whitespace-h)
   (defun . doom/set-indent-width)
   (defun . doom/toggle-indent-style)
   (defun . doom/unix2dos)
   (defun . doom/dos2unix)
   (defun . doom/delete-trailing-newlines)
   (defun . doom/retab)
   (defun . doom/dumb-dedent)
   (defun . doom/dumb-indent)
   (defun . doom/delete-backward-word)
   (defun . doom/backward-kill-to-bol-and-indent)
   (defun . doom/forward-to-last-non-comment-or-eol)
   (defun . doom/backward-to-bol-or-indent)
   (defun . doom-thing-at-point-or-region)
   (defun . doom-region)
   (defun . doom-region-end)
   (defun . doom-region-beginning)
   (defun . doom-region-active-p)
   (defun . doom-point-in-string-or-comment-p)
   (defun . doom-point-in-string-p)
   (defun . doom-point-in-comment-p)
   (defun . doom-surrounded-p)
   (defun . doom-syntax-ppss)
   (defun . doom-pcre-quote)
   (defun . doom-store-clear)
   (defun . doom-store-member-p)
   (defun . doom-store-rem)
   (defun . doom-store-put)
   (defun . doom-store-get)
   (defun . doom-store-desist)
   (defun . doom-store-persist)
   (defun . doom/restart-and-restore)
   (defun . doom/restart)
   (defun . doom/save-session)
   (defun . doom/load-session)
   (defun . doom/quicksave-session)
   (defun . doom/quickload-session)
   (defun . doom-load-session)
   (defun . doom-save-session)
   (defun . doom-session-file)
   (defun . doom/delete-persistent-scratch-file)
   (defun . doom/revert-scratch-buffer)
   (defun . doom/switch-to-project-scratch-buffer)
   (defun . doom/open-project-scratch-buffer)
   (defun . doom/switch-to-scratch-buffer)
   (defun . doom/open-scratch-buffer)
   (defun . doom-persist-scratch-buffers-after-switch-h)
   (defun . doom-persist-scratch-buffers-h)
   (defun . doom-persist-scratch-buffer-h)
   (defun . doom-scratch-buffer)
   (defun . doom/sandbox)
   (defun . set-project-type!)
   (defun . doom-project-ignored-p)
   (defun . doom-project-browse)
   (defun . doom-project-find-file)
   (defun . doom-project-expand)
   (defun . doom-project-name)
   (defun . doom-project-root)
   (defun . doom-project-p)
   (defun . doom/add-directory-as-project)
   (defun . doom/find-file-in-emacsd)
   (defun . doom/browse-in-emacsd)
   (defun . doom/browse-in-other-project)
   (defun . doom/find-file-in-other-project)
   (defun . project-file-exists-p!)
   projectile-require-project-root projectile-enable-caching projectile-project-root
   (defun . doom-package-homepage)
   (defun . doom/commit-bumps)
   (defun . doom/bumpify-diff)
   (defun . doom/bump-package)
   (defun . doom/bump-module)
   (defun . doom/bump-packages-in-buffer)
   (defun . doom/bump-package-at-point)
   (defun . doom/bumpify-packages-in-buffer)
   (defun . doom/bumpify-package-at-point)
   (defun . doom/reload-packages)
   (defun . doom/help-search-loaded-files)
   (defun . doom/help-search-load-path)
   (defun . doom/help-package-homepage)
   (defun . doom/help-package-config)
   (defun . doom/help-packages)
   (defun . doom/help-custom-variable)
   (defun . doom/help-modules)
   (defun . doom/help-autodefs)
   (defun . doom/help-news)
   (defun . doom/help-faq)
   (defun . doom/help-search-news)
   (defun . doom/help-search)
   (defun . doom/help-search-headings)
   (defun . doom/help)
   (defun . doom/discourse)
   (defun . doom/report-bug)
   (defun . doom/issue-tracker)
   (defun . doom/homepage)
   (defun . doom-completing-read-org-headings)
   (defun . doom/describe-active-minor-mode)
   (defun . doom/describe-package)
   (defun . doom/describe-module)
   (defun . doom/describe-autodefs)
   (defun . doom-active-minor-modes)
   (defun . doom-big-font-mode)
   doom-big-font-mode
   (defun . doom/reset-font-size)
   (defun . doom/decrease-font-size)
   (defun . doom/increase-font-size)
   (defun . doom/reload-font)
   (defun . doom-font-exists-p)
   (defun . doom-adjust-font-size)
   (defun . doom-normalize-font)
   doom-big-font-increment doom-big-font doom-font-increment
   (defun . doom-dir)
   (defun . doom-docs-read-only-h)
   (defun . doom-docs-org-mode)
   (defun . doom-docs-generate-id)
   (defun . doom/reload-docs)
   (defun . doom-docs-mode)
   doom-docs-dir doom-debug-mode doom-debug-variables
   (defun . doom/upgrade)
   (defun . doom/reload-env)
   (defun . doom/reload-autoloads)
   (defun . doom/reload)
   (defun . doom/goto-private-packages-file)
   (defun . doom/goto-private-config-file)
   (defun . doom/goto-private-init-file)
   (defun . doom/find-file-in-private-config)
   (defun . doom/open-private-config)
   doom-before-reload-hook doom-after-reload-hook
   (defun . doom/kill-project-buffers)
   (defun . doom/kill-buried-buffers)
   (defun . doom/kill-matching-buffers)
   (defun . doom/kill-other-buffers)
   (defun . doom/kill-all-buffers)
   (defun . doom/kill-this-buffer-in-all-windows)
   (defun . doom/save-and-kill-buffer)
   (defun . doom-mark-buffer-as-real-h)
   (defun . doom-kill-matching-buffers)
   (defun . doom-kill-buffers-fixup-windows)
   (defun . doom-kill-buffer-fixup-windows)
   (defun . doom-fixup-windows)
   (defun . doom-kill-buffer-and-windows)
   (defun . doom-set-buffer-real)
   (defun . doom-matching-buffers)
   (defun . doom-buried-buffers)
   (defun . doom-visible-buffers)
   (defun . doom-visible-windows)
   (defun . doom-buffers-in-mode)
   (defun . doom-unreal-buffer-p)
   (defun . doom-real-buffer-p)
   (defun . doom-real-buffer-list)
   (defun . doom-non-file-visiting-buffer-p)
   (defun . doom-buried-buffer-p)
   (defun . doom-visible-buffer-p)
   (defun . doom-temp-buffer-p)
   (defun . doom-special-buffer-p)
   (defun . doom-dired-buffer-p)
   (defun . doom-open-projects)
   (defun . doom-project-buffer-list)
   (defun . doom-buffer-list)
   (defun . doom-fallback-buffer)
   (defun . doom-buffer-frame-predicate)
   doom-fallback-buffer-name doom-real-buffer-p doom-unreal-buffer-functions doom-real-buffer-functions "/home/max/.emacs.d/.local/etc/@/init.29.el")))

;;;; 17
((load-with-code-conversion "/home/max/.emacs.d/.local/etc/@/init.29.el" "/home/max/.emacs.d/.local/etc/@/init.29.el" t t)
 ((load-in-progress . t)
  (inhibit-file-name-operation)
  (set-auto-coding-for-load . t)
  (load-file-name . "/home/max/.emacs.d/.local/etc/@/init.29.el")
  (load-true-file-name . "/home/max/.emacs.d/.local/etc/@/init.29.el")
  (read-symbol-shorthands)))

;;;; 18
((load "/home/max/.emacs.d/.local/etc/@/init.29.el" noerror nomessage)
 ((lexical-binding)
  (lread--unescaped-character-literals)))

;;;; 19
((condition-case e
     (load path noerror 'nomessage)
   ((debug doom-error)
    (signal
     (car e)
     (cdr e)))
   ((debug error)
    (setq path
          (locate-file path load-path
                       (get-load-suffixes)))
    (if
        (not
         (and path
              (featurep 'doom)))
        (signal
         (car e)
         (cdr e))
      (cl-loop for
               (err . dir)
               in
               (list
                (cons 'doom-cli-error
                      (expand-file-name "cli" doom-core-dir))
                (cons 'doom-core-error doom-core-dir)
                (cons 'doom-user-error doom-user-dir)
                (cons 'doom-profile-error doom-profile-dir)
                (cons 'doom-module-error doom-modules-dir))
               if
               (file-in-directory-p path dir)
               do
               (signal err
                       (list
                        (file-relative-name path
                                            (expand-file-name "../" dir))
                        e))))))
 nil)

;;;; 20
((doom-load "/home/max/.emacs.d/.local/etc/@/init.29.el" noerror)
 ((path . "/home/max/.emacs.d/.local/etc/@/init.29.el")
  (noerror . noerror)))

;;;; 21
((let
     (kill-emacs-query-functions kill-emacs-hook)
   (doom-load init-file 'noerror)
   (doom-initialize-packages))
 ((kill-emacs-query-functions)
  (kill-emacs-hook org-babel-remove-temporary-stable-directory org-babel-remove-temporary-directory)))

;;;; 22
((let
     ((init-file
       (doom-profile-init-file)))
   (if
       (file-exists-p init-file)
       nil
     (user-error "Profile init file hasn't been generated. Did you forgot to run 'doom sync'?"))
   (let
       (kill-emacs-query-functions kill-emacs-hook)
     (doom-load init-file 'noerror)
     (doom-initialize-packages)))
 ((init-file . "/home/max/.emacs.d/.local/etc/@/init.29.el")))

;;;; 23
((progn
   (doom-require 'doom-profiles)
   (let
       ((init-file
         (doom-profile-init-file)))
     (if
         (file-exists-p init-file)
         nil
       (user-error "Profile init file hasn't been generated. Did you forgot to run 'doom sync'?"))
     (let
         (kill-emacs-query-functions kill-emacs-hook)
       (doom-load init-file 'noerror)
       (doom-initialize-packages))))
 nil)

;;;; 24
((if noninteractive
     (progn
       (doom-require 'doom-profiles)
       (let
           ((init-file
             (doom-profile-init-file)))
         (if
             (file-exists-p init-file)
             nil
           (user-error "Profile init file hasn't been generated. Did you forgot to run 'doom sync'?"))
         (let
             (kill-emacs-query-functions kill-emacs-hook)
           (doom-load init-file 'noerror)
           (doom-initialize-packages)))))
 nil)

;;;; 25
((eval-buffer #<buffer  *load*-278617> nil "/home/max/.emacs.d/lisp/doom-start.el" nil t)
 ((eval-buffer-list #<buffer  *load*-278617> #<buffer  *load*>)
  (standard-output)
  (lexical-binding . t)
  (standard-input . #<buffer  *load*-278617>)
  (macroexp--dynvars doom-incremental-idle-timer doom-incremental-first-idle-timer doom-incremental-packages doom-inhibit-local-var-hooks)
  (current-load-list
   (defun . doom-init-local-var-hooks-h)
   (defun . doom-run-first-hooks-if-files-open-h)
   (require . doom-modules)
   (defun . doom-display-benchmark-h)
   (defun . doom-load-packages-incrementally-h)
   (defun . doom-load-packages-incrementally)
   doom-incremental-idle-timer doom-incremental-first-idle-timer doom-incremental-packages
   (defun . doom-run-local-var-hooks-maybe-h)
   (defun . doom-run-local-var-hooks-h)
   doom-inhibit-local-var-hooks doom-first-buffer-hook doom-first-file-hook doom-first-input-hook "/home/max/.emacs.d/lisp/doom-start.el")))

;;;; 26
((load-with-code-conversion "/home/max/.emacs.d/lisp/doom-start.el" "/home/max/.emacs.d/lisp/doom-start.el" nil t)
 ((load-in-progress . t)
  (inhibit-file-name-operation)
  (set-auto-coding-for-load . t)
  (load-file-name . "/home/max/.emacs.d/lisp/doom-start.el")
  (load-true-file-name . "/home/max/.emacs.d/lisp/doom-start.el")
  (read-symbol-shorthands)))

;;;; 27
((require doom-start)
 ((lexical-binding)
  (lread--unescaped-character-literals)))

;;;; 28
((let
     ((doom-print-level
       (or nil doom-print-level))
      (doom-print-indent
       (+
        (if t
            (or nil doom-print-indent-increment)
          0)
        doom-print-indent)))
   (require 'doom-start)
   (doom-print
    (doom-print--format
     (doom-print--class 'success "Initialized Doom Emacs %s")
     doom-version))
   (doom-print
    (doom-print--format
     (if
         (hash-table-p doom-modules)
         (doom-print--class 'success "Detected %d modules"
                            (hash-table-count doom-modules))
       (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?"))))
   (doom-print
    (doom-print--format
     (doom-print--class 'success "Detected %d packages")
     (length doom-packages)))
   (doom-print
    (doom-print--format
     (doom-print--class 'start "Checking Doom core for irregularities...")))
   (progn
     (let
         ((doom-print-level
           (or nil doom-print-level))
          (doom-print-indent
           (+
            (if t
                (or nil doom-print-indent-increment)
              0)
            doom-print-indent)))
       (let
           ((tail
             (list "savehist" "projectile.cache")))
         (while tail
           (let
               ((file
                 (car tail)))
             (let*
                 ((size
                   (and t
                        (condition-case nil
                            (progn
                              (doom-file-size file doom-cache-dir))
                          (error nil)))))
               (if size
                   (if
                       (> size 1048576)
                       (progn
                         (progn
                           (if inhibit-message nil
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                  (/ size 1024 1024.0)))))
                           (setq doom-doctor--warnings
                                 (cons
                                  (doom-print--format
                                   (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                      (/ size 1024 1024.0)))
                                  doom-doctor--warnings)))
                         (progn
                           (let
                               ((doom-print-level
                                 (or nil doom-print-level))
                                (doom-print-indent
                                 (+
                                  (if t
                                      (or nil doom-print-indent-increment)
                                    0)
                                  doom-print-indent)))
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'p "Consider deleting it from your system (manually)")))))))
                 nil))
             (setq tail
                   (cdr tail)))))
       (if
           (condition-case nil
               (progn
                 (executable-find doom-fd-executable))
             (error nil))
           nil
         (progn
           (if inhibit-message nil
             (doom-print
              (doom-print--format
               (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))))
           (setq doom-doctor--warnings
                 (cons
                  (doom-print--format
                   (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                  doom-doctor--warnings))))
       (require 'projectile)
       (if
           (projectile-project-root "~")
           (progn
             (progn
               (if inhibit-message nil
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'warn "Your $HOME is recognized as a project root"))))
               (setq doom-doctor--warnings
                     (cons
                      (doom-print--format
                       (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                      doom-doctor--warnings)))
             (progn
               (let
                   ((doom-print-level
                     (or nil doom-print-level))
                    (doom-print-indent
                     (+
                      (if t
                          (or nil doom-print-indent-increment)
                        0)
                      doom-print-indent)))
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'p "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")))))))
       (if
           (and
            (file-equal-p doom-user-dir "~/.config/doom")
            (file-directory-p "~/.doom.d"))
           (progn
             (doom-print
              (doom-print--format
               (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
               (doom-print--class 'path doom-user-dir)))
             (progn
               (let
                   ((doom-print-level
                     (or nil doom-print-level))
                    (doom-print-indent
                     (+
                      (if t
                          (or nil doom-print-indent-increment)
                        0)
                      doom-print-indent)))
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'p "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")))))))
       (if
           (not
            (executable-find "fc-list"))
           (progn
             (if inhibit-message nil
               (doom-print
                (doom-print--format
                 (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))))
             (setq doom-doctor--warnings
                   (cons
                    (doom-print--format
                     (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                    doom-doctor--warnings)))
         (if
             (and
              (cond
               ((eq system-type 'gnu/linux)
                (let nil
                  (concat
                   (or
                    (getenv "XDG_DATA_HOME")
                    "~/.local/share")
                   "/fonts/")))
               ((eq system-type 'darwin)
                (let nil "~/Library/Fonts/")))
              (require 'nerd-icons nil t))
             (progn
               (let
                   ((temp-buffer
                     (generate-new-buffer " *temp*" t)))
                 (save-current-buffer
                   (set-buffer temp-buffer)
                   (unwind-protect
                       (progn
                         (let
                             ((errors 0))
                           (let*
                               ((output
                                 (doom-call-process "fc-list" "" "file"))
                                (status
                                 (if output
                                     (car-safe
                                      (prog1 output
                                        (setq output
                                              (cdr output))))
                                   (signal 'wrong-number-of-arguments
                                           (list
                                            '(status . output)
                                            (length output))))))
                             (if
                                 (not
                                  (= 0 status))
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?")))
                               (insert
                                (cdr
                                 (doom-call-process "fc-list" "" "file")))
                               (let
                                   ((tail nerd-icons-font-names))
                                 (while tail
                                   (let
                                       ((font
                                         (car tail)))
                                     (if
                                         (save-excursion
                                           (re-search-backward font nil t))
                                         (doom-print
                                          (doom-print--format
                                           (doom-print--style 'green "Found font %s" font)))
                                       (doom-print
                                        (doom-print--format
                                         (doom-print--class 'warn "%S font is not installed on your system")
                                         font))
                                       (setq errors
                                             (1+ errors)))
                                     (setq tail
                                           (cdr tail)))))
                               (if
                                   (> errors 0)
                                   (progn
                                     (progn
                                       (let
                                           ((doom-print-level
                                             (or nil doom-print-level))
                                            (doom-print-indent
                                             (+
                                              (if t
                                                  (or nil doom-print-indent-increment)
                                                0)
                                              doom-print-indent)))
                                         (doom-print
                                          (doom-print--format
                                           (doom-print--class 'p "Some needed fonts are not properly installed on your system. To download and " "install them, run `M-x nerd-icons-install-fonts' from within Doom Emacs. " "However, on Windows this command will only download them; the fonts must " "be installed manually afterwards.")))))))))))
                     (and
                      (buffer-name temp-buffer)
                      (kill-buffer temp-buffer))))))))))
   (doom-print
    (doom-print--format
     (doom-print--class 'start "Checking for stale elc files in your DOOMDIR...")))
   (if
       (file-directory-p doom-user-dir)
       (progn
         (progn
           (let
               ((doom-print-level
                 (or nil doom-print-level))
                (doom-print-indent
                 (+
                  (if t
                      (or nil doom-print-indent-increment)
                    0)
                  doom-print-indent)))
             (elc-check-dir doom-user-dir)))))
   (if doom-modules
       (progn
         (doom-print
          (doom-print--format
           (doom-print--class 'start "Checking your enabled modules...")))
         (advice-add #'require :around #'doom-shut-up-a)
         (let
             ((tail
               (doom-module-list)))
           (while tail
             (let
                 ((x54
                   (car tail)))
               (progn
                 (ignore
                  (consp x54))
                 (let*
                     ((x55
                       (car-safe x54))
                      (x56
                       (cdr-safe x54)))
                   (let
                       ((group x55)
                        (name x56))
                     (let
                         ((doom-context doom-context))
                       (let
                           ((tail
                             (ensure-list 'doctor)))
                         (while tail
                           (let
                               ((context
                                 (car tail)))
                             (doom-context-push context)
                             (setq tail
                                   (cdr tail)))))
                       (let
                           (doom-local-errors doom-local-warnings)
                         (let
                             (doom-doctor--errors doom-doctor--warnings)
                           (condition-case ex
                               (let
                                   ((doom-module-context
                                     (doom-module-context
                                      (cons group name))))
                                 (if
                                     (and
                                      (not doom-inhibit-log)
                                      (or
                                       (not noninteractive)
                                       (<= 2 doom-log-level)))
                                     (progn
                                       (doom--log 2 ":context:module: =%s" doom-module-context)))
                                 (let
                                     ((doctor-file
                                       (doom-module-expand-path group name "doctor.el"))
                                      (packages-file
                                       (doom-module-expand-path group name doom-module-packages-file)))
                                   (if packages-file
                                       (progn
                                         (let*
                                             ((doom-output-indent 6)
                                              (--cl-var--
                                               (let
                                                   ((doom-context doom-context))
                                                 (let
                                                     ((tail
                                                       (ensure-list 'packages)))
                                                   (while tail
                                                     (let
                                                         ((context
                                                           (car tail)))
                                                       (doom-context-push context)
                                                       (setq tail
                                                             (cdr tail)))))
                                                 (let*
                                                     (doom-packages doom-disabled-packages)
                                                   (load packages-file 'noerror 'nomessage)
                                                   (mapcar #'car doom-packages))))
                                              (name nil))
                                           (while
                                               (consp --cl-var--)
                                             (setq name
                                                   (car --cl-var--))
                                             (if
                                                 (or
                                                  (doom-package-get name :disable)
                                                  (eval
                                                   (doom-package-get name :ignore))
                                                  (plist-member
                                                   (doom-package-get name :recipe)
                                                   :local-repo)
                                                  (locate-library
                                                   (symbol-name name))
                                                  (doom-package-built-in-p name)
                                                  (doom-package-installed-p name))
                                                 (progn)
                                               (doom-print
                                                (doom-print--format
                                                 (doom-print--class 'error "Missing emacs package: %S")
                                                 name)))
                                             (setq --cl-var--
                                                   (cdr --cl-var--)))
                                           nil)))
                                   (if doctor-file
                                       (progn
                                         (let
                                             ((inhibit-message t))
                                           (load doctor-file 'noerror 'nomessage))))))
                             ((debug file-missing)
                              (progn
                                (if inhibit-message nil
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'error "%s"
                                                       (error-message-string ex)))))
                                (setq doom-doctor--errors
                                      (cons
                                       (doom-print--format
                                        (doom-print--class 'error "%s"
                                                           (error-message-string ex)))
                                       doom-doctor--errors))))
                             ((debug error)
                              (progn
                                (if inhibit-message nil
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'error "Syntax error: %s" ex))))
                                (setq doom-doctor--errors
                                      (cons
                                       (doom-print--format
                                        (doom-print--class 'error "Syntax error: %s" ex))
                                       doom-doctor--errors)))))
                           (if
                               (or doom-doctor--errors doom-doctor--warnings)
                               (progn
                                 (progn
                                   (let
                                       ((doom-print-level
                                         (or nil doom-print-level))
                                        (doom-print-indent
                                         (+
                                          (if t
                                              (or nil doom-print-indent-increment)
                                            0)
                                          doom-print-indent)))
                                     (doom-print
                                      (doom-print--format
                                       (doom-print--class 'start
                                                          (doom-print--style 'bold "%s %s"))
                                       group name))
                                     (doom-print
                                      (doom-print--format "%s"
                                                          (string-join
                                                           (append doom-doctor--errors doom-doctor--warnings)
                                                           "\n")))))
                                 (progn
                                   (setq doom-local-errors doom-doctor--errors)
                                   (setq doom-local-warnings doom-doctor--warnings)))))
                         (setq doom-doctor--errors
                               (append doom-doctor--errors doom-local-errors))
                         (setq doom-doctor--warnings
                               (append doom-doctor--warnings doom-local-warnings)))))))
               (setq tail
                     (cdr tail))))))))
 ((doom-print-level . notice)
  (doom-print-indent . 2)))

;;;; 29
((progn
   (let
       ((doom-print-level
         (or nil doom-print-level))
        (doom-print-indent
         (+
          (if t
              (or nil doom-print-indent-increment)
            0)
          doom-print-indent)))
     (require 'doom-start)
     (doom-print
      (doom-print--format
       (doom-print--class 'success "Initialized Doom Emacs %s")
       doom-version))
     (doom-print
      (doom-print--format
       (if
           (hash-table-p doom-modules)
           (doom-print--class 'success "Detected %d modules"
                              (hash-table-count doom-modules))
         (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?"))))
     (doom-print
      (doom-print--format
       (doom-print--class 'success "Detected %d packages")
       (length doom-packages)))
     (doom-print
      (doom-print--format
       (doom-print--class 'start "Checking Doom core for irregularities...")))
     (progn
       (let
           ((doom-print-level
             (or nil doom-print-level))
            (doom-print-indent
             (+
              (if t
                  (or nil doom-print-indent-increment)
                0)
              doom-print-indent)))
         (let
             ((tail
               (list "savehist" "projectile.cache")))
           (while tail
             (let
                 ((file
                   (car tail)))
               (let*
                   ((size
                     (and t
                          (condition-case nil
                              (progn
                                (doom-file-size file doom-cache-dir))
                            (error nil)))))
                 (if size
                     (if
                         (> size 1048576)
                         (progn
                           (progn
                             (if inhibit-message nil
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                    (/ size 1024 1024.0)))))
                             (setq doom-doctor--warnings
                                   (cons
                                    (doom-print--format
                                     (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                        (/ size 1024 1024.0)))
                                    doom-doctor--warnings)))
                           (progn
                             (let
                                 ((doom-print-level
                                   (or nil doom-print-level))
                                  (doom-print-indent
                                   (+
                                    (if t
                                        (or nil doom-print-indent-increment)
                                      0)
                                    doom-print-indent)))
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'p "Consider deleting it from your system (manually)")))))))
                   nil))
               (setq tail
                     (cdr tail)))))
         (if
             (condition-case nil
                 (progn
                   (executable-find doom-fd-executable))
               (error nil))
             nil
           (progn
             (if inhibit-message nil
               (doom-print
                (doom-print--format
                 (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))))
             (setq doom-doctor--warnings
                   (cons
                    (doom-print--format
                     (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                    doom-doctor--warnings))))
         (require 'projectile)
         (if
             (projectile-project-root "~")
             (progn
               (progn
                 (if inhibit-message nil
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'warn "Your $HOME is recognized as a project root"))))
                 (setq doom-doctor--warnings
                       (cons
                        (doom-print--format
                         (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                        doom-doctor--warnings)))
               (progn
                 (let
                     ((doom-print-level
                       (or nil doom-print-level))
                      (doom-print-indent
                       (+
                        (if t
                            (or nil doom-print-indent-increment)
                          0)
                        doom-print-indent)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'p "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")))))))
         (if
             (and
              (file-equal-p doom-user-dir "~/.config/doom")
              (file-directory-p "~/.doom.d"))
             (progn
               (doom-print
                (doom-print--format
                 (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                 (doom-print--class 'path doom-user-dir)))
               (progn
                 (let
                     ((doom-print-level
                       (or nil doom-print-level))
                      (doom-print-indent
                       (+
                        (if t
                            (or nil doom-print-indent-increment)
                          0)
                        doom-print-indent)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'p "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")))))))
         (if
             (not
              (executable-find "fc-list"))
             (progn
               (if inhibit-message nil
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))))
               (setq doom-doctor--warnings
                     (cons
                      (doom-print--format
                       (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                      doom-doctor--warnings)))
           (if
               (and
                (cond
                 ((eq system-type 'gnu/linux)
                  (let nil
                    (concat
                     (or
                      (getenv "XDG_DATA_HOME")
                      "~/.local/share")
                     "/fonts/")))
                 ((eq system-type 'darwin)
                  (let nil "~/Library/Fonts/")))
                (require 'nerd-icons nil t))
               (progn
                 (let
                     ((temp-buffer
                       (generate-new-buffer " *temp*" t)))
                   (save-current-buffer
                     (set-buffer temp-buffer)
                     (unwind-protect
                         (progn
                           (let
                               ((errors 0))
                             (let*
                                 ((output
                                   (doom-call-process "fc-list" "" "file"))
                                  (status
                                   (if output
                                       (car-safe
                                        (prog1 output
                                          (setq output
                                                (cdr output))))
                                     (signal 'wrong-number-of-arguments
                                             (list
                                              '(status . output)
                                              (length output))))))
                               (if
                                   (not
                                    (= 0 status))
                                   (doom-print
                                    (doom-print--format
                                     (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?")))
                                 (insert
                                  (cdr
                                   (doom-call-process "fc-list" "" "file")))
                                 (let
                                     ((tail nerd-icons-font-names))
                                   (while tail
                                     (let
                                         ((font
                                           (car tail)))
                                       (if
                                           (save-excursion
                                             (re-search-backward font nil t))
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--style 'green "Found font %s" font)))
                                         (doom-print
                                          (doom-print--format
                                           (doom-print--class 'warn "%S font is not installed on your system")
                                           font))
                                         (setq errors
                                               (1+ errors)))
                                       (setq tail
                                             (cdr tail)))))
                                 (if
                                     (> errors 0)
                                     (progn
                                       (progn
                                         (let
                                             ((doom-print-level
                                               (or nil doom-print-level))
                                              (doom-print-indent
                                               (+
                                                (if t
                                                    (or nil doom-print-indent-increment)
                                                  0)
                                                doom-print-indent)))
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'p "Some needed fonts are not properly installed on your system. To download and " "install them, run `M-x nerd-icons-install-fonts' from within Doom Emacs. " "However, on Windows this command will only download them; the fonts must " "be installed manually afterwards.")))))))))))
                       (and
                        (buffer-name temp-buffer)
                        (kill-buffer temp-buffer))))))))))
     (doom-print
      (doom-print--format
       (doom-print--class 'start "Checking for stale elc files in your DOOMDIR...")))
     (if
         (file-directory-p doom-user-dir)
         (progn
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (elc-check-dir doom-user-dir)))))
     (if doom-modules
         (progn
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking your enabled modules...")))
           (advice-add #'require :around #'doom-shut-up-a)
           (let
               ((tail
                 (doom-module-list)))
             (while tail
               (let
                   ((x54
                     (car tail)))
                 (progn
                   (ignore
                    (consp x54))
                   (let*
                       ((x55
                         (car-safe x54))
                        (x56
                         (cdr-safe x54)))
                     (let
                         ((group x55)
                          (name x56))
                       (let
                           ((doom-context doom-context))
                         (let
                             ((tail
                               (ensure-list 'doctor)))
                           (while tail
                             (let
                                 ((context
                                   (car tail)))
                               (doom-context-push context)
                               (setq tail
                                     (cdr tail)))))
                         (let
                             (doom-local-errors doom-local-warnings)
                           (let
                               (doom-doctor--errors doom-doctor--warnings)
                             (condition-case ex
                                 (let
                                     ((doom-module-context
                                       (doom-module-context
                                        (cons group name))))
                                   (if
                                       (and
                                        (not doom-inhibit-log)
                                        (or
                                         (not noninteractive)
                                         (<= 2 doom-log-level)))
                                       (progn
                                         (doom--log 2 ":context:module: =%s" doom-module-context)))
                                   (let
                                       ((doctor-file
                                         (doom-module-expand-path group name "doctor.el"))
                                        (packages-file
                                         (doom-module-expand-path group name doom-module-packages-file)))
                                     (if packages-file
                                         (progn
                                           (let*
                                               ((doom-output-indent 6)
                                                (--cl-var--
                                                 (let
                                                     ((doom-context doom-context))
                                                   (let
                                                       ((tail
                                                         (ensure-list 'packages)))
                                                     (while tail
                                                       (let
                                                           ((context
                                                             (car tail)))
                                                         (doom-context-push context)
                                                         (setq tail
                                                               (cdr tail)))))
                                                   (let*
                                                       (doom-packages doom-disabled-packages)
                                                     (load packages-file 'noerror 'nomessage)
                                                     (mapcar #'car doom-packages))))
                                                (name nil))
                                             (while
                                                 (consp --cl-var--)
                                               (setq name
                                                     (car --cl-var--))
                                               (if
                                                   (or
                                                    (doom-package-get name :disable)
                                                    (eval
                                                     (doom-package-get name :ignore))
                                                    (plist-member
                                                     (doom-package-get name :recipe)
                                                     :local-repo)
                                                    (locate-library
                                                     (symbol-name name))
                                                    (doom-package-built-in-p name)
                                                    (doom-package-installed-p name))
                                                   (progn)
                                                 (doom-print
                                                  (doom-print--format
                                                   (doom-print--class 'error "Missing emacs package: %S")
                                                   name)))
                                               (setq --cl-var--
                                                     (cdr --cl-var--)))
                                             nil)))
                                     (if doctor-file
                                         (progn
                                           (let
                                               ((inhibit-message t))
                                             (load doctor-file 'noerror 'nomessage))))))
                               ((debug file-missing)
                                (progn
                                  (if inhibit-message nil
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'error "%s"
                                                         (error-message-string ex)))))
                                  (setq doom-doctor--errors
                                        (cons
                                         (doom-print--format
                                          (doom-print--class 'error "%s"
                                                             (error-message-string ex)))
                                         doom-doctor--errors))))
                               ((debug error)
                                (progn
                                  (if inhibit-message nil
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'error "Syntax error: %s" ex))))
                                  (setq doom-doctor--errors
                                        (cons
                                         (doom-print--format
                                          (doom-print--class 'error "Syntax error: %s" ex))
                                         doom-doctor--errors)))))
                             (if
                                 (or doom-doctor--errors doom-doctor--warnings)
                                 (progn
                                   (progn
                                     (let
                                         ((doom-print-level
                                           (or nil doom-print-level))
                                          (doom-print-indent
                                           (+
                                            (if t
                                                (or nil doom-print-indent-increment)
                                              0)
                                            doom-print-indent)))
                                       (doom-print
                                        (doom-print--format
                                         (doom-print--class 'start
                                                            (doom-print--style 'bold "%s %s"))
                                         group name))
                                       (doom-print
                                        (doom-print--format "%s"
                                                            (string-join
                                                             (append doom-doctor--errors doom-doctor--warnings)
                                                             "\n")))))
                                   (progn
                                     (setq doom-local-errors doom-doctor--errors)
                                     (setq doom-local-warnings doom-doctor--warnings)))))
                           (setq doom-doctor--errors
                                 (append doom-doctor--errors doom-local-errors))
                           (setq doom-doctor--warnings
                                 (append doom-doctor--warnings doom-local-warnings)))))))
                 (setq tail
                       (cdr tail)))))))))
 nil)

;;;; 30
((condition-case ex
     (progn
       (let
           ((doom-print-level
             (or nil doom-print-level))
            (doom-print-indent
             (+
              (if t
                  (or nil doom-print-indent-increment)
                0)
              doom-print-indent)))
         (require 'doom-start)
         (doom-print
          (doom-print--format
           (doom-print--class 'success "Initialized Doom Emacs %s")
           doom-version))
         (doom-print
          (doom-print--format
           (if
               (hash-table-p doom-modules)
               (doom-print--class 'success "Detected %d modules"
                                  (hash-table-count doom-modules))
             (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?"))))
         (doom-print
          (doom-print--format
           (doom-print--class 'success "Detected %d packages")
           (length doom-packages)))
         (doom-print
          (doom-print--format
           (doom-print--class 'start "Checking Doom core for irregularities...")))
         (progn
           (let
               ((doom-print-level
                 (or nil doom-print-level))
                (doom-print-indent
                 (+
                  (if t
                      (or nil doom-print-indent-increment)
                    0)
                  doom-print-indent)))
             (let
                 ((tail
                   (list "savehist" "projectile.cache")))
               (while tail
                 (let
                     ((file
                       (car tail)))
                   (let*
                       ((size
                         (and t
                              (condition-case nil
                                  (progn
                                    (doom-file-size file doom-cache-dir))
                                (error nil)))))
                     (if size
                         (if
                             (> size 1048576)
                             (progn
                               (progn
                                 (if inhibit-message nil
                                   (doom-print
                                    (doom-print--format
                                     (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                        (/ size 1024 1024.0)))))
                                 (setq doom-doctor--warnings
                                       (cons
                                        (doom-print--format
                                         (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                            (/ size 1024 1024.0)))
                                        doom-doctor--warnings)))
                               (progn
                                 (let
                                     ((doom-print-level
                                       (or nil doom-print-level))
                                      (doom-print-indent
                                       (+
                                        (if t
                                            (or nil doom-print-indent-increment)
                                          0)
                                        doom-print-indent)))
                                   (doom-print
                                    (doom-print--format
                                     (doom-print--class 'p "Consider deleting it from your system (manually)")))))))
                       nil))
                   (setq tail
                         (cdr tail)))))
             (if
                 (condition-case nil
                     (progn
                       (executable-find doom-fd-executable))
                   (error nil))
                 nil
               (progn
                 (if inhibit-message nil
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))))
                 (setq doom-doctor--warnings
                       (cons
                        (doom-print--format
                         (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                        doom-doctor--warnings))))
             (require 'projectile)
             (if
                 (projectile-project-root "~")
                 (progn
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Your $HOME is recognized as a project root"))))
                     (setq doom-doctor--warnings
                           (cons
                            (doom-print--format
                             (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                            doom-doctor--warnings)))
                   (progn
                     (let
                         ((doom-print-level
                           (or nil doom-print-level))
                          (doom-print-indent
                           (+
                            (if t
                                (or nil doom-print-indent-increment)
                              0)
                            doom-print-indent)))
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'p "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")))))))
             (if
                 (and
                  (file-equal-p doom-user-dir "~/.config/doom")
                  (file-directory-p "~/.doom.d"))
                 (progn
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                     (doom-print--class 'path doom-user-dir)))
                   (progn
                     (let
                         ((doom-print-level
                           (or nil doom-print-level))
                          (doom-print-indent
                           (+
                            (if t
                                (or nil doom-print-indent-increment)
                              0)
                            doom-print-indent)))
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'p "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")))))))
             (if
                 (not
                  (executable-find "fc-list"))
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                          doom-doctor--warnings)))
               (if
                   (and
                    (cond
                     ((eq system-type 'gnu/linux)
                      (let nil
                        (concat
                         (or
                          (getenv "XDG_DATA_HOME")
                          "~/.local/share")
                         "/fonts/")))
                     ((eq system-type 'darwin)
                      (let nil "~/Library/Fonts/")))
                    (require 'nerd-icons nil t))
                   (progn
                     (let
                         ((temp-buffer
                           (generate-new-buffer " *temp*" t)))
                       (save-current-buffer
                         (set-buffer temp-buffer)
                         (unwind-protect
                             (progn
                               (let
                                   ((errors 0))
                                 (let*
                                     ((output
                                       (doom-call-process "fc-list" "" "file"))
                                      (status
                                       (if output
                                           (car-safe
                                            (prog1 output
                                              (setq output
                                                    (cdr output))))
                                         (signal 'wrong-number-of-arguments
                                                 (list
                                                  '(status . output)
                                                  (length output))))))
                                   (if
                                       (not
                                        (= 0 status))
                                       (doom-print
                                        (doom-print--format
                                         (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?")))
                                     (insert
                                      (cdr
                                       (doom-call-process "fc-list" "" "file")))
                                     (let
                                         ((tail nerd-icons-font-names))
                                       (while tail
                                         (let
                                             ((font
                                               (car tail)))
                                           (if
                                               (save-excursion
                                                 (re-search-backward font nil t))
                                               (doom-print
                                                (doom-print--format
                                                 (doom-print--style 'green "Found font %s" font)))
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'warn "%S font is not installed on your system")
                                               font))
                                             (setq errors
                                                   (1+ errors)))
                                           (setq tail
                                                 (cdr tail)))))
                                     (if
                                         (> errors 0)
                                         (progn
                                           (progn
                                             (let
                                                 ((doom-print-level
                                                   (or nil doom-print-level))
                                                  (doom-print-indent
                                                   (+
                                                    (if t
                                                        (or nil doom-print-indent-increment)
                                                      0)
                                                    doom-print-indent)))
                                               (doom-print
                                                (doom-print--format
                                                 (doom-print--class 'p "Some needed fonts are not properly installed on your system. To download and " "install them, run `M-x nerd-icons-install-fonts' from within Doom Emacs. " "However, on Windows this command will only download them; the fonts must " "be installed manually afterwards.")))))))))))
                           (and
                            (buffer-name temp-buffer)
                            (kill-buffer temp-buffer))))))))))
         (doom-print
          (doom-print--format
           (doom-print--class 'start "Checking for stale elc files in your DOOMDIR...")))
         (if
             (file-directory-p doom-user-dir)
             (progn
               (progn
                 (let
                     ((doom-print-level
                       (or nil doom-print-level))
                      (doom-print-indent
                       (+
                        (if t
                            (or nil doom-print-indent-increment)
                          0)
                        doom-print-indent)))
                   (elc-check-dir doom-user-dir)))))
         (if doom-modules
             (progn
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking your enabled modules...")))
               (advice-add #'require :around #'doom-shut-up-a)
               (let
                   ((tail
                     (doom-module-list)))
                 (while tail
                   (let
                       ((x54
                         (car tail)))
                     (progn
                       (ignore
                        (consp x54))
                       (let*
                           ((x55
                             (car-safe x54))
                            (x56
                             (cdr-safe x54)))
                         (let
                             ((group x55)
                              (name x56))
                           (let
                               ((doom-context doom-context))
                             (let
                                 ((tail
                                   (ensure-list 'doctor)))
                               (while tail
                                 (let
                                     ((context
                                       (car tail)))
                                   (doom-context-push context)
                                   (setq tail
                                         (cdr tail)))))
                             (let
                                 (doom-local-errors doom-local-warnings)
                               (let
                                   (doom-doctor--errors doom-doctor--warnings)
                                 (condition-case ex
                                     (let
                                         ((doom-module-context
                                           (doom-module-context
                                            (cons group name))))
                                       (if
                                           (and
                                            (not doom-inhibit-log)
                                            (or
                                             (not noninteractive)
                                             (<= 2 doom-log-level)))
                                           (progn
                                             (doom--log 2 ":context:module: =%s" doom-module-context)))
                                       (let
                                           ((doctor-file
                                             (doom-module-expand-path group name "doctor.el"))
                                            (packages-file
                                             (doom-module-expand-path group name doom-module-packages-file)))
                                         (if packages-file
                                             (progn
                                               (let*
                                                   ((doom-output-indent 6)
                                                    (--cl-var--
                                                     (let
                                                         ((doom-context doom-context))
                                                       (let
                                                           ((tail
                                                             (ensure-list 'packages)))
                                                         (while tail
                                                           (let
                                                               ((context
                                                                 (car tail)))
                                                             (doom-context-push context)
                                                             (setq tail
                                                                   (cdr tail)))))
                                                       (let*
                                                           (doom-packages doom-disabled-packages)
                                                         (load packages-file 'noerror 'nomessage)
                                                         (mapcar #'car doom-packages))))
                                                    (name nil))
                                                 (while
                                                     (consp --cl-var--)
                                                   (setq name
                                                         (car --cl-var--))
                                                   (if
                                                       (or
                                                        (doom-package-get name :disable)
                                                        (eval
                                                         (doom-package-get name :ignore))
                                                        (plist-member
                                                         (doom-package-get name :recipe)
                                                         :local-repo)
                                                        (locate-library
                                                         (symbol-name name))
                                                        (doom-package-built-in-p name)
                                                        (doom-package-installed-p name))
                                                       (progn)
                                                     (doom-print
                                                      (doom-print--format
                                                       (doom-print--class 'error "Missing emacs package: %S")
                                                       name)))
                                                   (setq --cl-var--
                                                         (cdr --cl-var--)))
                                                 nil)))
                                         (if doctor-file
                                             (progn
                                               (let
                                                   ((inhibit-message t))
                                                 (load doctor-file 'noerror 'nomessage))))))
                                   ((debug file-missing)
                                    (progn
                                      (if inhibit-message nil
                                        (doom-print
                                         (doom-print--format
                                          (doom-print--class 'error "%s"
                                                             (error-message-string ex)))))
                                      (setq doom-doctor--errors
                                            (cons
                                             (doom-print--format
                                              (doom-print--class 'error "%s"
                                                                 (error-message-string ex)))
                                             doom-doctor--errors))))
                                   ((debug error)
                                    (progn
                                      (if inhibit-message nil
                                        (doom-print
                                         (doom-print--format
                                          (doom-print--class 'error "Syntax error: %s" ex))))
                                      (setq doom-doctor--errors
                                            (cons
                                             (doom-print--format
                                              (doom-print--class 'error "Syntax error: %s" ex))
                                             doom-doctor--errors)))))
                                 (if
                                     (or doom-doctor--errors doom-doctor--warnings)
                                     (progn
                                       (progn
                                         (let
                                             ((doom-print-level
                                               (or nil doom-print-level))
                                              (doom-print-indent
                                               (+
                                                (if t
                                                    (or nil doom-print-indent-increment)
                                                  0)
                                                doom-print-indent)))
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'start
                                                                (doom-print--style 'bold "%s %s"))
                                             group name))
                                           (doom-print
                                            (doom-print--format "%s"
                                                                (string-join
                                                                 (append doom-doctor--errors doom-doctor--warnings)
                                                                 "\n")))))
                                       (progn
                                         (setq doom-local-errors doom-doctor--errors)
                                         (setq doom-local-warnings doom-doctor--warnings)))))
                               (setq doom-doctor--errors
                                     (append doom-doctor--errors doom-local-errors))
                               (setq doom-doctor--warnings
                                     (append doom-doctor--warnings doom-local-warnings)))))))
                     (setq tail
                           (cdr tail)))))))))
   ((debug error)
    (progn
      (if inhibit-message nil
        (doom-print
         (doom-print--format
          (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                             (or
                              (cdr-safe ex)
                              (car ex))))))
      (setq doom-doctor--warnings
            (cons
             (doom-print--format
              (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                 (or
                                  (cdr-safe ex)
                                  (car ex))))
             doom-doctor--warnings)))
    (setq doom-modules nil)))
 nil)

;;;; 31
((let nil
   (doom-print
    (doom-print--format "The doctor will see you now...\n"))
   (doom-print
    (doom-print--format
     (doom-print--class 'start "Checking your Emacs version...")))
   (progn
     (let
         ((doom-print-level
           (or nil doom-print-level))
          (doom-print-indent
           (+
            (if t
                (or nil doom-print-indent-increment)
              0)
            doom-print-indent)))
       (cond
        ((or
          (> emacs-major-version 29)
          (string-match-p ".\\([56]0\\|9[0-9]\\)$" emacs-version))
         (progn
           (if inhibit-message nil
             (doom-print
              (doom-print--format
               (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))))
           (setq doom-doctor--warnings
                 (cons
                  (doom-print--format
                   (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))
                  doom-doctor--warnings)))
         (if
             (> emacs-major-version 29)
             (progn
               (let
                   ((doom-print-level
                     (or nil doom-print-level))
                    (doom-print-indent
                     (+
                      (if t
                          (or nil doom-print-indent-increment)
                        0)
                      doom-print-indent)))
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'p "This is the bleeding edge of Emacs. As it is constantly changed, Doom will not " "(officially) support it. If you've found a stable commit, great! But be " "cautious about updating Emacs too eagerly!\n")))))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (doom-print
                (doom-print--format
                 (doom-print--class 'p "A .50, .60, or .9X appended to the version string indicates that this is a version " "of Emacs in between stable releases. These are not well supported.\n"))))))
         (progn
           (let
               ((doom-print-level
                 (or nil doom-print-level))
                (doom-print-indent
                 (+
                  (if t
                      (or nil doom-print-indent-increment)
                    0)
                  doom-print-indent)))
             (doom-print
              (doom-print--format
               (doom-print--class 'p "Because development builds are prone to random breakage, there will be a greater " "burden on you to investigate and deal with issues. Please make extra sure that " "your issue is reproducible in 29.1 before reporting them to Doom's issue tracker!\n" "\n" "If this doesn't phase you, read the \"Why does Doom not support Emacs HEAD\" QnA " "in Doom's FAQ. It offers some advice for debugging and surviving issues on the " "bleeding edge. Failing that, 29.1 is highly recommended and will always be " "Doom's best supported version of Emacs."))))))
        ((= emacs-major-version 27)
         (progn
           (if inhibit-message nil
             (doom-print
              (doom-print--format
               (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))))
           (setq doom-doctor--warnings
                 (cons
                  (doom-print--format
                   (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))
                  doom-doctor--warnings)))
         (progn
           (let
               ((doom-print-level
                 (or nil doom-print-level))
                (doom-print-indent
                 (+
                  (if t
                      (or nil doom-print-indent-increment)
                    0)
                  doom-print-indent)))
             (doom-print
              (doom-print--format
               (doom-print--class 'p "Emacs 28.1 is better supported, faster, and more stable. Plus, Doom will drop " "27.x support sometime late-2023.")))))))))
   (doom-print
    (doom-print--format
     (doom-print--class 'start "Checking for Doom's prerequisites...")))
   (progn
     (let
         ((doom-print-level
           (or nil doom-print-level))
          (doom-print-indent
           (+
            (if t
                (or nil doom-print-indent-increment)
              0)
            doom-print-indent)))
       (if
           (not
            (executable-find "git"))
           (progn
             (if inhibit-message nil
               (doom-print
                (doom-print--format
                 (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))))
             (setq doom-doctor--errors
                   (cons
                    (doom-print--format
                     (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                    doom-doctor--errors)))
         (let
             ((saved-match-data
               (match-data)))
           (unwind-protect
               (progn
                 (let*
                     ((version
                       (cdr
                        (doom-call-process "git" "version")))
                      (version
                       (and
                        (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                        (match-string 1 version))))
                   (if version
                       (if
                           (version< version "2.23")
                           (progn
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))))
                               (setq doom-doctor--errors
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                      doom-doctor--errors)))))
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))))
                       (setq doom-doctor--warnings
                             (cons
                              (doom-print--format
                               (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                              doom-doctor--warnings))))))
             (set-match-data saved-match-data t))))
       (if
           (executable-find "rg")
           nil
         (progn
           (if inhibit-message nil
             (doom-print
              (doom-print--format
               (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))))
           (setq doom-doctor--errors
                 (cons
                  (doom-print--format
                   (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                  doom-doctor--errors))))))
   (doom-print
    (doom-print--format
     (doom-print--class 'start "Checking for Emacs config conflicts...")))
   (progn
     (let
         ((doom-print-level
           (or nil doom-print-level))
          (doom-print-indent
           (+
            (if t
                (or nil doom-print-indent-increment)
              0)
            doom-print-indent)))
       (if
           (or
            (file-equal-p doom-emacs-dir "~/.emacs.d")
            (file-equal-p doom-emacs-dir "~/.config/emacs"))
           nil
         (doom-print
          (doom-print--format
           (doom-print--class 'warn "Doom is installed in a non-standard location")))
         (progn
           (let
               ((doom-print-level
                 (or nil doom-print-level))
                (doom-print-indent
                 (+
                  (if t
                      (or nil doom-print-indent-increment)
                    0)
                  doom-print-indent)))
             (doom-print
              (doom-print--format
               (doom-print--class 'p "The standard locations are ~/.config/emacs or ~/.emacs.d. Emacs will fail " "to load Doom if it is not explicitly told where to look for it. In Emacs 29+, " "this is possible with the --init-directory option:\n\n" "  $ emacs --init-directory '"
                                  (abbreviate-file-name doom-emacs-dir)
                                  "'\n\n" "However, Emacs 27-28 users have no choice but to move Doom to a standard " "location.\n\n" "Chemacs users may ignore this warning, however."))))))
       (let
           (found?)
         (let
             ((tail
               '("~/_emacs" "~/.emacs" "~/.emacs.el" "~/.emacs.d" "~/.config/emacs")))
           (while tail
             (let
                 ((file
                   (car tail)))
               (if
                   (and
                    (file-exists-p file)
                    (not
                     (file-equal-p file doom-emacs-dir)))
                   (progn
                     (setq found? t)
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Found another Emacs config: %s (%s)")
                       file
                       (if
                           (file-directory-p file)
                           "directory" "file")))))
               (setq tail
                     (cdr tail)))))
         (if found?
             (progn
               (progn
                 (let
                     ((doom-print-level
                       (or nil doom-print-level))
                      (doom-print-indent
                       (+
                        (if t
                            (or nil doom-print-indent-increment)
                          0)
                        doom-print-indent)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'p "Having multiple Emacs configs may prevent Doom from loading properly. Emacs " "will load the first it finds and ignore the rest. If Doom isn't starting up " "correctly (e.g. you get a vanilla splash screen), make sure that only one of " "these exist.\n\n" "Chemacs users may ignore this warning."))))))))))
   (doom-print
    (doom-print--format
     (doom-print--class 'start "Checking for missing Emacs features...")))
   (progn
     (let
         ((doom-print-level
           (or nil doom-print-level))
          (doom-print-indent
           (+
            (if t
                (or nil doom-print-indent-increment)
              0)
            doom-print-indent)))
       (if
           (functionp 'json-serialize)
           nil
         (progn
           (if inhibit-message nil
             (doom-print
              (doom-print--format
               (doom-print--class 'warn "Emacs was not built with native JSON support"))))
           (setq doom-doctor--warnings
                 (cons
                  (doom-print--format
                   (doom-print--class 'warn "Emacs was not built with native JSON support"))
                  doom-doctor--warnings)))
         (progn
           (let
               ((doom-print-level
                 (or nil doom-print-level))
                (doom-print-indent
                 (+
                  (if t
                      (or nil doom-print-indent-increment)
                    0)
                  doom-print-indent)))
             (doom-print
              (doom-print--format
               (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option."))))))
       (if
           (featurep 'native-compile)
           nil
         (progn
           (if inhibit-message nil
             (doom-print
              (doom-print--format
               (doom-print--class 'warn "Emacs was not built with native compilation support"))))
           (setq doom-doctor--warnings
                 (cons
                  (doom-print--format
                   (doom-print--class 'warn "Emacs was not built with native compilation support"))
                  doom-doctor--warnings)))
         (progn
           (let
               ((doom-print-level
                 (or nil doom-print-level))
                (doom-print-indent
                 (+
                  (if t
                      (or nil doom-print-indent-increment)
                    0)
                  doom-print-indent)))
             (doom-print
              (doom-print--format
               (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option."))))))))
   (doom-print
    (doom-print--format
     (doom-print--class 'start "Checking for private config conflicts...")))
   (progn
     (let
         ((doom-print-level
           (or nil doom-print-level))
          (doom-print-indent
           (+
            (if t
                (or nil doom-print-indent-increment)
              0)
            doom-print-indent)))
       (let*
           ((xdg-dir
             (concat
              (or
               (getenv "XDG_CONFIG_HOME")
               "~/.config")
              "/doom/"))
            (doom-dir
             (or
              (getenv "DOOMDIR")
              "~/.doom.d/"))
            (dir
             (if
                 (file-directory-p xdg-dir)
                 xdg-dir doom-dir)))
         (if
             (file-equal-p dir doom-emacs-dir)
             (progn
               (doom-print
                (doom-print--format
                 (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                    (doom-print--class 'path dir))))
               (progn
                 (let
                     ((doom-print-level
                       (or nil doom-print-level))
                      (doom-print-indent
                       (+
                        (if t
                            (or nil doom-print-indent-increment)
                          0)
                        doom-print-indent)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'p "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")))))))
         (if
             (and
              (not
               (file-equal-p xdg-dir doom-dir))
              (file-directory-p xdg-dir)
              (file-directory-p doom-dir))
             (progn
               (doom-print
                (doom-print--format
                 (doom-print--class 'warn "Detected two private configs, in %s and %s")
                 (abbreviate-file-name xdg-dir)
                 doom-dir))
               (progn
                 (let
                     ((doom-print-level
                       (or nil doom-print-level))
                      (doom-print-indent
                       (+
                        (if t
                            (or nil doom-print-indent-increment)
                          0)
                        doom-print-indent)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'p "The second directory will be ignored, as it has lower precedence."))))))))))
   (doom-print
    (doom-print--format
     (doom-print--class 'start "Checking for common environmental issues...")))
   (if
       (string-match-p "/fish$" shell-file-name)
       (progn
         (doom-print
          (doom-print--format
           (doom-print--class 'warn "Detected Fish as your $SHELL")))
         (progn
           (let
               ((doom-print-level
                 (or nil doom-print-level))
                (doom-print-indent
                 (+
                  (if t
                      (or nil doom-print-indent-increment)
                    0)
                  doom-print-indent)))
             (doom-print
              (doom-print--format
               (doom-print--class 'p "Fish (and possibly other non-POSIX shells) is known to inject garbage " "output into some of the child processes that Emacs spawns. Many Emacs " "packages/utilities will choke on this output, causing unpredictable issues. " "To get around this, either:\n\n" "  - Add the following to $DOOMDIR/config.el:\n\n" "    (setq shell-file-name (executable-find \"bash\"))\n\n" "  - Or change your default shell to a POSIX shell (like bash or zsh) " "    and explicitly configure your terminal apps to use the shell you " "    want.\n\n" "If you opt for option 1 and use one of Emacs' terminal emulators, you " "will also need to configure them to use Fish, e.g.\n\n" "  (setq-default vterm-shell (executable-find \"fish\"))\n\n" "  (setq-default explicit-shell-file-name (executable-find \"fish\"))\n")))))))
   (doom-print
    (doom-print--format
     (doom-print--class 'start "Checking for stale elc files...")))
   (elc-check-dir doom-core-dir)
   (elc-check-dir doom-modules-dir)
   (elc-check-dir
    (doom-path doom-local-dir "straight" straight-build-dir))
   (doom-print
    (doom-print--format
     (doom-print--class 'start "Checking for problematic git global settings...")))
   (if
       (executable-find "git")
       (if
           (= 0
              (car
               (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
           (progn
             (progn
               (if inhibit-message nil
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))))
               (setq doom-doctor--warnings
                     (cons
                      (doom-print--format
                       (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                      doom-doctor--warnings)))
             (progn
               (let
                   ((doom-print-level
                     (or nil doom-print-level))
                    (doom-print-indent
                     (+
                      (if t
                          (or nil doom-print-indent-increment)
                        0)
                      doom-print-indent)))
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'p "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")))))))
     (progn
       (if inhibit-message nil
         (doom-print
          (doom-print--format
           (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))))
       (setq doom-doctor--errors
             (cons
              (doom-print--format
               (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
              doom-doctor--errors))))
   (doom-print
    (doom-print--format
     (doom-print--class 'start "Checking Doom Emacs...")))
   (condition-case ex
       (progn
         (let
             ((doom-print-level
               (or nil doom-print-level))
              (doom-print-indent
               (+
                (if t
                    (or nil doom-print-indent-increment)
                  0)
                doom-print-indent)))
           (require 'doom-start)
           (doom-print
            (doom-print--format
             (doom-print--class 'success "Initialized Doom Emacs %s")
             doom-version))
           (doom-print
            (doom-print--format
             (if
                 (hash-table-p doom-modules)
                 (doom-print--class 'success "Detected %d modules"
                                    (hash-table-count doom-modules))
               (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?"))))
           (doom-print
            (doom-print--format
             (doom-print--class 'success "Detected %d packages")
             (length doom-packages)))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking Doom core for irregularities...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (let
                   ((tail
                     (list "savehist" "projectile.cache")))
                 (while tail
                   (let
                       ((file
                         (car tail)))
                     (let*
                         ((size
                           (and t
                                (condition-case nil
                                    (progn
                                      (doom-file-size file doom-cache-dir))
                                  (error nil)))))
                       (if size
                           (if
                               (> size 1048576)
                               (progn
                                 (progn
                                   (if inhibit-message nil
                                     (doom-print
                                      (doom-print--format
                                       (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                          (/ size 1024 1024.0)))))
                                   (setq doom-doctor--warnings
                                         (cons
                                          (doom-print--format
                                           (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                              (/ size 1024 1024.0)))
                                          doom-doctor--warnings)))
                                 (progn
                                   (let
                                       ((doom-print-level
                                         (or nil doom-print-level))
                                        (doom-print-indent
                                         (+
                                          (if t
                                              (or nil doom-print-indent-increment)
                                            0)
                                          doom-print-indent)))
                                     (doom-print
                                      (doom-print--format
                                       (doom-print--class 'p "Consider deleting it from your system (manually)")))))))
                         nil))
                     (setq tail
                           (cdr tail)))))
               (if
                   (condition-case nil
                       (progn
                         (executable-find doom-fd-executable))
                     (error nil))
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                          doom-doctor--warnings))))
               (require 'projectile)
               (if
                   (projectile-project-root "~")
                   (progn
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'warn "Your $HOME is recognized as a project root"))))
                       (setq doom-doctor--warnings
                             (cons
                              (doom-print--format
                               (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                              doom-doctor--warnings)))
                     (progn
                       (let
                           ((doom-print-level
                             (or nil doom-print-level))
                            (doom-print-indent
                             (+
                              (if t
                                  (or nil doom-print-indent-increment)
                                0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'p "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")))))))
               (if
                   (and
                    (file-equal-p doom-user-dir "~/.config/doom")
                    (file-directory-p "~/.doom.d"))
                   (progn
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                       (doom-print--class 'path doom-user-dir)))
                     (progn
                       (let
                           ((doom-print-level
                             (or nil doom-print-level))
                            (doom-print-indent
                             (+
                              (if t
                                  (or nil doom-print-indent-increment)
                                0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'p "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")))))))
               (if
                   (not
                    (executable-find "fc-list"))
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))))
                     (setq doom-doctor--warnings
                           (cons
                            (doom-print--format
                             (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                            doom-doctor--warnings)))
                 (if
                     (and
                      (cond
                       ((eq system-type 'gnu/linux)
                        (let nil
                          (concat
                           (or
                            (getenv "XDG_DATA_HOME")
                            "~/.local/share")
                           "/fonts/")))
                       ((eq system-type 'darwin)
                        (let nil "~/Library/Fonts/")))
                      (require 'nerd-icons nil t))
                     (progn
                       (let
                           ((temp-buffer
                             (generate-new-buffer " *temp*" t)))
                         (save-current-buffer
                           (set-buffer temp-buffer)
                           (unwind-protect
                               (progn
                                 (let
                                     ((errors 0))
                                   (let*
                                       ((output
                                         (doom-call-process "fc-list" "" "file"))
                                        (status
                                         (if output
                                             (car-safe
                                              (prog1 output
                                                (setq output
                                                      (cdr output))))
                                           (signal 'wrong-number-of-arguments
                                                   (list
                                                    '(status . output)
                                                    (length output))))))
                                     (if
                                         (not
                                          (= 0 status))
                                         (doom-print
                                          (doom-print--format
                                           (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?")))
                                       (insert
                                        (cdr
                                         (doom-call-process "fc-list" "" "file")))
                                       (let
                                           ((tail nerd-icons-font-names))
                                         (while tail
                                           (let
                                               ((font
                                                 (car tail)))
                                             (if
                                                 (save-excursion
                                                   (re-search-backward font nil t))
                                                 (doom-print
                                                  (doom-print--format
                                                   (doom-print--style 'green "Found font %s" font)))
                                               (doom-print
                                                (doom-print--format
                                                 (doom-print--class 'warn "%S font is not installed on your system")
                                                 font))
                                               (setq errors
                                                     (1+ errors)))
                                             (setq tail
                                                   (cdr tail)))))
                                       (if
                                           (> errors 0)
                                           (progn
                                             (progn
                                               (let
                                                   ((doom-print-level
                                                     (or nil doom-print-level))
                                                    (doom-print-indent
                                                     (+
                                                      (if t
                                                          (or nil doom-print-indent-increment)
                                                        0)
                                                      doom-print-indent)))
                                                 (doom-print
                                                  (doom-print--format
                                                   (doom-print--class 'p "Some needed fonts are not properly installed on your system. To download and " "install them, run `M-x nerd-icons-install-fonts' from within Doom Emacs. " "However, on Windows this command will only download them; the fonts must " "be installed manually afterwards.")))))))))))
                             (and
                              (buffer-name temp-buffer)
                              (kill-buffer temp-buffer))))))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for stale elc files in your DOOMDIR...")))
           (if
               (file-directory-p doom-user-dir)
               (progn
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (elc-check-dir doom-user-dir)))))
           (if doom-modules
               (progn
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'start "Checking your enabled modules...")))
                 (advice-add #'require :around #'doom-shut-up-a)
                 (let
                     ((tail
                       (doom-module-list)))
                   (while tail
                     (let
                         ((x54
                           (car tail)))
                       (progn
                         (ignore
                          (consp x54))
                         (let*
                             ((x55
                               (car-safe x54))
                              (x56
                               (cdr-safe x54)))
                           (let
                               ((group x55)
                                (name x56))
                             (let
                                 ((doom-context doom-context))
                               (let
                                   ((tail
                                     (ensure-list 'doctor)))
                                 (while tail
                                   (let
                                       ((context
                                         (car tail)))
                                     (doom-context-push context)
                                     (setq tail
                                           (cdr tail)))))
                               (let
                                   (doom-local-errors doom-local-warnings)
                                 (let
                                     (doom-doctor--errors doom-doctor--warnings)
                                   (condition-case ex
                                       (let
                                           ((doom-module-context
                                             (doom-module-context
                                              (cons group name))))
                                         (if
                                             (and
                                              (not doom-inhibit-log)
                                              (or
                                               (not noninteractive)
                                               (<= 2 doom-log-level)))
                                             (progn
                                               (doom--log 2 ":context:module: =%s" doom-module-context)))
                                         (let
                                             ((doctor-file
                                               (doom-module-expand-path group name "doctor.el"))
                                              (packages-file
                                               (doom-module-expand-path group name doom-module-packages-file)))
                                           (if packages-file
                                               (progn
                                                 (let*
                                                     ((doom-output-indent 6)
                                                      (--cl-var--
                                                       (let
                                                           ((doom-context doom-context))
                                                         (let
                                                             ((tail
                                                               (ensure-list 'packages)))
                                                           (while tail
                                                             (let
                                                                 ((context
                                                                   (car tail)))
                                                               (doom-context-push context)
                                                               (setq tail
                                                                     (cdr tail)))))
                                                         (let*
                                                             (doom-packages doom-disabled-packages)
                                                           (load packages-file 'noerror 'nomessage)
                                                           (mapcar #'car doom-packages))))
                                                      (name nil))
                                                   (while
                                                       (consp --cl-var--)
                                                     (setq name
                                                           (car --cl-var--))
                                                     (if
                                                         (or
                                                          (doom-package-get name :disable)
                                                          (eval
                                                           (doom-package-get name :ignore))
                                                          (plist-member
                                                           (doom-package-get name :recipe)
                                                           :local-repo)
                                                          (locate-library
                                                           (symbol-name name))
                                                          (doom-package-built-in-p name)
                                                          (doom-package-installed-p name))
                                                         (progn)
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'error "Missing emacs package: %S")
                                                         name)))
                                                     (setq --cl-var--
                                                           (cdr --cl-var--)))
                                                   nil)))
                                           (if doctor-file
                                               (progn
                                                 (let
                                                     ((inhibit-message t))
                                                   (load doctor-file 'noerror 'nomessage))))))
                                     ((debug file-missing)
                                      (progn
                                        (if inhibit-message nil
                                          (doom-print
                                           (doom-print--format
                                            (doom-print--class 'error "%s"
                                                               (error-message-string ex)))))
                                        (setq doom-doctor--errors
                                              (cons
                                               (doom-print--format
                                                (doom-print--class 'error "%s"
                                                                   (error-message-string ex)))
                                               doom-doctor--errors))))
                                     ((debug error)
                                      (progn
                                        (if inhibit-message nil
                                          (doom-print
                                           (doom-print--format
                                            (doom-print--class 'error "Syntax error: %s" ex))))
                                        (setq doom-doctor--errors
                                              (cons
                                               (doom-print--format
                                                (doom-print--class 'error "Syntax error: %s" ex))
                                               doom-doctor--errors)))))
                                   (if
                                       (or doom-doctor--errors doom-doctor--warnings)
                                       (progn
                                         (progn
                                           (let
                                               ((doom-print-level
                                                 (or nil doom-print-level))
                                                (doom-print-indent
                                                 (+
                                                  (if t
                                                      (or nil doom-print-indent-increment)
                                                    0)
                                                  doom-print-indent)))
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'start
                                                                  (doom-print--style 'bold "%s %s"))
                                               group name))
                                             (doom-print
                                              (doom-print--format "%s"
                                                                  (string-join
                                                                   (append doom-doctor--errors doom-doctor--warnings)
                                                                   "\n")))))
                                         (progn
                                           (setq doom-local-errors doom-doctor--errors)
                                           (setq doom-local-warnings doom-doctor--warnings)))))
                                 (setq doom-doctor--errors
                                       (append doom-doctor--errors doom-local-errors))
                                 (setq doom-doctor--warnings
                                       (append doom-doctor--warnings doom-local-warnings)))))))
                       (setq tail
                             (cdr tail)))))))))
     ((debug error)
      (progn
        (if inhibit-message nil
          (doom-print
           (doom-print--format
            (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                               (or
                                (cdr-safe ex)
                                (car ex))))))
        (setq doom-doctor--warnings
              (cons
               (doom-print--format
                (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                   (or
                                    (cdr-safe ex)
                                    (car ex))))
               doom-doctor--warnings)))
      (setq doom-modules nil)))
   (terpri)
   (let
       ((tail
         (list
          (list doom-doctor--warnings "warning" 'yellow)
          (list doom-doctor--errors "error" 'red))))
     (while tail
       (let
           ((msg
             (car tail)))
         (if
             (car msg)
             (progn
               (doom-print
                (doom-print--format
                 (doom-print--class 'color
                                    (nth 2 msg)
                                    (if
                                        (cdr
                                         (car msg))
                                        "There are %d %ss!" "There is %d %s!")
                                    (length
                                     (car msg))
                                    (nth 1 msg))))))
         (setq tail
               (cdr tail)))))
   (if
       (or doom-doctor--errors doom-doctor--warnings)
       nil
     (doom-print
      (doom-print--format
       (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))))
   (exit! :pager? "+G"))
 nil)

;;;; 32
(((closure
      (t)
      (cli alist)
    (let nil
      (doom-print
       (doom-print--format "The doctor will see you now...\n"))
      (doom-print
       (doom-print--format
        (doom-print--class 'start "Checking your Emacs version...")))
      (progn
        (let
            ((doom-print-level
              (or nil doom-print-level))
             (doom-print-indent
              (+
               (if t
                   (or nil doom-print-indent-increment)
                 0)
               doom-print-indent)))
          (cond
           ((or
             (> emacs-major-version 29)
             (string-match-p ".\\([56]0\\|9[0-9]\\)$" emacs-version))
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))))
              (setq doom-doctor--warnings
                    (cons
                     (doom-print--format
                      (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))
                     doom-doctor--warnings)))
            (if
                (> emacs-major-version 29)
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'p "This is the bleeding edge of Emacs. As it is constantly changed, Doom will not " "(officially) support it. If you've found a stable commit, great! But be " "cautious about updating Emacs too eagerly!\n")))))
              (progn
                (let
                    ((doom-print-level
                      (or nil doom-print-level))
                     (doom-print-indent
                      (+
                       (if t
                           (or nil doom-print-indent-increment)
                         0)
                       doom-print-indent)))
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'p "A .50, .60, or .9X appended to the version string indicates that this is a version " "of Emacs in between stable releases. These are not well supported.\n"))))))
            (progn
              (let
                  ((doom-print-level
                    (or nil doom-print-level))
                   (doom-print-indent
                    (+
                     (if t
                         (or nil doom-print-indent-increment)
                       0)
                     doom-print-indent)))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'p "Because development builds are prone to random breakage, there will be a greater " "burden on you to investigate and deal with issues. Please make extra sure that " "your issue is reproducible in 29.1 before reporting them to Doom's issue tracker!\n" "\n" "If this doesn't phase you, read the \"Why does Doom not support Emacs HEAD\" QnA " "in Doom's FAQ. It offers some advice for debugging and surviving issues on the " "bleeding edge. Failing that, 29.1 is highly recommended and will always be " "Doom's best supported version of Emacs."))))))
           ((= emacs-major-version 27)
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))))
              (setq doom-doctor--warnings
                    (cons
                     (doom-print--format
                      (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))
                     doom-doctor--warnings)))
            (progn
              (let
                  ((doom-print-level
                    (or nil doom-print-level))
                   (doom-print-indent
                    (+
                     (if t
                         (or nil doom-print-indent-increment)
                       0)
                     doom-print-indent)))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'p "Emacs 28.1 is better supported, faster, and more stable. Plus, Doom will drop " "27.x support sometime late-2023.")))))))))
      (doom-print
       (doom-print--format
        (doom-print--class 'start "Checking for Doom's prerequisites...")))
      (progn
        (let
            ((doom-print-level
              (or nil doom-print-level))
             (doom-print-indent
              (+
               (if t
                   (or nil doom-print-indent-increment)
                 0)
               doom-print-indent)))
          (if
              (not
               (executable-find "git"))
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))))
                (setq doom-doctor--errors
                      (cons
                       (doom-print--format
                        (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                       doom-doctor--errors)))
            (let
                ((saved-match-data
                  (match-data)))
              (unwind-protect
                  (progn
                    (let*
                        ((version
                          (cdr
                           (doom-call-process "git" "version")))
                         (version
                          (and
                           (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                           (match-string 1 version))))
                      (if version
                          (if
                              (version< version "2.23")
                              (progn
                                (progn
                                  (if inhibit-message nil
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))))
                                  (setq doom-doctor--errors
                                        (cons
                                         (doom-print--format
                                          (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                         doom-doctor--errors)))))
                        (progn
                          (if inhibit-message nil
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))))
                          (setq doom-doctor--warnings
                                (cons
                                 (doom-print--format
                                  (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                 doom-doctor--warnings))))))
                (set-match-data saved-match-data t))))
          (if
              (executable-find "rg")
              nil
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))))
              (setq doom-doctor--errors
                    (cons
                     (doom-print--format
                      (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                     doom-doctor--errors))))))
      (doom-print
       (doom-print--format
        (doom-print--class 'start "Checking for Emacs config conflicts...")))
      (progn
        (let
            ((doom-print-level
              (or nil doom-print-level))
             (doom-print-indent
              (+
               (if t
                   (or nil doom-print-indent-increment)
                 0)
               doom-print-indent)))
          (if
              (or
               (file-equal-p doom-emacs-dir "~/.emacs.d")
               (file-equal-p doom-emacs-dir "~/.config/emacs"))
              nil
            (doom-print
             (doom-print--format
              (doom-print--class 'warn "Doom is installed in a non-standard location")))
            (progn
              (let
                  ((doom-print-level
                    (or nil doom-print-level))
                   (doom-print-indent
                    (+
                     (if t
                         (or nil doom-print-indent-increment)
                       0)
                     doom-print-indent)))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'p "The standard locations are ~/.config/emacs or ~/.emacs.d. Emacs will fail " "to load Doom if it is not explicitly told where to look for it. In Emacs 29+, " "this is possible with the --init-directory option:\n\n" "  $ emacs --init-directory '"
                                     (abbreviate-file-name doom-emacs-dir)
                                     "'\n\n" "However, Emacs 27-28 users have no choice but to move Doom to a standard " "location.\n\n" "Chemacs users may ignore this warning, however."))))))
          (let
              (found?)
            (let
                ((tail
                  '("~/_emacs" "~/.emacs" "~/.emacs.el" "~/.emacs.d" "~/.config/emacs")))
              (while tail
                (let
                    ((file
                      (car tail)))
                  (if
                      (and
                       (file-exists-p file)
                       (not
                        (file-equal-p file doom-emacs-dir)))
                      (progn
                        (setq found? t)
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Found another Emacs config: %s (%s)")
                          file
                          (if
                              (file-directory-p file)
                              "directory" "file")))))
                  (setq tail
                        (cdr tail)))))
            (if found?
                (progn
                  (progn
                    (let
                        ((doom-print-level
                          (or nil doom-print-level))
                         (doom-print-indent
                          (+
                           (if t
                               (or nil doom-print-indent-increment)
                             0)
                           doom-print-indent)))
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'p "Having multiple Emacs configs may prevent Doom from loading properly. Emacs " "will load the first it finds and ignore the rest. If Doom isn't starting up " "correctly (e.g. you get a vanilla splash screen), make sure that only one of " "these exist.\n\n" "Chemacs users may ignore this warning."))))))))))
      (doom-print
       (doom-print--format
        (doom-print--class 'start "Checking for missing Emacs features...")))
      (progn
        (let
            ((doom-print-level
              (or nil doom-print-level))
             (doom-print-indent
              (+
               (if t
                   (or nil doom-print-indent-increment)
                 0)
               doom-print-indent)))
          (if
              (functionp 'json-serialize)
              nil
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'warn "Emacs was not built with native JSON support"))))
              (setq doom-doctor--warnings
                    (cons
                     (doom-print--format
                      (doom-print--class 'warn "Emacs was not built with native JSON support"))
                     doom-doctor--warnings)))
            (progn
              (let
                  ((doom-print-level
                    (or nil doom-print-level))
                   (doom-print-indent
                    (+
                     (if t
                         (or nil doom-print-indent-increment)
                       0)
                     doom-print-indent)))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option."))))))
          (if
              (featurep 'native-compile)
              nil
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'warn "Emacs was not built with native compilation support"))))
              (setq doom-doctor--warnings
                    (cons
                     (doom-print--format
                      (doom-print--class 'warn "Emacs was not built with native compilation support"))
                     doom-doctor--warnings)))
            (progn
              (let
                  ((doom-print-level
                    (or nil doom-print-level))
                   (doom-print-indent
                    (+
                     (if t
                         (or nil doom-print-indent-increment)
                       0)
                     doom-print-indent)))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option."))))))))
      (doom-print
       (doom-print--format
        (doom-print--class 'start "Checking for private config conflicts...")))
      (progn
        (let
            ((doom-print-level
              (or nil doom-print-level))
             (doom-print-indent
              (+
               (if t
                   (or nil doom-print-indent-increment)
                 0)
               doom-print-indent)))
          (let*
              ((xdg-dir
                (concat
                 (or
                  (getenv "XDG_CONFIG_HOME")
                  "~/.config")
                 "/doom/"))
               (doom-dir
                (or
                 (getenv "DOOMDIR")
                 "~/.doom.d/"))
               (dir
                (if
                    (file-directory-p xdg-dir)
                    xdg-dir doom-dir)))
            (if
                (file-equal-p dir doom-emacs-dir)
                (progn
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                       (doom-print--class 'path dir))))
                  (progn
                    (let
                        ((doom-print-level
                          (or nil doom-print-level))
                         (doom-print-indent
                          (+
                           (if t
                               (or nil doom-print-indent-increment)
                             0)
                           doom-print-indent)))
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'p "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")))))))
            (if
                (and
                 (not
                  (file-equal-p xdg-dir doom-dir))
                 (file-directory-p xdg-dir)
                 (file-directory-p doom-dir))
                (progn
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'warn "Detected two private configs, in %s and %s")
                    (abbreviate-file-name xdg-dir)
                    doom-dir))
                  (progn
                    (let
                        ((doom-print-level
                          (or nil doom-print-level))
                         (doom-print-indent
                          (+
                           (if t
                               (or nil doom-print-indent-increment)
                             0)
                           doom-print-indent)))
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'p "The second directory will be ignored, as it has lower precedence."))))))))))
      (doom-print
       (doom-print--format
        (doom-print--class 'start "Checking for common environmental issues...")))
      (if
          (string-match-p "/fish$" shell-file-name)
          (progn
            (doom-print
             (doom-print--format
              (doom-print--class 'warn "Detected Fish as your $SHELL")))
            (progn
              (let
                  ((doom-print-level
                    (or nil doom-print-level))
                   (doom-print-indent
                    (+
                     (if t
                         (or nil doom-print-indent-increment)
                       0)
                     doom-print-indent)))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'p "Fish (and possibly other non-POSIX shells) is known to inject garbage " "output into some of the child processes that Emacs spawns. Many Emacs " "packages/utilities will choke on this output, causing unpredictable issues. " "To get around this, either:\n\n" "  - Add the following to $DOOMDIR/config.el:\n\n" "    (setq shell-file-name (executable-find \"bash\"))\n\n" "  - Or change your default shell to a POSIX shell (like bash or zsh) " "    and explicitly configure your terminal apps to use the shell you " "    want.\n\n" "If you opt for option 1 and use one of Emacs' terminal emulators, you " "will also need to configure them to use Fish, e.g.\n\n" "  (setq-default vterm-shell (executable-find \"fish\"))\n\n" "  (setq-default explicit-shell-file-name (executable-find \"fish\"))\n")))))))
      (doom-print
       (doom-print--format
        (doom-print--class 'start "Checking for stale elc files...")))
      (elc-check-dir doom-core-dir)
      (elc-check-dir doom-modules-dir)
      (elc-check-dir
       (doom-path doom-local-dir "straight" straight-build-dir))
      (doom-print
       (doom-print--format
        (doom-print--class 'start "Checking for problematic git global settings...")))
      (if
          (executable-find "git")
          (if
              (= 0
                 (car
                  (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
              (progn
                (progn
                  (if inhibit-message nil
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))))
                  (setq doom-doctor--warnings
                        (cons
                         (doom-print--format
                          (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                         doom-doctor--warnings)))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'p "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")))))))
        (progn
          (if inhibit-message nil
            (doom-print
             (doom-print--format
              (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))))
          (setq doom-doctor--errors
                (cons
                 (doom-print--format
                  (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                 doom-doctor--errors))))
      (doom-print
       (doom-print--format
        (doom-print--class 'start "Checking Doom Emacs...")))
      (condition-case ex
          (progn
            (let
                ((doom-print-level
                  (or nil doom-print-level))
                 (doom-print-indent
                  (+
                   (if t
                       (or nil doom-print-indent-increment)
                     0)
                   doom-print-indent)))
              (require 'doom-start)
              (doom-print
               (doom-print--format
                (doom-print--class 'success "Initialized Doom Emacs %s")
                doom-version))
              (doom-print
               (doom-print--format
                (if
                    (hash-table-p doom-modules)
                    (doom-print--class 'success "Detected %d modules"
                                       (hash-table-count doom-modules))
                  (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?"))))
              (doom-print
               (doom-print--format
                (doom-print--class 'success "Detected %d packages")
                (length doom-packages)))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking Doom core for irregularities...")))
              (progn
                (let
                    ((doom-print-level
                      (or nil doom-print-level))
                     (doom-print-indent
                      (+
                       (if t
                           (or nil doom-print-indent-increment)
                         0)
                       doom-print-indent)))
                  (let
                      ((tail
                        (list "savehist" "projectile.cache")))
                    (while tail
                      (let
                          ((file
                            (car tail)))
                        (let*
                            ((size
                              (and t
                                   (condition-case nil
                                       (progn
                                         (doom-file-size file doom-cache-dir))
                                     (error nil)))))
                          (if size
                              (if
                                  (> size 1048576)
                                  (progn
                                    (progn
                                      (if inhibit-message nil
                                        (doom-print
                                         (doom-print--format
                                          (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                             (/ size 1024 1024.0)))))
                                      (setq doom-doctor--warnings
                                            (cons
                                             (doom-print--format
                                              (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                 (/ size 1024 1024.0)))
                                             doom-doctor--warnings)))
                                    (progn
                                      (let
                                          ((doom-print-level
                                            (or nil doom-print-level))
                                           (doom-print-indent
                                            (+
                                             (if t
                                                 (or nil doom-print-indent-increment)
                                               0)
                                             doom-print-indent)))
                                        (doom-print
                                         (doom-print--format
                                          (doom-print--class 'p "Consider deleting it from your system (manually)")))))))
                            nil))
                        (setq tail
                              (cdr tail)))))
                  (if
                      (condition-case nil
                          (progn
                            (executable-find doom-fd-executable))
                        (error nil))
                      nil
                    (progn
                      (if inhibit-message nil
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))))
                      (setq doom-doctor--warnings
                            (cons
                             (doom-print--format
                              (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                             doom-doctor--warnings))))
                  (require 'projectile)
                  (if
                      (projectile-project-root "~")
                      (progn
                        (progn
                          (if inhibit-message nil
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'warn "Your $HOME is recognized as a project root"))))
                          (setq doom-doctor--warnings
                                (cons
                                 (doom-print--format
                                  (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                 doom-doctor--warnings)))
                        (progn
                          (let
                              ((doom-print-level
                                (or nil doom-print-level))
                               (doom-print-indent
                                (+
                                 (if t
                                     (or nil doom-print-indent-increment)
                                   0)
                                 doom-print-indent)))
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'p "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")))))))
                  (if
                      (and
                       (file-equal-p doom-user-dir "~/.config/doom")
                       (file-directory-p "~/.doom.d"))
                      (progn
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                          (doom-print--class 'path doom-user-dir)))
                        (progn
                          (let
                              ((doom-print-level
                                (or nil doom-print-level))
                               (doom-print-indent
                                (+
                                 (if t
                                     (or nil doom-print-indent-increment)
                                   0)
                                 doom-print-indent)))
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'p "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")))))))
                  (if
                      (not
                       (executable-find "fc-list"))
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                               doom-doctor--warnings)))
                    (if
                        (and
                         (cond
                          ((eq system-type 'gnu/linux)
                           (let nil
                             (concat
                              (or
                               (getenv "XDG_DATA_HOME")
                               "~/.local/share")
                              "/fonts/")))
                          ((eq system-type 'darwin)
                           (let nil "~/Library/Fonts/")))
                         (require 'nerd-icons nil t))
                        (progn
                          (let
                              ((temp-buffer
                                (generate-new-buffer " *temp*" t)))
                            (save-current-buffer
                              (set-buffer temp-buffer)
                              (unwind-protect
                                  (progn
                                    (let
                                        ((errors 0))
                                      (let*
                                          ((output
                                            (doom-call-process "fc-list" "" "file"))
                                           (status
                                            (if output
                                                (car-safe
                                                 (prog1 output
                                                   (setq output
                                                         (cdr output))))
                                              (signal 'wrong-number-of-arguments
                                                      (list
                                                       '(status . output)
                                                       (length output))))))
                                        (if
                                            (not
                                             (= 0 status))
                                            (doom-print
                                             (doom-print--format
                                              (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?")))
                                          (insert
                                           (cdr
                                            (doom-call-process "fc-list" "" "file")))
                                          (let
                                              ((tail nerd-icons-font-names))
                                            (while tail
                                              (let
                                                  ((font
                                                    (car tail)))
                                                (if
                                                    (save-excursion
                                                      (re-search-backward font nil t))
                                                    (doom-print
                                                     (doom-print--format
                                                      (doom-print--style 'green "Found font %s" font)))
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'warn "%S font is not installed on your system")
                                                    font))
                                                  (setq errors
                                                        (1+ errors)))
                                                (setq tail
                                                      (cdr tail)))))
                                          (if
                                              (> errors 0)
                                              (progn
                                                (progn
                                                  (let
                                                      ((doom-print-level
                                                        (or nil doom-print-level))
                                                       (doom-print-indent
                                                        (+
                                                         (if t
                                                             (or nil doom-print-indent-increment)
                                                           0)
                                                         doom-print-indent)))
                                                    (doom-print
                                                     (doom-print--format
                                                      (doom-print--class 'p "Some needed fonts are not properly installed on your system. To download and " "install them, run `M-x nerd-icons-install-fonts' from within Doom Emacs. " "However, on Windows this command will only download them; the fonts must " "be installed manually afterwards.")))))))))))
                                (and
                                 (buffer-name temp-buffer)
                                 (kill-buffer temp-buffer))))))))))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking for stale elc files in your DOOMDIR...")))
              (if
                  (file-directory-p doom-user-dir)
                  (progn
                    (progn
                      (let
                          ((doom-print-level
                            (or nil doom-print-level))
                           (doom-print-indent
                            (+
                             (if t
                                 (or nil doom-print-indent-increment)
                               0)
                             doom-print-indent)))
                        (elc-check-dir doom-user-dir)))))
              (if doom-modules
                  (progn
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'start "Checking your enabled modules...")))
                    (advice-add #'require :around #'doom-shut-up-a)
                    (let
                        ((tail
                          (doom-module-list)))
                      (while tail
                        (let
                            ((x54
                              (car tail)))
                          (progn
                            (ignore
                             (consp x54))
                            (let*
                                ((x55
                                  (car-safe x54))
                                 (x56
                                  (cdr-safe x54)))
                              (let
                                  ((group x55)
                                   (name x56))
                                (let
                                    ((doom-context doom-context))
                                  (let
                                      ((tail
                                        (ensure-list 'doctor)))
                                    (while tail
                                      (let
                                          ((context
                                            (car tail)))
                                        (doom-context-push context)
                                        (setq tail
                                              (cdr tail)))))
                                  (let
                                      (doom-local-errors doom-local-warnings)
                                    (let
                                        (doom-doctor--errors doom-doctor--warnings)
                                      (condition-case ex
                                          (let
                                              ((doom-module-context
                                                (doom-module-context
                                                 (cons group name))))
                                            (if
                                                (and
                                                 (not doom-inhibit-log)
                                                 (or
                                                  (not noninteractive)
                                                  (<= 2 doom-log-level)))
                                                (progn
                                                  (doom--log 2 ":context:module: =%s" doom-module-context)))
                                            (let
                                                ((doctor-file
                                                  (doom-module-expand-path group name "doctor.el"))
                                                 (packages-file
                                                  (doom-module-expand-path group name doom-module-packages-file)))
                                              (if packages-file
                                                  (progn
                                                    (let*
                                                        ((doom-output-indent 6)
                                                         (--cl-var--
                                                          (let
                                                              ((doom-context doom-context))
                                                            (let
                                                                ((tail
                                                                  (ensure-list 'packages)))
                                                              (while tail
                                                                (let
                                                                    ((context
                                                                      (car tail)))
                                                                  (doom-context-push context)
                                                                  (setq tail
                                                                        (cdr tail)))))
                                                            (let*
                                                                (doom-packages doom-disabled-packages)
                                                              (load packages-file 'noerror 'nomessage)
                                                              (mapcar #'car doom-packages))))
                                                         (name nil))
                                                      (while
                                                          (consp --cl-var--)
                                                        (setq name
                                                              (car --cl-var--))
                                                        (if
                                                            (or
                                                             (doom-package-get name :disable)
                                                             (eval
                                                              (doom-package-get name :ignore))
                                                             (plist-member
                                                              (doom-package-get name :recipe)
                                                              :local-repo)
                                                             (locate-library
                                                              (symbol-name name))
                                                             (doom-package-built-in-p name)
                                                             (doom-package-installed-p name))
                                                            (progn)
                                                          (doom-print
                                                           (doom-print--format
                                                            (doom-print--class 'error "Missing emacs package: %S")
                                                            name)))
                                                        (setq --cl-var--
                                                              (cdr --cl-var--)))
                                                      nil)))
                                              (if doctor-file
                                                  (progn
                                                    (let
                                                        ((inhibit-message t))
                                                      (load doctor-file 'noerror 'nomessage))))))
                                        ((debug file-missing)
                                         (progn
                                           (if inhibit-message nil
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'error "%s"
                                                                  (error-message-string ex)))))
                                           (setq doom-doctor--errors
                                                 (cons
                                                  (doom-print--format
                                                   (doom-print--class 'error "%s"
                                                                      (error-message-string ex)))
                                                  doom-doctor--errors))))
                                        ((debug error)
                                         (progn
                                           (if inhibit-message nil
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'error "Syntax error: %s" ex))))
                                           (setq doom-doctor--errors
                                                 (cons
                                                  (doom-print--format
                                                   (doom-print--class 'error "Syntax error: %s" ex))
                                                  doom-doctor--errors)))))
                                      (if
                                          (or doom-doctor--errors doom-doctor--warnings)
                                          (progn
                                            (progn
                                              (let
                                                  ((doom-print-level
                                                    (or nil doom-print-level))
                                                   (doom-print-indent
                                                    (+
                                                     (if t
                                                         (or nil doom-print-indent-increment)
                                                       0)
                                                     doom-print-indent)))
                                                (doom-print
                                                 (doom-print--format
                                                  (doom-print--class 'start
                                                                     (doom-print--style 'bold "%s %s"))
                                                  group name))
                                                (doom-print
                                                 (doom-print--format "%s"
                                                                     (string-join
                                                                      (append doom-doctor--errors doom-doctor--warnings)
                                                                      "\n")))))
                                            (progn
                                              (setq doom-local-errors doom-doctor--errors)
                                              (setq doom-local-warnings doom-doctor--warnings)))))
                                    (setq doom-doctor--errors
                                          (append doom-doctor--errors doom-local-errors))
                                    (setq doom-doctor--warnings
                                          (append doom-doctor--warnings doom-local-warnings)))))))
                          (setq tail
                                (cdr tail)))))))))
        ((debug error)
         (progn
           (if inhibit-message nil
             (doom-print
              (doom-print--format
               (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                  (or
                                   (cdr-safe ex)
                                   (car ex))))))
           (setq doom-doctor--warnings
                 (cons
                  (doom-print--format
                   (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                      (or
                                       (cdr-safe ex)
                                       (car ex))))
                  doom-doctor--warnings)))
         (setq doom-modules nil)))
      (terpri)
      (let
          ((tail
            (list
             (list doom-doctor--warnings "warning" 'yellow)
             (list doom-doctor--errors "error" 'red))))
        (while tail
          (let
              ((msg
                (car tail)))
            (if
                (car msg)
                (progn
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'color
                                       (nth 2 msg)
                                       (if
                                           (cdr
                                            (car msg))
                                           "There are %d %ss!" "There is %d %s!")
                                       (length
                                        (car msg))
                                       (nth 1 msg))))))
            (setq tail
                  (cdr tail)))))
      (if
          (or doom-doctor--errors doom-doctor--warnings)
          nil
        (doom-print
         (doom-print--format
          (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))))
      (exit! :pager? "+G")))
  #s(doom-cli
     ("doom" "doctor")
     nil
     (("SUMMARY" . "Diagnoses common issues on your system.")
      ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
     nil nil nil nil
     (:benchmark nil :prefix
                 (doom)
                 :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
     (closure
         (t)
         (cli alist)
       (let nil
         (doom-print
          (doom-print--format "The doctor will see you now...\n"))
         (doom-print
          (doom-print--format
           (doom-print--class 'start "Checking your Emacs version...")))
         (progn
           (let
               ((doom-print-level
                 (or nil doom-print-level))
                (doom-print-indent
                 (+
                  (if t
                      (or nil doom-print-indent-increment)
                    0)
                  doom-print-indent)))
             (cond
              ((or
                (> emacs-major-version 29)
                (string-match-p ".\\([56]0\\|9[0-9]\\)$" emacs-version))
               (progn
                 (if inhibit-message nil
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))))
                 (setq doom-doctor--warnings
                       (cons
                        (doom-print--format
                         (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))
                        doom-doctor--warnings)))
               (if
                   (> emacs-major-version 29)
                   (progn
                     (let
                         ((doom-print-level
                           (or nil doom-print-level))
                          (doom-print-indent
                           (+
                            (if t
                                (or nil doom-print-indent-increment)
                              0)
                            doom-print-indent)))
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'p "This is the bleeding edge of Emacs. As it is constantly changed, Doom will not " "(officially) support it. If you've found a stable commit, great! But be " "cautious about updating Emacs too eagerly!\n")))))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "A .50, .60, or .9X appended to the version string indicates that this is a version " "of Emacs in between stable releases. These are not well supported.\n"))))))
               (progn
                 (let
                     ((doom-print-level
                       (or nil doom-print-level))
                      (doom-print-indent
                       (+
                        (if t
                            (or nil doom-print-indent-increment)
                          0)
                        doom-print-indent)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'p "Because development builds are prone to random breakage, there will be a greater " "burden on you to investigate and deal with issues. Please make extra sure that " "your issue is reproducible in 29.1 before reporting them to Doom's issue tracker!\n" "\n" "If this doesn't phase you, read the \"Why does Doom not support Emacs HEAD\" QnA " "in Doom's FAQ. It offers some advice for debugging and surviving issues on the " "bleeding edge. Failing that, 29.1 is highly recommended and will always be " "Doom's best supported version of Emacs."))))))
              ((= emacs-major-version 27)
               (progn
                 (if inhibit-message nil
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))))
                 (setq doom-doctor--warnings
                       (cons
                        (doom-print--format
                         (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))
                        doom-doctor--warnings)))
               (progn
                 (let
                     ((doom-print-level
                       (or nil doom-print-level))
                      (doom-print-indent
                       (+
                        (if t
                            (or nil doom-print-indent-increment)
                          0)
                        doom-print-indent)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'p "Emacs 28.1 is better supported, faster, and more stable. Plus, Doom will drop " "27.x support sometime late-2023.")))))))))
         (doom-print
          (doom-print--format
           (doom-print--class 'start "Checking for Doom's prerequisites...")))
         (progn
           (let
               ((doom-print-level
                 (or nil doom-print-level))
                (doom-print-indent
                 (+
                  (if t
                      (or nil doom-print-indent-increment)
                    0)
                  doom-print-indent)))
             (if
                 (not
                  (executable-find "git"))
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))))
                   (setq doom-doctor--errors
                         (cons
                          (doom-print--format
                           (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                          doom-doctor--errors)))
               (let
                   ((saved-match-data
                     (match-data)))
                 (unwind-protect
                     (progn
                       (let*
                           ((version
                             (cdr
                              (doom-call-process "git" "version")))
                            (version
                             (and
                              (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                              (match-string 1 version))))
                         (if version
                             (if
                                 (version< version "2.23")
                                 (progn
                                   (progn
                                     (if inhibit-message nil
                                       (doom-print
                                        (doom-print--format
                                         (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))))
                                     (setq doom-doctor--errors
                                           (cons
                                            (doom-print--format
                                             (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                            doom-doctor--errors)))))
                           (progn
                             (if inhibit-message nil
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))))
                             (setq doom-doctor--warnings
                                   (cons
                                    (doom-print--format
                                     (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                    doom-doctor--warnings))))))
                   (set-match-data saved-match-data t))))
             (if
                 (executable-find "rg")
                 nil
               (progn
                 (if inhibit-message nil
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))))
                 (setq doom-doctor--errors
                       (cons
                        (doom-print--format
                         (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                        doom-doctor--errors))))))
         (doom-print
          (doom-print--format
           (doom-print--class 'start "Checking for Emacs config conflicts...")))
         (progn
           (let
               ((doom-print-level
                 (or nil doom-print-level))
                (doom-print-indent
                 (+
                  (if t
                      (or nil doom-print-indent-increment)
                    0)
                  doom-print-indent)))
             (if
                 (or
                  (file-equal-p doom-emacs-dir "~/.emacs.d")
                  (file-equal-p doom-emacs-dir "~/.config/emacs"))
                 nil
               (doom-print
                (doom-print--format
                 (doom-print--class 'warn "Doom is installed in a non-standard location")))
               (progn
                 (let
                     ((doom-print-level
                       (or nil doom-print-level))
                      (doom-print-indent
                       (+
                        (if t
                            (or nil doom-print-indent-increment)
                          0)
                        doom-print-indent)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'p "The standard locations are ~/.config/emacs or ~/.emacs.d. Emacs will fail " "to load Doom if it is not explicitly told where to look for it. In Emacs 29+, " "this is possible with the --init-directory option:\n\n" "  $ emacs --init-directory '"
                                        (abbreviate-file-name doom-emacs-dir)
                                        "'\n\n" "However, Emacs 27-28 users have no choice but to move Doom to a standard " "location.\n\n" "Chemacs users may ignore this warning, however."))))))
             (let
                 (found?)
               (let
                   ((tail
                     '("~/_emacs" "~/.emacs" "~/.emacs.el" "~/.emacs.d" "~/.config/emacs")))
                 (while tail
                   (let
                       ((file
                         (car tail)))
                     (if
                         (and
                          (file-exists-p file)
                          (not
                           (file-equal-p file doom-emacs-dir)))
                         (progn
                           (setq found? t)
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'warn "Found another Emacs config: %s (%s)")
                             file
                             (if
                                 (file-directory-p file)
                                 "directory" "file")))))
                     (setq tail
                           (cdr tail)))))
               (if found?
                   (progn
                     (progn
                       (let
                           ((doom-print-level
                             (or nil doom-print-level))
                            (doom-print-indent
                             (+
                              (if t
                                  (or nil doom-print-indent-increment)
                                0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'p "Having multiple Emacs configs may prevent Doom from loading properly. Emacs " "will load the first it finds and ignore the rest. If Doom isn't starting up " "correctly (e.g. you get a vanilla splash screen), make sure that only one of " "these exist.\n\n" "Chemacs users may ignore this warning."))))))))))
         (doom-print
          (doom-print--format
           (doom-print--class 'start "Checking for missing Emacs features...")))
         (progn
           (let
               ((doom-print-level
                 (or nil doom-print-level))
                (doom-print-indent
                 (+
                  (if t
                      (or nil doom-print-indent-increment)
                    0)
                  doom-print-indent)))
             (if
                 (functionp 'json-serialize)
                 nil
               (progn
                 (if inhibit-message nil
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'warn "Emacs was not built with native JSON support"))))
                 (setq doom-doctor--warnings
                       (cons
                        (doom-print--format
                         (doom-print--class 'warn "Emacs was not built with native JSON support"))
                        doom-doctor--warnings)))
               (progn
                 (let
                     ((doom-print-level
                       (or nil doom-print-level))
                      (doom-print-indent
                       (+
                        (if t
                            (or nil doom-print-indent-increment)
                          0)
                        doom-print-indent)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option."))))))
             (if
                 (featurep 'native-compile)
                 nil
               (progn
                 (if inhibit-message nil
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'warn "Emacs was not built with native compilation support"))))
                 (setq doom-doctor--warnings
                       (cons
                        (doom-print--format
                         (doom-print--class 'warn "Emacs was not built with native compilation support"))
                        doom-doctor--warnings)))
               (progn
                 (let
                     ((doom-print-level
                       (or nil doom-print-level))
                      (doom-print-indent
                       (+
                        (if t
                            (or nil doom-print-indent-increment)
                          0)
                        doom-print-indent)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option."))))))))
         (doom-print
          (doom-print--format
           (doom-print--class 'start "Checking for private config conflicts...")))
         (progn
           (let
               ((doom-print-level
                 (or nil doom-print-level))
                (doom-print-indent
                 (+
                  (if t
                      (or nil doom-print-indent-increment)
                    0)
                  doom-print-indent)))
             (let*
                 ((xdg-dir
                   (concat
                    (or
                     (getenv "XDG_CONFIG_HOME")
                     "~/.config")
                    "/doom/"))
                  (doom-dir
                   (or
                    (getenv "DOOMDIR")
                    "~/.doom.d/"))
                  (dir
                   (if
                       (file-directory-p xdg-dir)
                       xdg-dir doom-dir)))
               (if
                   (file-equal-p dir doom-emacs-dir)
                   (progn
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                          (doom-print--class 'path dir))))
                     (progn
                       (let
                           ((doom-print-level
                             (or nil doom-print-level))
                            (doom-print-indent
                             (+
                              (if t
                                  (or nil doom-print-indent-increment)
                                0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'p "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")))))))
               (if
                   (and
                    (not
                     (file-equal-p xdg-dir doom-dir))
                    (file-directory-p xdg-dir)
                    (file-directory-p doom-dir))
                   (progn
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Detected two private configs, in %s and %s")
                       (abbreviate-file-name xdg-dir)
                       doom-dir))
                     (progn
                       (let
                           ((doom-print-level
                             (or nil doom-print-level))
                            (doom-print-indent
                             (+
                              (if t
                                  (or nil doom-print-indent-increment)
                                0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'p "The second directory will be ignored, as it has lower precedence."))))))))))
         (doom-print
          (doom-print--format
           (doom-print--class 'start "Checking for common environmental issues...")))
         (if
             (string-match-p "/fish$" shell-file-name)
             (progn
               (doom-print
                (doom-print--format
                 (doom-print--class 'warn "Detected Fish as your $SHELL")))
               (progn
                 (let
                     ((doom-print-level
                       (or nil doom-print-level))
                      (doom-print-indent
                       (+
                        (if t
                            (or nil doom-print-indent-increment)
                          0)
                        doom-print-indent)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'p "Fish (and possibly other non-POSIX shells) is known to inject garbage " "output into some of the child processes that Emacs spawns. Many Emacs " "packages/utilities will choke on this output, causing unpredictable issues. " "To get around this, either:\n\n" "  - Add the following to $DOOMDIR/config.el:\n\n" "    (setq shell-file-name (executable-find \"bash\"))\n\n" "  - Or change your default shell to a POSIX shell (like bash or zsh) " "    and explicitly configure your terminal apps to use the shell you " "    want.\n\n" "If you opt for option 1 and use one of Emacs' terminal emulators, you " "will also need to configure them to use Fish, e.g.\n\n" "  (setq-default vterm-shell (executable-find \"fish\"))\n\n" "  (setq-default explicit-shell-file-name (executable-find \"fish\"))\n")))))))
         (doom-print
          (doom-print--format
           (doom-print--class 'start "Checking for stale elc files...")))
         (elc-check-dir doom-core-dir)
         (elc-check-dir doom-modules-dir)
         (elc-check-dir
          (doom-path doom-local-dir "straight" straight-build-dir))
         (doom-print
          (doom-print--format
           (doom-print--class 'start "Checking for problematic git global settings...")))
         (if
             (executable-find "git")
             (if
                 (= 0
                    (car
                     (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                 (progn
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))))
                     (setq doom-doctor--warnings
                           (cons
                            (doom-print--format
                             (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                            doom-doctor--warnings)))
                   (progn
                     (let
                         ((doom-print-level
                           (or nil doom-print-level))
                          (doom-print-indent
                           (+
                            (if t
                                (or nil doom-print-indent-increment)
                              0)
                            doom-print-indent)))
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'p "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")))))))
           (progn
             (if inhibit-message nil
               (doom-print
                (doom-print--format
                 (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))))
             (setq doom-doctor--errors
                   (cons
                    (doom-print--format
                     (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                    doom-doctor--errors))))
         (doom-print
          (doom-print--format
           (doom-print--class 'start "Checking Doom Emacs...")))
         (condition-case ex
             (progn
               (let
                   ((doom-print-level
                     (or nil doom-print-level))
                    (doom-print-indent
                     (+
                      (if t
                          (or nil doom-print-indent-increment)
                        0)
                      doom-print-indent)))
                 (require 'doom-start)
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'success "Initialized Doom Emacs %s")
                   doom-version))
                 (doom-print
                  (doom-print--format
                   (if
                       (hash-table-p doom-modules)
                       (doom-print--class 'success "Detected %d modules"
                                          (hash-table-count doom-modules))
                     (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?"))))
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'success "Detected %d packages")
                   (length doom-packages)))
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'start "Checking Doom core for irregularities...")))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (let
                         ((tail
                           (list "savehist" "projectile.cache")))
                       (while tail
                         (let
                             ((file
                               (car tail)))
                           (let*
                               ((size
                                 (and t
                                      (condition-case nil
                                          (progn
                                            (doom-file-size file doom-cache-dir))
                                        (error nil)))))
                             (if size
                                 (if
                                     (> size 1048576)
                                     (progn
                                       (progn
                                         (if inhibit-message nil
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                (/ size 1024 1024.0)))))
                                         (setq doom-doctor--warnings
                                               (cons
                                                (doom-print--format
                                                 (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                    (/ size 1024 1024.0)))
                                                doom-doctor--warnings)))
                                       (progn
                                         (let
                                             ((doom-print-level
                                               (or nil doom-print-level))
                                              (doom-print-indent
                                               (+
                                                (if t
                                                    (or nil doom-print-indent-increment)
                                                  0)
                                                doom-print-indent)))
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'p "Consider deleting it from your system (manually)")))))))
                               nil))
                           (setq tail
                                 (cdr tail)))))
                     (if
                         (condition-case nil
                             (progn
                               (executable-find doom-fd-executable))
                           (error nil))
                         nil
                       (progn
                         (if inhibit-message nil
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))))
                         (setq doom-doctor--warnings
                               (cons
                                (doom-print--format
                                 (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                doom-doctor--warnings))))
                     (require 'projectile)
                     (if
                         (projectile-project-root "~")
                         (progn
                           (progn
                             (if inhibit-message nil
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'warn "Your $HOME is recognized as a project root"))))
                             (setq doom-doctor--warnings
                                   (cons
                                    (doom-print--format
                                     (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                    doom-doctor--warnings)))
                           (progn
                             (let
                                 ((doom-print-level
                                   (or nil doom-print-level))
                                  (doom-print-indent
                                   (+
                                    (if t
                                        (or nil doom-print-indent-increment)
                                      0)
                                    doom-print-indent)))
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'p "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")))))))
                     (if
                         (and
                          (file-equal-p doom-user-dir "~/.config/doom")
                          (file-directory-p "~/.doom.d"))
                         (progn
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                             (doom-print--class 'path doom-user-dir)))
                           (progn
                             (let
                                 ((doom-print-level
                                   (or nil doom-print-level))
                                  (doom-print-indent
                                   (+
                                    (if t
                                        (or nil doom-print-indent-increment)
                                      0)
                                    doom-print-indent)))
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'p "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")))))))
                     (if
                         (not
                          (executable-find "fc-list"))
                         (progn
                           (if inhibit-message nil
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))))
                           (setq doom-doctor--warnings
                                 (cons
                                  (doom-print--format
                                   (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                  doom-doctor--warnings)))
                       (if
                           (and
                            (cond
                             ((eq system-type 'gnu/linux)
                              (let nil
                                (concat
                                 (or
                                  (getenv "XDG_DATA_HOME")
                                  "~/.local/share")
                                 "/fonts/")))
                             ((eq system-type 'darwin)
                              (let nil "~/Library/Fonts/")))
                            (require 'nerd-icons nil t))
                           (progn
                             (let
                                 ((temp-buffer
                                   (generate-new-buffer " *temp*" t)))
                               (save-current-buffer
                                 (set-buffer temp-buffer)
                                 (unwind-protect
                                     (progn
                                       (let
                                           ((errors 0))
                                         (let*
                                             ((output
                                               (doom-call-process "fc-list" "" "file"))
                                              (status
                                               (if output
                                                   (car-safe
                                                    (prog1 output
                                                      (setq output
                                                            (cdr output))))
                                                 (signal 'wrong-number-of-arguments
                                                         (list
                                                          '(status . output)
                                                          (length output))))))
                                           (if
                                               (not
                                                (= 0 status))
                                               (doom-print
                                                (doom-print--format
                                                 (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?")))
                                             (insert
                                              (cdr
                                               (doom-call-process "fc-list" "" "file")))
                                             (let
                                                 ((tail nerd-icons-font-names))
                                               (while tail
                                                 (let
                                                     ((font
                                                       (car tail)))
                                                   (if
                                                       (save-excursion
                                                         (re-search-backward font nil t))
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--style 'green "Found font %s" font)))
                                                     (doom-print
                                                      (doom-print--format
                                                       (doom-print--class 'warn "%S font is not installed on your system")
                                                       font))
                                                     (setq errors
                                                           (1+ errors)))
                                                   (setq tail
                                                         (cdr tail)))))
                                             (if
                                                 (> errors 0)
                                                 (progn
                                                   (progn
                                                     (let
                                                         ((doom-print-level
                                                           (or nil doom-print-level))
                                                          (doom-print-indent
                                                           (+
                                                            (if t
                                                                (or nil doom-print-indent-increment)
                                                              0)
                                                            doom-print-indent)))
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'p "Some needed fonts are not properly installed on your system. To download and " "install them, run `M-x nerd-icons-install-fonts' from within Doom Emacs. " "However, on Windows this command will only download them; the fonts must " "be installed manually afterwards.")))))))))))
                                   (and
                                    (buffer-name temp-buffer)
                                    (kill-buffer temp-buffer))))))))))
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'start "Checking for stale elc files in your DOOMDIR...")))
                 (if
                     (file-directory-p doom-user-dir)
                     (progn
                       (progn
                         (let
                             ((doom-print-level
                               (or nil doom-print-level))
                              (doom-print-indent
                               (+
                                (if t
                                    (or nil doom-print-indent-increment)
                                  0)
                                doom-print-indent)))
                           (elc-check-dir doom-user-dir)))))
                 (if doom-modules
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'start "Checking your enabled modules...")))
                       (advice-add #'require :around #'doom-shut-up-a)
                       (let
                           ((tail
                             (doom-module-list)))
                         (while tail
                           (let
                               ((x54
                                 (car tail)))
                             (progn
                               (ignore
                                (consp x54))
                               (let*
                                   ((x55
                                     (car-safe x54))
                                    (x56
                                     (cdr-safe x54)))
                                 (let
                                     ((group x55)
                                      (name x56))
                                   (let
                                       ((doom-context doom-context))
                                     (let
                                         ((tail
                                           (ensure-list 'doctor)))
                                       (while tail
                                         (let
                                             ((context
                                               (car tail)))
                                           (doom-context-push context)
                                           (setq tail
                                                 (cdr tail)))))
                                     (let
                                         (doom-local-errors doom-local-warnings)
                                       (let
                                           (doom-doctor--errors doom-doctor--warnings)
                                         (condition-case ex
                                             (let
                                                 ((doom-module-context
                                                   (doom-module-context
                                                    (cons group name))))
                                               (if
                                                   (and
                                                    (not doom-inhibit-log)
                                                    (or
                                                     (not noninteractive)
                                                     (<= 2 doom-log-level)))
                                                   (progn
                                                     (doom--log 2 ":context:module: =%s" doom-module-context)))
                                               (let
                                                   ((doctor-file
                                                     (doom-module-expand-path group name "doctor.el"))
                                                    (packages-file
                                                     (doom-module-expand-path group name doom-module-packages-file)))
                                                 (if packages-file
                                                     (progn
                                                       (let*
                                                           ((doom-output-indent 6)
                                                            (--cl-var--
                                                             (let
                                                                 ((doom-context doom-context))
                                                               (let
                                                                   ((tail
                                                                     (ensure-list 'packages)))
                                                                 (while tail
                                                                   (let
                                                                       ((context
                                                                         (car tail)))
                                                                     (doom-context-push context)
                                                                     (setq tail
                                                                           (cdr tail)))))
                                                               (let*
                                                                   (doom-packages doom-disabled-packages)
                                                                 (load packages-file 'noerror 'nomessage)
                                                                 (mapcar #'car doom-packages))))
                                                            (name nil))
                                                         (while
                                                             (consp --cl-var--)
                                                           (setq name
                                                                 (car --cl-var--))
                                                           (if
                                                               (or
                                                                (doom-package-get name :disable)
                                                                (eval
                                                                 (doom-package-get name :ignore))
                                                                (plist-member
                                                                 (doom-package-get name :recipe)
                                                                 :local-repo)
                                                                (locate-library
                                                                 (symbol-name name))
                                                                (doom-package-built-in-p name)
                                                                (doom-package-installed-p name))
                                                               (progn)
                                                             (doom-print
                                                              (doom-print--format
                                                               (doom-print--class 'error "Missing emacs package: %S")
                                                               name)))
                                                           (setq --cl-var--
                                                                 (cdr --cl-var--)))
                                                         nil)))
                                                 (if doctor-file
                                                     (progn
                                                       (let
                                                           ((inhibit-message t))
                                                         (load doctor-file 'noerror 'nomessage))))))
                                           ((debug file-missing)
                                            (progn
                                              (if inhibit-message nil
                                                (doom-print
                                                 (doom-print--format
                                                  (doom-print--class 'error "%s"
                                                                     (error-message-string ex)))))
                                              (setq doom-doctor--errors
                                                    (cons
                                                     (doom-print--format
                                                      (doom-print--class 'error "%s"
                                                                         (error-message-string ex)))
                                                     doom-doctor--errors))))
                                           ((debug error)
                                            (progn
                                              (if inhibit-message nil
                                                (doom-print
                                                 (doom-print--format
                                                  (doom-print--class 'error "Syntax error: %s" ex))))
                                              (setq doom-doctor--errors
                                                    (cons
                                                     (doom-print--format
                                                      (doom-print--class 'error "Syntax error: %s" ex))
                                                     doom-doctor--errors)))))
                                         (if
                                             (or doom-doctor--errors doom-doctor--warnings)
                                             (progn
                                               (progn
                                                 (let
                                                     ((doom-print-level
                                                       (or nil doom-print-level))
                                                      (doom-print-indent
                                                       (+
                                                        (if t
                                                            (or nil doom-print-indent-increment)
                                                          0)
                                                        doom-print-indent)))
                                                   (doom-print
                                                    (doom-print--format
                                                     (doom-print--class 'start
                                                                        (doom-print--style 'bold "%s %s"))
                                                     group name))
                                                   (doom-print
                                                    (doom-print--format "%s"
                                                                        (string-join
                                                                         (append doom-doctor--errors doom-doctor--warnings)
                                                                         "\n")))))
                                               (progn
                                                 (setq doom-local-errors doom-doctor--errors)
                                                 (setq doom-local-warnings doom-doctor--warnings)))))
                                       (setq doom-doctor--errors
                                             (append doom-doctor--errors doom-local-errors))
                                       (setq doom-doctor--warnings
                                             (append doom-doctor--warnings doom-local-warnings)))))))
                             (setq tail
                                   (cdr tail)))))))))
           ((debug error)
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                     (or
                                      (cdr-safe ex)
                                      (car ex))))))
              (setq doom-doctor--warnings
                    (cons
                     (doom-print--format
                      (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                         (or
                                          (cdr-safe ex)
                                          (car ex))))
                     doom-doctor--warnings)))
            (setq doom-modules nil)))
         (terpri)
         (let
             ((tail
               (list
                (list doom-doctor--warnings "warning" 'yellow)
                (list doom-doctor--errors "error" 'red))))
           (while tail
             (let
                 ((msg
                   (car tail)))
               (if
                   (car msg)
                   (progn
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'color
                                          (nth 2 msg)
                                          (if
                                              (cdr
                                               (car msg))
                                              "There are %d %ss!" "There is %d %s!")
                                          (length
                                           (car msg))
                                          (nth 1 msg))))))
               (setq tail
                     (cdr tail)))))
         (if
             (or doom-doctor--errors doom-doctor--warnings)
             nil
           (doom-print
            (doom-print--format
             (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))))
         (exit! :pager? "+G"))))
  nil)
 ((cli . #s(doom-cli
            ("doom" "doctor")
            nil
            (("SUMMARY" . "Diagnoses common issues on your system.")
             ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
            nil nil nil nil
            (:benchmark nil :prefix
                        (doom)
                        :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
            (closure
                (t)
                (cli alist)
              (let nil
                (doom-print
                 (doom-print--format "The doctor will see you now...\n"))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking your Emacs version...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (cond
                     ((or
                       (> emacs-major-version 29)
                       (string-match-p ".\\([56]0\\|9[0-9]\\)$" emacs-version))
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))
                               doom-doctor--warnings)))
                      (if
                          (> emacs-major-version 29)
                          (progn
                            (let
                                ((doom-print-level
                                  (or nil doom-print-level))
                                 (doom-print-indent
                                  (+
                                   (if t
                                       (or nil doom-print-indent-increment)
                                     0)
                                   doom-print-indent)))
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'p "This is the bleeding edge of Emacs. As it is constantly changed, Doom will not " "(officially) support it. If you've found a stable commit, great! But be " "cautious about updating Emacs too eagerly!\n")))))
                        (progn
                          (let
                              ((doom-print-level
                                (or nil doom-print-level))
                               (doom-print-indent
                                (+
                                 (if t
                                     (or nil doom-print-indent-increment)
                                   0)
                                 doom-print-indent)))
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'p "A .50, .60, or .9X appended to the version string indicates that this is a version " "of Emacs in between stable releases. These are not well supported.\n"))))))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Because development builds are prone to random breakage, there will be a greater " "burden on you to investigate and deal with issues. Please make extra sure that " "your issue is reproducible in 29.1 before reporting them to Doom's issue tracker!\n" "\n" "If this doesn't phase you, read the \"Why does Doom not support Emacs HEAD\" QnA " "in Doom's FAQ. It offers some advice for debugging and surviving issues on the " "bleeding edge. Failing that, 29.1 is highly recommended and will always be " "Doom's best supported version of Emacs."))))))
                     ((= emacs-major-version 27)
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))
                               doom-doctor--warnings)))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Emacs 28.1 is better supported, faster, and more stable. Plus, Doom will drop " "27.x support sometime late-2023.")))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for Doom's prerequisites...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (if
                        (not
                         (executable-find "git"))
                        (progn
                          (if inhibit-message nil
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))))
                          (setq doom-doctor--errors
                                (cons
                                 (doom-print--format
                                  (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                                 doom-doctor--errors)))
                      (let
                          ((saved-match-data
                            (match-data)))
                        (unwind-protect
                            (progn
                              (let*
                                  ((version
                                    (cdr
                                     (doom-call-process "git" "version")))
                                   (version
                                    (and
                                     (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                                     (match-string 1 version))))
                                (if version
                                    (if
                                        (version< version "2.23")
                                        (progn
                                          (progn
                                            (if inhibit-message nil
                                              (doom-print
                                               (doom-print--format
                                                (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))))
                                            (setq doom-doctor--errors
                                                  (cons
                                                   (doom-print--format
                                                    (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                                   doom-doctor--errors)))))
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))))
                                    (setq doom-doctor--warnings
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                           doom-doctor--warnings))))))
                          (set-match-data saved-match-data t))))
                    (if
                        (executable-find "rg")
                        nil
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))))
                        (setq doom-doctor--errors
                              (cons
                               (doom-print--format
                                (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                               doom-doctor--errors))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for Emacs config conflicts...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (if
                        (or
                         (file-equal-p doom-emacs-dir "~/.emacs.d")
                         (file-equal-p doom-emacs-dir "~/.config/emacs"))
                        nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Doom is installed in a non-standard location")))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "The standard locations are ~/.config/emacs or ~/.emacs.d. Emacs will fail " "to load Doom if it is not explicitly told where to look for it. In Emacs 29+, " "this is possible with the --init-directory option:\n\n" "  $ emacs --init-directory '"
                                               (abbreviate-file-name doom-emacs-dir)
                                               "'\n\n" "However, Emacs 27-28 users have no choice but to move Doom to a standard " "location.\n\n" "Chemacs users may ignore this warning, however."))))))
                    (let
                        (found?)
                      (let
                          ((tail
                            '("~/_emacs" "~/.emacs" "~/.emacs.el" "~/.emacs.d" "~/.config/emacs")))
                        (while tail
                          (let
                              ((file
                                (car tail)))
                            (if
                                (and
                                 (file-exists-p file)
                                 (not
                                  (file-equal-p file doom-emacs-dir)))
                                (progn
                                  (setq found? t)
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'warn "Found another Emacs config: %s (%s)")
                                    file
                                    (if
                                        (file-directory-p file)
                                        "directory" "file")))))
                            (setq tail
                                  (cdr tail)))))
                      (if found?
                          (progn
                            (progn
                              (let
                                  ((doom-print-level
                                    (or nil doom-print-level))
                                   (doom-print-indent
                                    (+
                                     (if t
                                         (or nil doom-print-indent-increment)
                                       0)
                                     doom-print-indent)))
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'p "Having multiple Emacs configs may prevent Doom from loading properly. Emacs " "will load the first it finds and ignore the rest. If Doom isn't starting up " "correctly (e.g. you get a vanilla splash screen), make sure that only one of " "these exist.\n\n" "Chemacs users may ignore this warning."))))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for missing Emacs features...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (if
                        (functionp 'json-serialize)
                        nil
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Emacs was not built with native JSON support"))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Emacs was not built with native JSON support"))
                               doom-doctor--warnings)))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option."))))))
                    (if
                        (featurep 'native-compile)
                        nil
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Emacs was not built with native compilation support"))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Emacs was not built with native compilation support"))
                               doom-doctor--warnings)))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option."))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for private config conflicts...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (let*
                        ((xdg-dir
                          (concat
                           (or
                            (getenv "XDG_CONFIG_HOME")
                            "~/.config")
                           "/doom/"))
                         (doom-dir
                          (or
                           (getenv "DOOMDIR")
                           "~/.doom.d/"))
                         (dir
                          (if
                              (file-directory-p xdg-dir)
                              xdg-dir doom-dir)))
                      (if
                          (file-equal-p dir doom-emacs-dir)
                          (progn
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                                 (doom-print--class 'path dir))))
                            (progn
                              (let
                                  ((doom-print-level
                                    (or nil doom-print-level))
                                   (doom-print-indent
                                    (+
                                     (if t
                                         (or nil doom-print-indent-increment)
                                       0)
                                     doom-print-indent)))
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'p "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")))))))
                      (if
                          (and
                           (not
                            (file-equal-p xdg-dir doom-dir))
                           (file-directory-p xdg-dir)
                           (file-directory-p doom-dir))
                          (progn
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'warn "Detected two private configs, in %s and %s")
                              (abbreviate-file-name xdg-dir)
                              doom-dir))
                            (progn
                              (let
                                  ((doom-print-level
                                    (or nil doom-print-level))
                                   (doom-print-indent
                                    (+
                                     (if t
                                         (or nil doom-print-indent-increment)
                                       0)
                                     doom-print-indent)))
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'p "The second directory will be ignored, as it has lower precedence."))))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for common environmental issues...")))
                (if
                    (string-match-p "/fish$" shell-file-name)
                    (progn
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Detected Fish as your $SHELL")))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Fish (and possibly other non-POSIX shells) is known to inject garbage " "output into some of the child processes that Emacs spawns. Many Emacs " "packages/utilities will choke on this output, causing unpredictable issues. " "To get around this, either:\n\n" "  - Add the following to $DOOMDIR/config.el:\n\n" "    (setq shell-file-name (executable-find \"bash\"))\n\n" "  - Or change your default shell to a POSIX shell (like bash or zsh) " "    and explicitly configure your terminal apps to use the shell you " "    want.\n\n" "If you opt for option 1 and use one of Emacs' terminal emulators, you " "will also need to configure them to use Fish, e.g.\n\n" "  (setq-default vterm-shell (executable-find \"fish\"))\n\n" "  (setq-default explicit-shell-file-name (executable-find \"fish\"))\n")))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for stale elc files...")))
                (elc-check-dir doom-core-dir)
                (elc-check-dir doom-modules-dir)
                (elc-check-dir
                 (doom-path doom-local-dir "straight" straight-build-dir))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for problematic git global settings...")))
                (if
                    (executable-find "git")
                    (if
                        (= 0
                           (car
                            (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                        (progn
                          (progn
                            (if inhibit-message nil
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))))
                            (setq doom-doctor--warnings
                                  (cons
                                   (doom-print--format
                                    (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                                   doom-doctor--warnings)))
                          (progn
                            (let
                                ((doom-print-level
                                  (or nil doom-print-level))
                                 (doom-print-indent
                                  (+
                                   (if t
                                       (or nil doom-print-indent-increment)
                                     0)
                                   doom-print-indent)))
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'p "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")))))))
                  (progn
                    (if inhibit-message nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))))
                    (setq doom-doctor--errors
                          (cons
                           (doom-print--format
                            (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                           doom-doctor--errors))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking Doom Emacs...")))
                (condition-case ex
                    (progn
                      (let
                          ((doom-print-level
                            (or nil doom-print-level))
                           (doom-print-indent
                            (+
                             (if t
                                 (or nil doom-print-indent-increment)
                               0)
                             doom-print-indent)))
                        (require 'doom-start)
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'success "Initialized Doom Emacs %s")
                          doom-version))
                        (doom-print
                         (doom-print--format
                          (if
                              (hash-table-p doom-modules)
                              (doom-print--class 'success "Detected %d modules"
                                                 (hash-table-count doom-modules))
                            (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?"))))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'success "Detected %d packages")
                          (length doom-packages)))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'start "Checking Doom core for irregularities...")))
                        (progn
                          (let
                              ((doom-print-level
                                (or nil doom-print-level))
                               (doom-print-indent
                                (+
                                 (if t
                                     (or nil doom-print-indent-increment)
                                   0)
                                 doom-print-indent)))
                            (let
                                ((tail
                                  (list "savehist" "projectile.cache")))
                              (while tail
                                (let
                                    ((file
                                      (car tail)))
                                  (let*
                                      ((size
                                        (and t
                                             (condition-case nil
                                                 (progn
                                                   (doom-file-size file doom-cache-dir))
                                               (error nil)))))
                                    (if size
                                        (if
                                            (> size 1048576)
                                            (progn
                                              (progn
                                                (if inhibit-message nil
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                       (/ size 1024 1024.0)))))
                                                (setq doom-doctor--warnings
                                                      (cons
                                                       (doom-print--format
                                                        (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                           (/ size 1024 1024.0)))
                                                       doom-doctor--warnings)))
                                              (progn
                                                (let
                                                    ((doom-print-level
                                                      (or nil doom-print-level))
                                                     (doom-print-indent
                                                      (+
                                                       (if t
                                                           (or nil doom-print-indent-increment)
                                                         0)
                                                       doom-print-indent)))
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'p "Consider deleting it from your system (manually)")))))))
                                      nil))
                                  (setq tail
                                        (cdr tail)))))
                            (if
                                (condition-case nil
                                    (progn
                                      (executable-find doom-fd-executable))
                                  (error nil))
                                nil
                              (progn
                                (if inhibit-message nil
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))))
                                (setq doom-doctor--warnings
                                      (cons
                                       (doom-print--format
                                        (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                       doom-doctor--warnings))))
                            (require 'projectile)
                            (if
                                (projectile-project-root "~")
                                (progn
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'warn "Your $HOME is recognized as a project root"))))
                                    (setq doom-doctor--warnings
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                           doom-doctor--warnings)))
                                  (progn
                                    (let
                                        ((doom-print-level
                                          (or nil doom-print-level))
                                         (doom-print-indent
                                          (+
                                           (if t
                                               (or nil doom-print-indent-increment)
                                             0)
                                           doom-print-indent)))
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'p "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")))))))
                            (if
                                (and
                                 (file-equal-p doom-user-dir "~/.config/doom")
                                 (file-directory-p "~/.doom.d"))
                                (progn
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                                    (doom-print--class 'path doom-user-dir)))
                                  (progn
                                    (let
                                        ((doom-print-level
                                          (or nil doom-print-level))
                                         (doom-print-indent
                                          (+
                                           (if t
                                               (or nil doom-print-indent-increment)
                                             0)
                                           doom-print-indent)))
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'p "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")))))))
                            (if
                                (not
                                 (executable-find "fc-list"))
                                (progn
                                  (if inhibit-message nil
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))))
                                  (setq doom-doctor--warnings
                                        (cons
                                         (doom-print--format
                                          (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                         doom-doctor--warnings)))
                              (if
                                  (and
                                   (cond
                                    ((eq system-type 'gnu/linux)
                                     (let nil
                                       (concat
                                        (or
                                         (getenv "XDG_DATA_HOME")
                                         "~/.local/share")
                                        "/fonts/")))
                                    ((eq system-type 'darwin)
                                     (let nil "~/Library/Fonts/")))
                                   (require 'nerd-icons nil t))
                                  (progn
                                    (let
                                        ((temp-buffer
                                          (generate-new-buffer " *temp*" t)))
                                      (save-current-buffer
                                        (set-buffer temp-buffer)
                                        (unwind-protect
                                            (progn
                                              (let
                                                  ((errors 0))
                                                (let*
                                                    ((output
                                                      (doom-call-process "fc-list" "" "file"))
                                                     (status
                                                      (if output
                                                          (car-safe
                                                           (prog1 output
                                                             (setq output
                                                                   (cdr output))))
                                                        (signal 'wrong-number-of-arguments
                                                                (list
                                                                 '(status . output)
                                                                 (length output))))))
                                                  (if
                                                      (not
                                                       (= 0 status))
                                                      (doom-print
                                                       (doom-print--format
                                                        (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?")))
                                                    (insert
                                                     (cdr
                                                      (doom-call-process "fc-list" "" "file")))
                                                    (let
                                                        ((tail nerd-icons-font-names))
                                                      (while tail
                                                        (let
                                                            ((font
                                                              (car tail)))
                                                          (if
                                                              (save-excursion
                                                                (re-search-backward font nil t))
                                                              (doom-print
                                                               (doom-print--format
                                                                (doom-print--style 'green "Found font %s" font)))
                                                            (doom-print
                                                             (doom-print--format
                                                              (doom-print--class 'warn "%S font is not installed on your system")
                                                              font))
                                                            (setq errors
                                                                  (1+ errors)))
                                                          (setq tail
                                                                (cdr tail)))))
                                                    (if
                                                        (> errors 0)
                                                        (progn
                                                          (progn
                                                            (let
                                                                ((doom-print-level
                                                                  (or nil doom-print-level))
                                                                 (doom-print-indent
                                                                  (+
                                                                   (if t
                                                                       (or nil doom-print-indent-increment)
                                                                     0)
                                                                   doom-print-indent)))
                                                              (doom-print
                                                               (doom-print--format
                                                                (doom-print--class 'p "Some needed fonts are not properly installed on your system. To download and " "install them, run `M-x nerd-icons-install-fonts' from within Doom Emacs. " "However, on Windows this command will only download them; the fonts must " "be installed manually afterwards.")))))))))))
                                          (and
                                           (buffer-name temp-buffer)
                                           (kill-buffer temp-buffer))))))))))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'start "Checking for stale elc files in your DOOMDIR...")))
                        (if
                            (file-directory-p doom-user-dir)
                            (progn
                              (progn
                                (let
                                    ((doom-print-level
                                      (or nil doom-print-level))
                                     (doom-print-indent
                                      (+
                                       (if t
                                           (or nil doom-print-indent-increment)
                                         0)
                                       doom-print-indent)))
                                  (elc-check-dir doom-user-dir)))))
                        (if doom-modules
                            (progn
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'start "Checking your enabled modules...")))
                              (advice-add #'require :around #'doom-shut-up-a)
                              (let
                                  ((tail
                                    (doom-module-list)))
                                (while tail
                                  (let
                                      ((x54
                                        (car tail)))
                                    (progn
                                      (ignore
                                       (consp x54))
                                      (let*
                                          ((x55
                                            (car-safe x54))
                                           (x56
                                            (cdr-safe x54)))
                                        (let
                                            ((group x55)
                                             (name x56))
                                          (let
                                              ((doom-context doom-context))
                                            (let
                                                ((tail
                                                  (ensure-list 'doctor)))
                                              (while tail
                                                (let
                                                    ((context
                                                      (car tail)))
                                                  (doom-context-push context)
                                                  (setq tail
                                                        (cdr tail)))))
                                            (let
                                                (doom-local-errors doom-local-warnings)
                                              (let
                                                  (doom-doctor--errors doom-doctor--warnings)
                                                (condition-case ex
                                                    (let
                                                        ((doom-module-context
                                                          (doom-module-context
                                                           (cons group name))))
                                                      (if
                                                          (and
                                                           (not doom-inhibit-log)
                                                           (or
                                                            (not noninteractive)
                                                            (<= 2 doom-log-level)))
                                                          (progn
                                                            (doom--log 2 ":context:module: =%s" doom-module-context)))
                                                      (let
                                                          ((doctor-file
                                                            (doom-module-expand-path group name "doctor.el"))
                                                           (packages-file
                                                            (doom-module-expand-path group name doom-module-packages-file)))
                                                        (if packages-file
                                                            (progn
                                                              (let*
                                                                  ((doom-output-indent 6)
                                                                   (--cl-var--
                                                                    (let
                                                                        ((doom-context doom-context))
                                                                      (let
                                                                          ((tail
                                                                            (ensure-list 'packages)))
                                                                        (while tail
                                                                          (let
                                                                              ((context
                                                                                (car tail)))
                                                                            (doom-context-push context)
                                                                            (setq tail
                                                                                  (cdr tail)))))
                                                                      (let*
                                                                          (doom-packages doom-disabled-packages)
                                                                        (load packages-file 'noerror 'nomessage)
                                                                        (mapcar #'car doom-packages))))
                                                                   (name nil))
                                                                (while
                                                                    (consp --cl-var--)
                                                                  (setq name
                                                                        (car --cl-var--))
                                                                  (if
                                                                      (or
                                                                       (doom-package-get name :disable)
                                                                       (eval
                                                                        (doom-package-get name :ignore))
                                                                       (plist-member
                                                                        (doom-package-get name :recipe)
                                                                        :local-repo)
                                                                       (locate-library
                                                                        (symbol-name name))
                                                                       (doom-package-built-in-p name)
                                                                       (doom-package-installed-p name))
                                                                      (progn)
                                                                    (doom-print
                                                                     (doom-print--format
                                                                      (doom-print--class 'error "Missing emacs package: %S")
                                                                      name)))
                                                                  (setq --cl-var--
                                                                        (cdr --cl-var--)))
                                                                nil)))
                                                        (if doctor-file
                                                            (progn
                                                              (let
                                                                  ((inhibit-message t))
                                                                (load doctor-file 'noerror 'nomessage))))))
                                                  ((debug file-missing)
                                                   (progn
                                                     (if inhibit-message nil
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'error "%s"
                                                                            (error-message-string ex)))))
                                                     (setq doom-doctor--errors
                                                           (cons
                                                            (doom-print--format
                                                             (doom-print--class 'error "%s"
                                                                                (error-message-string ex)))
                                                            doom-doctor--errors))))
                                                  ((debug error)
                                                   (progn
                                                     (if inhibit-message nil
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'error "Syntax error: %s" ex))))
                                                     (setq doom-doctor--errors
                                                           (cons
                                                            (doom-print--format
                                                             (doom-print--class 'error "Syntax error: %s" ex))
                                                            doom-doctor--errors)))))
                                                (if
                                                    (or doom-doctor--errors doom-doctor--warnings)
                                                    (progn
                                                      (progn
                                                        (let
                                                            ((doom-print-level
                                                              (or nil doom-print-level))
                                                             (doom-print-indent
                                                              (+
                                                               (if t
                                                                   (or nil doom-print-indent-increment)
                                                                 0)
                                                               doom-print-indent)))
                                                          (doom-print
                                                           (doom-print--format
                                                            (doom-print--class 'start
                                                                               (doom-print--style 'bold "%s %s"))
                                                            group name))
                                                          (doom-print
                                                           (doom-print--format "%s"
                                                                               (string-join
                                                                                (append doom-doctor--errors doom-doctor--warnings)
                                                                                "\n")))))
                                                      (progn
                                                        (setq doom-local-errors doom-doctor--errors)
                                                        (setq doom-local-warnings doom-doctor--warnings)))))
                                              (setq doom-doctor--errors
                                                    (append doom-doctor--errors doom-local-errors))
                                              (setq doom-doctor--warnings
                                                    (append doom-doctor--warnings doom-local-warnings)))))))
                                    (setq tail
                                          (cdr tail)))))))))
                  ((debug error)
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                            (or
                                             (cdr-safe ex)
                                             (car ex))))))
                     (setq doom-doctor--warnings
                           (cons
                            (doom-print--format
                             (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                                (or
                                                 (cdr-safe ex)
                                                 (car ex))))
                            doom-doctor--warnings)))
                   (setq doom-modules nil)))
                (terpri)
                (let
                    ((tail
                      (list
                       (list doom-doctor--warnings "warning" 'yellow)
                       (list doom-doctor--errors "error" 'red))))
                  (while tail
                    (let
                        ((msg
                          (car tail)))
                      (if
                          (car msg)
                          (progn
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'color
                                                 (nth 2 msg)
                                                 (if
                                                     (cdr
                                                      (car msg))
                                                     "There are %d %ss!" "There is %d %s!")
                                                 (length
                                                  (car msg))
                                                 (nth 1 msg))))))
                      (setq tail
                            (cdr tail)))))
                (if
                    (or doom-doctor--errors doom-doctor--warnings)
                    nil
                  (doom-print
                   (doom-print--format
                    (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))))
                (exit! :pager? "+G")))))
  (alist)))

;;;; 33
((funcall
  (closure
      (t)
      (cli alist)
    (let nil
      (doom-print
       (doom-print--format "The doctor will see you now...\n"))
      (doom-print
       (doom-print--format
        (doom-print--class 'start "Checking your Emacs version...")))
      (progn
        (let
            ((doom-print-level
              (or nil doom-print-level))
             (doom-print-indent
              (+
               (if t
                   (or nil doom-print-indent-increment)
                 0)
               doom-print-indent)))
          (cond
           ((or
             (> emacs-major-version 29)
             (string-match-p ".\\([56]0\\|9[0-9]\\)$" emacs-version))
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))))
              (setq doom-doctor--warnings
                    (cons
                     (doom-print--format
                      (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))
                     doom-doctor--warnings)))
            (if
                (> emacs-major-version 29)
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'p "This is the bleeding edge of Emacs. As it is constantly changed, Doom will not " "(officially) support it. If you've found a stable commit, great! But be " "cautious about updating Emacs too eagerly!\n")))))
              (progn
                (let
                    ((doom-print-level
                      (or nil doom-print-level))
                     (doom-print-indent
                      (+
                       (if t
                           (or nil doom-print-indent-increment)
                         0)
                       doom-print-indent)))
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'p "A .50, .60, or .9X appended to the version string indicates that this is a version " "of Emacs in between stable releases. These are not well supported.\n"))))))
            (progn
              (let
                  ((doom-print-level
                    (or nil doom-print-level))
                   (doom-print-indent
                    (+
                     (if t
                         (or nil doom-print-indent-increment)
                       0)
                     doom-print-indent)))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'p "Because development builds are prone to random breakage, there will be a greater " "burden on you to investigate and deal with issues. Please make extra sure that " "your issue is reproducible in 29.1 before reporting them to Doom's issue tracker!\n" "\n" "If this doesn't phase you, read the \"Why does Doom not support Emacs HEAD\" QnA " "in Doom's FAQ. It offers some advice for debugging and surviving issues on the " "bleeding edge. Failing that, 29.1 is highly recommended and will always be " "Doom's best supported version of Emacs."))))))
           ((= emacs-major-version 27)
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))))
              (setq doom-doctor--warnings
                    (cons
                     (doom-print--format
                      (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))
                     doom-doctor--warnings)))
            (progn
              (let
                  ((doom-print-level
                    (or nil doom-print-level))
                   (doom-print-indent
                    (+
                     (if t
                         (or nil doom-print-indent-increment)
                       0)
                     doom-print-indent)))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'p "Emacs 28.1 is better supported, faster, and more stable. Plus, Doom will drop " "27.x support sometime late-2023.")))))))))
      (doom-print
       (doom-print--format
        (doom-print--class 'start "Checking for Doom's prerequisites...")))
      (progn
        (let
            ((doom-print-level
              (or nil doom-print-level))
             (doom-print-indent
              (+
               (if t
                   (or nil doom-print-indent-increment)
                 0)
               doom-print-indent)))
          (if
              (not
               (executable-find "git"))
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))))
                (setq doom-doctor--errors
                      (cons
                       (doom-print--format
                        (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                       doom-doctor--errors)))
            (let
                ((saved-match-data
                  (match-data)))
              (unwind-protect
                  (progn
                    (let*
                        ((version
                          (cdr
                           (doom-call-process "git" "version")))
                         (version
                          (and
                           (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                           (match-string 1 version))))
                      (if version
                          (if
                              (version< version "2.23")
                              (progn
                                (progn
                                  (if inhibit-message nil
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))))
                                  (setq doom-doctor--errors
                                        (cons
                                         (doom-print--format
                                          (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                         doom-doctor--errors)))))
                        (progn
                          (if inhibit-message nil
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))))
                          (setq doom-doctor--warnings
                                (cons
                                 (doom-print--format
                                  (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                 doom-doctor--warnings))))))
                (set-match-data saved-match-data t))))
          (if
              (executable-find "rg")
              nil
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))))
              (setq doom-doctor--errors
                    (cons
                     (doom-print--format
                      (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                     doom-doctor--errors))))))
      (doom-print
       (doom-print--format
        (doom-print--class 'start "Checking for Emacs config conflicts...")))
      (progn
        (let
            ((doom-print-level
              (or nil doom-print-level))
             (doom-print-indent
              (+
               (if t
                   (or nil doom-print-indent-increment)
                 0)
               doom-print-indent)))
          (if
              (or
               (file-equal-p doom-emacs-dir "~/.emacs.d")
               (file-equal-p doom-emacs-dir "~/.config/emacs"))
              nil
            (doom-print
             (doom-print--format
              (doom-print--class 'warn "Doom is installed in a non-standard location")))
            (progn
              (let
                  ((doom-print-level
                    (or nil doom-print-level))
                   (doom-print-indent
                    (+
                     (if t
                         (or nil doom-print-indent-increment)
                       0)
                     doom-print-indent)))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'p "The standard locations are ~/.config/emacs or ~/.emacs.d. Emacs will fail " "to load Doom if it is not explicitly told where to look for it. In Emacs 29+, " "this is possible with the --init-directory option:\n\n" "  $ emacs --init-directory '"
                                     (abbreviate-file-name doom-emacs-dir)
                                     "'\n\n" "However, Emacs 27-28 users have no choice but to move Doom to a standard " "location.\n\n" "Chemacs users may ignore this warning, however."))))))
          (let
              (found?)
            (let
                ((tail
                  '("~/_emacs" "~/.emacs" "~/.emacs.el" "~/.emacs.d" "~/.config/emacs")))
              (while tail
                (let
                    ((file
                      (car tail)))
                  (if
                      (and
                       (file-exists-p file)
                       (not
                        (file-equal-p file doom-emacs-dir)))
                      (progn
                        (setq found? t)
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Found another Emacs config: %s (%s)")
                          file
                          (if
                              (file-directory-p file)
                              "directory" "file")))))
                  (setq tail
                        (cdr tail)))))
            (if found?
                (progn
                  (progn
                    (let
                        ((doom-print-level
                          (or nil doom-print-level))
                         (doom-print-indent
                          (+
                           (if t
                               (or nil doom-print-indent-increment)
                             0)
                           doom-print-indent)))
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'p "Having multiple Emacs configs may prevent Doom from loading properly. Emacs " "will load the first it finds and ignore the rest. If Doom isn't starting up " "correctly (e.g. you get a vanilla splash screen), make sure that only one of " "these exist.\n\n" "Chemacs users may ignore this warning."))))))))))
      (doom-print
       (doom-print--format
        (doom-print--class 'start "Checking for missing Emacs features...")))
      (progn
        (let
            ((doom-print-level
              (or nil doom-print-level))
             (doom-print-indent
              (+
               (if t
                   (or nil doom-print-indent-increment)
                 0)
               doom-print-indent)))
          (if
              (functionp 'json-serialize)
              nil
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'warn "Emacs was not built with native JSON support"))))
              (setq doom-doctor--warnings
                    (cons
                     (doom-print--format
                      (doom-print--class 'warn "Emacs was not built with native JSON support"))
                     doom-doctor--warnings)))
            (progn
              (let
                  ((doom-print-level
                    (or nil doom-print-level))
                   (doom-print-indent
                    (+
                     (if t
                         (or nil doom-print-indent-increment)
                       0)
                     doom-print-indent)))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option."))))))
          (if
              (featurep 'native-compile)
              nil
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'warn "Emacs was not built with native compilation support"))))
              (setq doom-doctor--warnings
                    (cons
                     (doom-print--format
                      (doom-print--class 'warn "Emacs was not built with native compilation support"))
                     doom-doctor--warnings)))
            (progn
              (let
                  ((doom-print-level
                    (or nil doom-print-level))
                   (doom-print-indent
                    (+
                     (if t
                         (or nil doom-print-indent-increment)
                       0)
                     doom-print-indent)))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option."))))))))
      (doom-print
       (doom-print--format
        (doom-print--class 'start "Checking for private config conflicts...")))
      (progn
        (let
            ((doom-print-level
              (or nil doom-print-level))
             (doom-print-indent
              (+
               (if t
                   (or nil doom-print-indent-increment)
                 0)
               doom-print-indent)))
          (let*
              ((xdg-dir
                (concat
                 (or
                  (getenv "XDG_CONFIG_HOME")
                  "~/.config")
                 "/doom/"))
               (doom-dir
                (or
                 (getenv "DOOMDIR")
                 "~/.doom.d/"))
               (dir
                (if
                    (file-directory-p xdg-dir)
                    xdg-dir doom-dir)))
            (if
                (file-equal-p dir doom-emacs-dir)
                (progn
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                       (doom-print--class 'path dir))))
                  (progn
                    (let
                        ((doom-print-level
                          (or nil doom-print-level))
                         (doom-print-indent
                          (+
                           (if t
                               (or nil doom-print-indent-increment)
                             0)
                           doom-print-indent)))
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'p "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")))))))
            (if
                (and
                 (not
                  (file-equal-p xdg-dir doom-dir))
                 (file-directory-p xdg-dir)
                 (file-directory-p doom-dir))
                (progn
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'warn "Detected two private configs, in %s and %s")
                    (abbreviate-file-name xdg-dir)
                    doom-dir))
                  (progn
                    (let
                        ((doom-print-level
                          (or nil doom-print-level))
                         (doom-print-indent
                          (+
                           (if t
                               (or nil doom-print-indent-increment)
                             0)
                           doom-print-indent)))
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'p "The second directory will be ignored, as it has lower precedence."))))))))))
      (doom-print
       (doom-print--format
        (doom-print--class 'start "Checking for common environmental issues...")))
      (if
          (string-match-p "/fish$" shell-file-name)
          (progn
            (doom-print
             (doom-print--format
              (doom-print--class 'warn "Detected Fish as your $SHELL")))
            (progn
              (let
                  ((doom-print-level
                    (or nil doom-print-level))
                   (doom-print-indent
                    (+
                     (if t
                         (or nil doom-print-indent-increment)
                       0)
                     doom-print-indent)))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'p "Fish (and possibly other non-POSIX shells) is known to inject garbage " "output into some of the child processes that Emacs spawns. Many Emacs " "packages/utilities will choke on this output, causing unpredictable issues. " "To get around this, either:\n\n" "  - Add the following to $DOOMDIR/config.el:\n\n" "    (setq shell-file-name (executable-find \"bash\"))\n\n" "  - Or change your default shell to a POSIX shell (like bash or zsh) " "    and explicitly configure your terminal apps to use the shell you " "    want.\n\n" "If you opt for option 1 and use one of Emacs' terminal emulators, you " "will also need to configure them to use Fish, e.g.\n\n" "  (setq-default vterm-shell (executable-find \"fish\"))\n\n" "  (setq-default explicit-shell-file-name (executable-find \"fish\"))\n")))))))
      (doom-print
       (doom-print--format
        (doom-print--class 'start "Checking for stale elc files...")))
      (elc-check-dir doom-core-dir)
      (elc-check-dir doom-modules-dir)
      (elc-check-dir
       (doom-path doom-local-dir "straight" straight-build-dir))
      (doom-print
       (doom-print--format
        (doom-print--class 'start "Checking for problematic git global settings...")))
      (if
          (executable-find "git")
          (if
              (= 0
                 (car
                  (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
              (progn
                (progn
                  (if inhibit-message nil
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))))
                  (setq doom-doctor--warnings
                        (cons
                         (doom-print--format
                          (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                         doom-doctor--warnings)))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'p "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")))))))
        (progn
          (if inhibit-message nil
            (doom-print
             (doom-print--format
              (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))))
          (setq doom-doctor--errors
                (cons
                 (doom-print--format
                  (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                 doom-doctor--errors))))
      (doom-print
       (doom-print--format
        (doom-print--class 'start "Checking Doom Emacs...")))
      (condition-case ex
          (progn
            (let
                ((doom-print-level
                  (or nil doom-print-level))
                 (doom-print-indent
                  (+
                   (if t
                       (or nil doom-print-indent-increment)
                     0)
                   doom-print-indent)))
              (require 'doom-start)
              (doom-print
               (doom-print--format
                (doom-print--class 'success "Initialized Doom Emacs %s")
                doom-version))
              (doom-print
               (doom-print--format
                (if
                    (hash-table-p doom-modules)
                    (doom-print--class 'success "Detected %d modules"
                                       (hash-table-count doom-modules))
                  (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?"))))
              (doom-print
               (doom-print--format
                (doom-print--class 'success "Detected %d packages")
                (length doom-packages)))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking Doom core for irregularities...")))
              (progn
                (let
                    ((doom-print-level
                      (or nil doom-print-level))
                     (doom-print-indent
                      (+
                       (if t
                           (or nil doom-print-indent-increment)
                         0)
                       doom-print-indent)))
                  (let
                      ((tail
                        (list "savehist" "projectile.cache")))
                    (while tail
                      (let
                          ((file
                            (car tail)))
                        (let*
                            ((size
                              (and t
                                   (condition-case nil
                                       (progn
                                         (doom-file-size file doom-cache-dir))
                                     (error nil)))))
                          (if size
                              (if
                                  (> size 1048576)
                                  (progn
                                    (progn
                                      (if inhibit-message nil
                                        (doom-print
                                         (doom-print--format
                                          (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                             (/ size 1024 1024.0)))))
                                      (setq doom-doctor--warnings
                                            (cons
                                             (doom-print--format
                                              (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                 (/ size 1024 1024.0)))
                                             doom-doctor--warnings)))
                                    (progn
                                      (let
                                          ((doom-print-level
                                            (or nil doom-print-level))
                                           (doom-print-indent
                                            (+
                                             (if t
                                                 (or nil doom-print-indent-increment)
                                               0)
                                             doom-print-indent)))
                                        (doom-print
                                         (doom-print--format
                                          (doom-print--class 'p "Consider deleting it from your system (manually)")))))))
                            nil))
                        (setq tail
                              (cdr tail)))))
                  (if
                      (condition-case nil
                          (progn
                            (executable-find doom-fd-executable))
                        (error nil))
                      nil
                    (progn
                      (if inhibit-message nil
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))))
                      (setq doom-doctor--warnings
                            (cons
                             (doom-print--format
                              (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                             doom-doctor--warnings))))
                  (require 'projectile)
                  (if
                      (projectile-project-root "~")
                      (progn
                        (progn
                          (if inhibit-message nil
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'warn "Your $HOME is recognized as a project root"))))
                          (setq doom-doctor--warnings
                                (cons
                                 (doom-print--format
                                  (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                 doom-doctor--warnings)))
                        (progn
                          (let
                              ((doom-print-level
                                (or nil doom-print-level))
                               (doom-print-indent
                                (+
                                 (if t
                                     (or nil doom-print-indent-increment)
                                   0)
                                 doom-print-indent)))
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'p "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")))))))
                  (if
                      (and
                       (file-equal-p doom-user-dir "~/.config/doom")
                       (file-directory-p "~/.doom.d"))
                      (progn
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                          (doom-print--class 'path doom-user-dir)))
                        (progn
                          (let
                              ((doom-print-level
                                (or nil doom-print-level))
                               (doom-print-indent
                                (+
                                 (if t
                                     (or nil doom-print-indent-increment)
                                   0)
                                 doom-print-indent)))
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'p "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")))))))
                  (if
                      (not
                       (executable-find "fc-list"))
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                               doom-doctor--warnings)))
                    (if
                        (and
                         (cond
                          ((eq system-type 'gnu/linux)
                           (let nil
                             (concat
                              (or
                               (getenv "XDG_DATA_HOME")
                               "~/.local/share")
                              "/fonts/")))
                          ((eq system-type 'darwin)
                           (let nil "~/Library/Fonts/")))
                         (require 'nerd-icons nil t))
                        (progn
                          (let
                              ((temp-buffer
                                (generate-new-buffer " *temp*" t)))
                            (save-current-buffer
                              (set-buffer temp-buffer)
                              (unwind-protect
                                  (progn
                                    (let
                                        ((errors 0))
                                      (let*
                                          ((output
                                            (doom-call-process "fc-list" "" "file"))
                                           (status
                                            (if output
                                                (car-safe
                                                 (prog1 output
                                                   (setq output
                                                         (cdr output))))
                                              (signal 'wrong-number-of-arguments
                                                      (list
                                                       '(status . output)
                                                       (length output))))))
                                        (if
                                            (not
                                             (= 0 status))
                                            (doom-print
                                             (doom-print--format
                                              (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?")))
                                          (insert
                                           (cdr
                                            (doom-call-process "fc-list" "" "file")))
                                          (let
                                              ((tail nerd-icons-font-names))
                                            (while tail
                                              (let
                                                  ((font
                                                    (car tail)))
                                                (if
                                                    (save-excursion
                                                      (re-search-backward font nil t))
                                                    (doom-print
                                                     (doom-print--format
                                                      (doom-print--style 'green "Found font %s" font)))
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'warn "%S font is not installed on your system")
                                                    font))
                                                  (setq errors
                                                        (1+ errors)))
                                                (setq tail
                                                      (cdr tail)))))
                                          (if
                                              (> errors 0)
                                              (progn
                                                (progn
                                                  (let
                                                      ((doom-print-level
                                                        (or nil doom-print-level))
                                                       (doom-print-indent
                                                        (+
                                                         (if t
                                                             (or nil doom-print-indent-increment)
                                                           0)
                                                         doom-print-indent)))
                                                    (doom-print
                                                     (doom-print--format
                                                      (doom-print--class 'p "Some needed fonts are not properly installed on your system. To download and " "install them, run `M-x nerd-icons-install-fonts' from within Doom Emacs. " "However, on Windows this command will only download them; the fonts must " "be installed manually afterwards.")))))))))))
                                (and
                                 (buffer-name temp-buffer)
                                 (kill-buffer temp-buffer))))))))))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking for stale elc files in your DOOMDIR...")))
              (if
                  (file-directory-p doom-user-dir)
                  (progn
                    (progn
                      (let
                          ((doom-print-level
                            (or nil doom-print-level))
                           (doom-print-indent
                            (+
                             (if t
                                 (or nil doom-print-indent-increment)
                               0)
                             doom-print-indent)))
                        (elc-check-dir doom-user-dir)))))
              (if doom-modules
                  (progn
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'start "Checking your enabled modules...")))
                    (advice-add #'require :around #'doom-shut-up-a)
                    (let
                        ((tail
                          (doom-module-list)))
                      (while tail
                        (let
                            ((x54
                              (car tail)))
                          (progn
                            (ignore
                             (consp x54))
                            (let*
                                ((x55
                                  (car-safe x54))
                                 (x56
                                  (cdr-safe x54)))
                              (let
                                  ((group x55)
                                   (name x56))
                                (let
                                    ((doom-context doom-context))
                                  (let
                                      ((tail
                                        (ensure-list 'doctor)))
                                    (while tail
                                      (let
                                          ((context
                                            (car tail)))
                                        (doom-context-push context)
                                        (setq tail
                                              (cdr tail)))))
                                  (let
                                      (doom-local-errors doom-local-warnings)
                                    (let
                                        (doom-doctor--errors doom-doctor--warnings)
                                      (condition-case ex
                                          (let
                                              ((doom-module-context
                                                (doom-module-context
                                                 (cons group name))))
                                            (if
                                                (and
                                                 (not doom-inhibit-log)
                                                 (or
                                                  (not noninteractive)
                                                  (<= 2 doom-log-level)))
                                                (progn
                                                  (doom--log 2 ":context:module: =%s" doom-module-context)))
                                            (let
                                                ((doctor-file
                                                  (doom-module-expand-path group name "doctor.el"))
                                                 (packages-file
                                                  (doom-module-expand-path group name doom-module-packages-file)))
                                              (if packages-file
                                                  (progn
                                                    (let*
                                                        ((doom-output-indent 6)
                                                         (--cl-var--
                                                          (let
                                                              ((doom-context doom-context))
                                                            (let
                                                                ((tail
                                                                  (ensure-list 'packages)))
                                                              (while tail
                                                                (let
                                                                    ((context
                                                                      (car tail)))
                                                                  (doom-context-push context)
                                                                  (setq tail
                                                                        (cdr tail)))))
                                                            (let*
                                                                (doom-packages doom-disabled-packages)
                                                              (load packages-file 'noerror 'nomessage)
                                                              (mapcar #'car doom-packages))))
                                                         (name nil))
                                                      (while
                                                          (consp --cl-var--)
                                                        (setq name
                                                              (car --cl-var--))
                                                        (if
                                                            (or
                                                             (doom-package-get name :disable)
                                                             (eval
                                                              (doom-package-get name :ignore))
                                                             (plist-member
                                                              (doom-package-get name :recipe)
                                                              :local-repo)
                                                             (locate-library
                                                              (symbol-name name))
                                                             (doom-package-built-in-p name)
                                                             (doom-package-installed-p name))
                                                            (progn)
                                                          (doom-print
                                                           (doom-print--format
                                                            (doom-print--class 'error "Missing emacs package: %S")
                                                            name)))
                                                        (setq --cl-var--
                                                              (cdr --cl-var--)))
                                                      nil)))
                                              (if doctor-file
                                                  (progn
                                                    (let
                                                        ((inhibit-message t))
                                                      (load doctor-file 'noerror 'nomessage))))))
                                        ((debug file-missing)
                                         (progn
                                           (if inhibit-message nil
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'error "%s"
                                                                  (error-message-string ex)))))
                                           (setq doom-doctor--errors
                                                 (cons
                                                  (doom-print--format
                                                   (doom-print--class 'error "%s"
                                                                      (error-message-string ex)))
                                                  doom-doctor--errors))))
                                        ((debug error)
                                         (progn
                                           (if inhibit-message nil
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'error "Syntax error: %s" ex))))
                                           (setq doom-doctor--errors
                                                 (cons
                                                  (doom-print--format
                                                   (doom-print--class 'error "Syntax error: %s" ex))
                                                  doom-doctor--errors)))))
                                      (if
                                          (or doom-doctor--errors doom-doctor--warnings)
                                          (progn
                                            (progn
                                              (let
                                                  ((doom-print-level
                                                    (or nil doom-print-level))
                                                   (doom-print-indent
                                                    (+
                                                     (if t
                                                         (or nil doom-print-indent-increment)
                                                       0)
                                                     doom-print-indent)))
                                                (doom-print
                                                 (doom-print--format
                                                  (doom-print--class 'start
                                                                     (doom-print--style 'bold "%s %s"))
                                                  group name))
                                                (doom-print
                                                 (doom-print--format "%s"
                                                                     (string-join
                                                                      (append doom-doctor--errors doom-doctor--warnings)
                                                                      "\n")))))
                                            (progn
                                              (setq doom-local-errors doom-doctor--errors)
                                              (setq doom-local-warnings doom-doctor--warnings)))))
                                    (setq doom-doctor--errors
                                          (append doom-doctor--errors doom-local-errors))
                                    (setq doom-doctor--warnings
                                          (append doom-doctor--warnings doom-local-warnings)))))))
                          (setq tail
                                (cdr tail)))))))))
        ((debug error)
         (progn
           (if inhibit-message nil
             (doom-print
              (doom-print--format
               (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                  (or
                                   (cdr-safe ex)
                                   (car ex))))))
           (setq doom-doctor--warnings
                 (cons
                  (doom-print--format
                   (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                      (or
                                       (cdr-safe ex)
                                       (car ex))))
                  doom-doctor--warnings)))
         (setq doom-modules nil)))
      (terpri)
      (let
          ((tail
            (list
             (list doom-doctor--warnings "warning" 'yellow)
             (list doom-doctor--errors "error" 'red))))
        (while tail
          (let
              ((msg
                (car tail)))
            (if
                (car msg)
                (progn
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'color
                                       (nth 2 msg)
                                       (if
                                           (cdr
                                            (car msg))
                                           "There are %d %ss!" "There is %d %s!")
                                       (length
                                        (car msg))
                                       (nth 1 msg))))))
            (setq tail
                  (cdr tail)))))
      (if
          (or doom-doctor--errors doom-doctor--warnings)
          nil
        (doom-print
         (doom-print--format
          (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))))
      (exit! :pager? "+G")))
  #s(doom-cli
     ("doom" "doctor")
     nil
     (("SUMMARY" . "Diagnoses common issues on your system.")
      ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
     nil nil nil nil
     (:benchmark nil :prefix
                 (doom)
                 :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
     (closure
         (t)
         (cli alist)
       (let nil
         (doom-print
          (doom-print--format "The doctor will see you now...\n"))
         (doom-print
          (doom-print--format
           (doom-print--class 'start "Checking your Emacs version...")))
         (progn
           (let
               ((doom-print-level
                 (or nil doom-print-level))
                (doom-print-indent
                 (+
                  (if t
                      (or nil doom-print-indent-increment)
                    0)
                  doom-print-indent)))
             (cond
              ((or
                (> emacs-major-version 29)
                (string-match-p ".\\([56]0\\|9[0-9]\\)$" emacs-version))
               (progn
                 (if inhibit-message nil
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))))
                 (setq doom-doctor--warnings
                       (cons
                        (doom-print--format
                         (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))
                        doom-doctor--warnings)))
               (if
                   (> emacs-major-version 29)
                   (progn
                     (let
                         ((doom-print-level
                           (or nil doom-print-level))
                          (doom-print-indent
                           (+
                            (if t
                                (or nil doom-print-indent-increment)
                              0)
                            doom-print-indent)))
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'p "This is the bleeding edge of Emacs. As it is constantly changed, Doom will not " "(officially) support it. If you've found a stable commit, great! But be " "cautious about updating Emacs too eagerly!\n")))))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "A .50, .60, or .9X appended to the version string indicates that this is a version " "of Emacs in between stable releases. These are not well supported.\n"))))))
               (progn
                 (let
                     ((doom-print-level
                       (or nil doom-print-level))
                      (doom-print-indent
                       (+
                        (if t
                            (or nil doom-print-indent-increment)
                          0)
                        doom-print-indent)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'p "Because development builds are prone to random breakage, there will be a greater " "burden on you to investigate and deal with issues. Please make extra sure that " "your issue is reproducible in 29.1 before reporting them to Doom's issue tracker!\n" "\n" "If this doesn't phase you, read the \"Why does Doom not support Emacs HEAD\" QnA " "in Doom's FAQ. It offers some advice for debugging and surviving issues on the " "bleeding edge. Failing that, 29.1 is highly recommended and will always be " "Doom's best supported version of Emacs."))))))
              ((= emacs-major-version 27)
               (progn
                 (if inhibit-message nil
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))))
                 (setq doom-doctor--warnings
                       (cons
                        (doom-print--format
                         (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))
                        doom-doctor--warnings)))
               (progn
                 (let
                     ((doom-print-level
                       (or nil doom-print-level))
                      (doom-print-indent
                       (+
                        (if t
                            (or nil doom-print-indent-increment)
                          0)
                        doom-print-indent)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'p "Emacs 28.1 is better supported, faster, and more stable. Plus, Doom will drop " "27.x support sometime late-2023.")))))))))
         (doom-print
          (doom-print--format
           (doom-print--class 'start "Checking for Doom's prerequisites...")))
         (progn
           (let
               ((doom-print-level
                 (or nil doom-print-level))
                (doom-print-indent
                 (+
                  (if t
                      (or nil doom-print-indent-increment)
                    0)
                  doom-print-indent)))
             (if
                 (not
                  (executable-find "git"))
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))))
                   (setq doom-doctor--errors
                         (cons
                          (doom-print--format
                           (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                          doom-doctor--errors)))
               (let
                   ((saved-match-data
                     (match-data)))
                 (unwind-protect
                     (progn
                       (let*
                           ((version
                             (cdr
                              (doom-call-process "git" "version")))
                            (version
                             (and
                              (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                              (match-string 1 version))))
                         (if version
                             (if
                                 (version< version "2.23")
                                 (progn
                                   (progn
                                     (if inhibit-message nil
                                       (doom-print
                                        (doom-print--format
                                         (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))))
                                     (setq doom-doctor--errors
                                           (cons
                                            (doom-print--format
                                             (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                            doom-doctor--errors)))))
                           (progn
                             (if inhibit-message nil
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))))
                             (setq doom-doctor--warnings
                                   (cons
                                    (doom-print--format
                                     (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                    doom-doctor--warnings))))))
                   (set-match-data saved-match-data t))))
             (if
                 (executable-find "rg")
                 nil
               (progn
                 (if inhibit-message nil
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))))
                 (setq doom-doctor--errors
                       (cons
                        (doom-print--format
                         (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                        doom-doctor--errors))))))
         (doom-print
          (doom-print--format
           (doom-print--class 'start "Checking for Emacs config conflicts...")))
         (progn
           (let
               ((doom-print-level
                 (or nil doom-print-level))
                (doom-print-indent
                 (+
                  (if t
                      (or nil doom-print-indent-increment)
                    0)
                  doom-print-indent)))
             (if
                 (or
                  (file-equal-p doom-emacs-dir "~/.emacs.d")
                  (file-equal-p doom-emacs-dir "~/.config/emacs"))
                 nil
               (doom-print
                (doom-print--format
                 (doom-print--class 'warn "Doom is installed in a non-standard location")))
               (progn
                 (let
                     ((doom-print-level
                       (or nil doom-print-level))
                      (doom-print-indent
                       (+
                        (if t
                            (or nil doom-print-indent-increment)
                          0)
                        doom-print-indent)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'p "The standard locations are ~/.config/emacs or ~/.emacs.d. Emacs will fail " "to load Doom if it is not explicitly told where to look for it. In Emacs 29+, " "this is possible with the --init-directory option:\n\n" "  $ emacs --init-directory '"
                                        (abbreviate-file-name doom-emacs-dir)
                                        "'\n\n" "However, Emacs 27-28 users have no choice but to move Doom to a standard " "location.\n\n" "Chemacs users may ignore this warning, however."))))))
             (let
                 (found?)
               (let
                   ((tail
                     '("~/_emacs" "~/.emacs" "~/.emacs.el" "~/.emacs.d" "~/.config/emacs")))
                 (while tail
                   (let
                       ((file
                         (car tail)))
                     (if
                         (and
                          (file-exists-p file)
                          (not
                           (file-equal-p file doom-emacs-dir)))
                         (progn
                           (setq found? t)
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'warn "Found another Emacs config: %s (%s)")
                             file
                             (if
                                 (file-directory-p file)
                                 "directory" "file")))))
                     (setq tail
                           (cdr tail)))))
               (if found?
                   (progn
                     (progn
                       (let
                           ((doom-print-level
                             (or nil doom-print-level))
                            (doom-print-indent
                             (+
                              (if t
                                  (or nil doom-print-indent-increment)
                                0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'p "Having multiple Emacs configs may prevent Doom from loading properly. Emacs " "will load the first it finds and ignore the rest. If Doom isn't starting up " "correctly (e.g. you get a vanilla splash screen), make sure that only one of " "these exist.\n\n" "Chemacs users may ignore this warning."))))))))))
         (doom-print
          (doom-print--format
           (doom-print--class 'start "Checking for missing Emacs features...")))
         (progn
           (let
               ((doom-print-level
                 (or nil doom-print-level))
                (doom-print-indent
                 (+
                  (if t
                      (or nil doom-print-indent-increment)
                    0)
                  doom-print-indent)))
             (if
                 (functionp 'json-serialize)
                 nil
               (progn
                 (if inhibit-message nil
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'warn "Emacs was not built with native JSON support"))))
                 (setq doom-doctor--warnings
                       (cons
                        (doom-print--format
                         (doom-print--class 'warn "Emacs was not built with native JSON support"))
                        doom-doctor--warnings)))
               (progn
                 (let
                     ((doom-print-level
                       (or nil doom-print-level))
                      (doom-print-indent
                       (+
                        (if t
                            (or nil doom-print-indent-increment)
                          0)
                        doom-print-indent)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option."))))))
             (if
                 (featurep 'native-compile)
                 nil
               (progn
                 (if inhibit-message nil
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'warn "Emacs was not built with native compilation support"))))
                 (setq doom-doctor--warnings
                       (cons
                        (doom-print--format
                         (doom-print--class 'warn "Emacs was not built with native compilation support"))
                        doom-doctor--warnings)))
               (progn
                 (let
                     ((doom-print-level
                       (or nil doom-print-level))
                      (doom-print-indent
                       (+
                        (if t
                            (or nil doom-print-indent-increment)
                          0)
                        doom-print-indent)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option."))))))))
         (doom-print
          (doom-print--format
           (doom-print--class 'start "Checking for private config conflicts...")))
         (progn
           (let
               ((doom-print-level
                 (or nil doom-print-level))
                (doom-print-indent
                 (+
                  (if t
                      (or nil doom-print-indent-increment)
                    0)
                  doom-print-indent)))
             (let*
                 ((xdg-dir
                   (concat
                    (or
                     (getenv "XDG_CONFIG_HOME")
                     "~/.config")
                    "/doom/"))
                  (doom-dir
                   (or
                    (getenv "DOOMDIR")
                    "~/.doom.d/"))
                  (dir
                   (if
                       (file-directory-p xdg-dir)
                       xdg-dir doom-dir)))
               (if
                   (file-equal-p dir doom-emacs-dir)
                   (progn
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                          (doom-print--class 'path dir))))
                     (progn
                       (let
                           ((doom-print-level
                             (or nil doom-print-level))
                            (doom-print-indent
                             (+
                              (if t
                                  (or nil doom-print-indent-increment)
                                0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'p "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")))))))
               (if
                   (and
                    (not
                     (file-equal-p xdg-dir doom-dir))
                    (file-directory-p xdg-dir)
                    (file-directory-p doom-dir))
                   (progn
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Detected two private configs, in %s and %s")
                       (abbreviate-file-name xdg-dir)
                       doom-dir))
                     (progn
                       (let
                           ((doom-print-level
                             (or nil doom-print-level))
                            (doom-print-indent
                             (+
                              (if t
                                  (or nil doom-print-indent-increment)
                                0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'p "The second directory will be ignored, as it has lower precedence."))))))))))
         (doom-print
          (doom-print--format
           (doom-print--class 'start "Checking for common environmental issues...")))
         (if
             (string-match-p "/fish$" shell-file-name)
             (progn
               (doom-print
                (doom-print--format
                 (doom-print--class 'warn "Detected Fish as your $SHELL")))
               (progn
                 (let
                     ((doom-print-level
                       (or nil doom-print-level))
                      (doom-print-indent
                       (+
                        (if t
                            (or nil doom-print-indent-increment)
                          0)
                        doom-print-indent)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'p "Fish (and possibly other non-POSIX shells) is known to inject garbage " "output into some of the child processes that Emacs spawns. Many Emacs " "packages/utilities will choke on this output, causing unpredictable issues. " "To get around this, either:\n\n" "  - Add the following to $DOOMDIR/config.el:\n\n" "    (setq shell-file-name (executable-find \"bash\"))\n\n" "  - Or change your default shell to a POSIX shell (like bash or zsh) " "    and explicitly configure your terminal apps to use the shell you " "    want.\n\n" "If you opt for option 1 and use one of Emacs' terminal emulators, you " "will also need to configure them to use Fish, e.g.\n\n" "  (setq-default vterm-shell (executable-find \"fish\"))\n\n" "  (setq-default explicit-shell-file-name (executable-find \"fish\"))\n")))))))
         (doom-print
          (doom-print--format
           (doom-print--class 'start "Checking for stale elc files...")))
         (elc-check-dir doom-core-dir)
         (elc-check-dir doom-modules-dir)
         (elc-check-dir
          (doom-path doom-local-dir "straight" straight-build-dir))
         (doom-print
          (doom-print--format
           (doom-print--class 'start "Checking for problematic git global settings...")))
         (if
             (executable-find "git")
             (if
                 (= 0
                    (car
                     (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                 (progn
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))))
                     (setq doom-doctor--warnings
                           (cons
                            (doom-print--format
                             (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                            doom-doctor--warnings)))
                   (progn
                     (let
                         ((doom-print-level
                           (or nil doom-print-level))
                          (doom-print-indent
                           (+
                            (if t
                                (or nil doom-print-indent-increment)
                              0)
                            doom-print-indent)))
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'p "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")))))))
           (progn
             (if inhibit-message nil
               (doom-print
                (doom-print--format
                 (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))))
             (setq doom-doctor--errors
                   (cons
                    (doom-print--format
                     (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                    doom-doctor--errors))))
         (doom-print
          (doom-print--format
           (doom-print--class 'start "Checking Doom Emacs...")))
         (condition-case ex
             (progn
               (let
                   ((doom-print-level
                     (or nil doom-print-level))
                    (doom-print-indent
                     (+
                      (if t
                          (or nil doom-print-indent-increment)
                        0)
                      doom-print-indent)))
                 (require 'doom-start)
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'success "Initialized Doom Emacs %s")
                   doom-version))
                 (doom-print
                  (doom-print--format
                   (if
                       (hash-table-p doom-modules)
                       (doom-print--class 'success "Detected %d modules"
                                          (hash-table-count doom-modules))
                     (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?"))))
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'success "Detected %d packages")
                   (length doom-packages)))
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'start "Checking Doom core for irregularities...")))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (let
                         ((tail
                           (list "savehist" "projectile.cache")))
                       (while tail
                         (let
                             ((file
                               (car tail)))
                           (let*
                               ((size
                                 (and t
                                      (condition-case nil
                                          (progn
                                            (doom-file-size file doom-cache-dir))
                                        (error nil)))))
                             (if size
                                 (if
                                     (> size 1048576)
                                     (progn
                                       (progn
                                         (if inhibit-message nil
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                (/ size 1024 1024.0)))))
                                         (setq doom-doctor--warnings
                                               (cons
                                                (doom-print--format
                                                 (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                    (/ size 1024 1024.0)))
                                                doom-doctor--warnings)))
                                       (progn
                                         (let
                                             ((doom-print-level
                                               (or nil doom-print-level))
                                              (doom-print-indent
                                               (+
                                                (if t
                                                    (or nil doom-print-indent-increment)
                                                  0)
                                                doom-print-indent)))
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'p "Consider deleting it from your system (manually)")))))))
                               nil))
                           (setq tail
                                 (cdr tail)))))
                     (if
                         (condition-case nil
                             (progn
                               (executable-find doom-fd-executable))
                           (error nil))
                         nil
                       (progn
                         (if inhibit-message nil
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))))
                         (setq doom-doctor--warnings
                               (cons
                                (doom-print--format
                                 (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                doom-doctor--warnings))))
                     (require 'projectile)
                     (if
                         (projectile-project-root "~")
                         (progn
                           (progn
                             (if inhibit-message nil
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'warn "Your $HOME is recognized as a project root"))))
                             (setq doom-doctor--warnings
                                   (cons
                                    (doom-print--format
                                     (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                    doom-doctor--warnings)))
                           (progn
                             (let
                                 ((doom-print-level
                                   (or nil doom-print-level))
                                  (doom-print-indent
                                   (+
                                    (if t
                                        (or nil doom-print-indent-increment)
                                      0)
                                    doom-print-indent)))
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'p "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")))))))
                     (if
                         (and
                          (file-equal-p doom-user-dir "~/.config/doom")
                          (file-directory-p "~/.doom.d"))
                         (progn
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                             (doom-print--class 'path doom-user-dir)))
                           (progn
                             (let
                                 ((doom-print-level
                                   (or nil doom-print-level))
                                  (doom-print-indent
                                   (+
                                    (if t
                                        (or nil doom-print-indent-increment)
                                      0)
                                    doom-print-indent)))
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'p "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")))))))
                     (if
                         (not
                          (executable-find "fc-list"))
                         (progn
                           (if inhibit-message nil
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))))
                           (setq doom-doctor--warnings
                                 (cons
                                  (doom-print--format
                                   (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                  doom-doctor--warnings)))
                       (if
                           (and
                            (cond
                             ((eq system-type 'gnu/linux)
                              (let nil
                                (concat
                                 (or
                                  (getenv "XDG_DATA_HOME")
                                  "~/.local/share")
                                 "/fonts/")))
                             ((eq system-type 'darwin)
                              (let nil "~/Library/Fonts/")))
                            (require 'nerd-icons nil t))
                           (progn
                             (let
                                 ((temp-buffer
                                   (generate-new-buffer " *temp*" t)))
                               (save-current-buffer
                                 (set-buffer temp-buffer)
                                 (unwind-protect
                                     (progn
                                       (let
                                           ((errors 0))
                                         (let*
                                             ((output
                                               (doom-call-process "fc-list" "" "file"))
                                              (status
                                               (if output
                                                   (car-safe
                                                    (prog1 output
                                                      (setq output
                                                            (cdr output))))
                                                 (signal 'wrong-number-of-arguments
                                                         (list
                                                          '(status . output)
                                                          (length output))))))
                                           (if
                                               (not
                                                (= 0 status))
                                               (doom-print
                                                (doom-print--format
                                                 (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?")))
                                             (insert
                                              (cdr
                                               (doom-call-process "fc-list" "" "file")))
                                             (let
                                                 ((tail nerd-icons-font-names))
                                               (while tail
                                                 (let
                                                     ((font
                                                       (car tail)))
                                                   (if
                                                       (save-excursion
                                                         (re-search-backward font nil t))
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--style 'green "Found font %s" font)))
                                                     (doom-print
                                                      (doom-print--format
                                                       (doom-print--class 'warn "%S font is not installed on your system")
                                                       font))
                                                     (setq errors
                                                           (1+ errors)))
                                                   (setq tail
                                                         (cdr tail)))))
                                             (if
                                                 (> errors 0)
                                                 (progn
                                                   (progn
                                                     (let
                                                         ((doom-print-level
                                                           (or nil doom-print-level))
                                                          (doom-print-indent
                                                           (+
                                                            (if t
                                                                (or nil doom-print-indent-increment)
                                                              0)
                                                            doom-print-indent)))
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'p "Some needed fonts are not properly installed on your system. To download and " "install them, run `M-x nerd-icons-install-fonts' from within Doom Emacs. " "However, on Windows this command will only download them; the fonts must " "be installed manually afterwards.")))))))))))
                                   (and
                                    (buffer-name temp-buffer)
                                    (kill-buffer temp-buffer))))))))))
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'start "Checking for stale elc files in your DOOMDIR...")))
                 (if
                     (file-directory-p doom-user-dir)
                     (progn
                       (progn
                         (let
                             ((doom-print-level
                               (or nil doom-print-level))
                              (doom-print-indent
                               (+
                                (if t
                                    (or nil doom-print-indent-increment)
                                  0)
                                doom-print-indent)))
                           (elc-check-dir doom-user-dir)))))
                 (if doom-modules
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'start "Checking your enabled modules...")))
                       (advice-add #'require :around #'doom-shut-up-a)
                       (let
                           ((tail
                             (doom-module-list)))
                         (while tail
                           (let
                               ((x54
                                 (car tail)))
                             (progn
                               (ignore
                                (consp x54))
                               (let*
                                   ((x55
                                     (car-safe x54))
                                    (x56
                                     (cdr-safe x54)))
                                 (let
                                     ((group x55)
                                      (name x56))
                                   (let
                                       ((doom-context doom-context))
                                     (let
                                         ((tail
                                           (ensure-list 'doctor)))
                                       (while tail
                                         (let
                                             ((context
                                               (car tail)))
                                           (doom-context-push context)
                                           (setq tail
                                                 (cdr tail)))))
                                     (let
                                         (doom-local-errors doom-local-warnings)
                                       (let
                                           (doom-doctor--errors doom-doctor--warnings)
                                         (condition-case ex
                                             (let
                                                 ((doom-module-context
                                                   (doom-module-context
                                                    (cons group name))))
                                               (if
                                                   (and
                                                    (not doom-inhibit-log)
                                                    (or
                                                     (not noninteractive)
                                                     (<= 2 doom-log-level)))
                                                   (progn
                                                     (doom--log 2 ":context:module: =%s" doom-module-context)))
                                               (let
                                                   ((doctor-file
                                                     (doom-module-expand-path group name "doctor.el"))
                                                    (packages-file
                                                     (doom-module-expand-path group name doom-module-packages-file)))
                                                 (if packages-file
                                                     (progn
                                                       (let*
                                                           ((doom-output-indent 6)
                                                            (--cl-var--
                                                             (let
                                                                 ((doom-context doom-context))
                                                               (let
                                                                   ((tail
                                                                     (ensure-list 'packages)))
                                                                 (while tail
                                                                   (let
                                                                       ((context
                                                                         (car tail)))
                                                                     (doom-context-push context)
                                                                     (setq tail
                                                                           (cdr tail)))))
                                                               (let*
                                                                   (doom-packages doom-disabled-packages)
                                                                 (load packages-file 'noerror 'nomessage)
                                                                 (mapcar #'car doom-packages))))
                                                            (name nil))
                                                         (while
                                                             (consp --cl-var--)
                                                           (setq name
                                                                 (car --cl-var--))
                                                           (if
                                                               (or
                                                                (doom-package-get name :disable)
                                                                (eval
                                                                 (doom-package-get name :ignore))
                                                                (plist-member
                                                                 (doom-package-get name :recipe)
                                                                 :local-repo)
                                                                (locate-library
                                                                 (symbol-name name))
                                                                (doom-package-built-in-p name)
                                                                (doom-package-installed-p name))
                                                               (progn)
                                                             (doom-print
                                                              (doom-print--format
                                                               (doom-print--class 'error "Missing emacs package: %S")
                                                               name)))
                                                           (setq --cl-var--
                                                                 (cdr --cl-var--)))
                                                         nil)))
                                                 (if doctor-file
                                                     (progn
                                                       (let
                                                           ((inhibit-message t))
                                                         (load doctor-file 'noerror 'nomessage))))))
                                           ((debug file-missing)
                                            (progn
                                              (if inhibit-message nil
                                                (doom-print
                                                 (doom-print--format
                                                  (doom-print--class 'error "%s"
                                                                     (error-message-string ex)))))
                                              (setq doom-doctor--errors
                                                    (cons
                                                     (doom-print--format
                                                      (doom-print--class 'error "%s"
                                                                         (error-message-string ex)))
                                                     doom-doctor--errors))))
                                           ((debug error)
                                            (progn
                                              (if inhibit-message nil
                                                (doom-print
                                                 (doom-print--format
                                                  (doom-print--class 'error "Syntax error: %s" ex))))
                                              (setq doom-doctor--errors
                                                    (cons
                                                     (doom-print--format
                                                      (doom-print--class 'error "Syntax error: %s" ex))
                                                     doom-doctor--errors)))))
                                         (if
                                             (or doom-doctor--errors doom-doctor--warnings)
                                             (progn
                                               (progn
                                                 (let
                                                     ((doom-print-level
                                                       (or nil doom-print-level))
                                                      (doom-print-indent
                                                       (+
                                                        (if t
                                                            (or nil doom-print-indent-increment)
                                                          0)
                                                        doom-print-indent)))
                                                   (doom-print
                                                    (doom-print--format
                                                     (doom-print--class 'start
                                                                        (doom-print--style 'bold "%s %s"))
                                                     group name))
                                                   (doom-print
                                                    (doom-print--format "%s"
                                                                        (string-join
                                                                         (append doom-doctor--errors doom-doctor--warnings)
                                                                         "\n")))))
                                               (progn
                                                 (setq doom-local-errors doom-doctor--errors)
                                                 (setq doom-local-warnings doom-doctor--warnings)))))
                                       (setq doom-doctor--errors
                                             (append doom-doctor--errors doom-local-errors))
                                       (setq doom-doctor--warnings
                                             (append doom-doctor--warnings doom-local-warnings)))))))
                             (setq tail
                                   (cdr tail)))))))))
           ((debug error)
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                     (or
                                      (cdr-safe ex)
                                      (car ex))))))
              (setq doom-doctor--warnings
                    (cons
                     (doom-print--format
                      (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                         (or
                                          (cdr-safe ex)
                                          (car ex))))
                     doom-doctor--warnings)))
            (setq doom-modules nil)))
         (terpri)
         (let
             ((tail
               (list
                (list doom-doctor--warnings "warning" 'yellow)
                (list doom-doctor--errors "error" 'red))))
           (while tail
             (let
                 ((msg
                   (car tail)))
               (if
                   (car msg)
                   (progn
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'color
                                          (nth 2 msg)
                                          (if
                                              (cdr
                                               (car msg))
                                              "There are %d %ss!" "There is %d %s!")
                                          (length
                                           (car msg))
                                          (nth 1 msg))))))
               (setq tail
                     (cdr tail)))))
         (if
             (or doom-doctor--errors doom-doctor--warnings)
             nil
           (doom-print
            (doom-print--format
             (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))))
         (exit! :pager? "+G"))))
  nil)
 nil)

;;;; 34
((doom-cli-execute #s(doom-cli
                      ("doom" "doctor")
                      nil
                      (("SUMMARY" . "Diagnoses common issues on your system.")
                       ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
                      nil nil nil nil
                      (:benchmark nil :prefix
                                  (doom)
                                  :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
                      (closure
                          (t)
                          (cli alist)
                        (let nil
                          (doom-print
                           (doom-print--format "The doctor will see you now...\n"))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'start "Checking your Emacs version...")))
                          (progn
                            (let
                                ((doom-print-level
                                  (or nil doom-print-level))
                                 (doom-print-indent
                                  (+
                                   (if t
                                       (or nil doom-print-indent-increment)
                                     0)
                                   doom-print-indent)))
                              (cond
                               ((or
                                 (> emacs-major-version 29)
                                 (string-match-p ".\\([56]0\\|9[0-9]\\)$" emacs-version))
                                (progn
                                  (if inhibit-message nil
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))))
                                  (setq doom-doctor--warnings
                                        (cons
                                         (doom-print--format
                                          (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))
                                         doom-doctor--warnings)))
                                (if
                                    (> emacs-major-version 29)
                                    (progn
                                      (let
                                          ((doom-print-level
                                            (or nil doom-print-level))
                                           (doom-print-indent
                                            (+
                                             (if t
                                                 (or nil doom-print-indent-increment)
                                               0)
                                             doom-print-indent)))
                                        (doom-print
                                         (doom-print--format
                                          (doom-print--class 'p "This is the bleeding edge of Emacs. As it is constantly changed, Doom will not " "(officially) support it. If you've found a stable commit, great! But be " "cautious about updating Emacs too eagerly!\n")))))
                                  (progn
                                    (let
                                        ((doom-print-level
                                          (or nil doom-print-level))
                                         (doom-print-indent
                                          (+
                                           (if t
                                               (or nil doom-print-indent-increment)
                                             0)
                                           doom-print-indent)))
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'p "A .50, .60, or .9X appended to the version string indicates that this is a version " "of Emacs in between stable releases. These are not well supported.\n"))))))
                                (progn
                                  (let
                                      ((doom-print-level
                                        (or nil doom-print-level))
                                       (doom-print-indent
                                        (+
                                         (if t
                                             (or nil doom-print-indent-increment)
                                           0)
                                         doom-print-indent)))
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'p "Because development builds are prone to random breakage, there will be a greater " "burden on you to investigate and deal with issues. Please make extra sure that " "your issue is reproducible in 29.1 before reporting them to Doom's issue tracker!\n" "\n" "If this doesn't phase you, read the \"Why does Doom not support Emacs HEAD\" QnA " "in Doom's FAQ. It offers some advice for debugging and surviving issues on the " "bleeding edge. Failing that, 29.1 is highly recommended and will always be " "Doom's best supported version of Emacs."))))))
                               ((= emacs-major-version 27)
                                (progn
                                  (if inhibit-message nil
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))))
                                  (setq doom-doctor--warnings
                                        (cons
                                         (doom-print--format
                                          (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))
                                         doom-doctor--warnings)))
                                (progn
                                  (let
                                      ((doom-print-level
                                        (or nil doom-print-level))
                                       (doom-print-indent
                                        (+
                                         (if t
                                             (or nil doom-print-indent-increment)
                                           0)
                                         doom-print-indent)))
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'p "Emacs 28.1 is better supported, faster, and more stable. Plus, Doom will drop " "27.x support sometime late-2023.")))))))))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'start "Checking for Doom's prerequisites...")))
                          (progn
                            (let
                                ((doom-print-level
                                  (or nil doom-print-level))
                                 (doom-print-indent
                                  (+
                                   (if t
                                       (or nil doom-print-indent-increment)
                                     0)
                                   doom-print-indent)))
                              (if
                                  (not
                                   (executable-find "git"))
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))))
                                    (setq doom-doctor--errors
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                                           doom-doctor--errors)))
                                (let
                                    ((saved-match-data
                                      (match-data)))
                                  (unwind-protect
                                      (progn
                                        (let*
                                            ((version
                                              (cdr
                                               (doom-call-process "git" "version")))
                                             (version
                                              (and
                                               (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                                               (match-string 1 version))))
                                          (if version
                                              (if
                                                  (version< version "2.23")
                                                  (progn
                                                    (progn
                                                      (if inhibit-message nil
                                                        (doom-print
                                                         (doom-print--format
                                                          (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))))
                                                      (setq doom-doctor--errors
                                                            (cons
                                                             (doom-print--format
                                                              (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                                             doom-doctor--errors)))))
                                            (progn
                                              (if inhibit-message nil
                                                (doom-print
                                                 (doom-print--format
                                                  (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))))
                                              (setq doom-doctor--warnings
                                                    (cons
                                                     (doom-print--format
                                                      (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                                     doom-doctor--warnings))))))
                                    (set-match-data saved-match-data t))))
                              (if
                                  (executable-find "rg")
                                  nil
                                (progn
                                  (if inhibit-message nil
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))))
                                  (setq doom-doctor--errors
                                        (cons
                                         (doom-print--format
                                          (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                                         doom-doctor--errors))))))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'start "Checking for Emacs config conflicts...")))
                          (progn
                            (let
                                ((doom-print-level
                                  (or nil doom-print-level))
                                 (doom-print-indent
                                  (+
                                   (if t
                                       (or nil doom-print-indent-increment)
                                     0)
                                   doom-print-indent)))
                              (if
                                  (or
                                   (file-equal-p doom-emacs-dir "~/.emacs.d")
                                   (file-equal-p doom-emacs-dir "~/.config/emacs"))
                                  nil
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'warn "Doom is installed in a non-standard location")))
                                (progn
                                  (let
                                      ((doom-print-level
                                        (or nil doom-print-level))
                                       (doom-print-indent
                                        (+
                                         (if t
                                             (or nil doom-print-indent-increment)
                                           0)
                                         doom-print-indent)))
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'p "The standard locations are ~/.config/emacs or ~/.emacs.d. Emacs will fail " "to load Doom if it is not explicitly told where to look for it. In Emacs 29+, " "this is possible with the --init-directory option:\n\n" "  $ emacs --init-directory '"
                                                         (abbreviate-file-name doom-emacs-dir)
                                                         "'\n\n" "However, Emacs 27-28 users have no choice but to move Doom to a standard " "location.\n\n" "Chemacs users may ignore this warning, however."))))))
                              (let
                                  (found?)
                                (let
                                    ((tail
                                      '("~/_emacs" "~/.emacs" "~/.emacs.el" "~/.emacs.d" "~/.config/emacs")))
                                  (while tail
                                    (let
                                        ((file
                                          (car tail)))
                                      (if
                                          (and
                                           (file-exists-p file)
                                           (not
                                            (file-equal-p file doom-emacs-dir)))
                                          (progn
                                            (setq found? t)
                                            (doom-print
                                             (doom-print--format
                                              (doom-print--class 'warn "Found another Emacs config: %s (%s)")
                                              file
                                              (if
                                                  (file-directory-p file)
                                                  "directory" "file")))))
                                      (setq tail
                                            (cdr tail)))))
                                (if found?
                                    (progn
                                      (progn
                                        (let
                                            ((doom-print-level
                                              (or nil doom-print-level))
                                             (doom-print-indent
                                              (+
                                               (if t
                                                   (or nil doom-print-indent-increment)
                                                 0)
                                               doom-print-indent)))
                                          (doom-print
                                           (doom-print--format
                                            (doom-print--class 'p "Having multiple Emacs configs may prevent Doom from loading properly. Emacs " "will load the first it finds and ignore the rest. If Doom isn't starting up " "correctly (e.g. you get a vanilla splash screen), make sure that only one of " "these exist.\n\n" "Chemacs users may ignore this warning."))))))))))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'start "Checking for missing Emacs features...")))
                          (progn
                            (let
                                ((doom-print-level
                                  (or nil doom-print-level))
                                 (doom-print-indent
                                  (+
                                   (if t
                                       (or nil doom-print-indent-increment)
                                     0)
                                   doom-print-indent)))
                              (if
                                  (functionp 'json-serialize)
                                  nil
                                (progn
                                  (if inhibit-message nil
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'warn "Emacs was not built with native JSON support"))))
                                  (setq doom-doctor--warnings
                                        (cons
                                         (doom-print--format
                                          (doom-print--class 'warn "Emacs was not built with native JSON support"))
                                         doom-doctor--warnings)))
                                (progn
                                  (let
                                      ((doom-print-level
                                        (or nil doom-print-level))
                                       (doom-print-indent
                                        (+
                                         (if t
                                             (or nil doom-print-indent-increment)
                                           0)
                                         doom-print-indent)))
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option."))))))
                              (if
                                  (featurep 'native-compile)
                                  nil
                                (progn
                                  (if inhibit-message nil
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'warn "Emacs was not built with native compilation support"))))
                                  (setq doom-doctor--warnings
                                        (cons
                                         (doom-print--format
                                          (doom-print--class 'warn "Emacs was not built with native compilation support"))
                                         doom-doctor--warnings)))
                                (progn
                                  (let
                                      ((doom-print-level
                                        (or nil doom-print-level))
                                       (doom-print-indent
                                        (+
                                         (if t
                                             (or nil doom-print-indent-increment)
                                           0)
                                         doom-print-indent)))
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option."))))))))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'start "Checking for private config conflicts...")))
                          (progn
                            (let
                                ((doom-print-level
                                  (or nil doom-print-level))
                                 (doom-print-indent
                                  (+
                                   (if t
                                       (or nil doom-print-indent-increment)
                                     0)
                                   doom-print-indent)))
                              (let*
                                  ((xdg-dir
                                    (concat
                                     (or
                                      (getenv "XDG_CONFIG_HOME")
                                      "~/.config")
                                     "/doom/"))
                                   (doom-dir
                                    (or
                                     (getenv "DOOMDIR")
                                     "~/.doom.d/"))
                                   (dir
                                    (if
                                        (file-directory-p xdg-dir)
                                        xdg-dir doom-dir)))
                                (if
                                    (file-equal-p dir doom-emacs-dir)
                                    (progn
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                                           (doom-print--class 'path dir))))
                                      (progn
                                        (let
                                            ((doom-print-level
                                              (or nil doom-print-level))
                                             (doom-print-indent
                                              (+
                                               (if t
                                                   (or nil doom-print-indent-increment)
                                                 0)
                                               doom-print-indent)))
                                          (doom-print
                                           (doom-print--format
                                            (doom-print--class 'p "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")))))))
                                (if
                                    (and
                                     (not
                                      (file-equal-p xdg-dir doom-dir))
                                     (file-directory-p xdg-dir)
                                     (file-directory-p doom-dir))
                                    (progn
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'warn "Detected two private configs, in %s and %s")
                                        (abbreviate-file-name xdg-dir)
                                        doom-dir))
                                      (progn
                                        (let
                                            ((doom-print-level
                                              (or nil doom-print-level))
                                             (doom-print-indent
                                              (+
                                               (if t
                                                   (or nil doom-print-indent-increment)
                                                 0)
                                               doom-print-indent)))
                                          (doom-print
                                           (doom-print--format
                                            (doom-print--class 'p "The second directory will be ignored, as it has lower precedence."))))))))))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'start "Checking for common environmental issues...")))
                          (if
                              (string-match-p "/fish$" shell-file-name)
                              (progn
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'warn "Detected Fish as your $SHELL")))
                                (progn
                                  (let
                                      ((doom-print-level
                                        (or nil doom-print-level))
                                       (doom-print-indent
                                        (+
                                         (if t
                                             (or nil doom-print-indent-increment)
                                           0)
                                         doom-print-indent)))
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'p "Fish (and possibly other non-POSIX shells) is known to inject garbage " "output into some of the child processes that Emacs spawns. Many Emacs " "packages/utilities will choke on this output, causing unpredictable issues. " "To get around this, either:\n\n" "  - Add the following to $DOOMDIR/config.el:\n\n" "    (setq shell-file-name (executable-find \"bash\"))\n\n" "  - Or change your default shell to a POSIX shell (like bash or zsh) " "    and explicitly configure your terminal apps to use the shell you " "    want.\n\n" "If you opt for option 1 and use one of Emacs' terminal emulators, you " "will also need to configure them to use Fish, e.g.\n\n" "  (setq-default vterm-shell (executable-find \"fish\"))\n\n" "  (setq-default explicit-shell-file-name (executable-find \"fish\"))\n")))))))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'start "Checking for stale elc files...")))
                          (elc-check-dir doom-core-dir)
                          (elc-check-dir doom-modules-dir)
                          (elc-check-dir
                           (doom-path doom-local-dir "straight" straight-build-dir))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'start "Checking for problematic git global settings...")))
                          (if
                              (executable-find "git")
                              (if
                                  (= 0
                                     (car
                                      (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                                  (progn
                                    (progn
                                      (if inhibit-message nil
                                        (doom-print
                                         (doom-print--format
                                          (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))))
                                      (setq doom-doctor--warnings
                                            (cons
                                             (doom-print--format
                                              (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                                             doom-doctor--warnings)))
                                    (progn
                                      (let
                                          ((doom-print-level
                                            (or nil doom-print-level))
                                           (doom-print-indent
                                            (+
                                             (if t
                                                 (or nil doom-print-indent-increment)
                                               0)
                                             doom-print-indent)))
                                        (doom-print
                                         (doom-print--format
                                          (doom-print--class 'p "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")))))))
                            (progn
                              (if inhibit-message nil
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))))
                              (setq doom-doctor--errors
                                    (cons
                                     (doom-print--format
                                      (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                                     doom-doctor--errors))))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'start "Checking Doom Emacs...")))
                          (condition-case ex
                              (progn
                                (let
                                    ((doom-print-level
                                      (or nil doom-print-level))
                                     (doom-print-indent
                                      (+
                                       (if t
                                           (or nil doom-print-indent-increment)
                                         0)
                                       doom-print-indent)))
                                  (require 'doom-start)
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'success "Initialized Doom Emacs %s")
                                    doom-version))
                                  (doom-print
                                   (doom-print--format
                                    (if
                                        (hash-table-p doom-modules)
                                        (doom-print--class 'success "Detected %d modules"
                                                           (hash-table-count doom-modules))
                                      (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?"))))
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'success "Detected %d packages")
                                    (length doom-packages)))
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'start "Checking Doom core for irregularities...")))
                                  (progn
                                    (let
                                        ((doom-print-level
                                          (or nil doom-print-level))
                                         (doom-print-indent
                                          (+
                                           (if t
                                               (or nil doom-print-indent-increment)
                                             0)
                                           doom-print-indent)))
                                      (let
                                          ((tail
                                            (list "savehist" "projectile.cache")))
                                        (while tail
                                          (let
                                              ((file
                                                (car tail)))
                                            (let*
                                                ((size
                                                  (and t
                                                       (condition-case nil
                                                           (progn
                                                             (doom-file-size file doom-cache-dir))
                                                         (error nil)))))
                                              (if size
                                                  (if
                                                      (> size 1048576)
                                                      (progn
                                                        (progn
                                                          (if inhibit-message nil
                                                            (doom-print
                                                             (doom-print--format
                                                              (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                                 (/ size 1024 1024.0)))))
                                                          (setq doom-doctor--warnings
                                                                (cons
                                                                 (doom-print--format
                                                                  (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                                     (/ size 1024 1024.0)))
                                                                 doom-doctor--warnings)))
                                                        (progn
                                                          (let
                                                              ((doom-print-level
                                                                (or nil doom-print-level))
                                                               (doom-print-indent
                                                                (+
                                                                 (if t
                                                                     (or nil doom-print-indent-increment)
                                                                   0)
                                                                 doom-print-indent)))
                                                            (doom-print
                                                             (doom-print--format
                                                              (doom-print--class 'p "Consider deleting it from your system (manually)")))))))
                                                nil))
                                            (setq tail
                                                  (cdr tail)))))
                                      (if
                                          (condition-case nil
                                              (progn
                                                (executable-find doom-fd-executable))
                                            (error nil))
                                          nil
                                        (progn
                                          (if inhibit-message nil
                                            (doom-print
                                             (doom-print--format
                                              (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))))
                                          (setq doom-doctor--warnings
                                                (cons
                                                 (doom-print--format
                                                  (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                                 doom-doctor--warnings))))
                                      (require 'projectile)
                                      (if
                                          (projectile-project-root "~")
                                          (progn
                                            (progn
                                              (if inhibit-message nil
                                                (doom-print
                                                 (doom-print--format
                                                  (doom-print--class 'warn "Your $HOME is recognized as a project root"))))
                                              (setq doom-doctor--warnings
                                                    (cons
                                                     (doom-print--format
                                                      (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                                     doom-doctor--warnings)))
                                            (progn
                                              (let
                                                  ((doom-print-level
                                                    (or nil doom-print-level))
                                                   (doom-print-indent
                                                    (+
                                                     (if t
                                                         (or nil doom-print-indent-increment)
                                                       0)
                                                     doom-print-indent)))
                                                (doom-print
                                                 (doom-print--format
                                                  (doom-print--class 'p "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")))))))
                                      (if
                                          (and
                                           (file-equal-p doom-user-dir "~/.config/doom")
                                           (file-directory-p "~/.doom.d"))
                                          (progn
                                            (doom-print
                                             (doom-print--format
                                              (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                                              (doom-print--class 'path doom-user-dir)))
                                            (progn
                                              (let
                                                  ((doom-print-level
                                                    (or nil doom-print-level))
                                                   (doom-print-indent
                                                    (+
                                                     (if t
                                                         (or nil doom-print-indent-increment)
                                                       0)
                                                     doom-print-indent)))
                                                (doom-print
                                                 (doom-print--format
                                                  (doom-print--class 'p "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")))))))
                                      (if
                                          (not
                                           (executable-find "fc-list"))
                                          (progn
                                            (if inhibit-message nil
                                              (doom-print
                                               (doom-print--format
                                                (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))))
                                            (setq doom-doctor--warnings
                                                  (cons
                                                   (doom-print--format
                                                    (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                                   doom-doctor--warnings)))
                                        (if
                                            (and
                                             (cond
                                              ((eq system-type 'gnu/linux)
                                               (let nil
                                                 (concat
                                                  (or
                                                   (getenv "XDG_DATA_HOME")
                                                   "~/.local/share")
                                                  "/fonts/")))
                                              ((eq system-type 'darwin)
                                               (let nil "~/Library/Fonts/")))
                                             (require 'nerd-icons nil t))
                                            (progn
                                              (let
                                                  ((temp-buffer
                                                    (generate-new-buffer " *temp*" t)))
                                                (save-current-buffer
                                                  (set-buffer temp-buffer)
                                                  (unwind-protect
                                                      (progn
                                                        (let
                                                            ((errors 0))
                                                          (let*
                                                              ((output
                                                                (doom-call-process "fc-list" "" "file"))
                                                               (status
                                                                (if output
                                                                    (car-safe
                                                                     (prog1 output
                                                                       (setq output
                                                                             (cdr output))))
                                                                  (signal 'wrong-number-of-arguments
                                                                          (list
                                                                           '(status . output)
                                                                           (length output))))))
                                                            (if
                                                                (not
                                                                 (= 0 status))
                                                                (doom-print
                                                                 (doom-print--format
                                                                  (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?")))
                                                              (insert
                                                               (cdr
                                                                (doom-call-process "fc-list" "" "file")))
                                                              (let
                                                                  ((tail nerd-icons-font-names))
                                                                (while tail
                                                                  (let
                                                                      ((font
                                                                        (car tail)))
                                                                    (if
                                                                        (save-excursion
                                                                          (re-search-backward font nil t))
                                                                        (doom-print
                                                                         (doom-print--format
                                                                          (doom-print--style 'green "Found font %s" font)))
                                                                      (doom-print
                                                                       (doom-print--format
                                                                        (doom-print--class 'warn "%S font is not installed on your system")
                                                                        font))
                                                                      (setq errors
                                                                            (1+ errors)))
                                                                    (setq tail
                                                                          (cdr tail)))))
                                                              (if
                                                                  (> errors 0)
                                                                  (progn
                                                                    (progn
                                                                      (let
                                                                          ((doom-print-level
                                                                            (or nil doom-print-level))
                                                                           (doom-print-indent
                                                                            (+
                                                                             (if t
                                                                                 (or nil doom-print-indent-increment)
                                                                               0)
                                                                             doom-print-indent)))
                                                                        (doom-print
                                                                         (doom-print--format
                                                                          (doom-print--class 'p "Some needed fonts are not properly installed on your system. To download and " "install them, run `M-x nerd-icons-install-fonts' from within Doom Emacs. " "However, on Windows this command will only download them; the fonts must " "be installed manually afterwards.")))))))))))
                                                    (and
                                                     (buffer-name temp-buffer)
                                                     (kill-buffer temp-buffer))))))))))
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'start "Checking for stale elc files in your DOOMDIR...")))
                                  (if
                                      (file-directory-p doom-user-dir)
                                      (progn
                                        (progn
                                          (let
                                              ((doom-print-level
                                                (or nil doom-print-level))
                                               (doom-print-indent
                                                (+
                                                 (if t
                                                     (or nil doom-print-indent-increment)
                                                   0)
                                                 doom-print-indent)))
                                            (elc-check-dir doom-user-dir)))))
                                  (if doom-modules
                                      (progn
                                        (doom-print
                                         (doom-print--format
                                          (doom-print--class 'start "Checking your enabled modules...")))
                                        (advice-add #'require :around #'doom-shut-up-a)
                                        (let
                                            ((tail
                                              (doom-module-list)))
                                          (while tail
                                            (let
                                                ((x54
                                                  (car tail)))
                                              (progn
                                                (ignore
                                                 (consp x54))
                                                (let*
                                                    ((x55
                                                      (car-safe x54))
                                                     (x56
                                                      (cdr-safe x54)))
                                                  (let
                                                      ((group x55)
                                                       (name x56))
                                                    (let
                                                        ((doom-context doom-context))
                                                      (let
                                                          ((tail
                                                            (ensure-list 'doctor)))
                                                        (while tail
                                                          (let
                                                              ((context
                                                                (car tail)))
                                                            (doom-context-push context)
                                                            (setq tail
                                                                  (cdr tail)))))
                                                      (let
                                                          (doom-local-errors doom-local-warnings)
                                                        (let
                                                            (doom-doctor--errors doom-doctor--warnings)
                                                          (condition-case ex
                                                              (let
                                                                  ((doom-module-context
                                                                    (doom-module-context
                                                                     (cons group name))))
                                                                (if
                                                                    (and
                                                                     (not doom-inhibit-log)
                                                                     (or
                                                                      (not noninteractive)
                                                                      (<= 2 doom-log-level)))
                                                                    (progn
                                                                      (doom--log 2 ":context:module: =%s" doom-module-context)))
                                                                (let
                                                                    ((doctor-file
                                                                      (doom-module-expand-path group name "doctor.el"))
                                                                     (packages-file
                                                                      (doom-module-expand-path group name doom-module-packages-file)))
                                                                  (if packages-file
                                                                      (progn
                                                                        (let*
                                                                            ((doom-output-indent 6)
                                                                             (--cl-var--
                                                                              (let
                                                                                  ((doom-context doom-context))
                                                                                (let
                                                                                    ((tail
                                                                                      (ensure-list 'packages)))
                                                                                  (while tail
                                                                                    (let
                                                                                        ((context
                                                                                          (car tail)))
                                                                                      (doom-context-push context)
                                                                                      (setq tail
                                                                                            (cdr tail)))))
                                                                                (let*
                                                                                    (doom-packages doom-disabled-packages)
                                                                                  (load packages-file 'noerror 'nomessage)
                                                                                  (mapcar #'car doom-packages))))
                                                                             (name nil))
                                                                          (while
                                                                              (consp --cl-var--)
                                                                            (setq name
                                                                                  (car --cl-var--))
                                                                            (if
                                                                                (or
                                                                                 (doom-package-get name :disable)
                                                                                 (eval
                                                                                  (doom-package-get name :ignore))
                                                                                 (plist-member
                                                                                  (doom-package-get name :recipe)
                                                                                  :local-repo)
                                                                                 (locate-library
                                                                                  (symbol-name name))
                                                                                 (doom-package-built-in-p name)
                                                                                 (doom-package-installed-p name))
                                                                                (progn)
                                                                              (doom-print
                                                                               (doom-print--format
                                                                                (doom-print--class 'error "Missing emacs package: %S")
                                                                                name)))
                                                                            (setq --cl-var--
                                                                                  (cdr --cl-var--)))
                                                                          nil)))
                                                                  (if doctor-file
                                                                      (progn
                                                                        (let
                                                                            ((inhibit-message t))
                                                                          (load doctor-file 'noerror 'nomessage))))))
                                                            ((debug file-missing)
                                                             (progn
                                                               (if inhibit-message nil
                                                                 (doom-print
                                                                  (doom-print--format
                                                                   (doom-print--class 'error "%s"
                                                                                      (error-message-string ex)))))
                                                               (setq doom-doctor--errors
                                                                     (cons
                                                                      (doom-print--format
                                                                       (doom-print--class 'error "%s"
                                                                                          (error-message-string ex)))
                                                                      doom-doctor--errors))))
                                                            ((debug error)
                                                             (progn
                                                               (if inhibit-message nil
                                                                 (doom-print
                                                                  (doom-print--format
                                                                   (doom-print--class 'error "Syntax error: %s" ex))))
                                                               (setq doom-doctor--errors
                                                                     (cons
                                                                      (doom-print--format
                                                                       (doom-print--class 'error "Syntax error: %s" ex))
                                                                      doom-doctor--errors)))))
                                                          (if
                                                              (or doom-doctor--errors doom-doctor--warnings)
                                                              (progn
                                                                (progn
                                                                  (let
                                                                      ((doom-print-level
                                                                        (or nil doom-print-level))
                                                                       (doom-print-indent
                                                                        (+
                                                                         (if t
                                                                             (or nil doom-print-indent-increment)
                                                                           0)
                                                                         doom-print-indent)))
                                                                    (doom-print
                                                                     (doom-print--format
                                                                      (doom-print--class 'start
                                                                                         (doom-print--style 'bold "%s %s"))
                                                                      group name))
                                                                    (doom-print
                                                                     (doom-print--format "%s"
                                                                                         (string-join
                                                                                          (append doom-doctor--errors doom-doctor--warnings)
                                                                                          "\n")))))
                                                                (progn
                                                                  (setq doom-local-errors doom-doctor--errors)
                                                                  (setq doom-local-warnings doom-doctor--warnings)))))
                                                        (setq doom-doctor--errors
                                                              (append doom-doctor--errors doom-local-errors))
                                                        (setq doom-doctor--warnings
                                                              (append doom-doctor--warnings doom-local-warnings)))))))
                                              (setq tail
                                                    (cdr tail)))))))))
                            ((debug error)
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                                      (or
                                                       (cdr-safe ex)
                                                       (car ex))))))
                               (setq doom-doctor--warnings
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                                          (or
                                                           (cdr-safe ex)
                                                           (car ex))))
                                      doom-doctor--warnings)))
                             (setq doom-modules nil)))
                          (terpri)
                          (let
                              ((tail
                                (list
                                 (list doom-doctor--warnings "warning" 'yellow)
                                 (list doom-doctor--errors "error" 'red))))
                            (while tail
                              (let
                                  ((msg
                                    (car tail)))
                                (if
                                    (car msg)
                                    (progn
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'color
                                                           (nth 2 msg)
                                                           (if
                                                               (cdr
                                                                (car msg))
                                                               "There are %d %ss!" "There is %d %s!")
                                                           (length
                                                            (car msg))
                                                           (nth 1 msg))))))
                                (setq tail
                                      (cdr tail)))))
                          (if
                              (or doom-doctor--errors doom-doctor--warnings)
                              nil
                            (doom-print
                             (doom-print--format
                              (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))))
                          (exit! :pager? "+G"))))
                   nil)
 ((cli . #s(doom-cli
            ("doom" "doctor")
            nil
            (("SUMMARY" . "Diagnoses common issues on your system.")
             ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
            nil nil nil nil
            (:benchmark nil :prefix
                        (doom)
                        :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
            (closure
                (t)
                (cli alist)
              (let nil
                (doom-print
                 (doom-print--format "The doctor will see you now...\n"))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking your Emacs version...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (cond
                     ((or
                       (> emacs-major-version 29)
                       (string-match-p ".\\([56]0\\|9[0-9]\\)$" emacs-version))
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))
                               doom-doctor--warnings)))
                      (if
                          (> emacs-major-version 29)
                          (progn
                            (let
                                ((doom-print-level
                                  (or nil doom-print-level))
                                 (doom-print-indent
                                  (+
                                   (if t
                                       (or nil doom-print-indent-increment)
                                     0)
                                   doom-print-indent)))
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'p "This is the bleeding edge of Emacs. As it is constantly changed, Doom will not " "(officially) support it. If you've found a stable commit, great! But be " "cautious about updating Emacs too eagerly!\n")))))
                        (progn
                          (let
                              ((doom-print-level
                                (or nil doom-print-level))
                               (doom-print-indent
                                (+
                                 (if t
                                     (or nil doom-print-indent-increment)
                                   0)
                                 doom-print-indent)))
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'p "A .50, .60, or .9X appended to the version string indicates that this is a version " "of Emacs in between stable releases. These are not well supported.\n"))))))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Because development builds are prone to random breakage, there will be a greater " "burden on you to investigate and deal with issues. Please make extra sure that " "your issue is reproducible in 29.1 before reporting them to Doom's issue tracker!\n" "\n" "If this doesn't phase you, read the \"Why does Doom not support Emacs HEAD\" QnA " "in Doom's FAQ. It offers some advice for debugging and surviving issues on the " "bleeding edge. Failing that, 29.1 is highly recommended and will always be " "Doom's best supported version of Emacs."))))))
                     ((= emacs-major-version 27)
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))
                               doom-doctor--warnings)))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Emacs 28.1 is better supported, faster, and more stable. Plus, Doom will drop " "27.x support sometime late-2023.")))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for Doom's prerequisites...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (if
                        (not
                         (executable-find "git"))
                        (progn
                          (if inhibit-message nil
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))))
                          (setq doom-doctor--errors
                                (cons
                                 (doom-print--format
                                  (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                                 doom-doctor--errors)))
                      (let
                          ((saved-match-data
                            (match-data)))
                        (unwind-protect
                            (progn
                              (let*
                                  ((version
                                    (cdr
                                     (doom-call-process "git" "version")))
                                   (version
                                    (and
                                     (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                                     (match-string 1 version))))
                                (if version
                                    (if
                                        (version< version "2.23")
                                        (progn
                                          (progn
                                            (if inhibit-message nil
                                              (doom-print
                                               (doom-print--format
                                                (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))))
                                            (setq doom-doctor--errors
                                                  (cons
                                                   (doom-print--format
                                                    (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                                   doom-doctor--errors)))))
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))))
                                    (setq doom-doctor--warnings
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                           doom-doctor--warnings))))))
                          (set-match-data saved-match-data t))))
                    (if
                        (executable-find "rg")
                        nil
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))))
                        (setq doom-doctor--errors
                              (cons
                               (doom-print--format
                                (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                               doom-doctor--errors))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for Emacs config conflicts...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (if
                        (or
                         (file-equal-p doom-emacs-dir "~/.emacs.d")
                         (file-equal-p doom-emacs-dir "~/.config/emacs"))
                        nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Doom is installed in a non-standard location")))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "The standard locations are ~/.config/emacs or ~/.emacs.d. Emacs will fail " "to load Doom if it is not explicitly told where to look for it. In Emacs 29+, " "this is possible with the --init-directory option:\n\n" "  $ emacs --init-directory '"
                                               (abbreviate-file-name doom-emacs-dir)
                                               "'\n\n" "However, Emacs 27-28 users have no choice but to move Doom to a standard " "location.\n\n" "Chemacs users may ignore this warning, however."))))))
                    (let
                        (found?)
                      (let
                          ((tail
                            '("~/_emacs" "~/.emacs" "~/.emacs.el" "~/.emacs.d" "~/.config/emacs")))
                        (while tail
                          (let
                              ((file
                                (car tail)))
                            (if
                                (and
                                 (file-exists-p file)
                                 (not
                                  (file-equal-p file doom-emacs-dir)))
                                (progn
                                  (setq found? t)
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'warn "Found another Emacs config: %s (%s)")
                                    file
                                    (if
                                        (file-directory-p file)
                                        "directory" "file")))))
                            (setq tail
                                  (cdr tail)))))
                      (if found?
                          (progn
                            (progn
                              (let
                                  ((doom-print-level
                                    (or nil doom-print-level))
                                   (doom-print-indent
                                    (+
                                     (if t
                                         (or nil doom-print-indent-increment)
                                       0)
                                     doom-print-indent)))
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'p "Having multiple Emacs configs may prevent Doom from loading properly. Emacs " "will load the first it finds and ignore the rest. If Doom isn't starting up " "correctly (e.g. you get a vanilla splash screen), make sure that only one of " "these exist.\n\n" "Chemacs users may ignore this warning."))))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for missing Emacs features...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (if
                        (functionp 'json-serialize)
                        nil
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Emacs was not built with native JSON support"))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Emacs was not built with native JSON support"))
                               doom-doctor--warnings)))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option."))))))
                    (if
                        (featurep 'native-compile)
                        nil
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Emacs was not built with native compilation support"))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Emacs was not built with native compilation support"))
                               doom-doctor--warnings)))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option."))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for private config conflicts...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (let*
                        ((xdg-dir
                          (concat
                           (or
                            (getenv "XDG_CONFIG_HOME")
                            "~/.config")
                           "/doom/"))
                         (doom-dir
                          (or
                           (getenv "DOOMDIR")
                           "~/.doom.d/"))
                         (dir
                          (if
                              (file-directory-p xdg-dir)
                              xdg-dir doom-dir)))
                      (if
                          (file-equal-p dir doom-emacs-dir)
                          (progn
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                                 (doom-print--class 'path dir))))
                            (progn
                              (let
                                  ((doom-print-level
                                    (or nil doom-print-level))
                                   (doom-print-indent
                                    (+
                                     (if t
                                         (or nil doom-print-indent-increment)
                                       0)
                                     doom-print-indent)))
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'p "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")))))))
                      (if
                          (and
                           (not
                            (file-equal-p xdg-dir doom-dir))
                           (file-directory-p xdg-dir)
                           (file-directory-p doom-dir))
                          (progn
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'warn "Detected two private configs, in %s and %s")
                              (abbreviate-file-name xdg-dir)
                              doom-dir))
                            (progn
                              (let
                                  ((doom-print-level
                                    (or nil doom-print-level))
                                   (doom-print-indent
                                    (+
                                     (if t
                                         (or nil doom-print-indent-increment)
                                       0)
                                     doom-print-indent)))
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'p "The second directory will be ignored, as it has lower precedence."))))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for common environmental issues...")))
                (if
                    (string-match-p "/fish$" shell-file-name)
                    (progn
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Detected Fish as your $SHELL")))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Fish (and possibly other non-POSIX shells) is known to inject garbage " "output into some of the child processes that Emacs spawns. Many Emacs " "packages/utilities will choke on this output, causing unpredictable issues. " "To get around this, either:\n\n" "  - Add the following to $DOOMDIR/config.el:\n\n" "    (setq shell-file-name (executable-find \"bash\"))\n\n" "  - Or change your default shell to a POSIX shell (like bash or zsh) " "    and explicitly configure your terminal apps to use the shell you " "    want.\n\n" "If you opt for option 1 and use one of Emacs' terminal emulators, you " "will also need to configure them to use Fish, e.g.\n\n" "  (setq-default vterm-shell (executable-find \"fish\"))\n\n" "  (setq-default explicit-shell-file-name (executable-find \"fish\"))\n")))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for stale elc files...")))
                (elc-check-dir doom-core-dir)
                (elc-check-dir doom-modules-dir)
                (elc-check-dir
                 (doom-path doom-local-dir "straight" straight-build-dir))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for problematic git global settings...")))
                (if
                    (executable-find "git")
                    (if
                        (= 0
                           (car
                            (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                        (progn
                          (progn
                            (if inhibit-message nil
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))))
                            (setq doom-doctor--warnings
                                  (cons
                                   (doom-print--format
                                    (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                                   doom-doctor--warnings)))
                          (progn
                            (let
                                ((doom-print-level
                                  (or nil doom-print-level))
                                 (doom-print-indent
                                  (+
                                   (if t
                                       (or nil doom-print-indent-increment)
                                     0)
                                   doom-print-indent)))
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'p "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")))))))
                  (progn
                    (if inhibit-message nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))))
                    (setq doom-doctor--errors
                          (cons
                           (doom-print--format
                            (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                           doom-doctor--errors))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking Doom Emacs...")))
                (condition-case ex
                    (progn
                      (let
                          ((doom-print-level
                            (or nil doom-print-level))
                           (doom-print-indent
                            (+
                             (if t
                                 (or nil doom-print-indent-increment)
                               0)
                             doom-print-indent)))
                        (require 'doom-start)
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'success "Initialized Doom Emacs %s")
                          doom-version))
                        (doom-print
                         (doom-print--format
                          (if
                              (hash-table-p doom-modules)
                              (doom-print--class 'success "Detected %d modules"
                                                 (hash-table-count doom-modules))
                            (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?"))))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'success "Detected %d packages")
                          (length doom-packages)))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'start "Checking Doom core for irregularities...")))
                        (progn
                          (let
                              ((doom-print-level
                                (or nil doom-print-level))
                               (doom-print-indent
                                (+
                                 (if t
                                     (or nil doom-print-indent-increment)
                                   0)
                                 doom-print-indent)))
                            (let
                                ((tail
                                  (list "savehist" "projectile.cache")))
                              (while tail
                                (let
                                    ((file
                                      (car tail)))
                                  (let*
                                      ((size
                                        (and t
                                             (condition-case nil
                                                 (progn
                                                   (doom-file-size file doom-cache-dir))
                                               (error nil)))))
                                    (if size
                                        (if
                                            (> size 1048576)
                                            (progn
                                              (progn
                                                (if inhibit-message nil
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                       (/ size 1024 1024.0)))))
                                                (setq doom-doctor--warnings
                                                      (cons
                                                       (doom-print--format
                                                        (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                           (/ size 1024 1024.0)))
                                                       doom-doctor--warnings)))
                                              (progn
                                                (let
                                                    ((doom-print-level
                                                      (or nil doom-print-level))
                                                     (doom-print-indent
                                                      (+
                                                       (if t
                                                           (or nil doom-print-indent-increment)
                                                         0)
                                                       doom-print-indent)))
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'p "Consider deleting it from your system (manually)")))))))
                                      nil))
                                  (setq tail
                                        (cdr tail)))))
                            (if
                                (condition-case nil
                                    (progn
                                      (executable-find doom-fd-executable))
                                  (error nil))
                                nil
                              (progn
                                (if inhibit-message nil
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))))
                                (setq doom-doctor--warnings
                                      (cons
                                       (doom-print--format
                                        (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                       doom-doctor--warnings))))
                            (require 'projectile)
                            (if
                                (projectile-project-root "~")
                                (progn
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'warn "Your $HOME is recognized as a project root"))))
                                    (setq doom-doctor--warnings
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                           doom-doctor--warnings)))
                                  (progn
                                    (let
                                        ((doom-print-level
                                          (or nil doom-print-level))
                                         (doom-print-indent
                                          (+
                                           (if t
                                               (or nil doom-print-indent-increment)
                                             0)
                                           doom-print-indent)))
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'p "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")))))))
                            (if
                                (and
                                 (file-equal-p doom-user-dir "~/.config/doom")
                                 (file-directory-p "~/.doom.d"))
                                (progn
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                                    (doom-print--class 'path doom-user-dir)))
                                  (progn
                                    (let
                                        ((doom-print-level
                                          (or nil doom-print-level))
                                         (doom-print-indent
                                          (+
                                           (if t
                                               (or nil doom-print-indent-increment)
                                             0)
                                           doom-print-indent)))
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'p "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")))))))
                            (if
                                (not
                                 (executable-find "fc-list"))
                                (progn
                                  (if inhibit-message nil
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))))
                                  (setq doom-doctor--warnings
                                        (cons
                                         (doom-print--format
                                          (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                         doom-doctor--warnings)))
                              (if
                                  (and
                                   (cond
                                    ((eq system-type 'gnu/linux)
                                     (let nil
                                       (concat
                                        (or
                                         (getenv "XDG_DATA_HOME")
                                         "~/.local/share")
                                        "/fonts/")))
                                    ((eq system-type 'darwin)
                                     (let nil "~/Library/Fonts/")))
                                   (require 'nerd-icons nil t))
                                  (progn
                                    (let
                                        ((temp-buffer
                                          (generate-new-buffer " *temp*" t)))
                                      (save-current-buffer
                                        (set-buffer temp-buffer)
                                        (unwind-protect
                                            (progn
                                              (let
                                                  ((errors 0))
                                                (let*
                                                    ((output
                                                      (doom-call-process "fc-list" "" "file"))
                                                     (status
                                                      (if output
                                                          (car-safe
                                                           (prog1 output
                                                             (setq output
                                                                   (cdr output))))
                                                        (signal 'wrong-number-of-arguments
                                                                (list
                                                                 '(status . output)
                                                                 (length output))))))
                                                  (if
                                                      (not
                                                       (= 0 status))
                                                      (doom-print
                                                       (doom-print--format
                                                        (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?")))
                                                    (insert
                                                     (cdr
                                                      (doom-call-process "fc-list" "" "file")))
                                                    (let
                                                        ((tail nerd-icons-font-names))
                                                      (while tail
                                                        (let
                                                            ((font
                                                              (car tail)))
                                                          (if
                                                              (save-excursion
                                                                (re-search-backward font nil t))
                                                              (doom-print
                                                               (doom-print--format
                                                                (doom-print--style 'green "Found font %s" font)))
                                                            (doom-print
                                                             (doom-print--format
                                                              (doom-print--class 'warn "%S font is not installed on your system")
                                                              font))
                                                            (setq errors
                                                                  (1+ errors)))
                                                          (setq tail
                                                                (cdr tail)))))
                                                    (if
                                                        (> errors 0)
                                                        (progn
                                                          (progn
                                                            (let
                                                                ((doom-print-level
                                                                  (or nil doom-print-level))
                                                                 (doom-print-indent
                                                                  (+
                                                                   (if t
                                                                       (or nil doom-print-indent-increment)
                                                                     0)
                                                                   doom-print-indent)))
                                                              (doom-print
                                                               (doom-print--format
                                                                (doom-print--class 'p "Some needed fonts are not properly installed on your system. To download and " "install them, run `M-x nerd-icons-install-fonts' from within Doom Emacs. " "However, on Windows this command will only download them; the fonts must " "be installed manually afterwards.")))))))))))
                                          (and
                                           (buffer-name temp-buffer)
                                           (kill-buffer temp-buffer))))))))))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'start "Checking for stale elc files in your DOOMDIR...")))
                        (if
                            (file-directory-p doom-user-dir)
                            (progn
                              (progn
                                (let
                                    ((doom-print-level
                                      (or nil doom-print-level))
                                     (doom-print-indent
                                      (+
                                       (if t
                                           (or nil doom-print-indent-increment)
                                         0)
                                       doom-print-indent)))
                                  (elc-check-dir doom-user-dir)))))
                        (if doom-modules
                            (progn
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'start "Checking your enabled modules...")))
                              (advice-add #'require :around #'doom-shut-up-a)
                              (let
                                  ((tail
                                    (doom-module-list)))
                                (while tail
                                  (let
                                      ((x54
                                        (car tail)))
                                    (progn
                                      (ignore
                                       (consp x54))
                                      (let*
                                          ((x55
                                            (car-safe x54))
                                           (x56
                                            (cdr-safe x54)))
                                        (let
                                            ((group x55)
                                             (name x56))
                                          (let
                                              ((doom-context doom-context))
                                            (let
                                                ((tail
                                                  (ensure-list 'doctor)))
                                              (while tail
                                                (let
                                                    ((context
                                                      (car tail)))
                                                  (doom-context-push context)
                                                  (setq tail
                                                        (cdr tail)))))
                                            (let
                                                (doom-local-errors doom-local-warnings)
                                              (let
                                                  (doom-doctor--errors doom-doctor--warnings)
                                                (condition-case ex
                                                    (let
                                                        ((doom-module-context
                                                          (doom-module-context
                                                           (cons group name))))
                                                      (if
                                                          (and
                                                           (not doom-inhibit-log)
                                                           (or
                                                            (not noninteractive)
                                                            (<= 2 doom-log-level)))
                                                          (progn
                                                            (doom--log 2 ":context:module: =%s" doom-module-context)))
                                                      (let
                                                          ((doctor-file
                                                            (doom-module-expand-path group name "doctor.el"))
                                                           (packages-file
                                                            (doom-module-expand-path group name doom-module-packages-file)))
                                                        (if packages-file
                                                            (progn
                                                              (let*
                                                                  ((doom-output-indent 6)
                                                                   (--cl-var--
                                                                    (let
                                                                        ((doom-context doom-context))
                                                                      (let
                                                                          ((tail
                                                                            (ensure-list 'packages)))
                                                                        (while tail
                                                                          (let
                                                                              ((context
                                                                                (car tail)))
                                                                            (doom-context-push context)
                                                                            (setq tail
                                                                                  (cdr tail)))))
                                                                      (let*
                                                                          (doom-packages doom-disabled-packages)
                                                                        (load packages-file 'noerror 'nomessage)
                                                                        (mapcar #'car doom-packages))))
                                                                   (name nil))
                                                                (while
                                                                    (consp --cl-var--)
                                                                  (setq name
                                                                        (car --cl-var--))
                                                                  (if
                                                                      (or
                                                                       (doom-package-get name :disable)
                                                                       (eval
                                                                        (doom-package-get name :ignore))
                                                                       (plist-member
                                                                        (doom-package-get name :recipe)
                                                                        :local-repo)
                                                                       (locate-library
                                                                        (symbol-name name))
                                                                       (doom-package-built-in-p name)
                                                                       (doom-package-installed-p name))
                                                                      (progn)
                                                                    (doom-print
                                                                     (doom-print--format
                                                                      (doom-print--class 'error "Missing emacs package: %S")
                                                                      name)))
                                                                  (setq --cl-var--
                                                                        (cdr --cl-var--)))
                                                                nil)))
                                                        (if doctor-file
                                                            (progn
                                                              (let
                                                                  ((inhibit-message t))
                                                                (load doctor-file 'noerror 'nomessage))))))
                                                  ((debug file-missing)
                                                   (progn
                                                     (if inhibit-message nil
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'error "%s"
                                                                            (error-message-string ex)))))
                                                     (setq doom-doctor--errors
                                                           (cons
                                                            (doom-print--format
                                                             (doom-print--class 'error "%s"
                                                                                (error-message-string ex)))
                                                            doom-doctor--errors))))
                                                  ((debug error)
                                                   (progn
                                                     (if inhibit-message nil
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'error "Syntax error: %s" ex))))
                                                     (setq doom-doctor--errors
                                                           (cons
                                                            (doom-print--format
                                                             (doom-print--class 'error "Syntax error: %s" ex))
                                                            doom-doctor--errors)))))
                                                (if
                                                    (or doom-doctor--errors doom-doctor--warnings)
                                                    (progn
                                                      (progn
                                                        (let
                                                            ((doom-print-level
                                                              (or nil doom-print-level))
                                                             (doom-print-indent
                                                              (+
                                                               (if t
                                                                   (or nil doom-print-indent-increment)
                                                                 0)
                                                               doom-print-indent)))
                                                          (doom-print
                                                           (doom-print--format
                                                            (doom-print--class 'start
                                                                               (doom-print--style 'bold "%s %s"))
                                                            group name))
                                                          (doom-print
                                                           (doom-print--format "%s"
                                                                               (string-join
                                                                                (append doom-doctor--errors doom-doctor--warnings)
                                                                                "\n")))))
                                                      (progn
                                                        (setq doom-local-errors doom-doctor--errors)
                                                        (setq doom-local-warnings doom-doctor--warnings)))))
                                              (setq doom-doctor--errors
                                                    (append doom-doctor--errors doom-local-errors))
                                              (setq doom-doctor--warnings
                                                    (append doom-doctor--warnings doom-local-warnings)))))))
                                    (setq tail
                                          (cdr tail)))))))))
                  ((debug error)
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                            (or
                                             (cdr-safe ex)
                                             (car ex))))))
                     (setq doom-doctor--warnings
                           (cons
                            (doom-print--format
                             (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                                (or
                                                 (cdr-safe ex)
                                                 (car ex))))
                            doom-doctor--warnings)))
                   (setq doom-modules nil)))
                (terpri)
                (let
                    ((tail
                      (list
                       (list doom-doctor--warnings "warning" 'yellow)
                       (list doom-doctor--errors "error" 'red))))
                  (while tail
                    (let
                        ((msg
                          (car tail)))
                      (if
                          (car msg)
                          (progn
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'color
                                                 (nth 2 msg)
                                                 (if
                                                     (cdr
                                                      (car msg))
                                                     "There are %d %ss!" "There is %d %s!")
                                                 (length
                                                  (car msg))
                                                 (nth 1 msg))))))
                      (setq tail
                            (cdr tail)))))
                (if
                    (or doom-doctor--errors doom-doctor--warnings)
                    nil
                  (doom-print
                   (doom-print--format
                    (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))))
                (exit! :pager? "+G")))))
  (bindings)))

;;;; 35
((let
     ((cli x16)
      (bindings x17))
   (doom-cli-execute cli bindings))
 ((context . #s(doom-cli-context
                (26384 50378 735038 513000)
                65238 0
                (88 . 27)
                nil nil "doom" nil nil
                ("doom" "doctor")
                nil
                ("doctor")
                (("--eval")
                 ("-E")
                 ("--strict-load")
                 ("--load")
                 ("-L")
                 ("--color")
                 ("--benchmark")
                 ("--profile")
                 ("--pager")
                 ("--emacsdir")
                 ("--doomdir")
                 ("--verbose")
                 ("-v")
                 ("--debug")
                 ("-D")
                 ("--force")
                 ("-!"))
                ((t)
                 (("doom" "doctor"))
                 (("doom")
                  "doctor"))
                #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (command "doom" "doctor")
  (cli . #s(doom-cli
            ("doom" "doctor")
            nil
            (("SUMMARY" . "Diagnoses common issues on your system.")
             ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
            nil nil nil nil
            (:benchmark nil :prefix
                        (doom)
                        :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
            (closure
                (t)
                (cli alist)
              (let nil
                (doom-print
                 (doom-print--format "The doctor will see you now...\n"))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking your Emacs version...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (cond
                     ((or
                       (> emacs-major-version 29)
                       (string-match-p ".\\([56]0\\|9[0-9]\\)$" emacs-version))
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))
                               doom-doctor--warnings)))
                      (if
                          (> emacs-major-version 29)
                          (progn
                            (let
                                ((doom-print-level
                                  (or nil doom-print-level))
                                 (doom-print-indent
                                  (+
                                   (if t
                                       (or nil doom-print-indent-increment)
                                     0)
                                   doom-print-indent)))
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'p "This is the bleeding edge of Emacs. As it is constantly changed, Doom will not " "(officially) support it. If you've found a stable commit, great! But be " "cautious about updating Emacs too eagerly!\n")))))
                        (progn
                          (let
                              ((doom-print-level
                                (or nil doom-print-level))
                               (doom-print-indent
                                (+
                                 (if t
                                     (or nil doom-print-indent-increment)
                                   0)
                                 doom-print-indent)))
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'p "A .50, .60, or .9X appended to the version string indicates that this is a version " "of Emacs in between stable releases. These are not well supported.\n"))))))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Because development builds are prone to random breakage, there will be a greater " "burden on you to investigate and deal with issues. Please make extra sure that " "your issue is reproducible in 29.1 before reporting them to Doom's issue tracker!\n" "\n" "If this doesn't phase you, read the \"Why does Doom not support Emacs HEAD\" QnA " "in Doom's FAQ. It offers some advice for debugging and surviving issues on the " "bleeding edge. Failing that, 29.1 is highly recommended and will always be " "Doom's best supported version of Emacs."))))))
                     ((= emacs-major-version 27)
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))
                               doom-doctor--warnings)))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Emacs 28.1 is better supported, faster, and more stable. Plus, Doom will drop " "27.x support sometime late-2023.")))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for Doom's prerequisites...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (if
                        (not
                         (executable-find "git"))
                        (progn
                          (if inhibit-message nil
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))))
                          (setq doom-doctor--errors
                                (cons
                                 (doom-print--format
                                  (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                                 doom-doctor--errors)))
                      (let
                          ((saved-match-data
                            (match-data)))
                        (unwind-protect
                            (progn
                              (let*
                                  ((version
                                    (cdr
                                     (doom-call-process "git" "version")))
                                   (version
                                    (and
                                     (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                                     (match-string 1 version))))
                                (if version
                                    (if
                                        (version< version "2.23")
                                        (progn
                                          (progn
                                            (if inhibit-message nil
                                              (doom-print
                                               (doom-print--format
                                                (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))))
                                            (setq doom-doctor--errors
                                                  (cons
                                                   (doom-print--format
                                                    (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                                   doom-doctor--errors)))))
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))))
                                    (setq doom-doctor--warnings
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                           doom-doctor--warnings))))))
                          (set-match-data saved-match-data t))))
                    (if
                        (executable-find "rg")
                        nil
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))))
                        (setq doom-doctor--errors
                              (cons
                               (doom-print--format
                                (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                               doom-doctor--errors))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for Emacs config conflicts...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (if
                        (or
                         (file-equal-p doom-emacs-dir "~/.emacs.d")
                         (file-equal-p doom-emacs-dir "~/.config/emacs"))
                        nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Doom is installed in a non-standard location")))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "The standard locations are ~/.config/emacs or ~/.emacs.d. Emacs will fail " "to load Doom if it is not explicitly told where to look for it. In Emacs 29+, " "this is possible with the --init-directory option:\n\n" "  $ emacs --init-directory '"
                                               (abbreviate-file-name doom-emacs-dir)
                                               "'\n\n" "However, Emacs 27-28 users have no choice but to move Doom to a standard " "location.\n\n" "Chemacs users may ignore this warning, however."))))))
                    (let
                        (found?)
                      (let
                          ((tail
                            '("~/_emacs" "~/.emacs" "~/.emacs.el" "~/.emacs.d" "~/.config/emacs")))
                        (while tail
                          (let
                              ((file
                                (car tail)))
                            (if
                                (and
                                 (file-exists-p file)
                                 (not
                                  (file-equal-p file doom-emacs-dir)))
                                (progn
                                  (setq found? t)
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'warn "Found another Emacs config: %s (%s)")
                                    file
                                    (if
                                        (file-directory-p file)
                                        "directory" "file")))))
                            (setq tail
                                  (cdr tail)))))
                      (if found?
                          (progn
                            (progn
                              (let
                                  ((doom-print-level
                                    (or nil doom-print-level))
                                   (doom-print-indent
                                    (+
                                     (if t
                                         (or nil doom-print-indent-increment)
                                       0)
                                     doom-print-indent)))
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'p "Having multiple Emacs configs may prevent Doom from loading properly. Emacs " "will load the first it finds and ignore the rest. If Doom isn't starting up " "correctly (e.g. you get a vanilla splash screen), make sure that only one of " "these exist.\n\n" "Chemacs users may ignore this warning."))))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for missing Emacs features...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (if
                        (functionp 'json-serialize)
                        nil
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Emacs was not built with native JSON support"))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Emacs was not built with native JSON support"))
                               doom-doctor--warnings)))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option."))))))
                    (if
                        (featurep 'native-compile)
                        nil
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Emacs was not built with native compilation support"))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Emacs was not built with native compilation support"))
                               doom-doctor--warnings)))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option."))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for private config conflicts...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (let*
                        ((xdg-dir
                          (concat
                           (or
                            (getenv "XDG_CONFIG_HOME")
                            "~/.config")
                           "/doom/"))
                         (doom-dir
                          (or
                           (getenv "DOOMDIR")
                           "~/.doom.d/"))
                         (dir
                          (if
                              (file-directory-p xdg-dir)
                              xdg-dir doom-dir)))
                      (if
                          (file-equal-p dir doom-emacs-dir)
                          (progn
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                                 (doom-print--class 'path dir))))
                            (progn
                              (let
                                  ((doom-print-level
                                    (or nil doom-print-level))
                                   (doom-print-indent
                                    (+
                                     (if t
                                         (or nil doom-print-indent-increment)
                                       0)
                                     doom-print-indent)))
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'p "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")))))))
                      (if
                          (and
                           (not
                            (file-equal-p xdg-dir doom-dir))
                           (file-directory-p xdg-dir)
                           (file-directory-p doom-dir))
                          (progn
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'warn "Detected two private configs, in %s and %s")
                              (abbreviate-file-name xdg-dir)
                              doom-dir))
                            (progn
                              (let
                                  ((doom-print-level
                                    (or nil doom-print-level))
                                   (doom-print-indent
                                    (+
                                     (if t
                                         (or nil doom-print-indent-increment)
                                       0)
                                     doom-print-indent)))
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'p "The second directory will be ignored, as it has lower precedence."))))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for common environmental issues...")))
                (if
                    (string-match-p "/fish$" shell-file-name)
                    (progn
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Detected Fish as your $SHELL")))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Fish (and possibly other non-POSIX shells) is known to inject garbage " "output into some of the child processes that Emacs spawns. Many Emacs " "packages/utilities will choke on this output, causing unpredictable issues. " "To get around this, either:\n\n" "  - Add the following to $DOOMDIR/config.el:\n\n" "    (setq shell-file-name (executable-find \"bash\"))\n\n" "  - Or change your default shell to a POSIX shell (like bash or zsh) " "    and explicitly configure your terminal apps to use the shell you " "    want.\n\n" "If you opt for option 1 and use one of Emacs' terminal emulators, you " "will also need to configure them to use Fish, e.g.\n\n" "  (setq-default vterm-shell (executable-find \"fish\"))\n\n" "  (setq-default explicit-shell-file-name (executable-find \"fish\"))\n")))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for stale elc files...")))
                (elc-check-dir doom-core-dir)
                (elc-check-dir doom-modules-dir)
                (elc-check-dir
                 (doom-path doom-local-dir "straight" straight-build-dir))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for problematic git global settings...")))
                (if
                    (executable-find "git")
                    (if
                        (= 0
                           (car
                            (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                        (progn
                          (progn
                            (if inhibit-message nil
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))))
                            (setq doom-doctor--warnings
                                  (cons
                                   (doom-print--format
                                    (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                                   doom-doctor--warnings)))
                          (progn
                            (let
                                ((doom-print-level
                                  (or nil doom-print-level))
                                 (doom-print-indent
                                  (+
                                   (if t
                                       (or nil doom-print-indent-increment)
                                     0)
                                   doom-print-indent)))
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'p "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")))))))
                  (progn
                    (if inhibit-message nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))))
                    (setq doom-doctor--errors
                          (cons
                           (doom-print--format
                            (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                           doom-doctor--errors))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking Doom Emacs...")))
                (condition-case ex
                    (progn
                      (let
                          ((doom-print-level
                            (or nil doom-print-level))
                           (doom-print-indent
                            (+
                             (if t
                                 (or nil doom-print-indent-increment)
                               0)
                             doom-print-indent)))
                        (require 'doom-start)
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'success "Initialized Doom Emacs %s")
                          doom-version))
                        (doom-print
                         (doom-print--format
                          (if
                              (hash-table-p doom-modules)
                              (doom-print--class 'success "Detected %d modules"
                                                 (hash-table-count doom-modules))
                            (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?"))))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'success "Detected %d packages")
                          (length doom-packages)))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'start "Checking Doom core for irregularities...")))
                        (progn
                          (let
                              ((doom-print-level
                                (or nil doom-print-level))
                               (doom-print-indent
                                (+
                                 (if t
                                     (or nil doom-print-indent-increment)
                                   0)
                                 doom-print-indent)))
                            (let
                                ((tail
                                  (list "savehist" "projectile.cache")))
                              (while tail
                                (let
                                    ((file
                                      (car tail)))
                                  (let*
                                      ((size
                                        (and t
                                             (condition-case nil
                                                 (progn
                                                   (doom-file-size file doom-cache-dir))
                                               (error nil)))))
                                    (if size
                                        (if
                                            (> size 1048576)
                                            (progn
                                              (progn
                                                (if inhibit-message nil
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                       (/ size 1024 1024.0)))))
                                                (setq doom-doctor--warnings
                                                      (cons
                                                       (doom-print--format
                                                        (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                           (/ size 1024 1024.0)))
                                                       doom-doctor--warnings)))
                                              (progn
                                                (let
                                                    ((doom-print-level
                                                      (or nil doom-print-level))
                                                     (doom-print-indent
                                                      (+
                                                       (if t
                                                           (or nil doom-print-indent-increment)
                                                         0)
                                                       doom-print-indent)))
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'p "Consider deleting it from your system (manually)")))))))
                                      nil))
                                  (setq tail
                                        (cdr tail)))))
                            (if
                                (condition-case nil
                                    (progn
                                      (executable-find doom-fd-executable))
                                  (error nil))
                                nil
                              (progn
                                (if inhibit-message nil
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))))
                                (setq doom-doctor--warnings
                                      (cons
                                       (doom-print--format
                                        (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                       doom-doctor--warnings))))
                            (require 'projectile)
                            (if
                                (projectile-project-root "~")
                                (progn
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'warn "Your $HOME is recognized as a project root"))))
                                    (setq doom-doctor--warnings
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                           doom-doctor--warnings)))
                                  (progn
                                    (let
                                        ((doom-print-level
                                          (or nil doom-print-level))
                                         (doom-print-indent
                                          (+
                                           (if t
                                               (or nil doom-print-indent-increment)
                                             0)
                                           doom-print-indent)))
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'p "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")))))))
                            (if
                                (and
                                 (file-equal-p doom-user-dir "~/.config/doom")
                                 (file-directory-p "~/.doom.d"))
                                (progn
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                                    (doom-print--class 'path doom-user-dir)))
                                  (progn
                                    (let
                                        ((doom-print-level
                                          (or nil doom-print-level))
                                         (doom-print-indent
                                          (+
                                           (if t
                                               (or nil doom-print-indent-increment)
                                             0)
                                           doom-print-indent)))
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'p "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")))))))
                            (if
                                (not
                                 (executable-find "fc-list"))
                                (progn
                                  (if inhibit-message nil
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))))
                                  (setq doom-doctor--warnings
                                        (cons
                                         (doom-print--format
                                          (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                         doom-doctor--warnings)))
                              (if
                                  (and
                                   (cond
                                    ((eq system-type 'gnu/linux)
                                     (let nil
                                       (concat
                                        (or
                                         (getenv "XDG_DATA_HOME")
                                         "~/.local/share")
                                        "/fonts/")))
                                    ((eq system-type 'darwin)
                                     (let nil "~/Library/Fonts/")))
                                   (require 'nerd-icons nil t))
                                  (progn
                                    (let
                                        ((temp-buffer
                                          (generate-new-buffer " *temp*" t)))
                                      (save-current-buffer
                                        (set-buffer temp-buffer)
                                        (unwind-protect
                                            (progn
                                              (let
                                                  ((errors 0))
                                                (let*
                                                    ((output
                                                      (doom-call-process "fc-list" "" "file"))
                                                     (status
                                                      (if output
                                                          (car-safe
                                                           (prog1 output
                                                             (setq output
                                                                   (cdr output))))
                                                        (signal 'wrong-number-of-arguments
                                                                (list
                                                                 '(status . output)
                                                                 (length output))))))
                                                  (if
                                                      (not
                                                       (= 0 status))
                                                      (doom-print
                                                       (doom-print--format
                                                        (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?")))
                                                    (insert
                                                     (cdr
                                                      (doom-call-process "fc-list" "" "file")))
                                                    (let
                                                        ((tail nerd-icons-font-names))
                                                      (while tail
                                                        (let
                                                            ((font
                                                              (car tail)))
                                                          (if
                                                              (save-excursion
                                                                (re-search-backward font nil t))
                                                              (doom-print
                                                               (doom-print--format
                                                                (doom-print--style 'green "Found font %s" font)))
                                                            (doom-print
                                                             (doom-print--format
                                                              (doom-print--class 'warn "%S font is not installed on your system")
                                                              font))
                                                            (setq errors
                                                                  (1+ errors)))
                                                          (setq tail
                                                                (cdr tail)))))
                                                    (if
                                                        (> errors 0)
                                                        (progn
                                                          (progn
                                                            (let
                                                                ((doom-print-level
                                                                  (or nil doom-print-level))
                                                                 (doom-print-indent
                                                                  (+
                                                                   (if t
                                                                       (or nil doom-print-indent-increment)
                                                                     0)
                                                                   doom-print-indent)))
                                                              (doom-print
                                                               (doom-print--format
                                                                (doom-print--class 'p "Some needed fonts are not properly installed on your system. To download and " "install them, run `M-x nerd-icons-install-fonts' from within Doom Emacs. " "However, on Windows this command will only download them; the fonts must " "be installed manually afterwards.")))))))))))
                                          (and
                                           (buffer-name temp-buffer)
                                           (kill-buffer temp-buffer))))))))))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'start "Checking for stale elc files in your DOOMDIR...")))
                        (if
                            (file-directory-p doom-user-dir)
                            (progn
                              (progn
                                (let
                                    ((doom-print-level
                                      (or nil doom-print-level))
                                     (doom-print-indent
                                      (+
                                       (if t
                                           (or nil doom-print-indent-increment)
                                         0)
                                       doom-print-indent)))
                                  (elc-check-dir doom-user-dir)))))
                        (if doom-modules
                            (progn
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'start "Checking your enabled modules...")))
                              (advice-add #'require :around #'doom-shut-up-a)
                              (let
                                  ((tail
                                    (doom-module-list)))
                                (while tail
                                  (let
                                      ((x54
                                        (car tail)))
                                    (progn
                                      (ignore
                                       (consp x54))
                                      (let*
                                          ((x55
                                            (car-safe x54))
                                           (x56
                                            (cdr-safe x54)))
                                        (let
                                            ((group x55)
                                             (name x56))
                                          (let
                                              ((doom-context doom-context))
                                            (let
                                                ((tail
                                                  (ensure-list 'doctor)))
                                              (while tail
                                                (let
                                                    ((context
                                                      (car tail)))
                                                  (doom-context-push context)
                                                  (setq tail
                                                        (cdr tail)))))
                                            (let
                                                (doom-local-errors doom-local-warnings)
                                              (let
                                                  (doom-doctor--errors doom-doctor--warnings)
                                                (condition-case ex
                                                    (let
                                                        ((doom-module-context
                                                          (doom-module-context
                                                           (cons group name))))
                                                      (if
                                                          (and
                                                           (not doom-inhibit-log)
                                                           (or
                                                            (not noninteractive)
                                                            (<= 2 doom-log-level)))
                                                          (progn
                                                            (doom--log 2 ":context:module: =%s" doom-module-context)))
                                                      (let
                                                          ((doctor-file
                                                            (doom-module-expand-path group name "doctor.el"))
                                                           (packages-file
                                                            (doom-module-expand-path group name doom-module-packages-file)))
                                                        (if packages-file
                                                            (progn
                                                              (let*
                                                                  ((doom-output-indent 6)
                                                                   (--cl-var--
                                                                    (let
                                                                        ((doom-context doom-context))
                                                                      (let
                                                                          ((tail
                                                                            (ensure-list 'packages)))
                                                                        (while tail
                                                                          (let
                                                                              ((context
                                                                                (car tail)))
                                                                            (doom-context-push context)
                                                                            (setq tail
                                                                                  (cdr tail)))))
                                                                      (let*
                                                                          (doom-packages doom-disabled-packages)
                                                                        (load packages-file 'noerror 'nomessage)
                                                                        (mapcar #'car doom-packages))))
                                                                   (name nil))
                                                                (while
                                                                    (consp --cl-var--)
                                                                  (setq name
                                                                        (car --cl-var--))
                                                                  (if
                                                                      (or
                                                                       (doom-package-get name :disable)
                                                                       (eval
                                                                        (doom-package-get name :ignore))
                                                                       (plist-member
                                                                        (doom-package-get name :recipe)
                                                                        :local-repo)
                                                                       (locate-library
                                                                        (symbol-name name))
                                                                       (doom-package-built-in-p name)
                                                                       (doom-package-installed-p name))
                                                                      (progn)
                                                                    (doom-print
                                                                     (doom-print--format
                                                                      (doom-print--class 'error "Missing emacs package: %S")
                                                                      name)))
                                                                  (setq --cl-var--
                                                                        (cdr --cl-var--)))
                                                                nil)))
                                                        (if doctor-file
                                                            (progn
                                                              (let
                                                                  ((inhibit-message t))
                                                                (load doctor-file 'noerror 'nomessage))))))
                                                  ((debug file-missing)
                                                   (progn
                                                     (if inhibit-message nil
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'error "%s"
                                                                            (error-message-string ex)))))
                                                     (setq doom-doctor--errors
                                                           (cons
                                                            (doom-print--format
                                                             (doom-print--class 'error "%s"
                                                                                (error-message-string ex)))
                                                            doom-doctor--errors))))
                                                  ((debug error)
                                                   (progn
                                                     (if inhibit-message nil
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'error "Syntax error: %s" ex))))
                                                     (setq doom-doctor--errors
                                                           (cons
                                                            (doom-print--format
                                                             (doom-print--class 'error "Syntax error: %s" ex))
                                                            doom-doctor--errors)))))
                                                (if
                                                    (or doom-doctor--errors doom-doctor--warnings)
                                                    (progn
                                                      (progn
                                                        (let
                                                            ((doom-print-level
                                                              (or nil doom-print-level))
                                                             (doom-print-indent
                                                              (+
                                                               (if t
                                                                   (or nil doom-print-indent-increment)
                                                                 0)
                                                               doom-print-indent)))
                                                          (doom-print
                                                           (doom-print--format
                                                            (doom-print--class 'start
                                                                               (doom-print--style 'bold "%s %s"))
                                                            group name))
                                                          (doom-print
                                                           (doom-print--format "%s"
                                                                               (string-join
                                                                                (append doom-doctor--errors doom-doctor--warnings)
                                                                                "\n")))))
                                                      (progn
                                                        (setq doom-local-errors doom-doctor--errors)
                                                        (setq doom-local-warnings doom-doctor--warnings)))))
                                              (setq doom-doctor--errors
                                                    (append doom-doctor--errors doom-local-errors))
                                              (setq doom-doctor--warnings
                                                    (append doom-doctor--warnings doom-local-warnings)))))))
                                    (setq tail
                                          (cdr tail)))))))))
                  ((debug error)
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                            (or
                                             (cdr-safe ex)
                                             (car ex))))))
                     (setq doom-doctor--warnings
                           (cons
                            (doom-print--format
                             (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                                (or
                                                 (cdr-safe ex)
                                                 (car ex))))
                            doom-doctor--warnings)))
                   (setq doom-modules nil)))
                (terpri)
                (let
                    ((tail
                      (list
                       (list doom-doctor--warnings "warning" 'yellow)
                       (list doom-doctor--errors "error" 'red))))
                  (while tail
                    (let
                        ((msg
                          (car tail)))
                      (if
                          (car msg)
                          (progn
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'color
                                                 (nth 2 msg)
                                                 (if
                                                     (cdr
                                                      (car msg))
                                                     "There are %d %ss!" "There is %d %s!")
                                                 (length
                                                  (car msg))
                                                 (nth 1 msg))))))
                      (setq tail
                            (cdr tail)))))
                (if
                    (or doom-doctor--errors doom-doctor--warnings)
                    nil
                  (doom-print
                   (doom-print--format
                    (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))))
                (exit! :pager? "+G")))))
  (prefix . "doom")
  (seen t)
  (runners
   (#s(doom-cli
       ("doom" "doctor")
       nil
       (("SUMMARY" . "Diagnoses common issues on your system.")
        ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
       nil nil nil nil
       (:benchmark nil :prefix
                   (doom)
                   :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
       (closure
           (t)
           (cli alist)
         (let nil
           (doom-print
            (doom-print--format "The doctor will see you now...\n"))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking your Emacs version...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (cond
                ((or
                  (> emacs-major-version 29)
                  (string-match-p ".\\([56]0\\|9[0-9]\\)$" emacs-version))
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))
                          doom-doctor--warnings)))
                 (if
                     (> emacs-major-version 29)
                     (progn
                       (let
                           ((doom-print-level
                             (or nil doom-print-level))
                            (doom-print-indent
                             (+
                              (if t
                                  (or nil doom-print-indent-increment)
                                0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'p "This is the bleeding edge of Emacs. As it is constantly changed, Doom will not " "(officially) support it. If you've found a stable commit, great! But be " "cautious about updating Emacs too eagerly!\n")))))
                   (progn
                     (let
                         ((doom-print-level
                           (or nil doom-print-level))
                          (doom-print-indent
                           (+
                            (if t
                                (or nil doom-print-indent-increment)
                              0)
                            doom-print-indent)))
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'p "A .50, .60, or .9X appended to the version string indicates that this is a version " "of Emacs in between stable releases. These are not well supported.\n"))))))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Because development builds are prone to random breakage, there will be a greater " "burden on you to investigate and deal with issues. Please make extra sure that " "your issue is reproducible in 29.1 before reporting them to Doom's issue tracker!\n" "\n" "If this doesn't phase you, read the \"Why does Doom not support Emacs HEAD\" QnA " "in Doom's FAQ. It offers some advice for debugging and surviving issues on the " "bleeding edge. Failing that, 29.1 is highly recommended and will always be " "Doom's best supported version of Emacs."))))))
                ((= emacs-major-version 27)
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))
                          doom-doctor--warnings)))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Emacs 28.1 is better supported, faster, and more stable. Plus, Doom will drop " "27.x support sometime late-2023.")))))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for Doom's prerequisites...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (if
                   (not
                    (executable-find "git"))
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                            doom-doctor--errors)))
                 (let
                     ((saved-match-data
                       (match-data)))
                   (unwind-protect
                       (progn
                         (let*
                             ((version
                               (cdr
                                (doom-call-process "git" "version")))
                              (version
                               (and
                                (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                                (match-string 1 version))))
                           (if version
                               (if
                                   (version< version "2.23")
                                   (progn
                                     (progn
                                       (if inhibit-message nil
                                         (doom-print
                                          (doom-print--format
                                           (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))))
                                       (setq doom-doctor--errors
                                             (cons
                                              (doom-print--format
                                               (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                              doom-doctor--errors)))))
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))))
                               (setq doom-doctor--warnings
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                      doom-doctor--warnings))))))
                     (set-match-data saved-match-data t))))
               (if
                   (executable-find "rg")
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))))
                   (setq doom-doctor--errors
                         (cons
                          (doom-print--format
                           (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                          doom-doctor--errors))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for Emacs config conflicts...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (if
                   (or
                    (file-equal-p doom-emacs-dir "~/.emacs.d")
                    (file-equal-p doom-emacs-dir "~/.config/emacs"))
                   nil
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'warn "Doom is installed in a non-standard location")))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "The standard locations are ~/.config/emacs or ~/.emacs.d. Emacs will fail " "to load Doom if it is not explicitly told where to look for it. In Emacs 29+, " "this is possible with the --init-directory option:\n\n" "  $ emacs --init-directory '"
                                          (abbreviate-file-name doom-emacs-dir)
                                          "'\n\n" "However, Emacs 27-28 users have no choice but to move Doom to a standard " "location.\n\n" "Chemacs users may ignore this warning, however."))))))
               (let
                   (found?)
                 (let
                     ((tail
                       '("~/_emacs" "~/.emacs" "~/.emacs.el" "~/.emacs.d" "~/.config/emacs")))
                   (while tail
                     (let
                         ((file
                           (car tail)))
                       (if
                           (and
                            (file-exists-p file)
                            (not
                             (file-equal-p file doom-emacs-dir)))
                           (progn
                             (setq found? t)
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Found another Emacs config: %s (%s)")
                               file
                               (if
                                   (file-directory-p file)
                                   "directory" "file")))))
                       (setq tail
                             (cdr tail)))))
                 (if found?
                     (progn
                       (progn
                         (let
                             ((doom-print-level
                               (or nil doom-print-level))
                              (doom-print-indent
                               (+
                                (if t
                                    (or nil doom-print-indent-increment)
                                  0)
                                doom-print-indent)))
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'p "Having multiple Emacs configs may prevent Doom from loading properly. Emacs " "will load the first it finds and ignore the rest. If Doom isn't starting up " "correctly (e.g. you get a vanilla splash screen), make sure that only one of " "these exist.\n\n" "Chemacs users may ignore this warning."))))))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for missing Emacs features...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (if
                   (functionp 'json-serialize)
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs was not built with native JSON support"))))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs was not built with native JSON support"))
                          doom-doctor--warnings)))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option."))))))
               (if
                   (featurep 'native-compile)
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs was not built with native compilation support"))))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs was not built with native compilation support"))
                          doom-doctor--warnings)))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option."))))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for private config conflicts...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (let*
                   ((xdg-dir
                     (concat
                      (or
                       (getenv "XDG_CONFIG_HOME")
                       "~/.config")
                      "/doom/"))
                    (doom-dir
                     (or
                      (getenv "DOOMDIR")
                      "~/.doom.d/"))
                    (dir
                     (if
                         (file-directory-p xdg-dir)
                         xdg-dir doom-dir)))
                 (if
                     (file-equal-p dir doom-emacs-dir)
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                            (doom-print--class 'path dir))))
                       (progn
                         (let
                             ((doom-print-level
                               (or nil doom-print-level))
                              (doom-print-indent
                               (+
                                (if t
                                    (or nil doom-print-indent-increment)
                                  0)
                                doom-print-indent)))
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'p "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")))))))
                 (if
                     (and
                      (not
                       (file-equal-p xdg-dir doom-dir))
                      (file-directory-p xdg-dir)
                      (file-directory-p doom-dir))
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Detected two private configs, in %s and %s")
                         (abbreviate-file-name xdg-dir)
                         doom-dir))
                       (progn
                         (let
                             ((doom-print-level
                               (or nil doom-print-level))
                              (doom-print-indent
                               (+
                                (if t
                                    (or nil doom-print-indent-increment)
                                  0)
                                doom-print-indent)))
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'p "The second directory will be ignored, as it has lower precedence."))))))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for common environmental issues...")))
           (if
               (string-match-p "/fish$" shell-file-name)
               (progn
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'warn "Detected Fish as your $SHELL")))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Fish (and possibly other non-POSIX shells) is known to inject garbage " "output into some of the child processes that Emacs spawns. Many Emacs " "packages/utilities will choke on this output, causing unpredictable issues. " "To get around this, either:\n\n" "  - Add the following to $DOOMDIR/config.el:\n\n" "    (setq shell-file-name (executable-find \"bash\"))\n\n" "  - Or change your default shell to a POSIX shell (like bash or zsh) " "    and explicitly configure your terminal apps to use the shell you " "    want.\n\n" "If you opt for option 1 and use one of Emacs' terminal emulators, you " "will also need to configure them to use Fish, e.g.\n\n" "  (setq-default vterm-shell (executable-find \"fish\"))\n\n" "  (setq-default explicit-shell-file-name (executable-find \"fish\"))\n")))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for stale elc files...")))
           (elc-check-dir doom-core-dir)
           (elc-check-dir doom-modules-dir)
           (elc-check-dir
            (doom-path doom-local-dir "straight" straight-build-dir))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for problematic git global settings...")))
           (if
               (executable-find "git")
               (if
                   (= 0
                      (car
                       (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                   (progn
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))))
                       (setq doom-doctor--warnings
                             (cons
                              (doom-print--format
                               (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                              doom-doctor--warnings)))
                     (progn
                       (let
                           ((doom-print-level
                             (or nil doom-print-level))
                            (doom-print-indent
                             (+
                              (if t
                                  (or nil doom-print-indent-increment)
                                0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'p "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")))))))
             (progn
               (if inhibit-message nil
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))))
               (setq doom-doctor--errors
                     (cons
                      (doom-print--format
                       (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                      doom-doctor--errors))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking Doom Emacs...")))
           (condition-case ex
               (progn
                 (let
                     ((doom-print-level
                       (or nil doom-print-level))
                      (doom-print-indent
                       (+
                        (if t
                            (or nil doom-print-indent-increment)
                          0)
                        doom-print-indent)))
                   (require 'doom-start)
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'success "Initialized Doom Emacs %s")
                     doom-version))
                   (doom-print
                    (doom-print--format
                     (if
                         (hash-table-p doom-modules)
                         (doom-print--class 'success "Detected %d modules"
                                            (hash-table-count doom-modules))
                       (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?"))))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'success "Detected %d packages")
                     (length doom-packages)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'start "Checking Doom core for irregularities...")))
                   (progn
                     (let
                         ((doom-print-level
                           (or nil doom-print-level))
                          (doom-print-indent
                           (+
                            (if t
                                (or nil doom-print-indent-increment)
                              0)
                            doom-print-indent)))
                       (let
                           ((tail
                             (list "savehist" "projectile.cache")))
                         (while tail
                           (let
                               ((file
                                 (car tail)))
                             (let*
                                 ((size
                                   (and t
                                        (condition-case nil
                                            (progn
                                              (doom-file-size file doom-cache-dir))
                                          (error nil)))))
                               (if size
                                   (if
                                       (> size 1048576)
                                       (progn
                                         (progn
                                           (if inhibit-message nil
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                  (/ size 1024 1024.0)))))
                                           (setq doom-doctor--warnings
                                                 (cons
                                                  (doom-print--format
                                                   (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                      (/ size 1024 1024.0)))
                                                  doom-doctor--warnings)))
                                         (progn
                                           (let
                                               ((doom-print-level
                                                 (or nil doom-print-level))
                                                (doom-print-indent
                                                 (+
                                                  (if t
                                                      (or nil doom-print-indent-increment)
                                                    0)
                                                  doom-print-indent)))
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'p "Consider deleting it from your system (manually)")))))))
                                 nil))
                             (setq tail
                                   (cdr tail)))))
                       (if
                           (condition-case nil
                               (progn
                                 (executable-find doom-fd-executable))
                             (error nil))
                           nil
                         (progn
                           (if inhibit-message nil
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))))
                           (setq doom-doctor--warnings
                                 (cons
                                  (doom-print--format
                                   (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                  doom-doctor--warnings))))
                       (require 'projectile)
                       (if
                           (projectile-project-root "~")
                           (progn
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'warn "Your $HOME is recognized as a project root"))))
                               (setq doom-doctor--warnings
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                      doom-doctor--warnings)))
                             (progn
                               (let
                                   ((doom-print-level
                                     (or nil doom-print-level))
                                    (doom-print-indent
                                     (+
                                      (if t
                                          (or nil doom-print-indent-increment)
                                        0)
                                      doom-print-indent)))
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'p "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")))))))
                       (if
                           (and
                            (file-equal-p doom-user-dir "~/.config/doom")
                            (file-directory-p "~/.doom.d"))
                           (progn
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                               (doom-print--class 'path doom-user-dir)))
                             (progn
                               (let
                                   ((doom-print-level
                                     (or nil doom-print-level))
                                    (doom-print-indent
                                     (+
                                      (if t
                                          (or nil doom-print-indent-increment)
                                        0)
                                      doom-print-indent)))
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'p "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")))))))
                       (if
                           (not
                            (executable-find "fc-list"))
                           (progn
                             (if inhibit-message nil
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))))
                             (setq doom-doctor--warnings
                                   (cons
                                    (doom-print--format
                                     (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                    doom-doctor--warnings)))
                         (if
                             (and
                              (cond
                               ((eq system-type 'gnu/linux)
                                (let nil
                                  (concat
                                   (or
                                    (getenv "XDG_DATA_HOME")
                                    "~/.local/share")
                                   "/fonts/")))
                               ((eq system-type 'darwin)
                                (let nil "~/Library/Fonts/")))
                              (require 'nerd-icons nil t))
                             (progn
                               (let
                                   ((temp-buffer
                                     (generate-new-buffer " *temp*" t)))
                                 (save-current-buffer
                                   (set-buffer temp-buffer)
                                   (unwind-protect
                                       (progn
                                         (let
                                             ((errors 0))
                                           (let*
                                               ((output
                                                 (doom-call-process "fc-list" "" "file"))
                                                (status
                                                 (if output
                                                     (car-safe
                                                      (prog1 output
                                                        (setq output
                                                              (cdr output))))
                                                   (signal 'wrong-number-of-arguments
                                                           (list
                                                            '(status . output)
                                                            (length output))))))
                                             (if
                                                 (not
                                                  (= 0 status))
                                                 (doom-print
                                                  (doom-print--format
                                                   (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?")))
                                               (insert
                                                (cdr
                                                 (doom-call-process "fc-list" "" "file")))
                                               (let
                                                   ((tail nerd-icons-font-names))
                                                 (while tail
                                                   (let
                                                       ((font
                                                         (car tail)))
                                                     (if
                                                         (save-excursion
                                                           (re-search-backward font nil t))
                                                         (doom-print
                                                          (doom-print--format
                                                           (doom-print--style 'green "Found font %s" font)))
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'warn "%S font is not installed on your system")
                                                         font))
                                                       (setq errors
                                                             (1+ errors)))
                                                     (setq tail
                                                           (cdr tail)))))
                                               (if
                                                   (> errors 0)
                                                   (progn
                                                     (progn
                                                       (let
                                                           ((doom-print-level
                                                             (or nil doom-print-level))
                                                            (doom-print-indent
                                                             (+
                                                              (if t
                                                                  (or nil doom-print-indent-increment)
                                                                0)
                                                              doom-print-indent)))
                                                         (doom-print
                                                          (doom-print--format
                                                           (doom-print--class 'p "Some needed fonts are not properly installed on your system. To download and " "install them, run `M-x nerd-icons-install-fonts' from within Doom Emacs. " "However, on Windows this command will only download them; the fonts must " "be installed manually afterwards.")))))))))))
                                     (and
                                      (buffer-name temp-buffer)
                                      (kill-buffer temp-buffer))))))))))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'start "Checking for stale elc files in your DOOMDIR...")))
                   (if
                       (file-directory-p doom-user-dir)
                       (progn
                         (progn
                           (let
                               ((doom-print-level
                                 (or nil doom-print-level))
                                (doom-print-indent
                                 (+
                                  (if t
                                      (or nil doom-print-indent-increment)
                                    0)
                                  doom-print-indent)))
                             (elc-check-dir doom-user-dir)))))
                   (if doom-modules
                       (progn
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'start "Checking your enabled modules...")))
                         (advice-add #'require :around #'doom-shut-up-a)
                         (let
                             ((tail
                               (doom-module-list)))
                           (while tail
                             (let
                                 ((x54
                                   (car tail)))
                               (progn
                                 (ignore
                                  (consp x54))
                                 (let*
                                     ((x55
                                       (car-safe x54))
                                      (x56
                                       (cdr-safe x54)))
                                   (let
                                       ((group x55)
                                        (name x56))
                                     (let
                                         ((doom-context doom-context))
                                       (let
                                           ((tail
                                             (ensure-list 'doctor)))
                                         (while tail
                                           (let
                                               ((context
                                                 (car tail)))
                                             (doom-context-push context)
                                             (setq tail
                                                   (cdr tail)))))
                                       (let
                                           (doom-local-errors doom-local-warnings)
                                         (let
                                             (doom-doctor--errors doom-doctor--warnings)
                                           (condition-case ex
                                               (let
                                                   ((doom-module-context
                                                     (doom-module-context
                                                      (cons group name))))
                                                 (if
                                                     (and
                                                      (not doom-inhibit-log)
                                                      (or
                                                       (not noninteractive)
                                                       (<= 2 doom-log-level)))
                                                     (progn
                                                       (doom--log 2 ":context:module: =%s" doom-module-context)))
                                                 (let
                                                     ((doctor-file
                                                       (doom-module-expand-path group name "doctor.el"))
                                                      (packages-file
                                                       (doom-module-expand-path group name doom-module-packages-file)))
                                                   (if packages-file
                                                       (progn
                                                         (let*
                                                             ((doom-output-indent 6)
                                                              (--cl-var--
                                                               (let
                                                                   ((doom-context doom-context))
                                                                 (let
                                                                     ((tail
                                                                       (ensure-list 'packages)))
                                                                   (while tail
                                                                     (let
                                                                         ((context
                                                                           (car tail)))
                                                                       (doom-context-push context)
                                                                       (setq tail
                                                                             (cdr tail)))))
                                                                 (let*
                                                                     (doom-packages doom-disabled-packages)
                                                                   (load packages-file 'noerror 'nomessage)
                                                                   (mapcar #'car doom-packages))))
                                                              (name nil))
                                                           (while
                                                               (consp --cl-var--)
                                                             (setq name
                                                                   (car --cl-var--))
                                                             (if
                                                                 (or
                                                                  (doom-package-get name :disable)
                                                                  (eval
                                                                   (doom-package-get name :ignore))
                                                                  (plist-member
                                                                   (doom-package-get name :recipe)
                                                                   :local-repo)
                                                                  (locate-library
                                                                   (symbol-name name))
                                                                  (doom-package-built-in-p name)
                                                                  (doom-package-installed-p name))
                                                                 (progn)
                                                               (doom-print
                                                                (doom-print--format
                                                                 (doom-print--class 'error "Missing emacs package: %S")
                                                                 name)))
                                                             (setq --cl-var--
                                                                   (cdr --cl-var--)))
                                                           nil)))
                                                   (if doctor-file
                                                       (progn
                                                         (let
                                                             ((inhibit-message t))
                                                           (load doctor-file 'noerror 'nomessage))))))
                                             ((debug file-missing)
                                              (progn
                                                (if inhibit-message nil
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'error "%s"
                                                                       (error-message-string ex)))))
                                                (setq doom-doctor--errors
                                                      (cons
                                                       (doom-print--format
                                                        (doom-print--class 'error "%s"
                                                                           (error-message-string ex)))
                                                       doom-doctor--errors))))
                                             ((debug error)
                                              (progn
                                                (if inhibit-message nil
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'error "Syntax error: %s" ex))))
                                                (setq doom-doctor--errors
                                                      (cons
                                                       (doom-print--format
                                                        (doom-print--class 'error "Syntax error: %s" ex))
                                                       doom-doctor--errors)))))
                                           (if
                                               (or doom-doctor--errors doom-doctor--warnings)
                                               (progn
                                                 (progn
                                                   (let
                                                       ((doom-print-level
                                                         (or nil doom-print-level))
                                                        (doom-print-indent
                                                         (+
                                                          (if t
                                                              (or nil doom-print-indent-increment)
                                                            0)
                                                          doom-print-indent)))
                                                     (doom-print
                                                      (doom-print--format
                                                       (doom-print--class 'start
                                                                          (doom-print--style 'bold "%s %s"))
                                                       group name))
                                                     (doom-print
                                                      (doom-print--format "%s"
                                                                          (string-join
                                                                           (append doom-doctor--errors doom-doctor--warnings)
                                                                           "\n")))))
                                                 (progn
                                                   (setq doom-local-errors doom-doctor--errors)
                                                   (setq doom-local-warnings doom-doctor--warnings)))))
                                         (setq doom-doctor--errors
                                               (append doom-doctor--errors doom-local-errors))
                                         (setq doom-doctor--warnings
                                               (append doom-doctor--warnings doom-local-warnings)))))))
                               (setq tail
                                     (cdr tail)))))))))
             ((debug error)
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                       (or
                                        (cdr-safe ex)
                                        (car ex))))))
                (setq doom-doctor--warnings
                      (cons
                       (doom-print--format
                        (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                           (or
                                            (cdr-safe ex)
                                            (car ex))))
                       doom-doctor--warnings)))
              (setq doom-modules nil)))
           (terpri)
           (let
               ((tail
                 (list
                  (list doom-doctor--warnings "warning" 'yellow)
                  (list doom-doctor--errors "error" 'red))))
             (while tail
               (let
                   ((msg
                     (car tail)))
                 (if
                     (car msg)
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'color
                                            (nth 2 msg)
                                            (if
                                                (cdr
                                                 (car msg))
                                                "There are %d %ss!" "There is %d %s!")
                                            (length
                                             (car msg))
                                            (nth 1 msg))))))
                 (setq tail
                       (cdr tail)))))
           (if
               (or doom-doctor--errors doom-doctor--warnings)
               nil
             (doom-print
              (doom-print--format
               (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))))
           (exit! :pager? "+G"))))))
  (tail
   (#s(doom-cli
       ("doom" "doctor")
       nil
       (("SUMMARY" . "Diagnoses common issues on your system.")
        ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
       nil nil nil nil
       (:benchmark nil :prefix
                   (doom)
                   :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
       (closure
           (t)
           (cli alist)
         (let nil
           (doom-print
            (doom-print--format "The doctor will see you now...\n"))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking your Emacs version...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (cond
                ((or
                  (> emacs-major-version 29)
                  (string-match-p ".\\([56]0\\|9[0-9]\\)$" emacs-version))
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))
                          doom-doctor--warnings)))
                 (if
                     (> emacs-major-version 29)
                     (progn
                       (let
                           ((doom-print-level
                             (or nil doom-print-level))
                            (doom-print-indent
                             (+
                              (if t
                                  (or nil doom-print-indent-increment)
                                0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'p "This is the bleeding edge of Emacs. As it is constantly changed, Doom will not " "(officially) support it. If you've found a stable commit, great! But be " "cautious about updating Emacs too eagerly!\n")))))
                   (progn
                     (let
                         ((doom-print-level
                           (or nil doom-print-level))
                          (doom-print-indent
                           (+
                            (if t
                                (or nil doom-print-indent-increment)
                              0)
                            doom-print-indent)))
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'p "A .50, .60, or .9X appended to the version string indicates that this is a version " "of Emacs in between stable releases. These are not well supported.\n"))))))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Because development builds are prone to random breakage, there will be a greater " "burden on you to investigate and deal with issues. Please make extra sure that " "your issue is reproducible in 29.1 before reporting them to Doom's issue tracker!\n" "\n" "If this doesn't phase you, read the \"Why does Doom not support Emacs HEAD\" QnA " "in Doom's FAQ. It offers some advice for debugging and surviving issues on the " "bleeding edge. Failing that, 29.1 is highly recommended and will always be " "Doom's best supported version of Emacs."))))))
                ((= emacs-major-version 27)
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))
                          doom-doctor--warnings)))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Emacs 28.1 is better supported, faster, and more stable. Plus, Doom will drop " "27.x support sometime late-2023.")))))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for Doom's prerequisites...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (if
                   (not
                    (executable-find "git"))
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                            doom-doctor--errors)))
                 (let
                     ((saved-match-data
                       (match-data)))
                   (unwind-protect
                       (progn
                         (let*
                             ((version
                               (cdr
                                (doom-call-process "git" "version")))
                              (version
                               (and
                                (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                                (match-string 1 version))))
                           (if version
                               (if
                                   (version< version "2.23")
                                   (progn
                                     (progn
                                       (if inhibit-message nil
                                         (doom-print
                                          (doom-print--format
                                           (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))))
                                       (setq doom-doctor--errors
                                             (cons
                                              (doom-print--format
                                               (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                              doom-doctor--errors)))))
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))))
                               (setq doom-doctor--warnings
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                      doom-doctor--warnings))))))
                     (set-match-data saved-match-data t))))
               (if
                   (executable-find "rg")
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))))
                   (setq doom-doctor--errors
                         (cons
                          (doom-print--format
                           (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                          doom-doctor--errors))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for Emacs config conflicts...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (if
                   (or
                    (file-equal-p doom-emacs-dir "~/.emacs.d")
                    (file-equal-p doom-emacs-dir "~/.config/emacs"))
                   nil
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'warn "Doom is installed in a non-standard location")))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "The standard locations are ~/.config/emacs or ~/.emacs.d. Emacs will fail " "to load Doom if it is not explicitly told where to look for it. In Emacs 29+, " "this is possible with the --init-directory option:\n\n" "  $ emacs --init-directory '"
                                          (abbreviate-file-name doom-emacs-dir)
                                          "'\n\n" "However, Emacs 27-28 users have no choice but to move Doom to a standard " "location.\n\n" "Chemacs users may ignore this warning, however."))))))
               (let
                   (found?)
                 (let
                     ((tail
                       '("~/_emacs" "~/.emacs" "~/.emacs.el" "~/.emacs.d" "~/.config/emacs")))
                   (while tail
                     (let
                         ((file
                           (car tail)))
                       (if
                           (and
                            (file-exists-p file)
                            (not
                             (file-equal-p file doom-emacs-dir)))
                           (progn
                             (setq found? t)
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Found another Emacs config: %s (%s)")
                               file
                               (if
                                   (file-directory-p file)
                                   "directory" "file")))))
                       (setq tail
                             (cdr tail)))))
                 (if found?
                     (progn
                       (progn
                         (let
                             ((doom-print-level
                               (or nil doom-print-level))
                              (doom-print-indent
                               (+
                                (if t
                                    (or nil doom-print-indent-increment)
                                  0)
                                doom-print-indent)))
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'p "Having multiple Emacs configs may prevent Doom from loading properly. Emacs " "will load the first it finds and ignore the rest. If Doom isn't starting up " "correctly (e.g. you get a vanilla splash screen), make sure that only one of " "these exist.\n\n" "Chemacs users may ignore this warning."))))))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for missing Emacs features...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (if
                   (functionp 'json-serialize)
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs was not built with native JSON support"))))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs was not built with native JSON support"))
                          doom-doctor--warnings)))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option."))))))
               (if
                   (featurep 'native-compile)
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs was not built with native compilation support"))))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs was not built with native compilation support"))
                          doom-doctor--warnings)))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option."))))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for private config conflicts...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (let*
                   ((xdg-dir
                     (concat
                      (or
                       (getenv "XDG_CONFIG_HOME")
                       "~/.config")
                      "/doom/"))
                    (doom-dir
                     (or
                      (getenv "DOOMDIR")
                      "~/.doom.d/"))
                    (dir
                     (if
                         (file-directory-p xdg-dir)
                         xdg-dir doom-dir)))
                 (if
                     (file-equal-p dir doom-emacs-dir)
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                            (doom-print--class 'path dir))))
                       (progn
                         (let
                             ((doom-print-level
                               (or nil doom-print-level))
                              (doom-print-indent
                               (+
                                (if t
                                    (or nil doom-print-indent-increment)
                                  0)
                                doom-print-indent)))
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'p "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")))))))
                 (if
                     (and
                      (not
                       (file-equal-p xdg-dir doom-dir))
                      (file-directory-p xdg-dir)
                      (file-directory-p doom-dir))
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Detected two private configs, in %s and %s")
                         (abbreviate-file-name xdg-dir)
                         doom-dir))
                       (progn
                         (let
                             ((doom-print-level
                               (or nil doom-print-level))
                              (doom-print-indent
                               (+
                                (if t
                                    (or nil doom-print-indent-increment)
                                  0)
                                doom-print-indent)))
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'p "The second directory will be ignored, as it has lower precedence."))))))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for common environmental issues...")))
           (if
               (string-match-p "/fish$" shell-file-name)
               (progn
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'warn "Detected Fish as your $SHELL")))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Fish (and possibly other non-POSIX shells) is known to inject garbage " "output into some of the child processes that Emacs spawns. Many Emacs " "packages/utilities will choke on this output, causing unpredictable issues. " "To get around this, either:\n\n" "  - Add the following to $DOOMDIR/config.el:\n\n" "    (setq shell-file-name (executable-find \"bash\"))\n\n" "  - Or change your default shell to a POSIX shell (like bash or zsh) " "    and explicitly configure your terminal apps to use the shell you " "    want.\n\n" "If you opt for option 1 and use one of Emacs' terminal emulators, you " "will also need to configure them to use Fish, e.g.\n\n" "  (setq-default vterm-shell (executable-find \"fish\"))\n\n" "  (setq-default explicit-shell-file-name (executable-find \"fish\"))\n")))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for stale elc files...")))
           (elc-check-dir doom-core-dir)
           (elc-check-dir doom-modules-dir)
           (elc-check-dir
            (doom-path doom-local-dir "straight" straight-build-dir))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for problematic git global settings...")))
           (if
               (executable-find "git")
               (if
                   (= 0
                      (car
                       (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                   (progn
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))))
                       (setq doom-doctor--warnings
                             (cons
                              (doom-print--format
                               (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                              doom-doctor--warnings)))
                     (progn
                       (let
                           ((doom-print-level
                             (or nil doom-print-level))
                            (doom-print-indent
                             (+
                              (if t
                                  (or nil doom-print-indent-increment)
                                0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'p "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")))))))
             (progn
               (if inhibit-message nil
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))))
               (setq doom-doctor--errors
                     (cons
                      (doom-print--format
                       (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                      doom-doctor--errors))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking Doom Emacs...")))
           (condition-case ex
               (progn
                 (let
                     ((doom-print-level
                       (or nil doom-print-level))
                      (doom-print-indent
                       (+
                        (if t
                            (or nil doom-print-indent-increment)
                          0)
                        doom-print-indent)))
                   (require 'doom-start)
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'success "Initialized Doom Emacs %s")
                     doom-version))
                   (doom-print
                    (doom-print--format
                     (if
                         (hash-table-p doom-modules)
                         (doom-print--class 'success "Detected %d modules"
                                            (hash-table-count doom-modules))
                       (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?"))))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'success "Detected %d packages")
                     (length doom-packages)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'start "Checking Doom core for irregularities...")))
                   (progn
                     (let
                         ((doom-print-level
                           (or nil doom-print-level))
                          (doom-print-indent
                           (+
                            (if t
                                (or nil doom-print-indent-increment)
                              0)
                            doom-print-indent)))
                       (let
                           ((tail
                             (list "savehist" "projectile.cache")))
                         (while tail
                           (let
                               ((file
                                 (car tail)))
                             (let*
                                 ((size
                                   (and t
                                        (condition-case nil
                                            (progn
                                              (doom-file-size file doom-cache-dir))
                                          (error nil)))))
                               (if size
                                   (if
                                       (> size 1048576)
                                       (progn
                                         (progn
                                           (if inhibit-message nil
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                  (/ size 1024 1024.0)))))
                                           (setq doom-doctor--warnings
                                                 (cons
                                                  (doom-print--format
                                                   (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                      (/ size 1024 1024.0)))
                                                  doom-doctor--warnings)))
                                         (progn
                                           (let
                                               ((doom-print-level
                                                 (or nil doom-print-level))
                                                (doom-print-indent
                                                 (+
                                                  (if t
                                                      (or nil doom-print-indent-increment)
                                                    0)
                                                  doom-print-indent)))
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'p "Consider deleting it from your system (manually)")))))))
                                 nil))
                             (setq tail
                                   (cdr tail)))))
                       (if
                           (condition-case nil
                               (progn
                                 (executable-find doom-fd-executable))
                             (error nil))
                           nil
                         (progn
                           (if inhibit-message nil
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))))
                           (setq doom-doctor--warnings
                                 (cons
                                  (doom-print--format
                                   (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                  doom-doctor--warnings))))
                       (require 'projectile)
                       (if
                           (projectile-project-root "~")
                           (progn
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'warn "Your $HOME is recognized as a project root"))))
                               (setq doom-doctor--warnings
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                      doom-doctor--warnings)))
                             (progn
                               (let
                                   ((doom-print-level
                                     (or nil doom-print-level))
                                    (doom-print-indent
                                     (+
                                      (if t
                                          (or nil doom-print-indent-increment)
                                        0)
                                      doom-print-indent)))
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'p "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")))))))
                       (if
                           (and
                            (file-equal-p doom-user-dir "~/.config/doom")
                            (file-directory-p "~/.doom.d"))
                           (progn
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                               (doom-print--class 'path doom-user-dir)))
                             (progn
                               (let
                                   ((doom-print-level
                                     (or nil doom-print-level))
                                    (doom-print-indent
                                     (+
                                      (if t
                                          (or nil doom-print-indent-increment)
                                        0)
                                      doom-print-indent)))
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'p "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")))))))
                       (if
                           (not
                            (executable-find "fc-list"))
                           (progn
                             (if inhibit-message nil
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))))
                             (setq doom-doctor--warnings
                                   (cons
                                    (doom-print--format
                                     (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                    doom-doctor--warnings)))
                         (if
                             (and
                              (cond
                               ((eq system-type 'gnu/linux)
                                (let nil
                                  (concat
                                   (or
                                    (getenv "XDG_DATA_HOME")
                                    "~/.local/share")
                                   "/fonts/")))
                               ((eq system-type 'darwin)
                                (let nil "~/Library/Fonts/")))
                              (require 'nerd-icons nil t))
                             (progn
                               (let
                                   ((temp-buffer
                                     (generate-new-buffer " *temp*" t)))
                                 (save-current-buffer
                                   (set-buffer temp-buffer)
                                   (unwind-protect
                                       (progn
                                         (let
                                             ((errors 0))
                                           (let*
                                               ((output
                                                 (doom-call-process "fc-list" "" "file"))
                                                (status
                                                 (if output
                                                     (car-safe
                                                      (prog1 output
                                                        (setq output
                                                              (cdr output))))
                                                   (signal 'wrong-number-of-arguments
                                                           (list
                                                            '(status . output)
                                                            (length output))))))
                                             (if
                                                 (not
                                                  (= 0 status))
                                                 (doom-print
                                                  (doom-print--format
                                                   (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?")))
                                               (insert
                                                (cdr
                                                 (doom-call-process "fc-list" "" "file")))
                                               (let
                                                   ((tail nerd-icons-font-names))
                                                 (while tail
                                                   (let
                                                       ((font
                                                         (car tail)))
                                                     (if
                                                         (save-excursion
                                                           (re-search-backward font nil t))
                                                         (doom-print
                                                          (doom-print--format
                                                           (doom-print--style 'green "Found font %s" font)))
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'warn "%S font is not installed on your system")
                                                         font))
                                                       (setq errors
                                                             (1+ errors)))
                                                     (setq tail
                                                           (cdr tail)))))
                                               (if
                                                   (> errors 0)
                                                   (progn
                                                     (progn
                                                       (let
                                                           ((doom-print-level
                                                             (or nil doom-print-level))
                                                            (doom-print-indent
                                                             (+
                                                              (if t
                                                                  (or nil doom-print-indent-increment)
                                                                0)
                                                              doom-print-indent)))
                                                         (doom-print
                                                          (doom-print--format
                                                           (doom-print--class 'p "Some needed fonts are not properly installed on your system. To download and " "install them, run `M-x nerd-icons-install-fonts' from within Doom Emacs. " "However, on Windows this command will only download them; the fonts must " "be installed manually afterwards.")))))))))))
                                     (and
                                      (buffer-name temp-buffer)
                                      (kill-buffer temp-buffer))))))))))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'start "Checking for stale elc files in your DOOMDIR...")))
                   (if
                       (file-directory-p doom-user-dir)
                       (progn
                         (progn
                           (let
                               ((doom-print-level
                                 (or nil doom-print-level))
                                (doom-print-indent
                                 (+
                                  (if t
                                      (or nil doom-print-indent-increment)
                                    0)
                                  doom-print-indent)))
                             (elc-check-dir doom-user-dir)))))
                   (if doom-modules
                       (progn
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'start "Checking your enabled modules...")))
                         (advice-add #'require :around #'doom-shut-up-a)
                         (let
                             ((tail
                               (doom-module-list)))
                           (while tail
                             (let
                                 ((x54
                                   (car tail)))
                               (progn
                                 (ignore
                                  (consp x54))
                                 (let*
                                     ((x55
                                       (car-safe x54))
                                      (x56
                                       (cdr-safe x54)))
                                   (let
                                       ((group x55)
                                        (name x56))
                                     (let
                                         ((doom-context doom-context))
                                       (let
                                           ((tail
                                             (ensure-list 'doctor)))
                                         (while tail
                                           (let
                                               ((context
                                                 (car tail)))
                                             (doom-context-push context)
                                             (setq tail
                                                   (cdr tail)))))
                                       (let
                                           (doom-local-errors doom-local-warnings)
                                         (let
                                             (doom-doctor--errors doom-doctor--warnings)
                                           (condition-case ex
                                               (let
                                                   ((doom-module-context
                                                     (doom-module-context
                                                      (cons group name))))
                                                 (if
                                                     (and
                                                      (not doom-inhibit-log)
                                                      (or
                                                       (not noninteractive)
                                                       (<= 2 doom-log-level)))
                                                     (progn
                                                       (doom--log 2 ":context:module: =%s" doom-module-context)))
                                                 (let
                                                     ((doctor-file
                                                       (doom-module-expand-path group name "doctor.el"))
                                                      (packages-file
                                                       (doom-module-expand-path group name doom-module-packages-file)))
                                                   (if packages-file
                                                       (progn
                                                         (let*
                                                             ((doom-output-indent 6)
                                                              (--cl-var--
                                                               (let
                                                                   ((doom-context doom-context))
                                                                 (let
                                                                     ((tail
                                                                       (ensure-list 'packages)))
                                                                   (while tail
                                                                     (let
                                                                         ((context
                                                                           (car tail)))
                                                                       (doom-context-push context)
                                                                       (setq tail
                                                                             (cdr tail)))))
                                                                 (let*
                                                                     (doom-packages doom-disabled-packages)
                                                                   (load packages-file 'noerror 'nomessage)
                                                                   (mapcar #'car doom-packages))))
                                                              (name nil))
                                                           (while
                                                               (consp --cl-var--)
                                                             (setq name
                                                                   (car --cl-var--))
                                                             (if
                                                                 (or
                                                                  (doom-package-get name :disable)
                                                                  (eval
                                                                   (doom-package-get name :ignore))
                                                                  (plist-member
                                                                   (doom-package-get name :recipe)
                                                                   :local-repo)
                                                                  (locate-library
                                                                   (symbol-name name))
                                                                  (doom-package-built-in-p name)
                                                                  (doom-package-installed-p name))
                                                                 (progn)
                                                               (doom-print
                                                                (doom-print--format
                                                                 (doom-print--class 'error "Missing emacs package: %S")
                                                                 name)))
                                                             (setq --cl-var--
                                                                   (cdr --cl-var--)))
                                                           nil)))
                                                   (if doctor-file
                                                       (progn
                                                         (let
                                                             ((inhibit-message t))
                                                           (load doctor-file 'noerror 'nomessage))))))
                                             ((debug file-missing)
                                              (progn
                                                (if inhibit-message nil
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'error "%s"
                                                                       (error-message-string ex)))))
                                                (setq doom-doctor--errors
                                                      (cons
                                                       (doom-print--format
                                                        (doom-print--class 'error "%s"
                                                                           (error-message-string ex)))
                                                       doom-doctor--errors))))
                                             ((debug error)
                                              (progn
                                                (if inhibit-message nil
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'error "Syntax error: %s" ex))))
                                                (setq doom-doctor--errors
                                                      (cons
                                                       (doom-print--format
                                                        (doom-print--class 'error "Syntax error: %s" ex))
                                                       doom-doctor--errors)))))
                                           (if
                                               (or doom-doctor--errors doom-doctor--warnings)
                                               (progn
                                                 (progn
                                                   (let
                                                       ((doom-print-level
                                                         (or nil doom-print-level))
                                                        (doom-print-indent
                                                         (+
                                                          (if t
                                                              (or nil doom-print-indent-increment)
                                                            0)
                                                          doom-print-indent)))
                                                     (doom-print
                                                      (doom-print--format
                                                       (doom-print--class 'start
                                                                          (doom-print--style 'bold "%s %s"))
                                                       group name))
                                                     (doom-print
                                                      (doom-print--format "%s"
                                                                          (string-join
                                                                           (append doom-doctor--errors doom-doctor--warnings)
                                                                           "\n")))))
                                                 (progn
                                                   (setq doom-local-errors doom-doctor--errors)
                                                   (setq doom-local-warnings doom-doctor--warnings)))))
                                         (setq doom-doctor--errors
                                               (append doom-doctor--errors doom-local-errors))
                                         (setq doom-doctor--warnings
                                               (append doom-doctor--warnings doom-local-warnings)))))))
                               (setq tail
                                     (cdr tail)))))))))
             ((debug error)
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                       (or
                                        (cdr-safe ex)
                                        (car ex))))))
                (setq doom-doctor--warnings
                      (cons
                       (doom-print--format
                        (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                           (or
                                            (cdr-safe ex)
                                            (car ex))))
                       doom-doctor--warnings)))
              (setq doom-modules nil)))
           (terpri)
           (let
               ((tail
                 (list
                  (list doom-doctor--warnings "warning" 'yellow)
                  (list doom-doctor--errors "error" 'red))))
             (while tail
               (let
                   ((msg
                     (car tail)))
                 (if
                     (car msg)
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'color
                                            (nth 2 msg)
                                            (if
                                                (cdr
                                                 (car msg))
                                                "There are %d %ss!" "There is %d %s!")
                                            (length
                                             (car msg))
                                            (nth 1 msg))))))
                 (setq tail
                       (cdr tail)))))
           (if
               (or doom-doctor--errors doom-doctor--warnings)
               nil
             (doom-print
              (doom-print--format
               (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))))
           (exit! :pager? "+G"))))))
  (x15 #s(doom-cli
          ("doom" "doctor")
          nil
          (("SUMMARY" . "Diagnoses common issues on your system.")
           ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
          nil nil nil nil
          (:benchmark nil :prefix
                      (doom)
                      :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
          (closure
              (t)
              (cli alist)
            (let nil
              (doom-print
               (doom-print--format "The doctor will see you now...\n"))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking your Emacs version...")))
              (progn
                (let
                    ((doom-print-level
                      (or nil doom-print-level))
                     (doom-print-indent
                      (+
                       (if t
                           (or nil doom-print-indent-increment)
                         0)
                       doom-print-indent)))
                  (cond
                   ((or
                     (> emacs-major-version 29)
                     (string-match-p ".\\([56]0\\|9[0-9]\\)$" emacs-version))
                    (progn
                      (if inhibit-message nil
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))))
                      (setq doom-doctor--warnings
                            (cons
                             (doom-print--format
                              (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))
                             doom-doctor--warnings)))
                    (if
                        (> emacs-major-version 29)
                        (progn
                          (let
                              ((doom-print-level
                                (or nil doom-print-level))
                               (doom-print-indent
                                (+
                                 (if t
                                     (or nil doom-print-indent-increment)
                                   0)
                                 doom-print-indent)))
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'p "This is the bleeding edge of Emacs. As it is constantly changed, Doom will not " "(officially) support it. If you've found a stable commit, great! But be " "cautious about updating Emacs too eagerly!\n")))))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "A .50, .60, or .9X appended to the version string indicates that this is a version " "of Emacs in between stable releases. These are not well supported.\n"))))))
                    (progn
                      (let
                          ((doom-print-level
                            (or nil doom-print-level))
                           (doom-print-indent
                            (+
                             (if t
                                 (or nil doom-print-indent-increment)
                               0)
                             doom-print-indent)))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'p "Because development builds are prone to random breakage, there will be a greater " "burden on you to investigate and deal with issues. Please make extra sure that " "your issue is reproducible in 29.1 before reporting them to Doom's issue tracker!\n" "\n" "If this doesn't phase you, read the \"Why does Doom not support Emacs HEAD\" QnA " "in Doom's FAQ. It offers some advice for debugging and surviving issues on the " "bleeding edge. Failing that, 29.1 is highly recommended and will always be " "Doom's best supported version of Emacs."))))))
                   ((= emacs-major-version 27)
                    (progn
                      (if inhibit-message nil
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))))
                      (setq doom-doctor--warnings
                            (cons
                             (doom-print--format
                              (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))
                             doom-doctor--warnings)))
                    (progn
                      (let
                          ((doom-print-level
                            (or nil doom-print-level))
                           (doom-print-indent
                            (+
                             (if t
                                 (or nil doom-print-indent-increment)
                               0)
                             doom-print-indent)))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'p "Emacs 28.1 is better supported, faster, and more stable. Plus, Doom will drop " "27.x support sometime late-2023.")))))))))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking for Doom's prerequisites...")))
              (progn
                (let
                    ((doom-print-level
                      (or nil doom-print-level))
                     (doom-print-indent
                      (+
                       (if t
                           (or nil doom-print-indent-increment)
                         0)
                       doom-print-indent)))
                  (if
                      (not
                       (executable-find "git"))
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))))
                        (setq doom-doctor--errors
                              (cons
                               (doom-print--format
                                (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                               doom-doctor--errors)))
                    (let
                        ((saved-match-data
                          (match-data)))
                      (unwind-protect
                          (progn
                            (let*
                                ((version
                                  (cdr
                                   (doom-call-process "git" "version")))
                                 (version
                                  (and
                                   (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                                   (match-string 1 version))))
                              (if version
                                  (if
                                      (version< version "2.23")
                                      (progn
                                        (progn
                                          (if inhibit-message nil
                                            (doom-print
                                             (doom-print--format
                                              (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))))
                                          (setq doom-doctor--errors
                                                (cons
                                                 (doom-print--format
                                                  (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                                 doom-doctor--errors)))))
                                (progn
                                  (if inhibit-message nil
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))))
                                  (setq doom-doctor--warnings
                                        (cons
                                         (doom-print--format
                                          (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                         doom-doctor--warnings))))))
                        (set-match-data saved-match-data t))))
                  (if
                      (executable-find "rg")
                      nil
                    (progn
                      (if inhibit-message nil
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))))
                      (setq doom-doctor--errors
                            (cons
                             (doom-print--format
                              (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                             doom-doctor--errors))))))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking for Emacs config conflicts...")))
              (progn
                (let
                    ((doom-print-level
                      (or nil doom-print-level))
                     (doom-print-indent
                      (+
                       (if t
                           (or nil doom-print-indent-increment)
                         0)
                       doom-print-indent)))
                  (if
                      (or
                       (file-equal-p doom-emacs-dir "~/.emacs.d")
                       (file-equal-p doom-emacs-dir "~/.config/emacs"))
                      nil
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'warn "Doom is installed in a non-standard location")))
                    (progn
                      (let
                          ((doom-print-level
                            (or nil doom-print-level))
                           (doom-print-indent
                            (+
                             (if t
                                 (or nil doom-print-indent-increment)
                               0)
                             doom-print-indent)))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'p "The standard locations are ~/.config/emacs or ~/.emacs.d. Emacs will fail " "to load Doom if it is not explicitly told where to look for it. In Emacs 29+, " "this is possible with the --init-directory option:\n\n" "  $ emacs --init-directory '"
                                             (abbreviate-file-name doom-emacs-dir)
                                             "'\n\n" "However, Emacs 27-28 users have no choice but to move Doom to a standard " "location.\n\n" "Chemacs users may ignore this warning, however."))))))
                  (let
                      (found?)
                    (let
                        ((tail
                          '("~/_emacs" "~/.emacs" "~/.emacs.el" "~/.emacs.d" "~/.config/emacs")))
                      (while tail
                        (let
                            ((file
                              (car tail)))
                          (if
                              (and
                               (file-exists-p file)
                               (not
                                (file-equal-p file doom-emacs-dir)))
                              (progn
                                (setq found? t)
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'warn "Found another Emacs config: %s (%s)")
                                  file
                                  (if
                                      (file-directory-p file)
                                      "directory" "file")))))
                          (setq tail
                                (cdr tail)))))
                    (if found?
                        (progn
                          (progn
                            (let
                                ((doom-print-level
                                  (or nil doom-print-level))
                                 (doom-print-indent
                                  (+
                                   (if t
                                       (or nil doom-print-indent-increment)
                                     0)
                                   doom-print-indent)))
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'p "Having multiple Emacs configs may prevent Doom from loading properly. Emacs " "will load the first it finds and ignore the rest. If Doom isn't starting up " "correctly (e.g. you get a vanilla splash screen), make sure that only one of " "these exist.\n\n" "Chemacs users may ignore this warning."))))))))))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking for missing Emacs features...")))
              (progn
                (let
                    ((doom-print-level
                      (or nil doom-print-level))
                     (doom-print-indent
                      (+
                       (if t
                           (or nil doom-print-indent-increment)
                         0)
                       doom-print-indent)))
                  (if
                      (functionp 'json-serialize)
                      nil
                    (progn
                      (if inhibit-message nil
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Emacs was not built with native JSON support"))))
                      (setq doom-doctor--warnings
                            (cons
                             (doom-print--format
                              (doom-print--class 'warn "Emacs was not built with native JSON support"))
                             doom-doctor--warnings)))
                    (progn
                      (let
                          ((doom-print-level
                            (or nil doom-print-level))
                           (doom-print-indent
                            (+
                             (if t
                                 (or nil doom-print-indent-increment)
                               0)
                             doom-print-indent)))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option."))))))
                  (if
                      (featurep 'native-compile)
                      nil
                    (progn
                      (if inhibit-message nil
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Emacs was not built with native compilation support"))))
                      (setq doom-doctor--warnings
                            (cons
                             (doom-print--format
                              (doom-print--class 'warn "Emacs was not built with native compilation support"))
                             doom-doctor--warnings)))
                    (progn
                      (let
                          ((doom-print-level
                            (or nil doom-print-level))
                           (doom-print-indent
                            (+
                             (if t
                                 (or nil doom-print-indent-increment)
                               0)
                             doom-print-indent)))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option."))))))))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking for private config conflicts...")))
              (progn
                (let
                    ((doom-print-level
                      (or nil doom-print-level))
                     (doom-print-indent
                      (+
                       (if t
                           (or nil doom-print-indent-increment)
                         0)
                       doom-print-indent)))
                  (let*
                      ((xdg-dir
                        (concat
                         (or
                          (getenv "XDG_CONFIG_HOME")
                          "~/.config")
                         "/doom/"))
                       (doom-dir
                        (or
                         (getenv "DOOMDIR")
                         "~/.doom.d/"))
                       (dir
                        (if
                            (file-directory-p xdg-dir)
                            xdg-dir doom-dir)))
                    (if
                        (file-equal-p dir doom-emacs-dir)
                        (progn
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                               (doom-print--class 'path dir))))
                          (progn
                            (let
                                ((doom-print-level
                                  (or nil doom-print-level))
                                 (doom-print-indent
                                  (+
                                   (if t
                                       (or nil doom-print-indent-increment)
                                     0)
                                   doom-print-indent)))
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'p "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")))))))
                    (if
                        (and
                         (not
                          (file-equal-p xdg-dir doom-dir))
                         (file-directory-p xdg-dir)
                         (file-directory-p doom-dir))
                        (progn
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Detected two private configs, in %s and %s")
                            (abbreviate-file-name xdg-dir)
                            doom-dir))
                          (progn
                            (let
                                ((doom-print-level
                                  (or nil doom-print-level))
                                 (doom-print-indent
                                  (+
                                   (if t
                                       (or nil doom-print-indent-increment)
                                     0)
                                   doom-print-indent)))
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'p "The second directory will be ignored, as it has lower precedence."))))))))))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking for common environmental issues...")))
              (if
                  (string-match-p "/fish$" shell-file-name)
                  (progn
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'warn "Detected Fish as your $SHELL")))
                    (progn
                      (let
                          ((doom-print-level
                            (or nil doom-print-level))
                           (doom-print-indent
                            (+
                             (if t
                                 (or nil doom-print-indent-increment)
                               0)
                             doom-print-indent)))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'p "Fish (and possibly other non-POSIX shells) is known to inject garbage " "output into some of the child processes that Emacs spawns. Many Emacs " "packages/utilities will choke on this output, causing unpredictable issues. " "To get around this, either:\n\n" "  - Add the following to $DOOMDIR/config.el:\n\n" "    (setq shell-file-name (executable-find \"bash\"))\n\n" "  - Or change your default shell to a POSIX shell (like bash or zsh) " "    and explicitly configure your terminal apps to use the shell you " "    want.\n\n" "If you opt for option 1 and use one of Emacs' terminal emulators, you " "will also need to configure them to use Fish, e.g.\n\n" "  (setq-default vterm-shell (executable-find \"fish\"))\n\n" "  (setq-default explicit-shell-file-name (executable-find \"fish\"))\n")))))))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking for stale elc files...")))
              (elc-check-dir doom-core-dir)
              (elc-check-dir doom-modules-dir)
              (elc-check-dir
               (doom-path doom-local-dir "straight" straight-build-dir))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking for problematic git global settings...")))
              (if
                  (executable-find "git")
                  (if
                      (= 0
                         (car
                          (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                      (progn
                        (progn
                          (if inhibit-message nil
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))))
                          (setq doom-doctor--warnings
                                (cons
                                 (doom-print--format
                                  (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                                 doom-doctor--warnings)))
                        (progn
                          (let
                              ((doom-print-level
                                (or nil doom-print-level))
                               (doom-print-indent
                                (+
                                 (if t
                                     (or nil doom-print-indent-increment)
                                   0)
                                 doom-print-indent)))
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'p "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")))))))
                (progn
                  (if inhibit-message nil
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))))
                  (setq doom-doctor--errors
                        (cons
                         (doom-print--format
                          (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                         doom-doctor--errors))))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking Doom Emacs...")))
              (condition-case ex
                  (progn
                    (let
                        ((doom-print-level
                          (or nil doom-print-level))
                         (doom-print-indent
                          (+
                           (if t
                               (or nil doom-print-indent-increment)
                             0)
                           doom-print-indent)))
                      (require 'doom-start)
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'success "Initialized Doom Emacs %s")
                        doom-version))
                      (doom-print
                       (doom-print--format
                        (if
                            (hash-table-p doom-modules)
                            (doom-print--class 'success "Detected %d modules"
                                               (hash-table-count doom-modules))
                          (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?"))))
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'success "Detected %d packages")
                        (length doom-packages)))
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'start "Checking Doom core for irregularities...")))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (let
                              ((tail
                                (list "savehist" "projectile.cache")))
                            (while tail
                              (let
                                  ((file
                                    (car tail)))
                                (let*
                                    ((size
                                      (and t
                                           (condition-case nil
                                               (progn
                                                 (doom-file-size file doom-cache-dir))
                                             (error nil)))))
                                  (if size
                                      (if
                                          (> size 1048576)
                                          (progn
                                            (progn
                                              (if inhibit-message nil
                                                (doom-print
                                                 (doom-print--format
                                                  (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                     (/ size 1024 1024.0)))))
                                              (setq doom-doctor--warnings
                                                    (cons
                                                     (doom-print--format
                                                      (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                         (/ size 1024 1024.0)))
                                                     doom-doctor--warnings)))
                                            (progn
                                              (let
                                                  ((doom-print-level
                                                    (or nil doom-print-level))
                                                   (doom-print-indent
                                                    (+
                                                     (if t
                                                         (or nil doom-print-indent-increment)
                                                       0)
                                                     doom-print-indent)))
                                                (doom-print
                                                 (doom-print--format
                                                  (doom-print--class 'p "Consider deleting it from your system (manually)")))))))
                                    nil))
                                (setq tail
                                      (cdr tail)))))
                          (if
                              (condition-case nil
                                  (progn
                                    (executable-find doom-fd-executable))
                                (error nil))
                              nil
                            (progn
                              (if inhibit-message nil
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))))
                              (setq doom-doctor--warnings
                                    (cons
                                     (doom-print--format
                                      (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                     doom-doctor--warnings))))
                          (require 'projectile)
                          (if
                              (projectile-project-root "~")
                              (progn
                                (progn
                                  (if inhibit-message nil
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'warn "Your $HOME is recognized as a project root"))))
                                  (setq doom-doctor--warnings
                                        (cons
                                         (doom-print--format
                                          (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                         doom-doctor--warnings)))
                                (progn
                                  (let
                                      ((doom-print-level
                                        (or nil doom-print-level))
                                       (doom-print-indent
                                        (+
                                         (if t
                                             (or nil doom-print-indent-increment)
                                           0)
                                         doom-print-indent)))
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'p "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")))))))
                          (if
                              (and
                               (file-equal-p doom-user-dir "~/.config/doom")
                               (file-directory-p "~/.doom.d"))
                              (progn
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                                  (doom-print--class 'path doom-user-dir)))
                                (progn
                                  (let
                                      ((doom-print-level
                                        (or nil doom-print-level))
                                       (doom-print-indent
                                        (+
                                         (if t
                                             (or nil doom-print-indent-increment)
                                           0)
                                         doom-print-indent)))
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'p "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")))))))
                          (if
                              (not
                               (executable-find "fc-list"))
                              (progn
                                (if inhibit-message nil
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))))
                                (setq doom-doctor--warnings
                                      (cons
                                       (doom-print--format
                                        (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                       doom-doctor--warnings)))
                            (if
                                (and
                                 (cond
                                  ((eq system-type 'gnu/linux)
                                   (let nil
                                     (concat
                                      (or
                                       (getenv "XDG_DATA_HOME")
                                       "~/.local/share")
                                      "/fonts/")))
                                  ((eq system-type 'darwin)
                                   (let nil "~/Library/Fonts/")))
                                 (require 'nerd-icons nil t))
                                (progn
                                  (let
                                      ((temp-buffer
                                        (generate-new-buffer " *temp*" t)))
                                    (save-current-buffer
                                      (set-buffer temp-buffer)
                                      (unwind-protect
                                          (progn
                                            (let
                                                ((errors 0))
                                              (let*
                                                  ((output
                                                    (doom-call-process "fc-list" "" "file"))
                                                   (status
                                                    (if output
                                                        (car-safe
                                                         (prog1 output
                                                           (setq output
                                                                 (cdr output))))
                                                      (signal 'wrong-number-of-arguments
                                                              (list
                                                               '(status . output)
                                                               (length output))))))
                                                (if
                                                    (not
                                                     (= 0 status))
                                                    (doom-print
                                                     (doom-print--format
                                                      (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?")))
                                                  (insert
                                                   (cdr
                                                    (doom-call-process "fc-list" "" "file")))
                                                  (let
                                                      ((tail nerd-icons-font-names))
                                                    (while tail
                                                      (let
                                                          ((font
                                                            (car tail)))
                                                        (if
                                                            (save-excursion
                                                              (re-search-backward font nil t))
                                                            (doom-print
                                                             (doom-print--format
                                                              (doom-print--style 'green "Found font %s" font)))
                                                          (doom-print
                                                           (doom-print--format
                                                            (doom-print--class 'warn "%S font is not installed on your system")
                                                            font))
                                                          (setq errors
                                                                (1+ errors)))
                                                        (setq tail
                                                              (cdr tail)))))
                                                  (if
                                                      (> errors 0)
                                                      (progn
                                                        (progn
                                                          (let
                                                              ((doom-print-level
                                                                (or nil doom-print-level))
                                                               (doom-print-indent
                                                                (+
                                                                 (if t
                                                                     (or nil doom-print-indent-increment)
                                                                   0)
                                                                 doom-print-indent)))
                                                            (doom-print
                                                             (doom-print--format
                                                              (doom-print--class 'p "Some needed fonts are not properly installed on your system. To download and " "install them, run `M-x nerd-icons-install-fonts' from within Doom Emacs. " "However, on Windows this command will only download them; the fonts must " "be installed manually afterwards.")))))))))))
                                        (and
                                         (buffer-name temp-buffer)
                                         (kill-buffer temp-buffer))))))))))
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'start "Checking for stale elc files in your DOOMDIR...")))
                      (if
                          (file-directory-p doom-user-dir)
                          (progn
                            (progn
                              (let
                                  ((doom-print-level
                                    (or nil doom-print-level))
                                   (doom-print-indent
                                    (+
                                     (if t
                                         (or nil doom-print-indent-increment)
                                       0)
                                     doom-print-indent)))
                                (elc-check-dir doom-user-dir)))))
                      (if doom-modules
                          (progn
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'start "Checking your enabled modules...")))
                            (advice-add #'require :around #'doom-shut-up-a)
                            (let
                                ((tail
                                  (doom-module-list)))
                              (while tail
                                (let
                                    ((x54
                                      (car tail)))
                                  (progn
                                    (ignore
                                     (consp x54))
                                    (let*
                                        ((x55
                                          (car-safe x54))
                                         (x56
                                          (cdr-safe x54)))
                                      (let
                                          ((group x55)
                                           (name x56))
                                        (let
                                            ((doom-context doom-context))
                                          (let
                                              ((tail
                                                (ensure-list 'doctor)))
                                            (while tail
                                              (let
                                                  ((context
                                                    (car tail)))
                                                (doom-context-push context)
                                                (setq tail
                                                      (cdr tail)))))
                                          (let
                                              (doom-local-errors doom-local-warnings)
                                            (let
                                                (doom-doctor--errors doom-doctor--warnings)
                                              (condition-case ex
                                                  (let
                                                      ((doom-module-context
                                                        (doom-module-context
                                                         (cons group name))))
                                                    (if
                                                        (and
                                                         (not doom-inhibit-log)
                                                         (or
                                                          (not noninteractive)
                                                          (<= 2 doom-log-level)))
                                                        (progn
                                                          (doom--log 2 ":context:module: =%s" doom-module-context)))
                                                    (let
                                                        ((doctor-file
                                                          (doom-module-expand-path group name "doctor.el"))
                                                         (packages-file
                                                          (doom-module-expand-path group name doom-module-packages-file)))
                                                      (if packages-file
                                                          (progn
                                                            (let*
                                                                ((doom-output-indent 6)
                                                                 (--cl-var--
                                                                  (let
                                                                      ((doom-context doom-context))
                                                                    (let
                                                                        ((tail
                                                                          (ensure-list 'packages)))
                                                                      (while tail
                                                                        (let
                                                                            ((context
                                                                              (car tail)))
                                                                          (doom-context-push context)
                                                                          (setq tail
                                                                                (cdr tail)))))
                                                                    (let*
                                                                        (doom-packages doom-disabled-packages)
                                                                      (load packages-file 'noerror 'nomessage)
                                                                      (mapcar #'car doom-packages))))
                                                                 (name nil))
                                                              (while
                                                                  (consp --cl-var--)
                                                                (setq name
                                                                      (car --cl-var--))
                                                                (if
                                                                    (or
                                                                     (doom-package-get name :disable)
                                                                     (eval
                                                                      (doom-package-get name :ignore))
                                                                     (plist-member
                                                                      (doom-package-get name :recipe)
                                                                      :local-repo)
                                                                     (locate-library
                                                                      (symbol-name name))
                                                                     (doom-package-built-in-p name)
                                                                     (doom-package-installed-p name))
                                                                    (progn)
                                                                  (doom-print
                                                                   (doom-print--format
                                                                    (doom-print--class 'error "Missing emacs package: %S")
                                                                    name)))
                                                                (setq --cl-var--
                                                                      (cdr --cl-var--)))
                                                              nil)))
                                                      (if doctor-file
                                                          (progn
                                                            (let
                                                                ((inhibit-message t))
                                                              (load doctor-file 'noerror 'nomessage))))))
                                                ((debug file-missing)
                                                 (progn
                                                   (if inhibit-message nil
                                                     (doom-print
                                                      (doom-print--format
                                                       (doom-print--class 'error "%s"
                                                                          (error-message-string ex)))))
                                                   (setq doom-doctor--errors
                                                         (cons
                                                          (doom-print--format
                                                           (doom-print--class 'error "%s"
                                                                              (error-message-string ex)))
                                                          doom-doctor--errors))))
                                                ((debug error)
                                                 (progn
                                                   (if inhibit-message nil
                                                     (doom-print
                                                      (doom-print--format
                                                       (doom-print--class 'error "Syntax error: %s" ex))))
                                                   (setq doom-doctor--errors
                                                         (cons
                                                          (doom-print--format
                                                           (doom-print--class 'error "Syntax error: %s" ex))
                                                          doom-doctor--errors)))))
                                              (if
                                                  (or doom-doctor--errors doom-doctor--warnings)
                                                  (progn
                                                    (progn
                                                      (let
                                                          ((doom-print-level
                                                            (or nil doom-print-level))
                                                           (doom-print-indent
                                                            (+
                                                             (if t
                                                                 (or nil doom-print-indent-increment)
                                                               0)
                                                             doom-print-indent)))
                                                        (doom-print
                                                         (doom-print--format
                                                          (doom-print--class 'start
                                                                             (doom-print--style 'bold "%s %s"))
                                                          group name))
                                                        (doom-print
                                                         (doom-print--format "%s"
                                                                             (string-join
                                                                              (append doom-doctor--errors doom-doctor--warnings)
                                                                              "\n")))))
                                                    (progn
                                                      (setq doom-local-errors doom-doctor--errors)
                                                      (setq doom-local-warnings doom-doctor--warnings)))))
                                            (setq doom-doctor--errors
                                                  (append doom-doctor--errors doom-local-errors))
                                            (setq doom-doctor--warnings
                                                  (append doom-doctor--warnings doom-local-warnings)))))))
                                  (setq tail
                                        (cdr tail)))))))))
                ((debug error)
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                          (or
                                           (cdr-safe ex)
                                           (car ex))))))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                              (or
                                               (cdr-safe ex)
                                               (car ex))))
                          doom-doctor--warnings)))
                 (setq doom-modules nil)))
              (terpri)
              (let
                  ((tail
                    (list
                     (list doom-doctor--warnings "warning" 'yellow)
                     (list doom-doctor--errors "error" 'red))))
                (while tail
                  (let
                      ((msg
                        (car tail)))
                    (if
                        (car msg)
                        (progn
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'color
                                               (nth 2 msg)
                                               (if
                                                   (cdr
                                                    (car msg))
                                                   "There are %d %ss!" "There is %d %s!")
                                               (length
                                                (car msg))
                                               (nth 1 msg))))))
                    (setq tail
                          (cdr tail)))))
              (if
                  (or doom-doctor--errors doom-doctor--warnings)
                  nil
                (doom-print
                 (doom-print--format
                  (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))))
              (exit! :pager? "+G")))))
  (x16 . #s(doom-cli
            ("doom" "doctor")
            nil
            (("SUMMARY" . "Diagnoses common issues on your system.")
             ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
            nil nil nil nil
            (:benchmark nil :prefix
                        (doom)
                        :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
            (closure
                (t)
                (cli alist)
              (let nil
                (doom-print
                 (doom-print--format "The doctor will see you now...\n"))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking your Emacs version...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (cond
                     ((or
                       (> emacs-major-version 29)
                       (string-match-p ".\\([56]0\\|9[0-9]\\)$" emacs-version))
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))
                               doom-doctor--warnings)))
                      (if
                          (> emacs-major-version 29)
                          (progn
                            (let
                                ((doom-print-level
                                  (or nil doom-print-level))
                                 (doom-print-indent
                                  (+
                                   (if t
                                       (or nil doom-print-indent-increment)
                                     0)
                                   doom-print-indent)))
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'p "This is the bleeding edge of Emacs. As it is constantly changed, Doom will not " "(officially) support it. If you've found a stable commit, great! But be " "cautious about updating Emacs too eagerly!\n")))))
                        (progn
                          (let
                              ((doom-print-level
                                (or nil doom-print-level))
                               (doom-print-indent
                                (+
                                 (if t
                                     (or nil doom-print-indent-increment)
                                   0)
                                 doom-print-indent)))
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'p "A .50, .60, or .9X appended to the version string indicates that this is a version " "of Emacs in between stable releases. These are not well supported.\n"))))))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Because development builds are prone to random breakage, there will be a greater " "burden on you to investigate and deal with issues. Please make extra sure that " "your issue is reproducible in 29.1 before reporting them to Doom's issue tracker!\n" "\n" "If this doesn't phase you, read the \"Why does Doom not support Emacs HEAD\" QnA " "in Doom's FAQ. It offers some advice for debugging and surviving issues on the " "bleeding edge. Failing that, 29.1 is highly recommended and will always be " "Doom's best supported version of Emacs."))))))
                     ((= emacs-major-version 27)
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))
                               doom-doctor--warnings)))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Emacs 28.1 is better supported, faster, and more stable. Plus, Doom will drop " "27.x support sometime late-2023.")))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for Doom's prerequisites...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (if
                        (not
                         (executable-find "git"))
                        (progn
                          (if inhibit-message nil
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))))
                          (setq doom-doctor--errors
                                (cons
                                 (doom-print--format
                                  (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                                 doom-doctor--errors)))
                      (let
                          ((saved-match-data
                            (match-data)))
                        (unwind-protect
                            (progn
                              (let*
                                  ((version
                                    (cdr
                                     (doom-call-process "git" "version")))
                                   (version
                                    (and
                                     (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                                     (match-string 1 version))))
                                (if version
                                    (if
                                        (version< version "2.23")
                                        (progn
                                          (progn
                                            (if inhibit-message nil
                                              (doom-print
                                               (doom-print--format
                                                (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))))
                                            (setq doom-doctor--errors
                                                  (cons
                                                   (doom-print--format
                                                    (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                                   doom-doctor--errors)))))
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))))
                                    (setq doom-doctor--warnings
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                           doom-doctor--warnings))))))
                          (set-match-data saved-match-data t))))
                    (if
                        (executable-find "rg")
                        nil
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))))
                        (setq doom-doctor--errors
                              (cons
                               (doom-print--format
                                (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                               doom-doctor--errors))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for Emacs config conflicts...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (if
                        (or
                         (file-equal-p doom-emacs-dir "~/.emacs.d")
                         (file-equal-p doom-emacs-dir "~/.config/emacs"))
                        nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Doom is installed in a non-standard location")))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "The standard locations are ~/.config/emacs or ~/.emacs.d. Emacs will fail " "to load Doom if it is not explicitly told where to look for it. In Emacs 29+, " "this is possible with the --init-directory option:\n\n" "  $ emacs --init-directory '"
                                               (abbreviate-file-name doom-emacs-dir)
                                               "'\n\n" "However, Emacs 27-28 users have no choice but to move Doom to a standard " "location.\n\n" "Chemacs users may ignore this warning, however."))))))
                    (let
                        (found?)
                      (let
                          ((tail
                            '("~/_emacs" "~/.emacs" "~/.emacs.el" "~/.emacs.d" "~/.config/emacs")))
                        (while tail
                          (let
                              ((file
                                (car tail)))
                            (if
                                (and
                                 (file-exists-p file)
                                 (not
                                  (file-equal-p file doom-emacs-dir)))
                                (progn
                                  (setq found? t)
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'warn "Found another Emacs config: %s (%s)")
                                    file
                                    (if
                                        (file-directory-p file)
                                        "directory" "file")))))
                            (setq tail
                                  (cdr tail)))))
                      (if found?
                          (progn
                            (progn
                              (let
                                  ((doom-print-level
                                    (or nil doom-print-level))
                                   (doom-print-indent
                                    (+
                                     (if t
                                         (or nil doom-print-indent-increment)
                                       0)
                                     doom-print-indent)))
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'p "Having multiple Emacs configs may prevent Doom from loading properly. Emacs " "will load the first it finds and ignore the rest. If Doom isn't starting up " "correctly (e.g. you get a vanilla splash screen), make sure that only one of " "these exist.\n\n" "Chemacs users may ignore this warning."))))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for missing Emacs features...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (if
                        (functionp 'json-serialize)
                        nil
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Emacs was not built with native JSON support"))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Emacs was not built with native JSON support"))
                               doom-doctor--warnings)))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option."))))))
                    (if
                        (featurep 'native-compile)
                        nil
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Emacs was not built with native compilation support"))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Emacs was not built with native compilation support"))
                               doom-doctor--warnings)))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option."))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for private config conflicts...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (let*
                        ((xdg-dir
                          (concat
                           (or
                            (getenv "XDG_CONFIG_HOME")
                            "~/.config")
                           "/doom/"))
                         (doom-dir
                          (or
                           (getenv "DOOMDIR")
                           "~/.doom.d/"))
                         (dir
                          (if
                              (file-directory-p xdg-dir)
                              xdg-dir doom-dir)))
                      (if
                          (file-equal-p dir doom-emacs-dir)
                          (progn
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                                 (doom-print--class 'path dir))))
                            (progn
                              (let
                                  ((doom-print-level
                                    (or nil doom-print-level))
                                   (doom-print-indent
                                    (+
                                     (if t
                                         (or nil doom-print-indent-increment)
                                       0)
                                     doom-print-indent)))
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'p "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")))))))
                      (if
                          (and
                           (not
                            (file-equal-p xdg-dir doom-dir))
                           (file-directory-p xdg-dir)
                           (file-directory-p doom-dir))
                          (progn
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'warn "Detected two private configs, in %s and %s")
                              (abbreviate-file-name xdg-dir)
                              doom-dir))
                            (progn
                              (let
                                  ((doom-print-level
                                    (or nil doom-print-level))
                                   (doom-print-indent
                                    (+
                                     (if t
                                         (or nil doom-print-indent-increment)
                                       0)
                                     doom-print-indent)))
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'p "The second directory will be ignored, as it has lower precedence."))))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for common environmental issues...")))
                (if
                    (string-match-p "/fish$" shell-file-name)
                    (progn
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Detected Fish as your $SHELL")))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Fish (and possibly other non-POSIX shells) is known to inject garbage " "output into some of the child processes that Emacs spawns. Many Emacs " "packages/utilities will choke on this output, causing unpredictable issues. " "To get around this, either:\n\n" "  - Add the following to $DOOMDIR/config.el:\n\n" "    (setq shell-file-name (executable-find \"bash\"))\n\n" "  - Or change your default shell to a POSIX shell (like bash or zsh) " "    and explicitly configure your terminal apps to use the shell you " "    want.\n\n" "If you opt for option 1 and use one of Emacs' terminal emulators, you " "will also need to configure them to use Fish, e.g.\n\n" "  (setq-default vterm-shell (executable-find \"fish\"))\n\n" "  (setq-default explicit-shell-file-name (executable-find \"fish\"))\n")))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for stale elc files...")))
                (elc-check-dir doom-core-dir)
                (elc-check-dir doom-modules-dir)
                (elc-check-dir
                 (doom-path doom-local-dir "straight" straight-build-dir))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for problematic git global settings...")))
                (if
                    (executable-find "git")
                    (if
                        (= 0
                           (car
                            (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                        (progn
                          (progn
                            (if inhibit-message nil
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))))
                            (setq doom-doctor--warnings
                                  (cons
                                   (doom-print--format
                                    (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                                   doom-doctor--warnings)))
                          (progn
                            (let
                                ((doom-print-level
                                  (or nil doom-print-level))
                                 (doom-print-indent
                                  (+
                                   (if t
                                       (or nil doom-print-indent-increment)
                                     0)
                                   doom-print-indent)))
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'p "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")))))))
                  (progn
                    (if inhibit-message nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))))
                    (setq doom-doctor--errors
                          (cons
                           (doom-print--format
                            (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                           doom-doctor--errors))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking Doom Emacs...")))
                (condition-case ex
                    (progn
                      (let
                          ((doom-print-level
                            (or nil doom-print-level))
                           (doom-print-indent
                            (+
                             (if t
                                 (or nil doom-print-indent-increment)
                               0)
                             doom-print-indent)))
                        (require 'doom-start)
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'success "Initialized Doom Emacs %s")
                          doom-version))
                        (doom-print
                         (doom-print--format
                          (if
                              (hash-table-p doom-modules)
                              (doom-print--class 'success "Detected %d modules"
                                                 (hash-table-count doom-modules))
                            (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?"))))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'success "Detected %d packages")
                          (length doom-packages)))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'start "Checking Doom core for irregularities...")))
                        (progn
                          (let
                              ((doom-print-level
                                (or nil doom-print-level))
                               (doom-print-indent
                                (+
                                 (if t
                                     (or nil doom-print-indent-increment)
                                   0)
                                 doom-print-indent)))
                            (let
                                ((tail
                                  (list "savehist" "projectile.cache")))
                              (while tail
                                (let
                                    ((file
                                      (car tail)))
                                  (let*
                                      ((size
                                        (and t
                                             (condition-case nil
                                                 (progn
                                                   (doom-file-size file doom-cache-dir))
                                               (error nil)))))
                                    (if size
                                        (if
                                            (> size 1048576)
                                            (progn
                                              (progn
                                                (if inhibit-message nil
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                       (/ size 1024 1024.0)))))
                                                (setq doom-doctor--warnings
                                                      (cons
                                                       (doom-print--format
                                                        (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                           (/ size 1024 1024.0)))
                                                       doom-doctor--warnings)))
                                              (progn
                                                (let
                                                    ((doom-print-level
                                                      (or nil doom-print-level))
                                                     (doom-print-indent
                                                      (+
                                                       (if t
                                                           (or nil doom-print-indent-increment)
                                                         0)
                                                       doom-print-indent)))
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'p "Consider deleting it from your system (manually)")))))))
                                      nil))
                                  (setq tail
                                        (cdr tail)))))
                            (if
                                (condition-case nil
                                    (progn
                                      (executable-find doom-fd-executable))
                                  (error nil))
                                nil
                              (progn
                                (if inhibit-message nil
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))))
                                (setq doom-doctor--warnings
                                      (cons
                                       (doom-print--format
                                        (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                       doom-doctor--warnings))))
                            (require 'projectile)
                            (if
                                (projectile-project-root "~")
                                (progn
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'warn "Your $HOME is recognized as a project root"))))
                                    (setq doom-doctor--warnings
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                           doom-doctor--warnings)))
                                  (progn
                                    (let
                                        ((doom-print-level
                                          (or nil doom-print-level))
                                         (doom-print-indent
                                          (+
                                           (if t
                                               (or nil doom-print-indent-increment)
                                             0)
                                           doom-print-indent)))
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'p "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")))))))
                            (if
                                (and
                                 (file-equal-p doom-user-dir "~/.config/doom")
                                 (file-directory-p "~/.doom.d"))
                                (progn
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                                    (doom-print--class 'path doom-user-dir)))
                                  (progn
                                    (let
                                        ((doom-print-level
                                          (or nil doom-print-level))
                                         (doom-print-indent
                                          (+
                                           (if t
                                               (or nil doom-print-indent-increment)
                                             0)
                                           doom-print-indent)))
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'p "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")))))))
                            (if
                                (not
                                 (executable-find "fc-list"))
                                (progn
                                  (if inhibit-message nil
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))))
                                  (setq doom-doctor--warnings
                                        (cons
                                         (doom-print--format
                                          (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                         doom-doctor--warnings)))
                              (if
                                  (and
                                   (cond
                                    ((eq system-type 'gnu/linux)
                                     (let nil
                                       (concat
                                        (or
                                         (getenv "XDG_DATA_HOME")
                                         "~/.local/share")
                                        "/fonts/")))
                                    ((eq system-type 'darwin)
                                     (let nil "~/Library/Fonts/")))
                                   (require 'nerd-icons nil t))
                                  (progn
                                    (let
                                        ((temp-buffer
                                          (generate-new-buffer " *temp*" t)))
                                      (save-current-buffer
                                        (set-buffer temp-buffer)
                                        (unwind-protect
                                            (progn
                                              (let
                                                  ((errors 0))
                                                (let*
                                                    ((output
                                                      (doom-call-process "fc-list" "" "file"))
                                                     (status
                                                      (if output
                                                          (car-safe
                                                           (prog1 output
                                                             (setq output
                                                                   (cdr output))))
                                                        (signal 'wrong-number-of-arguments
                                                                (list
                                                                 '(status . output)
                                                                 (length output))))))
                                                  (if
                                                      (not
                                                       (= 0 status))
                                                      (doom-print
                                                       (doom-print--format
                                                        (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?")))
                                                    (insert
                                                     (cdr
                                                      (doom-call-process "fc-list" "" "file")))
                                                    (let
                                                        ((tail nerd-icons-font-names))
                                                      (while tail
                                                        (let
                                                            ((font
                                                              (car tail)))
                                                          (if
                                                              (save-excursion
                                                                (re-search-backward font nil t))
                                                              (doom-print
                                                               (doom-print--format
                                                                (doom-print--style 'green "Found font %s" font)))
                                                            (doom-print
                                                             (doom-print--format
                                                              (doom-print--class 'warn "%S font is not installed on your system")
                                                              font))
                                                            (setq errors
                                                                  (1+ errors)))
                                                          (setq tail
                                                                (cdr tail)))))
                                                    (if
                                                        (> errors 0)
                                                        (progn
                                                          (progn
                                                            (let
                                                                ((doom-print-level
                                                                  (or nil doom-print-level))
                                                                 (doom-print-indent
                                                                  (+
                                                                   (if t
                                                                       (or nil doom-print-indent-increment)
                                                                     0)
                                                                   doom-print-indent)))
                                                              (doom-print
                                                               (doom-print--format
                                                                (doom-print--class 'p "Some needed fonts are not properly installed on your system. To download and " "install them, run `M-x nerd-icons-install-fonts' from within Doom Emacs. " "However, on Windows this command will only download them; the fonts must " "be installed manually afterwards.")))))))))))
                                          (and
                                           (buffer-name temp-buffer)
                                           (kill-buffer temp-buffer))))))))))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'start "Checking for stale elc files in your DOOMDIR...")))
                        (if
                            (file-directory-p doom-user-dir)
                            (progn
                              (progn
                                (let
                                    ((doom-print-level
                                      (or nil doom-print-level))
                                     (doom-print-indent
                                      (+
                                       (if t
                                           (or nil doom-print-indent-increment)
                                         0)
                                       doom-print-indent)))
                                  (elc-check-dir doom-user-dir)))))
                        (if doom-modules
                            (progn
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'start "Checking your enabled modules...")))
                              (advice-add #'require :around #'doom-shut-up-a)
                              (let
                                  ((tail
                                    (doom-module-list)))
                                (while tail
                                  (let
                                      ((x54
                                        (car tail)))
                                    (progn
                                      (ignore
                                       (consp x54))
                                      (let*
                                          ((x55
                                            (car-safe x54))
                                           (x56
                                            (cdr-safe x54)))
                                        (let
                                            ((group x55)
                                             (name x56))
                                          (let
                                              ((doom-context doom-context))
                                            (let
                                                ((tail
                                                  (ensure-list 'doctor)))
                                              (while tail
                                                (let
                                                    ((context
                                                      (car tail)))
                                                  (doom-context-push context)
                                                  (setq tail
                                                        (cdr tail)))))
                                            (let
                                                (doom-local-errors doom-local-warnings)
                                              (let
                                                  (doom-doctor--errors doom-doctor--warnings)
                                                (condition-case ex
                                                    (let
                                                        ((doom-module-context
                                                          (doom-module-context
                                                           (cons group name))))
                                                      (if
                                                          (and
                                                           (not doom-inhibit-log)
                                                           (or
                                                            (not noninteractive)
                                                            (<= 2 doom-log-level)))
                                                          (progn
                                                            (doom--log 2 ":context:module: =%s" doom-module-context)))
                                                      (let
                                                          ((doctor-file
                                                            (doom-module-expand-path group name "doctor.el"))
                                                           (packages-file
                                                            (doom-module-expand-path group name doom-module-packages-file)))
                                                        (if packages-file
                                                            (progn
                                                              (let*
                                                                  ((doom-output-indent 6)
                                                                   (--cl-var--
                                                                    (let
                                                                        ((doom-context doom-context))
                                                                      (let
                                                                          ((tail
                                                                            (ensure-list 'packages)))
                                                                        (while tail
                                                                          (let
                                                                              ((context
                                                                                (car tail)))
                                                                            (doom-context-push context)
                                                                            (setq tail
                                                                                  (cdr tail)))))
                                                                      (let*
                                                                          (doom-packages doom-disabled-packages)
                                                                        (load packages-file 'noerror 'nomessage)
                                                                        (mapcar #'car doom-packages))))
                                                                   (name nil))
                                                                (while
                                                                    (consp --cl-var--)
                                                                  (setq name
                                                                        (car --cl-var--))
                                                                  (if
                                                                      (or
                                                                       (doom-package-get name :disable)
                                                                       (eval
                                                                        (doom-package-get name :ignore))
                                                                       (plist-member
                                                                        (doom-package-get name :recipe)
                                                                        :local-repo)
                                                                       (locate-library
                                                                        (symbol-name name))
                                                                       (doom-package-built-in-p name)
                                                                       (doom-package-installed-p name))
                                                                      (progn)
                                                                    (doom-print
                                                                     (doom-print--format
                                                                      (doom-print--class 'error "Missing emacs package: %S")
                                                                      name)))
                                                                  (setq --cl-var--
                                                                        (cdr --cl-var--)))
                                                                nil)))
                                                        (if doctor-file
                                                            (progn
                                                              (let
                                                                  ((inhibit-message t))
                                                                (load doctor-file 'noerror 'nomessage))))))
                                                  ((debug file-missing)
                                                   (progn
                                                     (if inhibit-message nil
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'error "%s"
                                                                            (error-message-string ex)))))
                                                     (setq doom-doctor--errors
                                                           (cons
                                                            (doom-print--format
                                                             (doom-print--class 'error "%s"
                                                                                (error-message-string ex)))
                                                            doom-doctor--errors))))
                                                  ((debug error)
                                                   (progn
                                                     (if inhibit-message nil
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'error "Syntax error: %s" ex))))
                                                     (setq doom-doctor--errors
                                                           (cons
                                                            (doom-print--format
                                                             (doom-print--class 'error "Syntax error: %s" ex))
                                                            doom-doctor--errors)))))
                                                (if
                                                    (or doom-doctor--errors doom-doctor--warnings)
                                                    (progn
                                                      (progn
                                                        (let
                                                            ((doom-print-level
                                                              (or nil doom-print-level))
                                                             (doom-print-indent
                                                              (+
                                                               (if t
                                                                   (or nil doom-print-indent-increment)
                                                                 0)
                                                               doom-print-indent)))
                                                          (doom-print
                                                           (doom-print--format
                                                            (doom-print--class 'start
                                                                               (doom-print--style 'bold "%s %s"))
                                                            group name))
                                                          (doom-print
                                                           (doom-print--format "%s"
                                                                               (string-join
                                                                                (append doom-doctor--errors doom-doctor--warnings)
                                                                                "\n")))))
                                                      (progn
                                                        (setq doom-local-errors doom-doctor--errors)
                                                        (setq doom-local-warnings doom-doctor--warnings)))))
                                              (setq doom-doctor--errors
                                                    (append doom-doctor--errors doom-local-errors))
                                              (setq doom-doctor--warnings
                                                    (append doom-doctor--warnings doom-local-warnings)))))))
                                    (setq tail
                                          (cdr tail)))))))))
                  ((debug error)
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                            (or
                                             (cdr-safe ex)
                                             (car ex))))))
                     (setq doom-doctor--warnings
                           (cons
                            (doom-print--format
                             (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                                (or
                                                 (cdr-safe ex)
                                                 (car ex))))
                            doom-doctor--warnings)))
                   (setq doom-modules nil)))
                (terpri)
                (let
                    ((tail
                      (list
                       (list doom-doctor--warnings "warning" 'yellow)
                       (list doom-doctor--errors "error" 'red))))
                  (while tail
                    (let
                        ((msg
                          (car tail)))
                      (if
                          (car msg)
                          (progn
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'color
                                                 (nth 2 msg)
                                                 (if
                                                     (cdr
                                                      (car msg))
                                                     "There are %d %ss!" "There is %d %s!")
                                                 (length
                                                  (car msg))
                                                 (nth 1 msg))))))
                      (setq tail
                            (cdr tail)))))
                (if
                    (or doom-doctor--errors doom-doctor--warnings)
                    nil
                  (doom-print
                   (doom-print--format
                    (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))))
                (exit! :pager? "+G")))))
  (x17)
  (cli . #s(doom-cli
            ("doom" "doctor")
            nil
            (("SUMMARY" . "Diagnoses common issues on your system.")
             ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
            nil nil nil nil
            (:benchmark nil :prefix
                        (doom)
                        :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
            (closure
                (t)
                (cli alist)
              (let nil
                (doom-print
                 (doom-print--format "The doctor will see you now...\n"))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking your Emacs version...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (cond
                     ((or
                       (> emacs-major-version 29)
                       (string-match-p ".\\([56]0\\|9[0-9]\\)$" emacs-version))
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))
                               doom-doctor--warnings)))
                      (if
                          (> emacs-major-version 29)
                          (progn
                            (let
                                ((doom-print-level
                                  (or nil doom-print-level))
                                 (doom-print-indent
                                  (+
                                   (if t
                                       (or nil doom-print-indent-increment)
                                     0)
                                   doom-print-indent)))
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'p "This is the bleeding edge of Emacs. As it is constantly changed, Doom will not " "(officially) support it. If you've found a stable commit, great! But be " "cautious about updating Emacs too eagerly!\n")))))
                        (progn
                          (let
                              ((doom-print-level
                                (or nil doom-print-level))
                               (doom-print-indent
                                (+
                                 (if t
                                     (or nil doom-print-indent-increment)
                                   0)
                                 doom-print-indent)))
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'p "A .50, .60, or .9X appended to the version string indicates that this is a version " "of Emacs in between stable releases. These are not well supported.\n"))))))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Because development builds are prone to random breakage, there will be a greater " "burden on you to investigate and deal with issues. Please make extra sure that " "your issue is reproducible in 29.1 before reporting them to Doom's issue tracker!\n" "\n" "If this doesn't phase you, read the \"Why does Doom not support Emacs HEAD\" QnA " "in Doom's FAQ. It offers some advice for debugging and surviving issues on the " "bleeding edge. Failing that, 29.1 is highly recommended and will always be " "Doom's best supported version of Emacs."))))))
                     ((= emacs-major-version 27)
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))
                               doom-doctor--warnings)))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Emacs 28.1 is better supported, faster, and more stable. Plus, Doom will drop " "27.x support sometime late-2023.")))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for Doom's prerequisites...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (if
                        (not
                         (executable-find "git"))
                        (progn
                          (if inhibit-message nil
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))))
                          (setq doom-doctor--errors
                                (cons
                                 (doom-print--format
                                  (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                                 doom-doctor--errors)))
                      (let
                          ((saved-match-data
                            (match-data)))
                        (unwind-protect
                            (progn
                              (let*
                                  ((version
                                    (cdr
                                     (doom-call-process "git" "version")))
                                   (version
                                    (and
                                     (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                                     (match-string 1 version))))
                                (if version
                                    (if
                                        (version< version "2.23")
                                        (progn
                                          (progn
                                            (if inhibit-message nil
                                              (doom-print
                                               (doom-print--format
                                                (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))))
                                            (setq doom-doctor--errors
                                                  (cons
                                                   (doom-print--format
                                                    (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                                   doom-doctor--errors)))))
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))))
                                    (setq doom-doctor--warnings
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                           doom-doctor--warnings))))))
                          (set-match-data saved-match-data t))))
                    (if
                        (executable-find "rg")
                        nil
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))))
                        (setq doom-doctor--errors
                              (cons
                               (doom-print--format
                                (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                               doom-doctor--errors))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for Emacs config conflicts...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (if
                        (or
                         (file-equal-p doom-emacs-dir "~/.emacs.d")
                         (file-equal-p doom-emacs-dir "~/.config/emacs"))
                        nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Doom is installed in a non-standard location")))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "The standard locations are ~/.config/emacs or ~/.emacs.d. Emacs will fail " "to load Doom if it is not explicitly told where to look for it. In Emacs 29+, " "this is possible with the --init-directory option:\n\n" "  $ emacs --init-directory '"
                                               (abbreviate-file-name doom-emacs-dir)
                                               "'\n\n" "However, Emacs 27-28 users have no choice but to move Doom to a standard " "location.\n\n" "Chemacs users may ignore this warning, however."))))))
                    (let
                        (found?)
                      (let
                          ((tail
                            '("~/_emacs" "~/.emacs" "~/.emacs.el" "~/.emacs.d" "~/.config/emacs")))
                        (while tail
                          (let
                              ((file
                                (car tail)))
                            (if
                                (and
                                 (file-exists-p file)
                                 (not
                                  (file-equal-p file doom-emacs-dir)))
                                (progn
                                  (setq found? t)
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'warn "Found another Emacs config: %s (%s)")
                                    file
                                    (if
                                        (file-directory-p file)
                                        "directory" "file")))))
                            (setq tail
                                  (cdr tail)))))
                      (if found?
                          (progn
                            (progn
                              (let
                                  ((doom-print-level
                                    (or nil doom-print-level))
                                   (doom-print-indent
                                    (+
                                     (if t
                                         (or nil doom-print-indent-increment)
                                       0)
                                     doom-print-indent)))
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'p "Having multiple Emacs configs may prevent Doom from loading properly. Emacs " "will load the first it finds and ignore the rest. If Doom isn't starting up " "correctly (e.g. you get a vanilla splash screen), make sure that only one of " "these exist.\n\n" "Chemacs users may ignore this warning."))))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for missing Emacs features...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (if
                        (functionp 'json-serialize)
                        nil
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Emacs was not built with native JSON support"))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Emacs was not built with native JSON support"))
                               doom-doctor--warnings)))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option."))))))
                    (if
                        (featurep 'native-compile)
                        nil
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Emacs was not built with native compilation support"))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Emacs was not built with native compilation support"))
                               doom-doctor--warnings)))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option."))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for private config conflicts...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (let*
                        ((xdg-dir
                          (concat
                           (or
                            (getenv "XDG_CONFIG_HOME")
                            "~/.config")
                           "/doom/"))
                         (doom-dir
                          (or
                           (getenv "DOOMDIR")
                           "~/.doom.d/"))
                         (dir
                          (if
                              (file-directory-p xdg-dir)
                              xdg-dir doom-dir)))
                      (if
                          (file-equal-p dir doom-emacs-dir)
                          (progn
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                                 (doom-print--class 'path dir))))
                            (progn
                              (let
                                  ((doom-print-level
                                    (or nil doom-print-level))
                                   (doom-print-indent
                                    (+
                                     (if t
                                         (or nil doom-print-indent-increment)
                                       0)
                                     doom-print-indent)))
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'p "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")))))))
                      (if
                          (and
                           (not
                            (file-equal-p xdg-dir doom-dir))
                           (file-directory-p xdg-dir)
                           (file-directory-p doom-dir))
                          (progn
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'warn "Detected two private configs, in %s and %s")
                              (abbreviate-file-name xdg-dir)
                              doom-dir))
                            (progn
                              (let
                                  ((doom-print-level
                                    (or nil doom-print-level))
                                   (doom-print-indent
                                    (+
                                     (if t
                                         (or nil doom-print-indent-increment)
                                       0)
                                     doom-print-indent)))
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'p "The second directory will be ignored, as it has lower precedence."))))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for common environmental issues...")))
                (if
                    (string-match-p "/fish$" shell-file-name)
                    (progn
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Detected Fish as your $SHELL")))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Fish (and possibly other non-POSIX shells) is known to inject garbage " "output into some of the child processes that Emacs spawns. Many Emacs " "packages/utilities will choke on this output, causing unpredictable issues. " "To get around this, either:\n\n" "  - Add the following to $DOOMDIR/config.el:\n\n" "    (setq shell-file-name (executable-find \"bash\"))\n\n" "  - Or change your default shell to a POSIX shell (like bash or zsh) " "    and explicitly configure your terminal apps to use the shell you " "    want.\n\n" "If you opt for option 1 and use one of Emacs' terminal emulators, you " "will also need to configure them to use Fish, e.g.\n\n" "  (setq-default vterm-shell (executable-find \"fish\"))\n\n" "  (setq-default explicit-shell-file-name (executable-find \"fish\"))\n")))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for stale elc files...")))
                (elc-check-dir doom-core-dir)
                (elc-check-dir doom-modules-dir)
                (elc-check-dir
                 (doom-path doom-local-dir "straight" straight-build-dir))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for problematic git global settings...")))
                (if
                    (executable-find "git")
                    (if
                        (= 0
                           (car
                            (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                        (progn
                          (progn
                            (if inhibit-message nil
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))))
                            (setq doom-doctor--warnings
                                  (cons
                                   (doom-print--format
                                    (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                                   doom-doctor--warnings)))
                          (progn
                            (let
                                ((doom-print-level
                                  (or nil doom-print-level))
                                 (doom-print-indent
                                  (+
                                   (if t
                                       (or nil doom-print-indent-increment)
                                     0)
                                   doom-print-indent)))
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'p "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")))))))
                  (progn
                    (if inhibit-message nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))))
                    (setq doom-doctor--errors
                          (cons
                           (doom-print--format
                            (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                           doom-doctor--errors))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking Doom Emacs...")))
                (condition-case ex
                    (progn
                      (let
                          ((doom-print-level
                            (or nil doom-print-level))
                           (doom-print-indent
                            (+
                             (if t
                                 (or nil doom-print-indent-increment)
                               0)
                             doom-print-indent)))
                        (require 'doom-start)
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'success "Initialized Doom Emacs %s")
                          doom-version))
                        (doom-print
                         (doom-print--format
                          (if
                              (hash-table-p doom-modules)
                              (doom-print--class 'success "Detected %d modules"
                                                 (hash-table-count doom-modules))
                            (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?"))))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'success "Detected %d packages")
                          (length doom-packages)))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'start "Checking Doom core for irregularities...")))
                        (progn
                          (let
                              ((doom-print-level
                                (or nil doom-print-level))
                               (doom-print-indent
                                (+
                                 (if t
                                     (or nil doom-print-indent-increment)
                                   0)
                                 doom-print-indent)))
                            (let
                                ((tail
                                  (list "savehist" "projectile.cache")))
                              (while tail
                                (let
                                    ((file
                                      (car tail)))
                                  (let*
                                      ((size
                                        (and t
                                             (condition-case nil
                                                 (progn
                                                   (doom-file-size file doom-cache-dir))
                                               (error nil)))))
                                    (if size
                                        (if
                                            (> size 1048576)
                                            (progn
                                              (progn
                                                (if inhibit-message nil
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                       (/ size 1024 1024.0)))))
                                                (setq doom-doctor--warnings
                                                      (cons
                                                       (doom-print--format
                                                        (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                           (/ size 1024 1024.0)))
                                                       doom-doctor--warnings)))
                                              (progn
                                                (let
                                                    ((doom-print-level
                                                      (or nil doom-print-level))
                                                     (doom-print-indent
                                                      (+
                                                       (if t
                                                           (or nil doom-print-indent-increment)
                                                         0)
                                                       doom-print-indent)))
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'p "Consider deleting it from your system (manually)")))))))
                                      nil))
                                  (setq tail
                                        (cdr tail)))))
                            (if
                                (condition-case nil
                                    (progn
                                      (executable-find doom-fd-executable))
                                  (error nil))
                                nil
                              (progn
                                (if inhibit-message nil
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))))
                                (setq doom-doctor--warnings
                                      (cons
                                       (doom-print--format
                                        (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                       doom-doctor--warnings))))
                            (require 'projectile)
                            (if
                                (projectile-project-root "~")
                                (progn
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'warn "Your $HOME is recognized as a project root"))))
                                    (setq doom-doctor--warnings
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                           doom-doctor--warnings)))
                                  (progn
                                    (let
                                        ((doom-print-level
                                          (or nil doom-print-level))
                                         (doom-print-indent
                                          (+
                                           (if t
                                               (or nil doom-print-indent-increment)
                                             0)
                                           doom-print-indent)))
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'p "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")))))))
                            (if
                                (and
                                 (file-equal-p doom-user-dir "~/.config/doom")
                                 (file-directory-p "~/.doom.d"))
                                (progn
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                                    (doom-print--class 'path doom-user-dir)))
                                  (progn
                                    (let
                                        ((doom-print-level
                                          (or nil doom-print-level))
                                         (doom-print-indent
                                          (+
                                           (if t
                                               (or nil doom-print-indent-increment)
                                             0)
                                           doom-print-indent)))
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'p "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")))))))
                            (if
                                (not
                                 (executable-find "fc-list"))
                                (progn
                                  (if inhibit-message nil
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))))
                                  (setq doom-doctor--warnings
                                        (cons
                                         (doom-print--format
                                          (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                         doom-doctor--warnings)))
                              (if
                                  (and
                                   (cond
                                    ((eq system-type 'gnu/linux)
                                     (let nil
                                       (concat
                                        (or
                                         (getenv "XDG_DATA_HOME")
                                         "~/.local/share")
                                        "/fonts/")))
                                    ((eq system-type 'darwin)
                                     (let nil "~/Library/Fonts/")))
                                   (require 'nerd-icons nil t))
                                  (progn
                                    (let
                                        ((temp-buffer
                                          (generate-new-buffer " *temp*" t)))
                                      (save-current-buffer
                                        (set-buffer temp-buffer)
                                        (unwind-protect
                                            (progn
                                              (let
                                                  ((errors 0))
                                                (let*
                                                    ((output
                                                      (doom-call-process "fc-list" "" "file"))
                                                     (status
                                                      (if output
                                                          (car-safe
                                                           (prog1 output
                                                             (setq output
                                                                   (cdr output))))
                                                        (signal 'wrong-number-of-arguments
                                                                (list
                                                                 '(status . output)
                                                                 (length output))))))
                                                  (if
                                                      (not
                                                       (= 0 status))
                                                      (doom-print
                                                       (doom-print--format
                                                        (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?")))
                                                    (insert
                                                     (cdr
                                                      (doom-call-process "fc-list" "" "file")))
                                                    (let
                                                        ((tail nerd-icons-font-names))
                                                      (while tail
                                                        (let
                                                            ((font
                                                              (car tail)))
                                                          (if
                                                              (save-excursion
                                                                (re-search-backward font nil t))
                                                              (doom-print
                                                               (doom-print--format
                                                                (doom-print--style 'green "Found font %s" font)))
                                                            (doom-print
                                                             (doom-print--format
                                                              (doom-print--class 'warn "%S font is not installed on your system")
                                                              font))
                                                            (setq errors
                                                                  (1+ errors)))
                                                          (setq tail
                                                                (cdr tail)))))
                                                    (if
                                                        (> errors 0)
                                                        (progn
                                                          (progn
                                                            (let
                                                                ((doom-print-level
                                                                  (or nil doom-print-level))
                                                                 (doom-print-indent
                                                                  (+
                                                                   (if t
                                                                       (or nil doom-print-indent-increment)
                                                                     0)
                                                                   doom-print-indent)))
                                                              (doom-print
                                                               (doom-print--format
                                                                (doom-print--class 'p "Some needed fonts are not properly installed on your system. To download and " "install them, run `M-x nerd-icons-install-fonts' from within Doom Emacs. " "However, on Windows this command will only download them; the fonts must " "be installed manually afterwards.")))))))))))
                                          (and
                                           (buffer-name temp-buffer)
                                           (kill-buffer temp-buffer))))))))))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'start "Checking for stale elc files in your DOOMDIR...")))
                        (if
                            (file-directory-p doom-user-dir)
                            (progn
                              (progn
                                (let
                                    ((doom-print-level
                                      (or nil doom-print-level))
                                     (doom-print-indent
                                      (+
                                       (if t
                                           (or nil doom-print-indent-increment)
                                         0)
                                       doom-print-indent)))
                                  (elc-check-dir doom-user-dir)))))
                        (if doom-modules
                            (progn
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'start "Checking your enabled modules...")))
                              (advice-add #'require :around #'doom-shut-up-a)
                              (let
                                  ((tail
                                    (doom-module-list)))
                                (while tail
                                  (let
                                      ((x54
                                        (car tail)))
                                    (progn
                                      (ignore
                                       (consp x54))
                                      (let*
                                          ((x55
                                            (car-safe x54))
                                           (x56
                                            (cdr-safe x54)))
                                        (let
                                            ((group x55)
                                             (name x56))
                                          (let
                                              ((doom-context doom-context))
                                            (let
                                                ((tail
                                                  (ensure-list 'doctor)))
                                              (while tail
                                                (let
                                                    ((context
                                                      (car tail)))
                                                  (doom-context-push context)
                                                  (setq tail
                                                        (cdr tail)))))
                                            (let
                                                (doom-local-errors doom-local-warnings)
                                              (let
                                                  (doom-doctor--errors doom-doctor--warnings)
                                                (condition-case ex
                                                    (let
                                                        ((doom-module-context
                                                          (doom-module-context
                                                           (cons group name))))
                                                      (if
                                                          (and
                                                           (not doom-inhibit-log)
                                                           (or
                                                            (not noninteractive)
                                                            (<= 2 doom-log-level)))
                                                          (progn
                                                            (doom--log 2 ":context:module: =%s" doom-module-context)))
                                                      (let
                                                          ((doctor-file
                                                            (doom-module-expand-path group name "doctor.el"))
                                                           (packages-file
                                                            (doom-module-expand-path group name doom-module-packages-file)))
                                                        (if packages-file
                                                            (progn
                                                              (let*
                                                                  ((doom-output-indent 6)
                                                                   (--cl-var--
                                                                    (let
                                                                        ((doom-context doom-context))
                                                                      (let
                                                                          ((tail
                                                                            (ensure-list 'packages)))
                                                                        (while tail
                                                                          (let
                                                                              ((context
                                                                                (car tail)))
                                                                            (doom-context-push context)
                                                                            (setq tail
                                                                                  (cdr tail)))))
                                                                      (let*
                                                                          (doom-packages doom-disabled-packages)
                                                                        (load packages-file 'noerror 'nomessage)
                                                                        (mapcar #'car doom-packages))))
                                                                   (name nil))
                                                                (while
                                                                    (consp --cl-var--)
                                                                  (setq name
                                                                        (car --cl-var--))
                                                                  (if
                                                                      (or
                                                                       (doom-package-get name :disable)
                                                                       (eval
                                                                        (doom-package-get name :ignore))
                                                                       (plist-member
                                                                        (doom-package-get name :recipe)
                                                                        :local-repo)
                                                                       (locate-library
                                                                        (symbol-name name))
                                                                       (doom-package-built-in-p name)
                                                                       (doom-package-installed-p name))
                                                                      (progn)
                                                                    (doom-print
                                                                     (doom-print--format
                                                                      (doom-print--class 'error "Missing emacs package: %S")
                                                                      name)))
                                                                  (setq --cl-var--
                                                                        (cdr --cl-var--)))
                                                                nil)))
                                                        (if doctor-file
                                                            (progn
                                                              (let
                                                                  ((inhibit-message t))
                                                                (load doctor-file 'noerror 'nomessage))))))
                                                  ((debug file-missing)
                                                   (progn
                                                     (if inhibit-message nil
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'error "%s"
                                                                            (error-message-string ex)))))
                                                     (setq doom-doctor--errors
                                                           (cons
                                                            (doom-print--format
                                                             (doom-print--class 'error "%s"
                                                                                (error-message-string ex)))
                                                            doom-doctor--errors))))
                                                  ((debug error)
                                                   (progn
                                                     (if inhibit-message nil
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'error "Syntax error: %s" ex))))
                                                     (setq doom-doctor--errors
                                                           (cons
                                                            (doom-print--format
                                                             (doom-print--class 'error "Syntax error: %s" ex))
                                                            doom-doctor--errors)))))
                                                (if
                                                    (or doom-doctor--errors doom-doctor--warnings)
                                                    (progn
                                                      (progn
                                                        (let
                                                            ((doom-print-level
                                                              (or nil doom-print-level))
                                                             (doom-print-indent
                                                              (+
                                                               (if t
                                                                   (or nil doom-print-indent-increment)
                                                                 0)
                                                               doom-print-indent)))
                                                          (doom-print
                                                           (doom-print--format
                                                            (doom-print--class 'start
                                                                               (doom-print--style 'bold "%s %s"))
                                                            group name))
                                                          (doom-print
                                                           (doom-print--format "%s"
                                                                               (string-join
                                                                                (append doom-doctor--errors doom-doctor--warnings)
                                                                                "\n")))))
                                                      (progn
                                                        (setq doom-local-errors doom-doctor--errors)
                                                        (setq doom-local-warnings doom-doctor--warnings)))))
                                              (setq doom-doctor--errors
                                                    (append doom-doctor--errors doom-local-errors))
                                              (setq doom-doctor--warnings
                                                    (append doom-doctor--warnings doom-local-warnings)))))))
                                    (setq tail
                                          (cdr tail)))))))))
                  ((debug error)
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                            (or
                                             (cdr-safe ex)
                                             (car ex))))))
                     (setq doom-doctor--warnings
                           (cons
                            (doom-print--format
                             (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                                (or
                                                 (cdr-safe ex)
                                                 (car ex))))
                            doom-doctor--warnings)))
                   (setq doom-modules nil)))
                (terpri)
                (let
                    ((tail
                      (list
                       (list doom-doctor--warnings "warning" 'yellow)
                       (list doom-doctor--errors "error" 'red))))
                  (while tail
                    (let
                        ((msg
                          (car tail)))
                      (if
                          (car msg)
                          (progn
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'color
                                                 (nth 2 msg)
                                                 (if
                                                     (cdr
                                                      (car msg))
                                                     "There are %d %ss!" "There is %d %s!")
                                                 (length
                                                  (car msg))
                                                 (nth 1 msg))))))
                      (setq tail
                            (cdr tail)))))
                (if
                    (or doom-doctor--errors doom-doctor--warnings)
                    nil
                  (doom-print
                   (doom-print--format
                    (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))))
                (exit! :pager? "+G")))))
  (bindings)))

;;;; 36
((let*
     ((x16
       (car-safe x15))
      (x17
       (cdr-safe x15)))
   (let
       ((cli x16)
        (bindings x17))
     (doom-cli-execute cli bindings)))
 ((context . #s(doom-cli-context
                (26384 50378 735038 513000)
                65238 0
                (88 . 27)
                nil nil "doom" nil nil
                ("doom" "doctor")
                nil
                ("doctor")
                (("--eval")
                 ("-E")
                 ("--strict-load")
                 ("--load")
                 ("-L")
                 ("--color")
                 ("--benchmark")
                 ("--profile")
                 ("--pager")
                 ("--emacsdir")
                 ("--doomdir")
                 ("--verbose")
                 ("-v")
                 ("--debug")
                 ("-D")
                 ("--force")
                 ("-!"))
                ((t)
                 (("doom" "doctor"))
                 (("doom")
                  "doctor"))
                #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (command "doom" "doctor")
  (cli . #s(doom-cli
            ("doom" "doctor")
            nil
            (("SUMMARY" . "Diagnoses common issues on your system.")
             ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
            nil nil nil nil
            (:benchmark nil :prefix
                        (doom)
                        :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
            (closure
                (t)
                (cli alist)
              (let nil
                (doom-print
                 (doom-print--format "The doctor will see you now...\n"))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking your Emacs version...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (cond
                     ((or
                       (> emacs-major-version 29)
                       (string-match-p ".\\([56]0\\|9[0-9]\\)$" emacs-version))
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))
                               doom-doctor--warnings)))
                      (if
                          (> emacs-major-version 29)
                          (progn
                            (let
                                ((doom-print-level
                                  (or nil doom-print-level))
                                 (doom-print-indent
                                  (+
                                   (if t
                                       (or nil doom-print-indent-increment)
                                     0)
                                   doom-print-indent)))
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'p "This is the bleeding edge of Emacs. As it is constantly changed, Doom will not " "(officially) support it. If you've found a stable commit, great! But be " "cautious about updating Emacs too eagerly!\n")))))
                        (progn
                          (let
                              ((doom-print-level
                                (or nil doom-print-level))
                               (doom-print-indent
                                (+
                                 (if t
                                     (or nil doom-print-indent-increment)
                                   0)
                                 doom-print-indent)))
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'p "A .50, .60, or .9X appended to the version string indicates that this is a version " "of Emacs in between stable releases. These are not well supported.\n"))))))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Because development builds are prone to random breakage, there will be a greater " "burden on you to investigate and deal with issues. Please make extra sure that " "your issue is reproducible in 29.1 before reporting them to Doom's issue tracker!\n" "\n" "If this doesn't phase you, read the \"Why does Doom not support Emacs HEAD\" QnA " "in Doom's FAQ. It offers some advice for debugging and surviving issues on the " "bleeding edge. Failing that, 29.1 is highly recommended and will always be " "Doom's best supported version of Emacs."))))))
                     ((= emacs-major-version 27)
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))
                               doom-doctor--warnings)))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Emacs 28.1 is better supported, faster, and more stable. Plus, Doom will drop " "27.x support sometime late-2023.")))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for Doom's prerequisites...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (if
                        (not
                         (executable-find "git"))
                        (progn
                          (if inhibit-message nil
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))))
                          (setq doom-doctor--errors
                                (cons
                                 (doom-print--format
                                  (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                                 doom-doctor--errors)))
                      (let
                          ((saved-match-data
                            (match-data)))
                        (unwind-protect
                            (progn
                              (let*
                                  ((version
                                    (cdr
                                     (doom-call-process "git" "version")))
                                   (version
                                    (and
                                     (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                                     (match-string 1 version))))
                                (if version
                                    (if
                                        (version< version "2.23")
                                        (progn
                                          (progn
                                            (if inhibit-message nil
                                              (doom-print
                                               (doom-print--format
                                                (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))))
                                            (setq doom-doctor--errors
                                                  (cons
                                                   (doom-print--format
                                                    (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                                   doom-doctor--errors)))))
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))))
                                    (setq doom-doctor--warnings
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                           doom-doctor--warnings))))))
                          (set-match-data saved-match-data t))))
                    (if
                        (executable-find "rg")
                        nil
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))))
                        (setq doom-doctor--errors
                              (cons
                               (doom-print--format
                                (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                               doom-doctor--errors))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for Emacs config conflicts...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (if
                        (or
                         (file-equal-p doom-emacs-dir "~/.emacs.d")
                         (file-equal-p doom-emacs-dir "~/.config/emacs"))
                        nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Doom is installed in a non-standard location")))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "The standard locations are ~/.config/emacs or ~/.emacs.d. Emacs will fail " "to load Doom if it is not explicitly told where to look for it. In Emacs 29+, " "this is possible with the --init-directory option:\n\n" "  $ emacs --init-directory '"
                                               (abbreviate-file-name doom-emacs-dir)
                                               "'\n\n" "However, Emacs 27-28 users have no choice but to move Doom to a standard " "location.\n\n" "Chemacs users may ignore this warning, however."))))))
                    (let
                        (found?)
                      (let
                          ((tail
                            '("~/_emacs" "~/.emacs" "~/.emacs.el" "~/.emacs.d" "~/.config/emacs")))
                        (while tail
                          (let
                              ((file
                                (car tail)))
                            (if
                                (and
                                 (file-exists-p file)
                                 (not
                                  (file-equal-p file doom-emacs-dir)))
                                (progn
                                  (setq found? t)
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'warn "Found another Emacs config: %s (%s)")
                                    file
                                    (if
                                        (file-directory-p file)
                                        "directory" "file")))))
                            (setq tail
                                  (cdr tail)))))
                      (if found?
                          (progn
                            (progn
                              (let
                                  ((doom-print-level
                                    (or nil doom-print-level))
                                   (doom-print-indent
                                    (+
                                     (if t
                                         (or nil doom-print-indent-increment)
                                       0)
                                     doom-print-indent)))
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'p "Having multiple Emacs configs may prevent Doom from loading properly. Emacs " "will load the first it finds and ignore the rest. If Doom isn't starting up " "correctly (e.g. you get a vanilla splash screen), make sure that only one of " "these exist.\n\n" "Chemacs users may ignore this warning."))))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for missing Emacs features...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (if
                        (functionp 'json-serialize)
                        nil
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Emacs was not built with native JSON support"))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Emacs was not built with native JSON support"))
                               doom-doctor--warnings)))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option."))))))
                    (if
                        (featurep 'native-compile)
                        nil
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Emacs was not built with native compilation support"))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Emacs was not built with native compilation support"))
                               doom-doctor--warnings)))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option."))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for private config conflicts...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (let*
                        ((xdg-dir
                          (concat
                           (or
                            (getenv "XDG_CONFIG_HOME")
                            "~/.config")
                           "/doom/"))
                         (doom-dir
                          (or
                           (getenv "DOOMDIR")
                           "~/.doom.d/"))
                         (dir
                          (if
                              (file-directory-p xdg-dir)
                              xdg-dir doom-dir)))
                      (if
                          (file-equal-p dir doom-emacs-dir)
                          (progn
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                                 (doom-print--class 'path dir))))
                            (progn
                              (let
                                  ((doom-print-level
                                    (or nil doom-print-level))
                                   (doom-print-indent
                                    (+
                                     (if t
                                         (or nil doom-print-indent-increment)
                                       0)
                                     doom-print-indent)))
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'p "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")))))))
                      (if
                          (and
                           (not
                            (file-equal-p xdg-dir doom-dir))
                           (file-directory-p xdg-dir)
                           (file-directory-p doom-dir))
                          (progn
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'warn "Detected two private configs, in %s and %s")
                              (abbreviate-file-name xdg-dir)
                              doom-dir))
                            (progn
                              (let
                                  ((doom-print-level
                                    (or nil doom-print-level))
                                   (doom-print-indent
                                    (+
                                     (if t
                                         (or nil doom-print-indent-increment)
                                       0)
                                     doom-print-indent)))
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'p "The second directory will be ignored, as it has lower precedence."))))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for common environmental issues...")))
                (if
                    (string-match-p "/fish$" shell-file-name)
                    (progn
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Detected Fish as your $SHELL")))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Fish (and possibly other non-POSIX shells) is known to inject garbage " "output into some of the child processes that Emacs spawns. Many Emacs " "packages/utilities will choke on this output, causing unpredictable issues. " "To get around this, either:\n\n" "  - Add the following to $DOOMDIR/config.el:\n\n" "    (setq shell-file-name (executable-find \"bash\"))\n\n" "  - Or change your default shell to a POSIX shell (like bash or zsh) " "    and explicitly configure your terminal apps to use the shell you " "    want.\n\n" "If you opt for option 1 and use one of Emacs' terminal emulators, you " "will also need to configure them to use Fish, e.g.\n\n" "  (setq-default vterm-shell (executable-find \"fish\"))\n\n" "  (setq-default explicit-shell-file-name (executable-find \"fish\"))\n")))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for stale elc files...")))
                (elc-check-dir doom-core-dir)
                (elc-check-dir doom-modules-dir)
                (elc-check-dir
                 (doom-path doom-local-dir "straight" straight-build-dir))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for problematic git global settings...")))
                (if
                    (executable-find "git")
                    (if
                        (= 0
                           (car
                            (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                        (progn
                          (progn
                            (if inhibit-message nil
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))))
                            (setq doom-doctor--warnings
                                  (cons
                                   (doom-print--format
                                    (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                                   doom-doctor--warnings)))
                          (progn
                            (let
                                ((doom-print-level
                                  (or nil doom-print-level))
                                 (doom-print-indent
                                  (+
                                   (if t
                                       (or nil doom-print-indent-increment)
                                     0)
                                   doom-print-indent)))
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'p "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")))))))
                  (progn
                    (if inhibit-message nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))))
                    (setq doom-doctor--errors
                          (cons
                           (doom-print--format
                            (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                           doom-doctor--errors))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking Doom Emacs...")))
                (condition-case ex
                    (progn
                      (let
                          ((doom-print-level
                            (or nil doom-print-level))
                           (doom-print-indent
                            (+
                             (if t
                                 (or nil doom-print-indent-increment)
                               0)
                             doom-print-indent)))
                        (require 'doom-start)
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'success "Initialized Doom Emacs %s")
                          doom-version))
                        (doom-print
                         (doom-print--format
                          (if
                              (hash-table-p doom-modules)
                              (doom-print--class 'success "Detected %d modules"
                                                 (hash-table-count doom-modules))
                            (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?"))))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'success "Detected %d packages")
                          (length doom-packages)))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'start "Checking Doom core for irregularities...")))
                        (progn
                          (let
                              ((doom-print-level
                                (or nil doom-print-level))
                               (doom-print-indent
                                (+
                                 (if t
                                     (or nil doom-print-indent-increment)
                                   0)
                                 doom-print-indent)))
                            (let
                                ((tail
                                  (list "savehist" "projectile.cache")))
                              (while tail
                                (let
                                    ((file
                                      (car tail)))
                                  (let*
                                      ((size
                                        (and t
                                             (condition-case nil
                                                 (progn
                                                   (doom-file-size file doom-cache-dir))
                                               (error nil)))))
                                    (if size
                                        (if
                                            (> size 1048576)
                                            (progn
                                              (progn
                                                (if inhibit-message nil
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                       (/ size 1024 1024.0)))))
                                                (setq doom-doctor--warnings
                                                      (cons
                                                       (doom-print--format
                                                        (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                           (/ size 1024 1024.0)))
                                                       doom-doctor--warnings)))
                                              (progn
                                                (let
                                                    ((doom-print-level
                                                      (or nil doom-print-level))
                                                     (doom-print-indent
                                                      (+
                                                       (if t
                                                           (or nil doom-print-indent-increment)
                                                         0)
                                                       doom-print-indent)))
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'p "Consider deleting it from your system (manually)")))))))
                                      nil))
                                  (setq tail
                                        (cdr tail)))))
                            (if
                                (condition-case nil
                                    (progn
                                      (executable-find doom-fd-executable))
                                  (error nil))
                                nil
                              (progn
                                (if inhibit-message nil
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))))
                                (setq doom-doctor--warnings
                                      (cons
                                       (doom-print--format
                                        (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                       doom-doctor--warnings))))
                            (require 'projectile)
                            (if
                                (projectile-project-root "~")
                                (progn
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'warn "Your $HOME is recognized as a project root"))))
                                    (setq doom-doctor--warnings
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                           doom-doctor--warnings)))
                                  (progn
                                    (let
                                        ((doom-print-level
                                          (or nil doom-print-level))
                                         (doom-print-indent
                                          (+
                                           (if t
                                               (or nil doom-print-indent-increment)
                                             0)
                                           doom-print-indent)))
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'p "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")))))))
                            (if
                                (and
                                 (file-equal-p doom-user-dir "~/.config/doom")
                                 (file-directory-p "~/.doom.d"))
                                (progn
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                                    (doom-print--class 'path doom-user-dir)))
                                  (progn
                                    (let
                                        ((doom-print-level
                                          (or nil doom-print-level))
                                         (doom-print-indent
                                          (+
                                           (if t
                                               (or nil doom-print-indent-increment)
                                             0)
                                           doom-print-indent)))
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'p "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")))))))
                            (if
                                (not
                                 (executable-find "fc-list"))
                                (progn
                                  (if inhibit-message nil
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))))
                                  (setq doom-doctor--warnings
                                        (cons
                                         (doom-print--format
                                          (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                         doom-doctor--warnings)))
                              (if
                                  (and
                                   (cond
                                    ((eq system-type 'gnu/linux)
                                     (let nil
                                       (concat
                                        (or
                                         (getenv "XDG_DATA_HOME")
                                         "~/.local/share")
                                        "/fonts/")))
                                    ((eq system-type 'darwin)
                                     (let nil "~/Library/Fonts/")))
                                   (require 'nerd-icons nil t))
                                  (progn
                                    (let
                                        ((temp-buffer
                                          (generate-new-buffer " *temp*" t)))
                                      (save-current-buffer
                                        (set-buffer temp-buffer)
                                        (unwind-protect
                                            (progn
                                              (let
                                                  ((errors 0))
                                                (let*
                                                    ((output
                                                      (doom-call-process "fc-list" "" "file"))
                                                     (status
                                                      (if output
                                                          (car-safe
                                                           (prog1 output
                                                             (setq output
                                                                   (cdr output))))
                                                        (signal 'wrong-number-of-arguments
                                                                (list
                                                                 '(status . output)
                                                                 (length output))))))
                                                  (if
                                                      (not
                                                       (= 0 status))
                                                      (doom-print
                                                       (doom-print--format
                                                        (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?")))
                                                    (insert
                                                     (cdr
                                                      (doom-call-process "fc-list" "" "file")))
                                                    (let
                                                        ((tail nerd-icons-font-names))
                                                      (while tail
                                                        (let
                                                            ((font
                                                              (car tail)))
                                                          (if
                                                              (save-excursion
                                                                (re-search-backward font nil t))
                                                              (doom-print
                                                               (doom-print--format
                                                                (doom-print--style 'green "Found font %s" font)))
                                                            (doom-print
                                                             (doom-print--format
                                                              (doom-print--class 'warn "%S font is not installed on your system")
                                                              font))
                                                            (setq errors
                                                                  (1+ errors)))
                                                          (setq tail
                                                                (cdr tail)))))
                                                    (if
                                                        (> errors 0)
                                                        (progn
                                                          (progn
                                                            (let
                                                                ((doom-print-level
                                                                  (or nil doom-print-level))
                                                                 (doom-print-indent
                                                                  (+
                                                                   (if t
                                                                       (or nil doom-print-indent-increment)
                                                                     0)
                                                                   doom-print-indent)))
                                                              (doom-print
                                                               (doom-print--format
                                                                (doom-print--class 'p "Some needed fonts are not properly installed on your system. To download and " "install them, run `M-x nerd-icons-install-fonts' from within Doom Emacs. " "However, on Windows this command will only download them; the fonts must " "be installed manually afterwards.")))))))))))
                                          (and
                                           (buffer-name temp-buffer)
                                           (kill-buffer temp-buffer))))))))))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'start "Checking for stale elc files in your DOOMDIR...")))
                        (if
                            (file-directory-p doom-user-dir)
                            (progn
                              (progn
                                (let
                                    ((doom-print-level
                                      (or nil doom-print-level))
                                     (doom-print-indent
                                      (+
                                       (if t
                                           (or nil doom-print-indent-increment)
                                         0)
                                       doom-print-indent)))
                                  (elc-check-dir doom-user-dir)))))
                        (if doom-modules
                            (progn
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'start "Checking your enabled modules...")))
                              (advice-add #'require :around #'doom-shut-up-a)
                              (let
                                  ((tail
                                    (doom-module-list)))
                                (while tail
                                  (let
                                      ((x54
                                        (car tail)))
                                    (progn
                                      (ignore
                                       (consp x54))
                                      (let*
                                          ((x55
                                            (car-safe x54))
                                           (x56
                                            (cdr-safe x54)))
                                        (let
                                            ((group x55)
                                             (name x56))
                                          (let
                                              ((doom-context doom-context))
                                            (let
                                                ((tail
                                                  (ensure-list 'doctor)))
                                              (while tail
                                                (let
                                                    ((context
                                                      (car tail)))
                                                  (doom-context-push context)
                                                  (setq tail
                                                        (cdr tail)))))
                                            (let
                                                (doom-local-errors doom-local-warnings)
                                              (let
                                                  (doom-doctor--errors doom-doctor--warnings)
                                                (condition-case ex
                                                    (let
                                                        ((doom-module-context
                                                          (doom-module-context
                                                           (cons group name))))
                                                      (if
                                                          (and
                                                           (not doom-inhibit-log)
                                                           (or
                                                            (not noninteractive)
                                                            (<= 2 doom-log-level)))
                                                          (progn
                                                            (doom--log 2 ":context:module: =%s" doom-module-context)))
                                                      (let
                                                          ((doctor-file
                                                            (doom-module-expand-path group name "doctor.el"))
                                                           (packages-file
                                                            (doom-module-expand-path group name doom-module-packages-file)))
                                                        (if packages-file
                                                            (progn
                                                              (let*
                                                                  ((doom-output-indent 6)
                                                                   (--cl-var--
                                                                    (let
                                                                        ((doom-context doom-context))
                                                                      (let
                                                                          ((tail
                                                                            (ensure-list 'packages)))
                                                                        (while tail
                                                                          (let
                                                                              ((context
                                                                                (car tail)))
                                                                            (doom-context-push context)
                                                                            (setq tail
                                                                                  (cdr tail)))))
                                                                      (let*
                                                                          (doom-packages doom-disabled-packages)
                                                                        (load packages-file 'noerror 'nomessage)
                                                                        (mapcar #'car doom-packages))))
                                                                   (name nil))
                                                                (while
                                                                    (consp --cl-var--)
                                                                  (setq name
                                                                        (car --cl-var--))
                                                                  (if
                                                                      (or
                                                                       (doom-package-get name :disable)
                                                                       (eval
                                                                        (doom-package-get name :ignore))
                                                                       (plist-member
                                                                        (doom-package-get name :recipe)
                                                                        :local-repo)
                                                                       (locate-library
                                                                        (symbol-name name))
                                                                       (doom-package-built-in-p name)
                                                                       (doom-package-installed-p name))
                                                                      (progn)
                                                                    (doom-print
                                                                     (doom-print--format
                                                                      (doom-print--class 'error "Missing emacs package: %S")
                                                                      name)))
                                                                  (setq --cl-var--
                                                                        (cdr --cl-var--)))
                                                                nil)))
                                                        (if doctor-file
                                                            (progn
                                                              (let
                                                                  ((inhibit-message t))
                                                                (load doctor-file 'noerror 'nomessage))))))
                                                  ((debug file-missing)
                                                   (progn
                                                     (if inhibit-message nil
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'error "%s"
                                                                            (error-message-string ex)))))
                                                     (setq doom-doctor--errors
                                                           (cons
                                                            (doom-print--format
                                                             (doom-print--class 'error "%s"
                                                                                (error-message-string ex)))
                                                            doom-doctor--errors))))
                                                  ((debug error)
                                                   (progn
                                                     (if inhibit-message nil
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'error "Syntax error: %s" ex))))
                                                     (setq doom-doctor--errors
                                                           (cons
                                                            (doom-print--format
                                                             (doom-print--class 'error "Syntax error: %s" ex))
                                                            doom-doctor--errors)))))
                                                (if
                                                    (or doom-doctor--errors doom-doctor--warnings)
                                                    (progn
                                                      (progn
                                                        (let
                                                            ((doom-print-level
                                                              (or nil doom-print-level))
                                                             (doom-print-indent
                                                              (+
                                                               (if t
                                                                   (or nil doom-print-indent-increment)
                                                                 0)
                                                               doom-print-indent)))
                                                          (doom-print
                                                           (doom-print--format
                                                            (doom-print--class 'start
                                                                               (doom-print--style 'bold "%s %s"))
                                                            group name))
                                                          (doom-print
                                                           (doom-print--format "%s"
                                                                               (string-join
                                                                                (append doom-doctor--errors doom-doctor--warnings)
                                                                                "\n")))))
                                                      (progn
                                                        (setq doom-local-errors doom-doctor--errors)
                                                        (setq doom-local-warnings doom-doctor--warnings)))))
                                              (setq doom-doctor--errors
                                                    (append doom-doctor--errors doom-local-errors))
                                              (setq doom-doctor--warnings
                                                    (append doom-doctor--warnings doom-local-warnings)))))))
                                    (setq tail
                                          (cdr tail)))))))))
                  ((debug error)
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                            (or
                                             (cdr-safe ex)
                                             (car ex))))))
                     (setq doom-doctor--warnings
                           (cons
                            (doom-print--format
                             (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                                (or
                                                 (cdr-safe ex)
                                                 (car ex))))
                            doom-doctor--warnings)))
                   (setq doom-modules nil)))
                (terpri)
                (let
                    ((tail
                      (list
                       (list doom-doctor--warnings "warning" 'yellow)
                       (list doom-doctor--errors "error" 'red))))
                  (while tail
                    (let
                        ((msg
                          (car tail)))
                      (if
                          (car msg)
                          (progn
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'color
                                                 (nth 2 msg)
                                                 (if
                                                     (cdr
                                                      (car msg))
                                                     "There are %d %ss!" "There is %d %s!")
                                                 (length
                                                  (car msg))
                                                 (nth 1 msg))))))
                      (setq tail
                            (cdr tail)))))
                (if
                    (or doom-doctor--errors doom-doctor--warnings)
                    nil
                  (doom-print
                   (doom-print--format
                    (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))))
                (exit! :pager? "+G")))))
  (prefix . "doom")
  (seen t)
  (runners
   (#s(doom-cli
       ("doom" "doctor")
       nil
       (("SUMMARY" . "Diagnoses common issues on your system.")
        ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
       nil nil nil nil
       (:benchmark nil :prefix
                   (doom)
                   :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
       (closure
           (t)
           (cli alist)
         (let nil
           (doom-print
            (doom-print--format "The doctor will see you now...\n"))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking your Emacs version...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (cond
                ((or
                  (> emacs-major-version 29)
                  (string-match-p ".\\([56]0\\|9[0-9]\\)$" emacs-version))
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))
                          doom-doctor--warnings)))
                 (if
                     (> emacs-major-version 29)
                     (progn
                       (let
                           ((doom-print-level
                             (or nil doom-print-level))
                            (doom-print-indent
                             (+
                              (if t
                                  (or nil doom-print-indent-increment)
                                0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'p "This is the bleeding edge of Emacs. As it is constantly changed, Doom will not " "(officially) support it. If you've found a stable commit, great! But be " "cautious about updating Emacs too eagerly!\n")))))
                   (progn
                     (let
                         ((doom-print-level
                           (or nil doom-print-level))
                          (doom-print-indent
                           (+
                            (if t
                                (or nil doom-print-indent-increment)
                              0)
                            doom-print-indent)))
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'p "A .50, .60, or .9X appended to the version string indicates that this is a version " "of Emacs in between stable releases. These are not well supported.\n"))))))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Because development builds are prone to random breakage, there will be a greater " "burden on you to investigate and deal with issues. Please make extra sure that " "your issue is reproducible in 29.1 before reporting them to Doom's issue tracker!\n" "\n" "If this doesn't phase you, read the \"Why does Doom not support Emacs HEAD\" QnA " "in Doom's FAQ. It offers some advice for debugging and surviving issues on the " "bleeding edge. Failing that, 29.1 is highly recommended and will always be " "Doom's best supported version of Emacs."))))))
                ((= emacs-major-version 27)
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))
                          doom-doctor--warnings)))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Emacs 28.1 is better supported, faster, and more stable. Plus, Doom will drop " "27.x support sometime late-2023.")))))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for Doom's prerequisites...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (if
                   (not
                    (executable-find "git"))
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                            doom-doctor--errors)))
                 (let
                     ((saved-match-data
                       (match-data)))
                   (unwind-protect
                       (progn
                         (let*
                             ((version
                               (cdr
                                (doom-call-process "git" "version")))
                              (version
                               (and
                                (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                                (match-string 1 version))))
                           (if version
                               (if
                                   (version< version "2.23")
                                   (progn
                                     (progn
                                       (if inhibit-message nil
                                         (doom-print
                                          (doom-print--format
                                           (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))))
                                       (setq doom-doctor--errors
                                             (cons
                                              (doom-print--format
                                               (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                              doom-doctor--errors)))))
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))))
                               (setq doom-doctor--warnings
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                      doom-doctor--warnings))))))
                     (set-match-data saved-match-data t))))
               (if
                   (executable-find "rg")
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))))
                   (setq doom-doctor--errors
                         (cons
                          (doom-print--format
                           (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                          doom-doctor--errors))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for Emacs config conflicts...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (if
                   (or
                    (file-equal-p doom-emacs-dir "~/.emacs.d")
                    (file-equal-p doom-emacs-dir "~/.config/emacs"))
                   nil
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'warn "Doom is installed in a non-standard location")))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "The standard locations are ~/.config/emacs or ~/.emacs.d. Emacs will fail " "to load Doom if it is not explicitly told where to look for it. In Emacs 29+, " "this is possible with the --init-directory option:\n\n" "  $ emacs --init-directory '"
                                          (abbreviate-file-name doom-emacs-dir)
                                          "'\n\n" "However, Emacs 27-28 users have no choice but to move Doom to a standard " "location.\n\n" "Chemacs users may ignore this warning, however."))))))
               (let
                   (found?)
                 (let
                     ((tail
                       '("~/_emacs" "~/.emacs" "~/.emacs.el" "~/.emacs.d" "~/.config/emacs")))
                   (while tail
                     (let
                         ((file
                           (car tail)))
                       (if
                           (and
                            (file-exists-p file)
                            (not
                             (file-equal-p file doom-emacs-dir)))
                           (progn
                             (setq found? t)
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Found another Emacs config: %s (%s)")
                               file
                               (if
                                   (file-directory-p file)
                                   "directory" "file")))))
                       (setq tail
                             (cdr tail)))))
                 (if found?
                     (progn
                       (progn
                         (let
                             ((doom-print-level
                               (or nil doom-print-level))
                              (doom-print-indent
                               (+
                                (if t
                                    (or nil doom-print-indent-increment)
                                  0)
                                doom-print-indent)))
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'p "Having multiple Emacs configs may prevent Doom from loading properly. Emacs " "will load the first it finds and ignore the rest. If Doom isn't starting up " "correctly (e.g. you get a vanilla splash screen), make sure that only one of " "these exist.\n\n" "Chemacs users may ignore this warning."))))))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for missing Emacs features...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (if
                   (functionp 'json-serialize)
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs was not built with native JSON support"))))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs was not built with native JSON support"))
                          doom-doctor--warnings)))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option."))))))
               (if
                   (featurep 'native-compile)
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs was not built with native compilation support"))))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs was not built with native compilation support"))
                          doom-doctor--warnings)))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option."))))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for private config conflicts...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (let*
                   ((xdg-dir
                     (concat
                      (or
                       (getenv "XDG_CONFIG_HOME")
                       "~/.config")
                      "/doom/"))
                    (doom-dir
                     (or
                      (getenv "DOOMDIR")
                      "~/.doom.d/"))
                    (dir
                     (if
                         (file-directory-p xdg-dir)
                         xdg-dir doom-dir)))
                 (if
                     (file-equal-p dir doom-emacs-dir)
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                            (doom-print--class 'path dir))))
                       (progn
                         (let
                             ((doom-print-level
                               (or nil doom-print-level))
                              (doom-print-indent
                               (+
                                (if t
                                    (or nil doom-print-indent-increment)
                                  0)
                                doom-print-indent)))
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'p "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")))))))
                 (if
                     (and
                      (not
                       (file-equal-p xdg-dir doom-dir))
                      (file-directory-p xdg-dir)
                      (file-directory-p doom-dir))
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Detected two private configs, in %s and %s")
                         (abbreviate-file-name xdg-dir)
                         doom-dir))
                       (progn
                         (let
                             ((doom-print-level
                               (or nil doom-print-level))
                              (doom-print-indent
                               (+
                                (if t
                                    (or nil doom-print-indent-increment)
                                  0)
                                doom-print-indent)))
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'p "The second directory will be ignored, as it has lower precedence."))))))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for common environmental issues...")))
           (if
               (string-match-p "/fish$" shell-file-name)
               (progn
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'warn "Detected Fish as your $SHELL")))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Fish (and possibly other non-POSIX shells) is known to inject garbage " "output into some of the child processes that Emacs spawns. Many Emacs " "packages/utilities will choke on this output, causing unpredictable issues. " "To get around this, either:\n\n" "  - Add the following to $DOOMDIR/config.el:\n\n" "    (setq shell-file-name (executable-find \"bash\"))\n\n" "  - Or change your default shell to a POSIX shell (like bash or zsh) " "    and explicitly configure your terminal apps to use the shell you " "    want.\n\n" "If you opt for option 1 and use one of Emacs' terminal emulators, you " "will also need to configure them to use Fish, e.g.\n\n" "  (setq-default vterm-shell (executable-find \"fish\"))\n\n" "  (setq-default explicit-shell-file-name (executable-find \"fish\"))\n")))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for stale elc files...")))
           (elc-check-dir doom-core-dir)
           (elc-check-dir doom-modules-dir)
           (elc-check-dir
            (doom-path doom-local-dir "straight" straight-build-dir))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for problematic git global settings...")))
           (if
               (executable-find "git")
               (if
                   (= 0
                      (car
                       (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                   (progn
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))))
                       (setq doom-doctor--warnings
                             (cons
                              (doom-print--format
                               (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                              doom-doctor--warnings)))
                     (progn
                       (let
                           ((doom-print-level
                             (or nil doom-print-level))
                            (doom-print-indent
                             (+
                              (if t
                                  (or nil doom-print-indent-increment)
                                0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'p "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")))))))
             (progn
               (if inhibit-message nil
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))))
               (setq doom-doctor--errors
                     (cons
                      (doom-print--format
                       (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                      doom-doctor--errors))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking Doom Emacs...")))
           (condition-case ex
               (progn
                 (let
                     ((doom-print-level
                       (or nil doom-print-level))
                      (doom-print-indent
                       (+
                        (if t
                            (or nil doom-print-indent-increment)
                          0)
                        doom-print-indent)))
                   (require 'doom-start)
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'success "Initialized Doom Emacs %s")
                     doom-version))
                   (doom-print
                    (doom-print--format
                     (if
                         (hash-table-p doom-modules)
                         (doom-print--class 'success "Detected %d modules"
                                            (hash-table-count doom-modules))
                       (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?"))))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'success "Detected %d packages")
                     (length doom-packages)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'start "Checking Doom core for irregularities...")))
                   (progn
                     (let
                         ((doom-print-level
                           (or nil doom-print-level))
                          (doom-print-indent
                           (+
                            (if t
                                (or nil doom-print-indent-increment)
                              0)
                            doom-print-indent)))
                       (let
                           ((tail
                             (list "savehist" "projectile.cache")))
                         (while tail
                           (let
                               ((file
                                 (car tail)))
                             (let*
                                 ((size
                                   (and t
                                        (condition-case nil
                                            (progn
                                              (doom-file-size file doom-cache-dir))
                                          (error nil)))))
                               (if size
                                   (if
                                       (> size 1048576)
                                       (progn
                                         (progn
                                           (if inhibit-message nil
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                  (/ size 1024 1024.0)))))
                                           (setq doom-doctor--warnings
                                                 (cons
                                                  (doom-print--format
                                                   (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                      (/ size 1024 1024.0)))
                                                  doom-doctor--warnings)))
                                         (progn
                                           (let
                                               ((doom-print-level
                                                 (or nil doom-print-level))
                                                (doom-print-indent
                                                 (+
                                                  (if t
                                                      (or nil doom-print-indent-increment)
                                                    0)
                                                  doom-print-indent)))
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'p "Consider deleting it from your system (manually)")))))))
                                 nil))
                             (setq tail
                                   (cdr tail)))))
                       (if
                           (condition-case nil
                               (progn
                                 (executable-find doom-fd-executable))
                             (error nil))
                           nil
                         (progn
                           (if inhibit-message nil
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))))
                           (setq doom-doctor--warnings
                                 (cons
                                  (doom-print--format
                                   (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                  doom-doctor--warnings))))
                       (require 'projectile)
                       (if
                           (projectile-project-root "~")
                           (progn
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'warn "Your $HOME is recognized as a project root"))))
                               (setq doom-doctor--warnings
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                      doom-doctor--warnings)))
                             (progn
                               (let
                                   ((doom-print-level
                                     (or nil doom-print-level))
                                    (doom-print-indent
                                     (+
                                      (if t
                                          (or nil doom-print-indent-increment)
                                        0)
                                      doom-print-indent)))
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'p "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")))))))
                       (if
                           (and
                            (file-equal-p doom-user-dir "~/.config/doom")
                            (file-directory-p "~/.doom.d"))
                           (progn
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                               (doom-print--class 'path doom-user-dir)))
                             (progn
                               (let
                                   ((doom-print-level
                                     (or nil doom-print-level))
                                    (doom-print-indent
                                     (+
                                      (if t
                                          (or nil doom-print-indent-increment)
                                        0)
                                      doom-print-indent)))
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'p "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")))))))
                       (if
                           (not
                            (executable-find "fc-list"))
                           (progn
                             (if inhibit-message nil
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))))
                             (setq doom-doctor--warnings
                                   (cons
                                    (doom-print--format
                                     (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                    doom-doctor--warnings)))
                         (if
                             (and
                              (cond
                               ((eq system-type 'gnu/linux)
                                (let nil
                                  (concat
                                   (or
                                    (getenv "XDG_DATA_HOME")
                                    "~/.local/share")
                                   "/fonts/")))
                               ((eq system-type 'darwin)
                                (let nil "~/Library/Fonts/")))
                              (require 'nerd-icons nil t))
                             (progn
                               (let
                                   ((temp-buffer
                                     (generate-new-buffer " *temp*" t)))
                                 (save-current-buffer
                                   (set-buffer temp-buffer)
                                   (unwind-protect
                                       (progn
                                         (let
                                             ((errors 0))
                                           (let*
                                               ((output
                                                 (doom-call-process "fc-list" "" "file"))
                                                (status
                                                 (if output
                                                     (car-safe
                                                      (prog1 output
                                                        (setq output
                                                              (cdr output))))
                                                   (signal 'wrong-number-of-arguments
                                                           (list
                                                            '(status . output)
                                                            (length output))))))
                                             (if
                                                 (not
                                                  (= 0 status))
                                                 (doom-print
                                                  (doom-print--format
                                                   (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?")))
                                               (insert
                                                (cdr
                                                 (doom-call-process "fc-list" "" "file")))
                                               (let
                                                   ((tail nerd-icons-font-names))
                                                 (while tail
                                                   (let
                                                       ((font
                                                         (car tail)))
                                                     (if
                                                         (save-excursion
                                                           (re-search-backward font nil t))
                                                         (doom-print
                                                          (doom-print--format
                                                           (doom-print--style 'green "Found font %s" font)))
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'warn "%S font is not installed on your system")
                                                         font))
                                                       (setq errors
                                                             (1+ errors)))
                                                     (setq tail
                                                           (cdr tail)))))
                                               (if
                                                   (> errors 0)
                                                   (progn
                                                     (progn
                                                       (let
                                                           ((doom-print-level
                                                             (or nil doom-print-level))
                                                            (doom-print-indent
                                                             (+
                                                              (if t
                                                                  (or nil doom-print-indent-increment)
                                                                0)
                                                              doom-print-indent)))
                                                         (doom-print
                                                          (doom-print--format
                                                           (doom-print--class 'p "Some needed fonts are not properly installed on your system. To download and " "install them, run `M-x nerd-icons-install-fonts' from within Doom Emacs. " "However, on Windows this command will only download them; the fonts must " "be installed manually afterwards.")))))))))))
                                     (and
                                      (buffer-name temp-buffer)
                                      (kill-buffer temp-buffer))))))))))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'start "Checking for stale elc files in your DOOMDIR...")))
                   (if
                       (file-directory-p doom-user-dir)
                       (progn
                         (progn
                           (let
                               ((doom-print-level
                                 (or nil doom-print-level))
                                (doom-print-indent
                                 (+
                                  (if t
                                      (or nil doom-print-indent-increment)
                                    0)
                                  doom-print-indent)))
                             (elc-check-dir doom-user-dir)))))
                   (if doom-modules
                       (progn
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'start "Checking your enabled modules...")))
                         (advice-add #'require :around #'doom-shut-up-a)
                         (let
                             ((tail
                               (doom-module-list)))
                           (while tail
                             (let
                                 ((x54
                                   (car tail)))
                               (progn
                                 (ignore
                                  (consp x54))
                                 (let*
                                     ((x55
                                       (car-safe x54))
                                      (x56
                                       (cdr-safe x54)))
                                   (let
                                       ((group x55)
                                        (name x56))
                                     (let
                                         ((doom-context doom-context))
                                       (let
                                           ((tail
                                             (ensure-list 'doctor)))
                                         (while tail
                                           (let
                                               ((context
                                                 (car tail)))
                                             (doom-context-push context)
                                             (setq tail
                                                   (cdr tail)))))
                                       (let
                                           (doom-local-errors doom-local-warnings)
                                         (let
                                             (doom-doctor--errors doom-doctor--warnings)
                                           (condition-case ex
                                               (let
                                                   ((doom-module-context
                                                     (doom-module-context
                                                      (cons group name))))
                                                 (if
                                                     (and
                                                      (not doom-inhibit-log)
                                                      (or
                                                       (not noninteractive)
                                                       (<= 2 doom-log-level)))
                                                     (progn
                                                       (doom--log 2 ":context:module: =%s" doom-module-context)))
                                                 (let
                                                     ((doctor-file
                                                       (doom-module-expand-path group name "doctor.el"))
                                                      (packages-file
                                                       (doom-module-expand-path group name doom-module-packages-file)))
                                                   (if packages-file
                                                       (progn
                                                         (let*
                                                             ((doom-output-indent 6)
                                                              (--cl-var--
                                                               (let
                                                                   ((doom-context doom-context))
                                                                 (let
                                                                     ((tail
                                                                       (ensure-list 'packages)))
                                                                   (while tail
                                                                     (let
                                                                         ((context
                                                                           (car tail)))
                                                                       (doom-context-push context)
                                                                       (setq tail
                                                                             (cdr tail)))))
                                                                 (let*
                                                                     (doom-packages doom-disabled-packages)
                                                                   (load packages-file 'noerror 'nomessage)
                                                                   (mapcar #'car doom-packages))))
                                                              (name nil))
                                                           (while
                                                               (consp --cl-var--)
                                                             (setq name
                                                                   (car --cl-var--))
                                                             (if
                                                                 (or
                                                                  (doom-package-get name :disable)
                                                                  (eval
                                                                   (doom-package-get name :ignore))
                                                                  (plist-member
                                                                   (doom-package-get name :recipe)
                                                                   :local-repo)
                                                                  (locate-library
                                                                   (symbol-name name))
                                                                  (doom-package-built-in-p name)
                                                                  (doom-package-installed-p name))
                                                                 (progn)
                                                               (doom-print
                                                                (doom-print--format
                                                                 (doom-print--class 'error "Missing emacs package: %S")
                                                                 name)))
                                                             (setq --cl-var--
                                                                   (cdr --cl-var--)))
                                                           nil)))
                                                   (if doctor-file
                                                       (progn
                                                         (let
                                                             ((inhibit-message t))
                                                           (load doctor-file 'noerror 'nomessage))))))
                                             ((debug file-missing)
                                              (progn
                                                (if inhibit-message nil
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'error "%s"
                                                                       (error-message-string ex)))))
                                                (setq doom-doctor--errors
                                                      (cons
                                                       (doom-print--format
                                                        (doom-print--class 'error "%s"
                                                                           (error-message-string ex)))
                                                       doom-doctor--errors))))
                                             ((debug error)
                                              (progn
                                                (if inhibit-message nil
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'error "Syntax error: %s" ex))))
                                                (setq doom-doctor--errors
                                                      (cons
                                                       (doom-print--format
                                                        (doom-print--class 'error "Syntax error: %s" ex))
                                                       doom-doctor--errors)))))
                                           (if
                                               (or doom-doctor--errors doom-doctor--warnings)
                                               (progn
                                                 (progn
                                                   (let
                                                       ((doom-print-level
                                                         (or nil doom-print-level))
                                                        (doom-print-indent
                                                         (+
                                                          (if t
                                                              (or nil doom-print-indent-increment)
                                                            0)
                                                          doom-print-indent)))
                                                     (doom-print
                                                      (doom-print--format
                                                       (doom-print--class 'start
                                                                          (doom-print--style 'bold "%s %s"))
                                                       group name))
                                                     (doom-print
                                                      (doom-print--format "%s"
                                                                          (string-join
                                                                           (append doom-doctor--errors doom-doctor--warnings)
                                                                           "\n")))))
                                                 (progn
                                                   (setq doom-local-errors doom-doctor--errors)
                                                   (setq doom-local-warnings doom-doctor--warnings)))))
                                         (setq doom-doctor--errors
                                               (append doom-doctor--errors doom-local-errors))
                                         (setq doom-doctor--warnings
                                               (append doom-doctor--warnings doom-local-warnings)))))))
                               (setq tail
                                     (cdr tail)))))))))
             ((debug error)
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                       (or
                                        (cdr-safe ex)
                                        (car ex))))))
                (setq doom-doctor--warnings
                      (cons
                       (doom-print--format
                        (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                           (or
                                            (cdr-safe ex)
                                            (car ex))))
                       doom-doctor--warnings)))
              (setq doom-modules nil)))
           (terpri)
           (let
               ((tail
                 (list
                  (list doom-doctor--warnings "warning" 'yellow)
                  (list doom-doctor--errors "error" 'red))))
             (while tail
               (let
                   ((msg
                     (car tail)))
                 (if
                     (car msg)
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'color
                                            (nth 2 msg)
                                            (if
                                                (cdr
                                                 (car msg))
                                                "There are %d %ss!" "There is %d %s!")
                                            (length
                                             (car msg))
                                            (nth 1 msg))))))
                 (setq tail
                       (cdr tail)))))
           (if
               (or doom-doctor--errors doom-doctor--warnings)
               nil
             (doom-print
              (doom-print--format
               (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))))
           (exit! :pager? "+G"))))))
  (tail
   (#s(doom-cli
       ("doom" "doctor")
       nil
       (("SUMMARY" . "Diagnoses common issues on your system.")
        ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
       nil nil nil nil
       (:benchmark nil :prefix
                   (doom)
                   :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
       (closure
           (t)
           (cli alist)
         (let nil
           (doom-print
            (doom-print--format "The doctor will see you now...\n"))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking your Emacs version...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (cond
                ((or
                  (> emacs-major-version 29)
                  (string-match-p ".\\([56]0\\|9[0-9]\\)$" emacs-version))
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))
                          doom-doctor--warnings)))
                 (if
                     (> emacs-major-version 29)
                     (progn
                       (let
                           ((doom-print-level
                             (or nil doom-print-level))
                            (doom-print-indent
                             (+
                              (if t
                                  (or nil doom-print-indent-increment)
                                0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'p "This is the bleeding edge of Emacs. As it is constantly changed, Doom will not " "(officially) support it. If you've found a stable commit, great! But be " "cautious about updating Emacs too eagerly!\n")))))
                   (progn
                     (let
                         ((doom-print-level
                           (or nil doom-print-level))
                          (doom-print-indent
                           (+
                            (if t
                                (or nil doom-print-indent-increment)
                              0)
                            doom-print-indent)))
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'p "A .50, .60, or .9X appended to the version string indicates that this is a version " "of Emacs in between stable releases. These are not well supported.\n"))))))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Because development builds are prone to random breakage, there will be a greater " "burden on you to investigate and deal with issues. Please make extra sure that " "your issue is reproducible in 29.1 before reporting them to Doom's issue tracker!\n" "\n" "If this doesn't phase you, read the \"Why does Doom not support Emacs HEAD\" QnA " "in Doom's FAQ. It offers some advice for debugging and surviving issues on the " "bleeding edge. Failing that, 29.1 is highly recommended and will always be " "Doom's best supported version of Emacs."))))))
                ((= emacs-major-version 27)
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))
                          doom-doctor--warnings)))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Emacs 28.1 is better supported, faster, and more stable. Plus, Doom will drop " "27.x support sometime late-2023.")))))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for Doom's prerequisites...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (if
                   (not
                    (executable-find "git"))
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                            doom-doctor--errors)))
                 (let
                     ((saved-match-data
                       (match-data)))
                   (unwind-protect
                       (progn
                         (let*
                             ((version
                               (cdr
                                (doom-call-process "git" "version")))
                              (version
                               (and
                                (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                                (match-string 1 version))))
                           (if version
                               (if
                                   (version< version "2.23")
                                   (progn
                                     (progn
                                       (if inhibit-message nil
                                         (doom-print
                                          (doom-print--format
                                           (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))))
                                       (setq doom-doctor--errors
                                             (cons
                                              (doom-print--format
                                               (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                              doom-doctor--errors)))))
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))))
                               (setq doom-doctor--warnings
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                      doom-doctor--warnings))))))
                     (set-match-data saved-match-data t))))
               (if
                   (executable-find "rg")
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))))
                   (setq doom-doctor--errors
                         (cons
                          (doom-print--format
                           (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                          doom-doctor--errors))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for Emacs config conflicts...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (if
                   (or
                    (file-equal-p doom-emacs-dir "~/.emacs.d")
                    (file-equal-p doom-emacs-dir "~/.config/emacs"))
                   nil
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'warn "Doom is installed in a non-standard location")))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "The standard locations are ~/.config/emacs or ~/.emacs.d. Emacs will fail " "to load Doom if it is not explicitly told where to look for it. In Emacs 29+, " "this is possible with the --init-directory option:\n\n" "  $ emacs --init-directory '"
                                          (abbreviate-file-name doom-emacs-dir)
                                          "'\n\n" "However, Emacs 27-28 users have no choice but to move Doom to a standard " "location.\n\n" "Chemacs users may ignore this warning, however."))))))
               (let
                   (found?)
                 (let
                     ((tail
                       '("~/_emacs" "~/.emacs" "~/.emacs.el" "~/.emacs.d" "~/.config/emacs")))
                   (while tail
                     (let
                         ((file
                           (car tail)))
                       (if
                           (and
                            (file-exists-p file)
                            (not
                             (file-equal-p file doom-emacs-dir)))
                           (progn
                             (setq found? t)
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Found another Emacs config: %s (%s)")
                               file
                               (if
                                   (file-directory-p file)
                                   "directory" "file")))))
                       (setq tail
                             (cdr tail)))))
                 (if found?
                     (progn
                       (progn
                         (let
                             ((doom-print-level
                               (or nil doom-print-level))
                              (doom-print-indent
                               (+
                                (if t
                                    (or nil doom-print-indent-increment)
                                  0)
                                doom-print-indent)))
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'p "Having multiple Emacs configs may prevent Doom from loading properly. Emacs " "will load the first it finds and ignore the rest. If Doom isn't starting up " "correctly (e.g. you get a vanilla splash screen), make sure that only one of " "these exist.\n\n" "Chemacs users may ignore this warning."))))))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for missing Emacs features...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (if
                   (functionp 'json-serialize)
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs was not built with native JSON support"))))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs was not built with native JSON support"))
                          doom-doctor--warnings)))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option."))))))
               (if
                   (featurep 'native-compile)
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs was not built with native compilation support"))))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs was not built with native compilation support"))
                          doom-doctor--warnings)))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option."))))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for private config conflicts...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (let*
                   ((xdg-dir
                     (concat
                      (or
                       (getenv "XDG_CONFIG_HOME")
                       "~/.config")
                      "/doom/"))
                    (doom-dir
                     (or
                      (getenv "DOOMDIR")
                      "~/.doom.d/"))
                    (dir
                     (if
                         (file-directory-p xdg-dir)
                         xdg-dir doom-dir)))
                 (if
                     (file-equal-p dir doom-emacs-dir)
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                            (doom-print--class 'path dir))))
                       (progn
                         (let
                             ((doom-print-level
                               (or nil doom-print-level))
                              (doom-print-indent
                               (+
                                (if t
                                    (or nil doom-print-indent-increment)
                                  0)
                                doom-print-indent)))
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'p "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")))))))
                 (if
                     (and
                      (not
                       (file-equal-p xdg-dir doom-dir))
                      (file-directory-p xdg-dir)
                      (file-directory-p doom-dir))
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Detected two private configs, in %s and %s")
                         (abbreviate-file-name xdg-dir)
                         doom-dir))
                       (progn
                         (let
                             ((doom-print-level
                               (or nil doom-print-level))
                              (doom-print-indent
                               (+
                                (if t
                                    (or nil doom-print-indent-increment)
                                  0)
                                doom-print-indent)))
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'p "The second directory will be ignored, as it has lower precedence."))))))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for common environmental issues...")))
           (if
               (string-match-p "/fish$" shell-file-name)
               (progn
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'warn "Detected Fish as your $SHELL")))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Fish (and possibly other non-POSIX shells) is known to inject garbage " "output into some of the child processes that Emacs spawns. Many Emacs " "packages/utilities will choke on this output, causing unpredictable issues. " "To get around this, either:\n\n" "  - Add the following to $DOOMDIR/config.el:\n\n" "    (setq shell-file-name (executable-find \"bash\"))\n\n" "  - Or change your default shell to a POSIX shell (like bash or zsh) " "    and explicitly configure your terminal apps to use the shell you " "    want.\n\n" "If you opt for option 1 and use one of Emacs' terminal emulators, you " "will also need to configure them to use Fish, e.g.\n\n" "  (setq-default vterm-shell (executable-find \"fish\"))\n\n" "  (setq-default explicit-shell-file-name (executable-find \"fish\"))\n")))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for stale elc files...")))
           (elc-check-dir doom-core-dir)
           (elc-check-dir doom-modules-dir)
           (elc-check-dir
            (doom-path doom-local-dir "straight" straight-build-dir))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for problematic git global settings...")))
           (if
               (executable-find "git")
               (if
                   (= 0
                      (car
                       (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                   (progn
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))))
                       (setq doom-doctor--warnings
                             (cons
                              (doom-print--format
                               (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                              doom-doctor--warnings)))
                     (progn
                       (let
                           ((doom-print-level
                             (or nil doom-print-level))
                            (doom-print-indent
                             (+
                              (if t
                                  (or nil doom-print-indent-increment)
                                0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'p "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")))))))
             (progn
               (if inhibit-message nil
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))))
               (setq doom-doctor--errors
                     (cons
                      (doom-print--format
                       (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                      doom-doctor--errors))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking Doom Emacs...")))
           (condition-case ex
               (progn
                 (let
                     ((doom-print-level
                       (or nil doom-print-level))
                      (doom-print-indent
                       (+
                        (if t
                            (or nil doom-print-indent-increment)
                          0)
                        doom-print-indent)))
                   (require 'doom-start)
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'success "Initialized Doom Emacs %s")
                     doom-version))
                   (doom-print
                    (doom-print--format
                     (if
                         (hash-table-p doom-modules)
                         (doom-print--class 'success "Detected %d modules"
                                            (hash-table-count doom-modules))
                       (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?"))))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'success "Detected %d packages")
                     (length doom-packages)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'start "Checking Doom core for irregularities...")))
                   (progn
                     (let
                         ((doom-print-level
                           (or nil doom-print-level))
                          (doom-print-indent
                           (+
                            (if t
                                (or nil doom-print-indent-increment)
                              0)
                            doom-print-indent)))
                       (let
                           ((tail
                             (list "savehist" "projectile.cache")))
                         (while tail
                           (let
                               ((file
                                 (car tail)))
                             (let*
                                 ((size
                                   (and t
                                        (condition-case nil
                                            (progn
                                              (doom-file-size file doom-cache-dir))
                                          (error nil)))))
                               (if size
                                   (if
                                       (> size 1048576)
                                       (progn
                                         (progn
                                           (if inhibit-message nil
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                  (/ size 1024 1024.0)))))
                                           (setq doom-doctor--warnings
                                                 (cons
                                                  (doom-print--format
                                                   (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                      (/ size 1024 1024.0)))
                                                  doom-doctor--warnings)))
                                         (progn
                                           (let
                                               ((doom-print-level
                                                 (or nil doom-print-level))
                                                (doom-print-indent
                                                 (+
                                                  (if t
                                                      (or nil doom-print-indent-increment)
                                                    0)
                                                  doom-print-indent)))
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'p "Consider deleting it from your system (manually)")))))))
                                 nil))
                             (setq tail
                                   (cdr tail)))))
                       (if
                           (condition-case nil
                               (progn
                                 (executable-find doom-fd-executable))
                             (error nil))
                           nil
                         (progn
                           (if inhibit-message nil
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))))
                           (setq doom-doctor--warnings
                                 (cons
                                  (doom-print--format
                                   (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                  doom-doctor--warnings))))
                       (require 'projectile)
                       (if
                           (projectile-project-root "~")
                           (progn
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'warn "Your $HOME is recognized as a project root"))))
                               (setq doom-doctor--warnings
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                      doom-doctor--warnings)))
                             (progn
                               (let
                                   ((doom-print-level
                                     (or nil doom-print-level))
                                    (doom-print-indent
                                     (+
                                      (if t
                                          (or nil doom-print-indent-increment)
                                        0)
                                      doom-print-indent)))
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'p "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")))))))
                       (if
                           (and
                            (file-equal-p doom-user-dir "~/.config/doom")
                            (file-directory-p "~/.doom.d"))
                           (progn
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                               (doom-print--class 'path doom-user-dir)))
                             (progn
                               (let
                                   ((doom-print-level
                                     (or nil doom-print-level))
                                    (doom-print-indent
                                     (+
                                      (if t
                                          (or nil doom-print-indent-increment)
                                        0)
                                      doom-print-indent)))
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'p "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")))))))
                       (if
                           (not
                            (executable-find "fc-list"))
                           (progn
                             (if inhibit-message nil
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))))
                             (setq doom-doctor--warnings
                                   (cons
                                    (doom-print--format
                                     (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                    doom-doctor--warnings)))
                         (if
                             (and
                              (cond
                               ((eq system-type 'gnu/linux)
                                (let nil
                                  (concat
                                   (or
                                    (getenv "XDG_DATA_HOME")
                                    "~/.local/share")
                                   "/fonts/")))
                               ((eq system-type 'darwin)
                                (let nil "~/Library/Fonts/")))
                              (require 'nerd-icons nil t))
                             (progn
                               (let
                                   ((temp-buffer
                                     (generate-new-buffer " *temp*" t)))
                                 (save-current-buffer
                                   (set-buffer temp-buffer)
                                   (unwind-protect
                                       (progn
                                         (let
                                             ((errors 0))
                                           (let*
                                               ((output
                                                 (doom-call-process "fc-list" "" "file"))
                                                (status
                                                 (if output
                                                     (car-safe
                                                      (prog1 output
                                                        (setq output
                                                              (cdr output))))
                                                   (signal 'wrong-number-of-arguments
                                                           (list
                                                            '(status . output)
                                                            (length output))))))
                                             (if
                                                 (not
                                                  (= 0 status))
                                                 (doom-print
                                                  (doom-print--format
                                                   (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?")))
                                               (insert
                                                (cdr
                                                 (doom-call-process "fc-list" "" "file")))
                                               (let
                                                   ((tail nerd-icons-font-names))
                                                 (while tail
                                                   (let
                                                       ((font
                                                         (car tail)))
                                                     (if
                                                         (save-excursion
                                                           (re-search-backward font nil t))
                                                         (doom-print
                                                          (doom-print--format
                                                           (doom-print--style 'green "Found font %s" font)))
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'warn "%S font is not installed on your system")
                                                         font))
                                                       (setq errors
                                                             (1+ errors)))
                                                     (setq tail
                                                           (cdr tail)))))
                                               (if
                                                   (> errors 0)
                                                   (progn
                                                     (progn
                                                       (let
                                                           ((doom-print-level
                                                             (or nil doom-print-level))
                                                            (doom-print-indent
                                                             (+
                                                              (if t
                                                                  (or nil doom-print-indent-increment)
                                                                0)
                                                              doom-print-indent)))
                                                         (doom-print
                                                          (doom-print--format
                                                           (doom-print--class 'p "Some needed fonts are not properly installed on your system. To download and " "install them, run `M-x nerd-icons-install-fonts' from within Doom Emacs. " "However, on Windows this command will only download them; the fonts must " "be installed manually afterwards.")))))))))))
                                     (and
                                      (buffer-name temp-buffer)
                                      (kill-buffer temp-buffer))))))))))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'start "Checking for stale elc files in your DOOMDIR...")))
                   (if
                       (file-directory-p doom-user-dir)
                       (progn
                         (progn
                           (let
                               ((doom-print-level
                                 (or nil doom-print-level))
                                (doom-print-indent
                                 (+
                                  (if t
                                      (or nil doom-print-indent-increment)
                                    0)
                                  doom-print-indent)))
                             (elc-check-dir doom-user-dir)))))
                   (if doom-modules
                       (progn
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'start "Checking your enabled modules...")))
                         (advice-add #'require :around #'doom-shut-up-a)
                         (let
                             ((tail
                               (doom-module-list)))
                           (while tail
                             (let
                                 ((x54
                                   (car tail)))
                               (progn
                                 (ignore
                                  (consp x54))
                                 (let*
                                     ((x55
                                       (car-safe x54))
                                      (x56
                                       (cdr-safe x54)))
                                   (let
                                       ((group x55)
                                        (name x56))
                                     (let
                                         ((doom-context doom-context))
                                       (let
                                           ((tail
                                             (ensure-list 'doctor)))
                                         (while tail
                                           (let
                                               ((context
                                                 (car tail)))
                                             (doom-context-push context)
                                             (setq tail
                                                   (cdr tail)))))
                                       (let
                                           (doom-local-errors doom-local-warnings)
                                         (let
                                             (doom-doctor--errors doom-doctor--warnings)
                                           (condition-case ex
                                               (let
                                                   ((doom-module-context
                                                     (doom-module-context
                                                      (cons group name))))
                                                 (if
                                                     (and
                                                      (not doom-inhibit-log)
                                                      (or
                                                       (not noninteractive)
                                                       (<= 2 doom-log-level)))
                                                     (progn
                                                       (doom--log 2 ":context:module: =%s" doom-module-context)))
                                                 (let
                                                     ((doctor-file
                                                       (doom-module-expand-path group name "doctor.el"))
                                                      (packages-file
                                                       (doom-module-expand-path group name doom-module-packages-file)))
                                                   (if packages-file
                                                       (progn
                                                         (let*
                                                             ((doom-output-indent 6)
                                                              (--cl-var--
                                                               (let
                                                                   ((doom-context doom-context))
                                                                 (let
                                                                     ((tail
                                                                       (ensure-list 'packages)))
                                                                   (while tail
                                                                     (let
                                                                         ((context
                                                                           (car tail)))
                                                                       (doom-context-push context)
                                                                       (setq tail
                                                                             (cdr tail)))))
                                                                 (let*
                                                                     (doom-packages doom-disabled-packages)
                                                                   (load packages-file 'noerror 'nomessage)
                                                                   (mapcar #'car doom-packages))))
                                                              (name nil))
                                                           (while
                                                               (consp --cl-var--)
                                                             (setq name
                                                                   (car --cl-var--))
                                                             (if
                                                                 (or
                                                                  (doom-package-get name :disable)
                                                                  (eval
                                                                   (doom-package-get name :ignore))
                                                                  (plist-member
                                                                   (doom-package-get name :recipe)
                                                                   :local-repo)
                                                                  (locate-library
                                                                   (symbol-name name))
                                                                  (doom-package-built-in-p name)
                                                                  (doom-package-installed-p name))
                                                                 (progn)
                                                               (doom-print
                                                                (doom-print--format
                                                                 (doom-print--class 'error "Missing emacs package: %S")
                                                                 name)))
                                                             (setq --cl-var--
                                                                   (cdr --cl-var--)))
                                                           nil)))
                                                   (if doctor-file
                                                       (progn
                                                         (let
                                                             ((inhibit-message t))
                                                           (load doctor-file 'noerror 'nomessage))))))
                                             ((debug file-missing)
                                              (progn
                                                (if inhibit-message nil
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'error "%s"
                                                                       (error-message-string ex)))))
                                                (setq doom-doctor--errors
                                                      (cons
                                                       (doom-print--format
                                                        (doom-print--class 'error "%s"
                                                                           (error-message-string ex)))
                                                       doom-doctor--errors))))
                                             ((debug error)
                                              (progn
                                                (if inhibit-message nil
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'error "Syntax error: %s" ex))))
                                                (setq doom-doctor--errors
                                                      (cons
                                                       (doom-print--format
                                                        (doom-print--class 'error "Syntax error: %s" ex))
                                                       doom-doctor--errors)))))
                                           (if
                                               (or doom-doctor--errors doom-doctor--warnings)
                                               (progn
                                                 (progn
                                                   (let
                                                       ((doom-print-level
                                                         (or nil doom-print-level))
                                                        (doom-print-indent
                                                         (+
                                                          (if t
                                                              (or nil doom-print-indent-increment)
                                                            0)
                                                          doom-print-indent)))
                                                     (doom-print
                                                      (doom-print--format
                                                       (doom-print--class 'start
                                                                          (doom-print--style 'bold "%s %s"))
                                                       group name))
                                                     (doom-print
                                                      (doom-print--format "%s"
                                                                          (string-join
                                                                           (append doom-doctor--errors doom-doctor--warnings)
                                                                           "\n")))))
                                                 (progn
                                                   (setq doom-local-errors doom-doctor--errors)
                                                   (setq doom-local-warnings doom-doctor--warnings)))))
                                         (setq doom-doctor--errors
                                               (append doom-doctor--errors doom-local-errors))
                                         (setq doom-doctor--warnings
                                               (append doom-doctor--warnings doom-local-warnings)))))))
                               (setq tail
                                     (cdr tail)))))))))
             ((debug error)
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                       (or
                                        (cdr-safe ex)
                                        (car ex))))))
                (setq doom-doctor--warnings
                      (cons
                       (doom-print--format
                        (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                           (or
                                            (cdr-safe ex)
                                            (car ex))))
                       doom-doctor--warnings)))
              (setq doom-modules nil)))
           (terpri)
           (let
               ((tail
                 (list
                  (list doom-doctor--warnings "warning" 'yellow)
                  (list doom-doctor--errors "error" 'red))))
             (while tail
               (let
                   ((msg
                     (car tail)))
                 (if
                     (car msg)
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'color
                                            (nth 2 msg)
                                            (if
                                                (cdr
                                                 (car msg))
                                                "There are %d %ss!" "There is %d %s!")
                                            (length
                                             (car msg))
                                            (nth 1 msg))))))
                 (setq tail
                       (cdr tail)))))
           (if
               (or doom-doctor--errors doom-doctor--warnings)
               nil
             (doom-print
              (doom-print--format
               (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))))
           (exit! :pager? "+G"))))))
  (x15 #s(doom-cli
          ("doom" "doctor")
          nil
          (("SUMMARY" . "Diagnoses common issues on your system.")
           ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
          nil nil nil nil
          (:benchmark nil :prefix
                      (doom)
                      :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
          (closure
              (t)
              (cli alist)
            (let nil
              (doom-print
               (doom-print--format "The doctor will see you now...\n"))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking your Emacs version...")))
              (progn
                (let
                    ((doom-print-level
                      (or nil doom-print-level))
                     (doom-print-indent
                      (+
                       (if t
                           (or nil doom-print-indent-increment)
                         0)
                       doom-print-indent)))
                  (cond
                   ((or
                     (> emacs-major-version 29)
                     (string-match-p ".\\([56]0\\|9[0-9]\\)$" emacs-version))
                    (progn
                      (if inhibit-message nil
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))))
                      (setq doom-doctor--warnings
                            (cons
                             (doom-print--format
                              (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))
                             doom-doctor--warnings)))
                    (if
                        (> emacs-major-version 29)
                        (progn
                          (let
                              ((doom-print-level
                                (or nil doom-print-level))
                               (doom-print-indent
                                (+
                                 (if t
                                     (or nil doom-print-indent-increment)
                                   0)
                                 doom-print-indent)))
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'p "This is the bleeding edge of Emacs. As it is constantly changed, Doom will not " "(officially) support it. If you've found a stable commit, great! But be " "cautious about updating Emacs too eagerly!\n")))))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "A .50, .60, or .9X appended to the version string indicates that this is a version " "of Emacs in between stable releases. These are not well supported.\n"))))))
                    (progn
                      (let
                          ((doom-print-level
                            (or nil doom-print-level))
                           (doom-print-indent
                            (+
                             (if t
                                 (or nil doom-print-indent-increment)
                               0)
                             doom-print-indent)))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'p "Because development builds are prone to random breakage, there will be a greater " "burden on you to investigate and deal with issues. Please make extra sure that " "your issue is reproducible in 29.1 before reporting them to Doom's issue tracker!\n" "\n" "If this doesn't phase you, read the \"Why does Doom not support Emacs HEAD\" QnA " "in Doom's FAQ. It offers some advice for debugging and surviving issues on the " "bleeding edge. Failing that, 29.1 is highly recommended and will always be " "Doom's best supported version of Emacs."))))))
                   ((= emacs-major-version 27)
                    (progn
                      (if inhibit-message nil
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))))
                      (setq doom-doctor--warnings
                            (cons
                             (doom-print--format
                              (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))
                             doom-doctor--warnings)))
                    (progn
                      (let
                          ((doom-print-level
                            (or nil doom-print-level))
                           (doom-print-indent
                            (+
                             (if t
                                 (or nil doom-print-indent-increment)
                               0)
                             doom-print-indent)))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'p "Emacs 28.1 is better supported, faster, and more stable. Plus, Doom will drop " "27.x support sometime late-2023.")))))))))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking for Doom's prerequisites...")))
              (progn
                (let
                    ((doom-print-level
                      (or nil doom-print-level))
                     (doom-print-indent
                      (+
                       (if t
                           (or nil doom-print-indent-increment)
                         0)
                       doom-print-indent)))
                  (if
                      (not
                       (executable-find "git"))
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))))
                        (setq doom-doctor--errors
                              (cons
                               (doom-print--format
                                (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                               doom-doctor--errors)))
                    (let
                        ((saved-match-data
                          (match-data)))
                      (unwind-protect
                          (progn
                            (let*
                                ((version
                                  (cdr
                                   (doom-call-process "git" "version")))
                                 (version
                                  (and
                                   (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                                   (match-string 1 version))))
                              (if version
                                  (if
                                      (version< version "2.23")
                                      (progn
                                        (progn
                                          (if inhibit-message nil
                                            (doom-print
                                             (doom-print--format
                                              (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))))
                                          (setq doom-doctor--errors
                                                (cons
                                                 (doom-print--format
                                                  (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                                 doom-doctor--errors)))))
                                (progn
                                  (if inhibit-message nil
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))))
                                  (setq doom-doctor--warnings
                                        (cons
                                         (doom-print--format
                                          (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                         doom-doctor--warnings))))))
                        (set-match-data saved-match-data t))))
                  (if
                      (executable-find "rg")
                      nil
                    (progn
                      (if inhibit-message nil
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))))
                      (setq doom-doctor--errors
                            (cons
                             (doom-print--format
                              (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                             doom-doctor--errors))))))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking for Emacs config conflicts...")))
              (progn
                (let
                    ((doom-print-level
                      (or nil doom-print-level))
                     (doom-print-indent
                      (+
                       (if t
                           (or nil doom-print-indent-increment)
                         0)
                       doom-print-indent)))
                  (if
                      (or
                       (file-equal-p doom-emacs-dir "~/.emacs.d")
                       (file-equal-p doom-emacs-dir "~/.config/emacs"))
                      nil
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'warn "Doom is installed in a non-standard location")))
                    (progn
                      (let
                          ((doom-print-level
                            (or nil doom-print-level))
                           (doom-print-indent
                            (+
                             (if t
                                 (or nil doom-print-indent-increment)
                               0)
                             doom-print-indent)))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'p "The standard locations are ~/.config/emacs or ~/.emacs.d. Emacs will fail " "to load Doom if it is not explicitly told where to look for it. In Emacs 29+, " "this is possible with the --init-directory option:\n\n" "  $ emacs --init-directory '"
                                             (abbreviate-file-name doom-emacs-dir)
                                             "'\n\n" "However, Emacs 27-28 users have no choice but to move Doom to a standard " "location.\n\n" "Chemacs users may ignore this warning, however."))))))
                  (let
                      (found?)
                    (let
                        ((tail
                          '("~/_emacs" "~/.emacs" "~/.emacs.el" "~/.emacs.d" "~/.config/emacs")))
                      (while tail
                        (let
                            ((file
                              (car tail)))
                          (if
                              (and
                               (file-exists-p file)
                               (not
                                (file-equal-p file doom-emacs-dir)))
                              (progn
                                (setq found? t)
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'warn "Found another Emacs config: %s (%s)")
                                  file
                                  (if
                                      (file-directory-p file)
                                      "directory" "file")))))
                          (setq tail
                                (cdr tail)))))
                    (if found?
                        (progn
                          (progn
                            (let
                                ((doom-print-level
                                  (or nil doom-print-level))
                                 (doom-print-indent
                                  (+
                                   (if t
                                       (or nil doom-print-indent-increment)
                                     0)
                                   doom-print-indent)))
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'p "Having multiple Emacs configs may prevent Doom from loading properly. Emacs " "will load the first it finds and ignore the rest. If Doom isn't starting up " "correctly (e.g. you get a vanilla splash screen), make sure that only one of " "these exist.\n\n" "Chemacs users may ignore this warning."))))))))))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking for missing Emacs features...")))
              (progn
                (let
                    ((doom-print-level
                      (or nil doom-print-level))
                     (doom-print-indent
                      (+
                       (if t
                           (or nil doom-print-indent-increment)
                         0)
                       doom-print-indent)))
                  (if
                      (functionp 'json-serialize)
                      nil
                    (progn
                      (if inhibit-message nil
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Emacs was not built with native JSON support"))))
                      (setq doom-doctor--warnings
                            (cons
                             (doom-print--format
                              (doom-print--class 'warn "Emacs was not built with native JSON support"))
                             doom-doctor--warnings)))
                    (progn
                      (let
                          ((doom-print-level
                            (or nil doom-print-level))
                           (doom-print-indent
                            (+
                             (if t
                                 (or nil doom-print-indent-increment)
                               0)
                             doom-print-indent)))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option."))))))
                  (if
                      (featurep 'native-compile)
                      nil
                    (progn
                      (if inhibit-message nil
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Emacs was not built with native compilation support"))))
                      (setq doom-doctor--warnings
                            (cons
                             (doom-print--format
                              (doom-print--class 'warn "Emacs was not built with native compilation support"))
                             doom-doctor--warnings)))
                    (progn
                      (let
                          ((doom-print-level
                            (or nil doom-print-level))
                           (doom-print-indent
                            (+
                             (if t
                                 (or nil doom-print-indent-increment)
                               0)
                             doom-print-indent)))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option."))))))))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking for private config conflicts...")))
              (progn
                (let
                    ((doom-print-level
                      (or nil doom-print-level))
                     (doom-print-indent
                      (+
                       (if t
                           (or nil doom-print-indent-increment)
                         0)
                       doom-print-indent)))
                  (let*
                      ((xdg-dir
                        (concat
                         (or
                          (getenv "XDG_CONFIG_HOME")
                          "~/.config")
                         "/doom/"))
                       (doom-dir
                        (or
                         (getenv "DOOMDIR")
                         "~/.doom.d/"))
                       (dir
                        (if
                            (file-directory-p xdg-dir)
                            xdg-dir doom-dir)))
                    (if
                        (file-equal-p dir doom-emacs-dir)
                        (progn
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                               (doom-print--class 'path dir))))
                          (progn
                            (let
                                ((doom-print-level
                                  (or nil doom-print-level))
                                 (doom-print-indent
                                  (+
                                   (if t
                                       (or nil doom-print-indent-increment)
                                     0)
                                   doom-print-indent)))
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'p "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")))))))
                    (if
                        (and
                         (not
                          (file-equal-p xdg-dir doom-dir))
                         (file-directory-p xdg-dir)
                         (file-directory-p doom-dir))
                        (progn
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Detected two private configs, in %s and %s")
                            (abbreviate-file-name xdg-dir)
                            doom-dir))
                          (progn
                            (let
                                ((doom-print-level
                                  (or nil doom-print-level))
                                 (doom-print-indent
                                  (+
                                   (if t
                                       (or nil doom-print-indent-increment)
                                     0)
                                   doom-print-indent)))
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'p "The second directory will be ignored, as it has lower precedence."))))))))))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking for common environmental issues...")))
              (if
                  (string-match-p "/fish$" shell-file-name)
                  (progn
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'warn "Detected Fish as your $SHELL")))
                    (progn
                      (let
                          ((doom-print-level
                            (or nil doom-print-level))
                           (doom-print-indent
                            (+
                             (if t
                                 (or nil doom-print-indent-increment)
                               0)
                             doom-print-indent)))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'p "Fish (and possibly other non-POSIX shells) is known to inject garbage " "output into some of the child processes that Emacs spawns. Many Emacs " "packages/utilities will choke on this output, causing unpredictable issues. " "To get around this, either:\n\n" "  - Add the following to $DOOMDIR/config.el:\n\n" "    (setq shell-file-name (executable-find \"bash\"))\n\n" "  - Or change your default shell to a POSIX shell (like bash or zsh) " "    and explicitly configure your terminal apps to use the shell you " "    want.\n\n" "If you opt for option 1 and use one of Emacs' terminal emulators, you " "will also need to configure them to use Fish, e.g.\n\n" "  (setq-default vterm-shell (executable-find \"fish\"))\n\n" "  (setq-default explicit-shell-file-name (executable-find \"fish\"))\n")))))))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking for stale elc files...")))
              (elc-check-dir doom-core-dir)
              (elc-check-dir doom-modules-dir)
              (elc-check-dir
               (doom-path doom-local-dir "straight" straight-build-dir))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking for problematic git global settings...")))
              (if
                  (executable-find "git")
                  (if
                      (= 0
                         (car
                          (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                      (progn
                        (progn
                          (if inhibit-message nil
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))))
                          (setq doom-doctor--warnings
                                (cons
                                 (doom-print--format
                                  (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                                 doom-doctor--warnings)))
                        (progn
                          (let
                              ((doom-print-level
                                (or nil doom-print-level))
                               (doom-print-indent
                                (+
                                 (if t
                                     (or nil doom-print-indent-increment)
                                   0)
                                 doom-print-indent)))
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'p "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")))))))
                (progn
                  (if inhibit-message nil
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))))
                  (setq doom-doctor--errors
                        (cons
                         (doom-print--format
                          (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                         doom-doctor--errors))))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking Doom Emacs...")))
              (condition-case ex
                  (progn
                    (let
                        ((doom-print-level
                          (or nil doom-print-level))
                         (doom-print-indent
                          (+
                           (if t
                               (or nil doom-print-indent-increment)
                             0)
                           doom-print-indent)))
                      (require 'doom-start)
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'success "Initialized Doom Emacs %s")
                        doom-version))
                      (doom-print
                       (doom-print--format
                        (if
                            (hash-table-p doom-modules)
                            (doom-print--class 'success "Detected %d modules"
                                               (hash-table-count doom-modules))
                          (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?"))))
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'success "Detected %d packages")
                        (length doom-packages)))
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'start "Checking Doom core for irregularities...")))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (let
                              ((tail
                                (list "savehist" "projectile.cache")))
                            (while tail
                              (let
                                  ((file
                                    (car tail)))
                                (let*
                                    ((size
                                      (and t
                                           (condition-case nil
                                               (progn
                                                 (doom-file-size file doom-cache-dir))
                                             (error nil)))))
                                  (if size
                                      (if
                                          (> size 1048576)
                                          (progn
                                            (progn
                                              (if inhibit-message nil
                                                (doom-print
                                                 (doom-print--format
                                                  (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                     (/ size 1024 1024.0)))))
                                              (setq doom-doctor--warnings
                                                    (cons
                                                     (doom-print--format
                                                      (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                         (/ size 1024 1024.0)))
                                                     doom-doctor--warnings)))
                                            (progn
                                              (let
                                                  ((doom-print-level
                                                    (or nil doom-print-level))
                                                   (doom-print-indent
                                                    (+
                                                     (if t
                                                         (or nil doom-print-indent-increment)
                                                       0)
                                                     doom-print-indent)))
                                                (doom-print
                                                 (doom-print--format
                                                  (doom-print--class 'p "Consider deleting it from your system (manually)")))))))
                                    nil))
                                (setq tail
                                      (cdr tail)))))
                          (if
                              (condition-case nil
                                  (progn
                                    (executable-find doom-fd-executable))
                                (error nil))
                              nil
                            (progn
                              (if inhibit-message nil
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))))
                              (setq doom-doctor--warnings
                                    (cons
                                     (doom-print--format
                                      (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                     doom-doctor--warnings))))
                          (require 'projectile)
                          (if
                              (projectile-project-root "~")
                              (progn
                                (progn
                                  (if inhibit-message nil
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'warn "Your $HOME is recognized as a project root"))))
                                  (setq doom-doctor--warnings
                                        (cons
                                         (doom-print--format
                                          (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                         doom-doctor--warnings)))
                                (progn
                                  (let
                                      ((doom-print-level
                                        (or nil doom-print-level))
                                       (doom-print-indent
                                        (+
                                         (if t
                                             (or nil doom-print-indent-increment)
                                           0)
                                         doom-print-indent)))
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'p "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")))))))
                          (if
                              (and
                               (file-equal-p doom-user-dir "~/.config/doom")
                               (file-directory-p "~/.doom.d"))
                              (progn
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                                  (doom-print--class 'path doom-user-dir)))
                                (progn
                                  (let
                                      ((doom-print-level
                                        (or nil doom-print-level))
                                       (doom-print-indent
                                        (+
                                         (if t
                                             (or nil doom-print-indent-increment)
                                           0)
                                         doom-print-indent)))
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'p "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")))))))
                          (if
                              (not
                               (executable-find "fc-list"))
                              (progn
                                (if inhibit-message nil
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))))
                                (setq doom-doctor--warnings
                                      (cons
                                       (doom-print--format
                                        (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                       doom-doctor--warnings)))
                            (if
                                (and
                                 (cond
                                  ((eq system-type 'gnu/linux)
                                   (let nil
                                     (concat
                                      (or
                                       (getenv "XDG_DATA_HOME")
                                       "~/.local/share")
                                      "/fonts/")))
                                  ((eq system-type 'darwin)
                                   (let nil "~/Library/Fonts/")))
                                 (require 'nerd-icons nil t))
                                (progn
                                  (let
                                      ((temp-buffer
                                        (generate-new-buffer " *temp*" t)))
                                    (save-current-buffer
                                      (set-buffer temp-buffer)
                                      (unwind-protect
                                          (progn
                                            (let
                                                ((errors 0))
                                              (let*
                                                  ((output
                                                    (doom-call-process "fc-list" "" "file"))
                                                   (status
                                                    (if output
                                                        (car-safe
                                                         (prog1 output
                                                           (setq output
                                                                 (cdr output))))
                                                      (signal 'wrong-number-of-arguments
                                                              (list
                                                               '(status . output)
                                                               (length output))))))
                                                (if
                                                    (not
                                                     (= 0 status))
                                                    (doom-print
                                                     (doom-print--format
                                                      (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?")))
                                                  (insert
                                                   (cdr
                                                    (doom-call-process "fc-list" "" "file")))
                                                  (let
                                                      ((tail nerd-icons-font-names))
                                                    (while tail
                                                      (let
                                                          ((font
                                                            (car tail)))
                                                        (if
                                                            (save-excursion
                                                              (re-search-backward font nil t))
                                                            (doom-print
                                                             (doom-print--format
                                                              (doom-print--style 'green "Found font %s" font)))
                                                          (doom-print
                                                           (doom-print--format
                                                            (doom-print--class 'warn "%S font is not installed on your system")
                                                            font))
                                                          (setq errors
                                                                (1+ errors)))
                                                        (setq tail
                                                              (cdr tail)))))
                                                  (if
                                                      (> errors 0)
                                                      (progn
                                                        (progn
                                                          (let
                                                              ((doom-print-level
                                                                (or nil doom-print-level))
                                                               (doom-print-indent
                                                                (+
                                                                 (if t
                                                                     (or nil doom-print-indent-increment)
                                                                   0)
                                                                 doom-print-indent)))
                                                            (doom-print
                                                             (doom-print--format
                                                              (doom-print--class 'p "Some needed fonts are not properly installed on your system. To download and " "install them, run `M-x nerd-icons-install-fonts' from within Doom Emacs. " "However, on Windows this command will only download them; the fonts must " "be installed manually afterwards.")))))))))))
                                        (and
                                         (buffer-name temp-buffer)
                                         (kill-buffer temp-buffer))))))))))
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'start "Checking for stale elc files in your DOOMDIR...")))
                      (if
                          (file-directory-p doom-user-dir)
                          (progn
                            (progn
                              (let
                                  ((doom-print-level
                                    (or nil doom-print-level))
                                   (doom-print-indent
                                    (+
                                     (if t
                                         (or nil doom-print-indent-increment)
                                       0)
                                     doom-print-indent)))
                                (elc-check-dir doom-user-dir)))))
                      (if doom-modules
                          (progn
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'start "Checking your enabled modules...")))
                            (advice-add #'require :around #'doom-shut-up-a)
                            (let
                                ((tail
                                  (doom-module-list)))
                              (while tail
                                (let
                                    ((x54
                                      (car tail)))
                                  (progn
                                    (ignore
                                     (consp x54))
                                    (let*
                                        ((x55
                                          (car-safe x54))
                                         (x56
                                          (cdr-safe x54)))
                                      (let
                                          ((group x55)
                                           (name x56))
                                        (let
                                            ((doom-context doom-context))
                                          (let
                                              ((tail
                                                (ensure-list 'doctor)))
                                            (while tail
                                              (let
                                                  ((context
                                                    (car tail)))
                                                (doom-context-push context)
                                                (setq tail
                                                      (cdr tail)))))
                                          (let
                                              (doom-local-errors doom-local-warnings)
                                            (let
                                                (doom-doctor--errors doom-doctor--warnings)
                                              (condition-case ex
                                                  (let
                                                      ((doom-module-context
                                                        (doom-module-context
                                                         (cons group name))))
                                                    (if
                                                        (and
                                                         (not doom-inhibit-log)
                                                         (or
                                                          (not noninteractive)
                                                          (<= 2 doom-log-level)))
                                                        (progn
                                                          (doom--log 2 ":context:module: =%s" doom-module-context)))
                                                    (let
                                                        ((doctor-file
                                                          (doom-module-expand-path group name "doctor.el"))
                                                         (packages-file
                                                          (doom-module-expand-path group name doom-module-packages-file)))
                                                      (if packages-file
                                                          (progn
                                                            (let*
                                                                ((doom-output-indent 6)
                                                                 (--cl-var--
                                                                  (let
                                                                      ((doom-context doom-context))
                                                                    (let
                                                                        ((tail
                                                                          (ensure-list 'packages)))
                                                                      (while tail
                                                                        (let
                                                                            ((context
                                                                              (car tail)))
                                                                          (doom-context-push context)
                                                                          (setq tail
                                                                                (cdr tail)))))
                                                                    (let*
                                                                        (doom-packages doom-disabled-packages)
                                                                      (load packages-file 'noerror 'nomessage)
                                                                      (mapcar #'car doom-packages))))
                                                                 (name nil))
                                                              (while
                                                                  (consp --cl-var--)
                                                                (setq name
                                                                      (car --cl-var--))
                                                                (if
                                                                    (or
                                                                     (doom-package-get name :disable)
                                                                     (eval
                                                                      (doom-package-get name :ignore))
                                                                     (plist-member
                                                                      (doom-package-get name :recipe)
                                                                      :local-repo)
                                                                     (locate-library
                                                                      (symbol-name name))
                                                                     (doom-package-built-in-p name)
                                                                     (doom-package-installed-p name))
                                                                    (progn)
                                                                  (doom-print
                                                                   (doom-print--format
                                                                    (doom-print--class 'error "Missing emacs package: %S")
                                                                    name)))
                                                                (setq --cl-var--
                                                                      (cdr --cl-var--)))
                                                              nil)))
                                                      (if doctor-file
                                                          (progn
                                                            (let
                                                                ((inhibit-message t))
                                                              (load doctor-file 'noerror 'nomessage))))))
                                                ((debug file-missing)
                                                 (progn
                                                   (if inhibit-message nil
                                                     (doom-print
                                                      (doom-print--format
                                                       (doom-print--class 'error "%s"
                                                                          (error-message-string ex)))))
                                                   (setq doom-doctor--errors
                                                         (cons
                                                          (doom-print--format
                                                           (doom-print--class 'error "%s"
                                                                              (error-message-string ex)))
                                                          doom-doctor--errors))))
                                                ((debug error)
                                                 (progn
                                                   (if inhibit-message nil
                                                     (doom-print
                                                      (doom-print--format
                                                       (doom-print--class 'error "Syntax error: %s" ex))))
                                                   (setq doom-doctor--errors
                                                         (cons
                                                          (doom-print--format
                                                           (doom-print--class 'error "Syntax error: %s" ex))
                                                          doom-doctor--errors)))))
                                              (if
                                                  (or doom-doctor--errors doom-doctor--warnings)
                                                  (progn
                                                    (progn
                                                      (let
                                                          ((doom-print-level
                                                            (or nil doom-print-level))
                                                           (doom-print-indent
                                                            (+
                                                             (if t
                                                                 (or nil doom-print-indent-increment)
                                                               0)
                                                             doom-print-indent)))
                                                        (doom-print
                                                         (doom-print--format
                                                          (doom-print--class 'start
                                                                             (doom-print--style 'bold "%s %s"))
                                                          group name))
                                                        (doom-print
                                                         (doom-print--format "%s"
                                                                             (string-join
                                                                              (append doom-doctor--errors doom-doctor--warnings)
                                                                              "\n")))))
                                                    (progn
                                                      (setq doom-local-errors doom-doctor--errors)
                                                      (setq doom-local-warnings doom-doctor--warnings)))))
                                            (setq doom-doctor--errors
                                                  (append doom-doctor--errors doom-local-errors))
                                            (setq doom-doctor--warnings
                                                  (append doom-doctor--warnings doom-local-warnings)))))))
                                  (setq tail
                                        (cdr tail)))))))))
                ((debug error)
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                          (or
                                           (cdr-safe ex)
                                           (car ex))))))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                              (or
                                               (cdr-safe ex)
                                               (car ex))))
                          doom-doctor--warnings)))
                 (setq doom-modules nil)))
              (terpri)
              (let
                  ((tail
                    (list
                     (list doom-doctor--warnings "warning" 'yellow)
                     (list doom-doctor--errors "error" 'red))))
                (while tail
                  (let
                      ((msg
                        (car tail)))
                    (if
                        (car msg)
                        (progn
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'color
                                               (nth 2 msg)
                                               (if
                                                   (cdr
                                                    (car msg))
                                                   "There are %d %ss!" "There is %d %s!")
                                               (length
                                                (car msg))
                                               (nth 1 msg))))))
                    (setq tail
                          (cdr tail)))))
              (if
                  (or doom-doctor--errors doom-doctor--warnings)
                  nil
                (doom-print
                 (doom-print--format
                  (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))))
              (exit! :pager? "+G")))))
  (x16 . #s(doom-cli
            ("doom" "doctor")
            nil
            (("SUMMARY" . "Diagnoses common issues on your system.")
             ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
            nil nil nil nil
            (:benchmark nil :prefix
                        (doom)
                        :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
            (closure
                (t)
                (cli alist)
              (let nil
                (doom-print
                 (doom-print--format "The doctor will see you now...\n"))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking your Emacs version...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (cond
                     ((or
                       (> emacs-major-version 29)
                       (string-match-p ".\\([56]0\\|9[0-9]\\)$" emacs-version))
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))
                               doom-doctor--warnings)))
                      (if
                          (> emacs-major-version 29)
                          (progn
                            (let
                                ((doom-print-level
                                  (or nil doom-print-level))
                                 (doom-print-indent
                                  (+
                                   (if t
                                       (or nil doom-print-indent-increment)
                                     0)
                                   doom-print-indent)))
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'p "This is the bleeding edge of Emacs. As it is constantly changed, Doom will not " "(officially) support it. If you've found a stable commit, great! But be " "cautious about updating Emacs too eagerly!\n")))))
                        (progn
                          (let
                              ((doom-print-level
                                (or nil doom-print-level))
                               (doom-print-indent
                                (+
                                 (if t
                                     (or nil doom-print-indent-increment)
                                   0)
                                 doom-print-indent)))
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'p "A .50, .60, or .9X appended to the version string indicates that this is a version " "of Emacs in between stable releases. These are not well supported.\n"))))))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Because development builds are prone to random breakage, there will be a greater " "burden on you to investigate and deal with issues. Please make extra sure that " "your issue is reproducible in 29.1 before reporting them to Doom's issue tracker!\n" "\n" "If this doesn't phase you, read the \"Why does Doom not support Emacs HEAD\" QnA " "in Doom's FAQ. It offers some advice for debugging and surviving issues on the " "bleeding edge. Failing that, 29.1 is highly recommended and will always be " "Doom's best supported version of Emacs."))))))
                     ((= emacs-major-version 27)
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))
                               doom-doctor--warnings)))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Emacs 28.1 is better supported, faster, and more stable. Plus, Doom will drop " "27.x support sometime late-2023.")))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for Doom's prerequisites...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (if
                        (not
                         (executable-find "git"))
                        (progn
                          (if inhibit-message nil
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))))
                          (setq doom-doctor--errors
                                (cons
                                 (doom-print--format
                                  (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                                 doom-doctor--errors)))
                      (let
                          ((saved-match-data
                            (match-data)))
                        (unwind-protect
                            (progn
                              (let*
                                  ((version
                                    (cdr
                                     (doom-call-process "git" "version")))
                                   (version
                                    (and
                                     (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                                     (match-string 1 version))))
                                (if version
                                    (if
                                        (version< version "2.23")
                                        (progn
                                          (progn
                                            (if inhibit-message nil
                                              (doom-print
                                               (doom-print--format
                                                (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))))
                                            (setq doom-doctor--errors
                                                  (cons
                                                   (doom-print--format
                                                    (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                                   doom-doctor--errors)))))
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))))
                                    (setq doom-doctor--warnings
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                           doom-doctor--warnings))))))
                          (set-match-data saved-match-data t))))
                    (if
                        (executable-find "rg")
                        nil
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))))
                        (setq doom-doctor--errors
                              (cons
                               (doom-print--format
                                (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                               doom-doctor--errors))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for Emacs config conflicts...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (if
                        (or
                         (file-equal-p doom-emacs-dir "~/.emacs.d")
                         (file-equal-p doom-emacs-dir "~/.config/emacs"))
                        nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Doom is installed in a non-standard location")))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "The standard locations are ~/.config/emacs or ~/.emacs.d. Emacs will fail " "to load Doom if it is not explicitly told where to look for it. In Emacs 29+, " "this is possible with the --init-directory option:\n\n" "  $ emacs --init-directory '"
                                               (abbreviate-file-name doom-emacs-dir)
                                               "'\n\n" "However, Emacs 27-28 users have no choice but to move Doom to a standard " "location.\n\n" "Chemacs users may ignore this warning, however."))))))
                    (let
                        (found?)
                      (let
                          ((tail
                            '("~/_emacs" "~/.emacs" "~/.emacs.el" "~/.emacs.d" "~/.config/emacs")))
                        (while tail
                          (let
                              ((file
                                (car tail)))
                            (if
                                (and
                                 (file-exists-p file)
                                 (not
                                  (file-equal-p file doom-emacs-dir)))
                                (progn
                                  (setq found? t)
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'warn "Found another Emacs config: %s (%s)")
                                    file
                                    (if
                                        (file-directory-p file)
                                        "directory" "file")))))
                            (setq tail
                                  (cdr tail)))))
                      (if found?
                          (progn
                            (progn
                              (let
                                  ((doom-print-level
                                    (or nil doom-print-level))
                                   (doom-print-indent
                                    (+
                                     (if t
                                         (or nil doom-print-indent-increment)
                                       0)
                                     doom-print-indent)))
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'p "Having multiple Emacs configs may prevent Doom from loading properly. Emacs " "will load the first it finds and ignore the rest. If Doom isn't starting up " "correctly (e.g. you get a vanilla splash screen), make sure that only one of " "these exist.\n\n" "Chemacs users may ignore this warning."))))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for missing Emacs features...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (if
                        (functionp 'json-serialize)
                        nil
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Emacs was not built with native JSON support"))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Emacs was not built with native JSON support"))
                               doom-doctor--warnings)))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option."))))))
                    (if
                        (featurep 'native-compile)
                        nil
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Emacs was not built with native compilation support"))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Emacs was not built with native compilation support"))
                               doom-doctor--warnings)))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option."))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for private config conflicts...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (let*
                        ((xdg-dir
                          (concat
                           (or
                            (getenv "XDG_CONFIG_HOME")
                            "~/.config")
                           "/doom/"))
                         (doom-dir
                          (or
                           (getenv "DOOMDIR")
                           "~/.doom.d/"))
                         (dir
                          (if
                              (file-directory-p xdg-dir)
                              xdg-dir doom-dir)))
                      (if
                          (file-equal-p dir doom-emacs-dir)
                          (progn
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                                 (doom-print--class 'path dir))))
                            (progn
                              (let
                                  ((doom-print-level
                                    (or nil doom-print-level))
                                   (doom-print-indent
                                    (+
                                     (if t
                                         (or nil doom-print-indent-increment)
                                       0)
                                     doom-print-indent)))
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'p "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")))))))
                      (if
                          (and
                           (not
                            (file-equal-p xdg-dir doom-dir))
                           (file-directory-p xdg-dir)
                           (file-directory-p doom-dir))
                          (progn
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'warn "Detected two private configs, in %s and %s")
                              (abbreviate-file-name xdg-dir)
                              doom-dir))
                            (progn
                              (let
                                  ((doom-print-level
                                    (or nil doom-print-level))
                                   (doom-print-indent
                                    (+
                                     (if t
                                         (or nil doom-print-indent-increment)
                                       0)
                                     doom-print-indent)))
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'p "The second directory will be ignored, as it has lower precedence."))))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for common environmental issues...")))
                (if
                    (string-match-p "/fish$" shell-file-name)
                    (progn
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Detected Fish as your $SHELL")))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Fish (and possibly other non-POSIX shells) is known to inject garbage " "output into some of the child processes that Emacs spawns. Many Emacs " "packages/utilities will choke on this output, causing unpredictable issues. " "To get around this, either:\n\n" "  - Add the following to $DOOMDIR/config.el:\n\n" "    (setq shell-file-name (executable-find \"bash\"))\n\n" "  - Or change your default shell to a POSIX shell (like bash or zsh) " "    and explicitly configure your terminal apps to use the shell you " "    want.\n\n" "If you opt for option 1 and use one of Emacs' terminal emulators, you " "will also need to configure them to use Fish, e.g.\n\n" "  (setq-default vterm-shell (executable-find \"fish\"))\n\n" "  (setq-default explicit-shell-file-name (executable-find \"fish\"))\n")))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for stale elc files...")))
                (elc-check-dir doom-core-dir)
                (elc-check-dir doom-modules-dir)
                (elc-check-dir
                 (doom-path doom-local-dir "straight" straight-build-dir))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for problematic git global settings...")))
                (if
                    (executable-find "git")
                    (if
                        (= 0
                           (car
                            (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                        (progn
                          (progn
                            (if inhibit-message nil
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))))
                            (setq doom-doctor--warnings
                                  (cons
                                   (doom-print--format
                                    (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                                   doom-doctor--warnings)))
                          (progn
                            (let
                                ((doom-print-level
                                  (or nil doom-print-level))
                                 (doom-print-indent
                                  (+
                                   (if t
                                       (or nil doom-print-indent-increment)
                                     0)
                                   doom-print-indent)))
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'p "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")))))))
                  (progn
                    (if inhibit-message nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))))
                    (setq doom-doctor--errors
                          (cons
                           (doom-print--format
                            (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                           doom-doctor--errors))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking Doom Emacs...")))
                (condition-case ex
                    (progn
                      (let
                          ((doom-print-level
                            (or nil doom-print-level))
                           (doom-print-indent
                            (+
                             (if t
                                 (or nil doom-print-indent-increment)
                               0)
                             doom-print-indent)))
                        (require 'doom-start)
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'success "Initialized Doom Emacs %s")
                          doom-version))
                        (doom-print
                         (doom-print--format
                          (if
                              (hash-table-p doom-modules)
                              (doom-print--class 'success "Detected %d modules"
                                                 (hash-table-count doom-modules))
                            (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?"))))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'success "Detected %d packages")
                          (length doom-packages)))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'start "Checking Doom core for irregularities...")))
                        (progn
                          (let
                              ((doom-print-level
                                (or nil doom-print-level))
                               (doom-print-indent
                                (+
                                 (if t
                                     (or nil doom-print-indent-increment)
                                   0)
                                 doom-print-indent)))
                            (let
                                ((tail
                                  (list "savehist" "projectile.cache")))
                              (while tail
                                (let
                                    ((file
                                      (car tail)))
                                  (let*
                                      ((size
                                        (and t
                                             (condition-case nil
                                                 (progn
                                                   (doom-file-size file doom-cache-dir))
                                               (error nil)))))
                                    (if size
                                        (if
                                            (> size 1048576)
                                            (progn
                                              (progn
                                                (if inhibit-message nil
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                       (/ size 1024 1024.0)))))
                                                (setq doom-doctor--warnings
                                                      (cons
                                                       (doom-print--format
                                                        (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                           (/ size 1024 1024.0)))
                                                       doom-doctor--warnings)))
                                              (progn
                                                (let
                                                    ((doom-print-level
                                                      (or nil doom-print-level))
                                                     (doom-print-indent
                                                      (+
                                                       (if t
                                                           (or nil doom-print-indent-increment)
                                                         0)
                                                       doom-print-indent)))
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'p "Consider deleting it from your system (manually)")))))))
                                      nil))
                                  (setq tail
                                        (cdr tail)))))
                            (if
                                (condition-case nil
                                    (progn
                                      (executable-find doom-fd-executable))
                                  (error nil))
                                nil
                              (progn
                                (if inhibit-message nil
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))))
                                (setq doom-doctor--warnings
                                      (cons
                                       (doom-print--format
                                        (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                       doom-doctor--warnings))))
                            (require 'projectile)
                            (if
                                (projectile-project-root "~")
                                (progn
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'warn "Your $HOME is recognized as a project root"))))
                                    (setq doom-doctor--warnings
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                           doom-doctor--warnings)))
                                  (progn
                                    (let
                                        ((doom-print-level
                                          (or nil doom-print-level))
                                         (doom-print-indent
                                          (+
                                           (if t
                                               (or nil doom-print-indent-increment)
                                             0)
                                           doom-print-indent)))
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'p "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")))))))
                            (if
                                (and
                                 (file-equal-p doom-user-dir "~/.config/doom")
                                 (file-directory-p "~/.doom.d"))
                                (progn
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                                    (doom-print--class 'path doom-user-dir)))
                                  (progn
                                    (let
                                        ((doom-print-level
                                          (or nil doom-print-level))
                                         (doom-print-indent
                                          (+
                                           (if t
                                               (or nil doom-print-indent-increment)
                                             0)
                                           doom-print-indent)))
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'p "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")))))))
                            (if
                                (not
                                 (executable-find "fc-list"))
                                (progn
                                  (if inhibit-message nil
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))))
                                  (setq doom-doctor--warnings
                                        (cons
                                         (doom-print--format
                                          (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                         doom-doctor--warnings)))
                              (if
                                  (and
                                   (cond
                                    ((eq system-type 'gnu/linux)
                                     (let nil
                                       (concat
                                        (or
                                         (getenv "XDG_DATA_HOME")
                                         "~/.local/share")
                                        "/fonts/")))
                                    ((eq system-type 'darwin)
                                     (let nil "~/Library/Fonts/")))
                                   (require 'nerd-icons nil t))
                                  (progn
                                    (let
                                        ((temp-buffer
                                          (generate-new-buffer " *temp*" t)))
                                      (save-current-buffer
                                        (set-buffer temp-buffer)
                                        (unwind-protect
                                            (progn
                                              (let
                                                  ((errors 0))
                                                (let*
                                                    ((output
                                                      (doom-call-process "fc-list" "" "file"))
                                                     (status
                                                      (if output
                                                          (car-safe
                                                           (prog1 output
                                                             (setq output
                                                                   (cdr output))))
                                                        (signal 'wrong-number-of-arguments
                                                                (list
                                                                 '(status . output)
                                                                 (length output))))))
                                                  (if
                                                      (not
                                                       (= 0 status))
                                                      (doom-print
                                                       (doom-print--format
                                                        (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?")))
                                                    (insert
                                                     (cdr
                                                      (doom-call-process "fc-list" "" "file")))
                                                    (let
                                                        ((tail nerd-icons-font-names))
                                                      (while tail
                                                        (let
                                                            ((font
                                                              (car tail)))
                                                          (if
                                                              (save-excursion
                                                                (re-search-backward font nil t))
                                                              (doom-print
                                                               (doom-print--format
                                                                (doom-print--style 'green "Found font %s" font)))
                                                            (doom-print
                                                             (doom-print--format
                                                              (doom-print--class 'warn "%S font is not installed on your system")
                                                              font))
                                                            (setq errors
                                                                  (1+ errors)))
                                                          (setq tail
                                                                (cdr tail)))))
                                                    (if
                                                        (> errors 0)
                                                        (progn
                                                          (progn
                                                            (let
                                                                ((doom-print-level
                                                                  (or nil doom-print-level))
                                                                 (doom-print-indent
                                                                  (+
                                                                   (if t
                                                                       (or nil doom-print-indent-increment)
                                                                     0)
                                                                   doom-print-indent)))
                                                              (doom-print
                                                               (doom-print--format
                                                                (doom-print--class 'p "Some needed fonts are not properly installed on your system. To download and " "install them, run `M-x nerd-icons-install-fonts' from within Doom Emacs. " "However, on Windows this command will only download them; the fonts must " "be installed manually afterwards.")))))))))))
                                          (and
                                           (buffer-name temp-buffer)
                                           (kill-buffer temp-buffer))))))))))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'start "Checking for stale elc files in your DOOMDIR...")))
                        (if
                            (file-directory-p doom-user-dir)
                            (progn
                              (progn
                                (let
                                    ((doom-print-level
                                      (or nil doom-print-level))
                                     (doom-print-indent
                                      (+
                                       (if t
                                           (or nil doom-print-indent-increment)
                                         0)
                                       doom-print-indent)))
                                  (elc-check-dir doom-user-dir)))))
                        (if doom-modules
                            (progn
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'start "Checking your enabled modules...")))
                              (advice-add #'require :around #'doom-shut-up-a)
                              (let
                                  ((tail
                                    (doom-module-list)))
                                (while tail
                                  (let
                                      ((x54
                                        (car tail)))
                                    (progn
                                      (ignore
                                       (consp x54))
                                      (let*
                                          ((x55
                                            (car-safe x54))
                                           (x56
                                            (cdr-safe x54)))
                                        (let
                                            ((group x55)
                                             (name x56))
                                          (let
                                              ((doom-context doom-context))
                                            (let
                                                ((tail
                                                  (ensure-list 'doctor)))
                                              (while tail
                                                (let
                                                    ((context
                                                      (car tail)))
                                                  (doom-context-push context)
                                                  (setq tail
                                                        (cdr tail)))))
                                            (let
                                                (doom-local-errors doom-local-warnings)
                                              (let
                                                  (doom-doctor--errors doom-doctor--warnings)
                                                (condition-case ex
                                                    (let
                                                        ((doom-module-context
                                                          (doom-module-context
                                                           (cons group name))))
                                                      (if
                                                          (and
                                                           (not doom-inhibit-log)
                                                           (or
                                                            (not noninteractive)
                                                            (<= 2 doom-log-level)))
                                                          (progn
                                                            (doom--log 2 ":context:module: =%s" doom-module-context)))
                                                      (let
                                                          ((doctor-file
                                                            (doom-module-expand-path group name "doctor.el"))
                                                           (packages-file
                                                            (doom-module-expand-path group name doom-module-packages-file)))
                                                        (if packages-file
                                                            (progn
                                                              (let*
                                                                  ((doom-output-indent 6)
                                                                   (--cl-var--
                                                                    (let
                                                                        ((doom-context doom-context))
                                                                      (let
                                                                          ((tail
                                                                            (ensure-list 'packages)))
                                                                        (while tail
                                                                          (let
                                                                              ((context
                                                                                (car tail)))
                                                                            (doom-context-push context)
                                                                            (setq tail
                                                                                  (cdr tail)))))
                                                                      (let*
                                                                          (doom-packages doom-disabled-packages)
                                                                        (load packages-file 'noerror 'nomessage)
                                                                        (mapcar #'car doom-packages))))
                                                                   (name nil))
                                                                (while
                                                                    (consp --cl-var--)
                                                                  (setq name
                                                                        (car --cl-var--))
                                                                  (if
                                                                      (or
                                                                       (doom-package-get name :disable)
                                                                       (eval
                                                                        (doom-package-get name :ignore))
                                                                       (plist-member
                                                                        (doom-package-get name :recipe)
                                                                        :local-repo)
                                                                       (locate-library
                                                                        (symbol-name name))
                                                                       (doom-package-built-in-p name)
                                                                       (doom-package-installed-p name))
                                                                      (progn)
                                                                    (doom-print
                                                                     (doom-print--format
                                                                      (doom-print--class 'error "Missing emacs package: %S")
                                                                      name)))
                                                                  (setq --cl-var--
                                                                        (cdr --cl-var--)))
                                                                nil)))
                                                        (if doctor-file
                                                            (progn
                                                              (let
                                                                  ((inhibit-message t))
                                                                (load doctor-file 'noerror 'nomessage))))))
                                                  ((debug file-missing)
                                                   (progn
                                                     (if inhibit-message nil
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'error "%s"
                                                                            (error-message-string ex)))))
                                                     (setq doom-doctor--errors
                                                           (cons
                                                            (doom-print--format
                                                             (doom-print--class 'error "%s"
                                                                                (error-message-string ex)))
                                                            doom-doctor--errors))))
                                                  ((debug error)
                                                   (progn
                                                     (if inhibit-message nil
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'error "Syntax error: %s" ex))))
                                                     (setq doom-doctor--errors
                                                           (cons
                                                            (doom-print--format
                                                             (doom-print--class 'error "Syntax error: %s" ex))
                                                            doom-doctor--errors)))))
                                                (if
                                                    (or doom-doctor--errors doom-doctor--warnings)
                                                    (progn
                                                      (progn
                                                        (let
                                                            ((doom-print-level
                                                              (or nil doom-print-level))
                                                             (doom-print-indent
                                                              (+
                                                               (if t
                                                                   (or nil doom-print-indent-increment)
                                                                 0)
                                                               doom-print-indent)))
                                                          (doom-print
                                                           (doom-print--format
                                                            (doom-print--class 'start
                                                                               (doom-print--style 'bold "%s %s"))
                                                            group name))
                                                          (doom-print
                                                           (doom-print--format "%s"
                                                                               (string-join
                                                                                (append doom-doctor--errors doom-doctor--warnings)
                                                                                "\n")))))
                                                      (progn
                                                        (setq doom-local-errors doom-doctor--errors)
                                                        (setq doom-local-warnings doom-doctor--warnings)))))
                                              (setq doom-doctor--errors
                                                    (append doom-doctor--errors doom-local-errors))
                                              (setq doom-doctor--warnings
                                                    (append doom-doctor--warnings doom-local-warnings)))))))
                                    (setq tail
                                          (cdr tail)))))))))
                  ((debug error)
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                            (or
                                             (cdr-safe ex)
                                             (car ex))))))
                     (setq doom-doctor--warnings
                           (cons
                            (doom-print--format
                             (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                                (or
                                                 (cdr-safe ex)
                                                 (car ex))))
                            doom-doctor--warnings)))
                   (setq doom-modules nil)))
                (terpri)
                (let
                    ((tail
                      (list
                       (list doom-doctor--warnings "warning" 'yellow)
                       (list doom-doctor--errors "error" 'red))))
                  (while tail
                    (let
                        ((msg
                          (car tail)))
                      (if
                          (car msg)
                          (progn
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'color
                                                 (nth 2 msg)
                                                 (if
                                                     (cdr
                                                      (car msg))
                                                     "There are %d %ss!" "There is %d %s!")
                                                 (length
                                                  (car msg))
                                                 (nth 1 msg))))))
                      (setq tail
                            (cdr tail)))))
                (if
                    (or doom-doctor--errors doom-doctor--warnings)
                    nil
                  (doom-print
                   (doom-print--format
                    (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))))
                (exit! :pager? "+G")))))
  (x17)))

;;;; 37
((progn
   (ignore
    (consp x15))
   (let*
       ((x16
         (car-safe x15))
        (x17
         (cdr-safe x15)))
     (let
         ((cli x16)
          (bindings x17))
       (doom-cli-execute cli bindings))))
 nil)

;;;; 38
((let
     ((x15
       (car tail)))
   (progn
     (ignore
      (consp x15))
     (let*
         ((x16
           (car-safe x15))
          (x17
           (cdr-safe x15)))
       (let
           ((cli x16)
            (bindings x17))
         (doom-cli-execute cli bindings))))
   (setq tail
         (cdr tail)))
 ((context . #s(doom-cli-context
                (26384 50378 735038 513000)
                65238 0
                (88 . 27)
                nil nil "doom" nil nil
                ("doom" "doctor")
                nil
                ("doctor")
                (("--eval")
                 ("-E")
                 ("--strict-load")
                 ("--load")
                 ("-L")
                 ("--color")
                 ("--benchmark")
                 ("--profile")
                 ("--pager")
                 ("--emacsdir")
                 ("--doomdir")
                 ("--verbose")
                 ("-v")
                 ("--debug")
                 ("-D")
                 ("--force")
                 ("-!"))
                ((t)
                 (("doom" "doctor"))
                 (("doom")
                  "doctor"))
                #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (command "doom" "doctor")
  (cli . #s(doom-cli
            ("doom" "doctor")
            nil
            (("SUMMARY" . "Diagnoses common issues on your system.")
             ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
            nil nil nil nil
            (:benchmark nil :prefix
                        (doom)
                        :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
            (closure
                (t)
                (cli alist)
              (let nil
                (doom-print
                 (doom-print--format "The doctor will see you now...\n"))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking your Emacs version...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (cond
                     ((or
                       (> emacs-major-version 29)
                       (string-match-p ".\\([56]0\\|9[0-9]\\)$" emacs-version))
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))
                               doom-doctor--warnings)))
                      (if
                          (> emacs-major-version 29)
                          (progn
                            (let
                                ((doom-print-level
                                  (or nil doom-print-level))
                                 (doom-print-indent
                                  (+
                                   (if t
                                       (or nil doom-print-indent-increment)
                                     0)
                                   doom-print-indent)))
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'p "This is the bleeding edge of Emacs. As it is constantly changed, Doom will not " "(officially) support it. If you've found a stable commit, great! But be " "cautious about updating Emacs too eagerly!\n")))))
                        (progn
                          (let
                              ((doom-print-level
                                (or nil doom-print-level))
                               (doom-print-indent
                                (+
                                 (if t
                                     (or nil doom-print-indent-increment)
                                   0)
                                 doom-print-indent)))
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'p "A .50, .60, or .9X appended to the version string indicates that this is a version " "of Emacs in between stable releases. These are not well supported.\n"))))))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Because development builds are prone to random breakage, there will be a greater " "burden on you to investigate and deal with issues. Please make extra sure that " "your issue is reproducible in 29.1 before reporting them to Doom's issue tracker!\n" "\n" "If this doesn't phase you, read the \"Why does Doom not support Emacs HEAD\" QnA " "in Doom's FAQ. It offers some advice for debugging and surviving issues on the " "bleeding edge. Failing that, 29.1 is highly recommended and will always be " "Doom's best supported version of Emacs."))))))
                     ((= emacs-major-version 27)
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))
                               doom-doctor--warnings)))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Emacs 28.1 is better supported, faster, and more stable. Plus, Doom will drop " "27.x support sometime late-2023.")))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for Doom's prerequisites...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (if
                        (not
                         (executable-find "git"))
                        (progn
                          (if inhibit-message nil
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))))
                          (setq doom-doctor--errors
                                (cons
                                 (doom-print--format
                                  (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                                 doom-doctor--errors)))
                      (let
                          ((saved-match-data
                            (match-data)))
                        (unwind-protect
                            (progn
                              (let*
                                  ((version
                                    (cdr
                                     (doom-call-process "git" "version")))
                                   (version
                                    (and
                                     (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                                     (match-string 1 version))))
                                (if version
                                    (if
                                        (version< version "2.23")
                                        (progn
                                          (progn
                                            (if inhibit-message nil
                                              (doom-print
                                               (doom-print--format
                                                (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))))
                                            (setq doom-doctor--errors
                                                  (cons
                                                   (doom-print--format
                                                    (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                                   doom-doctor--errors)))))
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))))
                                    (setq doom-doctor--warnings
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                           doom-doctor--warnings))))))
                          (set-match-data saved-match-data t))))
                    (if
                        (executable-find "rg")
                        nil
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))))
                        (setq doom-doctor--errors
                              (cons
                               (doom-print--format
                                (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                               doom-doctor--errors))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for Emacs config conflicts...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (if
                        (or
                         (file-equal-p doom-emacs-dir "~/.emacs.d")
                         (file-equal-p doom-emacs-dir "~/.config/emacs"))
                        nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Doom is installed in a non-standard location")))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "The standard locations are ~/.config/emacs or ~/.emacs.d. Emacs will fail " "to load Doom if it is not explicitly told where to look for it. In Emacs 29+, " "this is possible with the --init-directory option:\n\n" "  $ emacs --init-directory '"
                                               (abbreviate-file-name doom-emacs-dir)
                                               "'\n\n" "However, Emacs 27-28 users have no choice but to move Doom to a standard " "location.\n\n" "Chemacs users may ignore this warning, however."))))))
                    (let
                        (found?)
                      (let
                          ((tail
                            '("~/_emacs" "~/.emacs" "~/.emacs.el" "~/.emacs.d" "~/.config/emacs")))
                        (while tail
                          (let
                              ((file
                                (car tail)))
                            (if
                                (and
                                 (file-exists-p file)
                                 (not
                                  (file-equal-p file doom-emacs-dir)))
                                (progn
                                  (setq found? t)
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'warn "Found another Emacs config: %s (%s)")
                                    file
                                    (if
                                        (file-directory-p file)
                                        "directory" "file")))))
                            (setq tail
                                  (cdr tail)))))
                      (if found?
                          (progn
                            (progn
                              (let
                                  ((doom-print-level
                                    (or nil doom-print-level))
                                   (doom-print-indent
                                    (+
                                     (if t
                                         (or nil doom-print-indent-increment)
                                       0)
                                     doom-print-indent)))
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'p "Having multiple Emacs configs may prevent Doom from loading properly. Emacs " "will load the first it finds and ignore the rest. If Doom isn't starting up " "correctly (e.g. you get a vanilla splash screen), make sure that only one of " "these exist.\n\n" "Chemacs users may ignore this warning."))))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for missing Emacs features...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (if
                        (functionp 'json-serialize)
                        nil
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Emacs was not built with native JSON support"))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Emacs was not built with native JSON support"))
                               doom-doctor--warnings)))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option."))))))
                    (if
                        (featurep 'native-compile)
                        nil
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Emacs was not built with native compilation support"))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Emacs was not built with native compilation support"))
                               doom-doctor--warnings)))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option."))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for private config conflicts...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (let*
                        ((xdg-dir
                          (concat
                           (or
                            (getenv "XDG_CONFIG_HOME")
                            "~/.config")
                           "/doom/"))
                         (doom-dir
                          (or
                           (getenv "DOOMDIR")
                           "~/.doom.d/"))
                         (dir
                          (if
                              (file-directory-p xdg-dir)
                              xdg-dir doom-dir)))
                      (if
                          (file-equal-p dir doom-emacs-dir)
                          (progn
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                                 (doom-print--class 'path dir))))
                            (progn
                              (let
                                  ((doom-print-level
                                    (or nil doom-print-level))
                                   (doom-print-indent
                                    (+
                                     (if t
                                         (or nil doom-print-indent-increment)
                                       0)
                                     doom-print-indent)))
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'p "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")))))))
                      (if
                          (and
                           (not
                            (file-equal-p xdg-dir doom-dir))
                           (file-directory-p xdg-dir)
                           (file-directory-p doom-dir))
                          (progn
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'warn "Detected two private configs, in %s and %s")
                              (abbreviate-file-name xdg-dir)
                              doom-dir))
                            (progn
                              (let
                                  ((doom-print-level
                                    (or nil doom-print-level))
                                   (doom-print-indent
                                    (+
                                     (if t
                                         (or nil doom-print-indent-increment)
                                       0)
                                     doom-print-indent)))
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'p "The second directory will be ignored, as it has lower precedence."))))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for common environmental issues...")))
                (if
                    (string-match-p "/fish$" shell-file-name)
                    (progn
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Detected Fish as your $SHELL")))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Fish (and possibly other non-POSIX shells) is known to inject garbage " "output into some of the child processes that Emacs spawns. Many Emacs " "packages/utilities will choke on this output, causing unpredictable issues. " "To get around this, either:\n\n" "  - Add the following to $DOOMDIR/config.el:\n\n" "    (setq shell-file-name (executable-find \"bash\"))\n\n" "  - Or change your default shell to a POSIX shell (like bash or zsh) " "    and explicitly configure your terminal apps to use the shell you " "    want.\n\n" "If you opt for option 1 and use one of Emacs' terminal emulators, you " "will also need to configure them to use Fish, e.g.\n\n" "  (setq-default vterm-shell (executable-find \"fish\"))\n\n" "  (setq-default explicit-shell-file-name (executable-find \"fish\"))\n")))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for stale elc files...")))
                (elc-check-dir doom-core-dir)
                (elc-check-dir doom-modules-dir)
                (elc-check-dir
                 (doom-path doom-local-dir "straight" straight-build-dir))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for problematic git global settings...")))
                (if
                    (executable-find "git")
                    (if
                        (= 0
                           (car
                            (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                        (progn
                          (progn
                            (if inhibit-message nil
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))))
                            (setq doom-doctor--warnings
                                  (cons
                                   (doom-print--format
                                    (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                                   doom-doctor--warnings)))
                          (progn
                            (let
                                ((doom-print-level
                                  (or nil doom-print-level))
                                 (doom-print-indent
                                  (+
                                   (if t
                                       (or nil doom-print-indent-increment)
                                     0)
                                   doom-print-indent)))
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'p "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")))))))
                  (progn
                    (if inhibit-message nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))))
                    (setq doom-doctor--errors
                          (cons
                           (doom-print--format
                            (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                           doom-doctor--errors))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking Doom Emacs...")))
                (condition-case ex
                    (progn
                      (let
                          ((doom-print-level
                            (or nil doom-print-level))
                           (doom-print-indent
                            (+
                             (if t
                                 (or nil doom-print-indent-increment)
                               0)
                             doom-print-indent)))
                        (require 'doom-start)
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'success "Initialized Doom Emacs %s")
                          doom-version))
                        (doom-print
                         (doom-print--format
                          (if
                              (hash-table-p doom-modules)
                              (doom-print--class 'success "Detected %d modules"
                                                 (hash-table-count doom-modules))
                            (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?"))))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'success "Detected %d packages")
                          (length doom-packages)))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'start "Checking Doom core for irregularities...")))
                        (progn
                          (let
                              ((doom-print-level
                                (or nil doom-print-level))
                               (doom-print-indent
                                (+
                                 (if t
                                     (or nil doom-print-indent-increment)
                                   0)
                                 doom-print-indent)))
                            (let
                                ((tail
                                  (list "savehist" "projectile.cache")))
                              (while tail
                                (let
                                    ((file
                                      (car tail)))
                                  (let*
                                      ((size
                                        (and t
                                             (condition-case nil
                                                 (progn
                                                   (doom-file-size file doom-cache-dir))
                                               (error nil)))))
                                    (if size
                                        (if
                                            (> size 1048576)
                                            (progn
                                              (progn
                                                (if inhibit-message nil
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                       (/ size 1024 1024.0)))))
                                                (setq doom-doctor--warnings
                                                      (cons
                                                       (doom-print--format
                                                        (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                           (/ size 1024 1024.0)))
                                                       doom-doctor--warnings)))
                                              (progn
                                                (let
                                                    ((doom-print-level
                                                      (or nil doom-print-level))
                                                     (doom-print-indent
                                                      (+
                                                       (if t
                                                           (or nil doom-print-indent-increment)
                                                         0)
                                                       doom-print-indent)))
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'p "Consider deleting it from your system (manually)")))))))
                                      nil))
                                  (setq tail
                                        (cdr tail)))))
                            (if
                                (condition-case nil
                                    (progn
                                      (executable-find doom-fd-executable))
                                  (error nil))
                                nil
                              (progn
                                (if inhibit-message nil
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))))
                                (setq doom-doctor--warnings
                                      (cons
                                       (doom-print--format
                                        (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                       doom-doctor--warnings))))
                            (require 'projectile)
                            (if
                                (projectile-project-root "~")
                                (progn
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'warn "Your $HOME is recognized as a project root"))))
                                    (setq doom-doctor--warnings
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                           doom-doctor--warnings)))
                                  (progn
                                    (let
                                        ((doom-print-level
                                          (or nil doom-print-level))
                                         (doom-print-indent
                                          (+
                                           (if t
                                               (or nil doom-print-indent-increment)
                                             0)
                                           doom-print-indent)))
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'p "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")))))))
                            (if
                                (and
                                 (file-equal-p doom-user-dir "~/.config/doom")
                                 (file-directory-p "~/.doom.d"))
                                (progn
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                                    (doom-print--class 'path doom-user-dir)))
                                  (progn
                                    (let
                                        ((doom-print-level
                                          (or nil doom-print-level))
                                         (doom-print-indent
                                          (+
                                           (if t
                                               (or nil doom-print-indent-increment)
                                             0)
                                           doom-print-indent)))
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'p "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")))))))
                            (if
                                (not
                                 (executable-find "fc-list"))
                                (progn
                                  (if inhibit-message nil
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))))
                                  (setq doom-doctor--warnings
                                        (cons
                                         (doom-print--format
                                          (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                         doom-doctor--warnings)))
                              (if
                                  (and
                                   (cond
                                    ((eq system-type 'gnu/linux)
                                     (let nil
                                       (concat
                                        (or
                                         (getenv "XDG_DATA_HOME")
                                         "~/.local/share")
                                        "/fonts/")))
                                    ((eq system-type 'darwin)
                                     (let nil "~/Library/Fonts/")))
                                   (require 'nerd-icons nil t))
                                  (progn
                                    (let
                                        ((temp-buffer
                                          (generate-new-buffer " *temp*" t)))
                                      (save-current-buffer
                                        (set-buffer temp-buffer)
                                        (unwind-protect
                                            (progn
                                              (let
                                                  ((errors 0))
                                                (let*
                                                    ((output
                                                      (doom-call-process "fc-list" "" "file"))
                                                     (status
                                                      (if output
                                                          (car-safe
                                                           (prog1 output
                                                             (setq output
                                                                   (cdr output))))
                                                        (signal 'wrong-number-of-arguments
                                                                (list
                                                                 '(status . output)
                                                                 (length output))))))
                                                  (if
                                                      (not
                                                       (= 0 status))
                                                      (doom-print
                                                       (doom-print--format
                                                        (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?")))
                                                    (insert
                                                     (cdr
                                                      (doom-call-process "fc-list" "" "file")))
                                                    (let
                                                        ((tail nerd-icons-font-names))
                                                      (while tail
                                                        (let
                                                            ((font
                                                              (car tail)))
                                                          (if
                                                              (save-excursion
                                                                (re-search-backward font nil t))
                                                              (doom-print
                                                               (doom-print--format
                                                                (doom-print--style 'green "Found font %s" font)))
                                                            (doom-print
                                                             (doom-print--format
                                                              (doom-print--class 'warn "%S font is not installed on your system")
                                                              font))
                                                            (setq errors
                                                                  (1+ errors)))
                                                          (setq tail
                                                                (cdr tail)))))
                                                    (if
                                                        (> errors 0)
                                                        (progn
                                                          (progn
                                                            (let
                                                                ((doom-print-level
                                                                  (or nil doom-print-level))
                                                                 (doom-print-indent
                                                                  (+
                                                                   (if t
                                                                       (or nil doom-print-indent-increment)
                                                                     0)
                                                                   doom-print-indent)))
                                                              (doom-print
                                                               (doom-print--format
                                                                (doom-print--class 'p "Some needed fonts are not properly installed on your system. To download and " "install them, run `M-x nerd-icons-install-fonts' from within Doom Emacs. " "However, on Windows this command will only download them; the fonts must " "be installed manually afterwards.")))))))))))
                                          (and
                                           (buffer-name temp-buffer)
                                           (kill-buffer temp-buffer))))))))))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'start "Checking for stale elc files in your DOOMDIR...")))
                        (if
                            (file-directory-p doom-user-dir)
                            (progn
                              (progn
                                (let
                                    ((doom-print-level
                                      (or nil doom-print-level))
                                     (doom-print-indent
                                      (+
                                       (if t
                                           (or nil doom-print-indent-increment)
                                         0)
                                       doom-print-indent)))
                                  (elc-check-dir doom-user-dir)))))
                        (if doom-modules
                            (progn
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'start "Checking your enabled modules...")))
                              (advice-add #'require :around #'doom-shut-up-a)
                              (let
                                  ((tail
                                    (doom-module-list)))
                                (while tail
                                  (let
                                      ((x54
                                        (car tail)))
                                    (progn
                                      (ignore
                                       (consp x54))
                                      (let*
                                          ((x55
                                            (car-safe x54))
                                           (x56
                                            (cdr-safe x54)))
                                        (let
                                            ((group x55)
                                             (name x56))
                                          (let
                                              ((doom-context doom-context))
                                            (let
                                                ((tail
                                                  (ensure-list 'doctor)))
                                              (while tail
                                                (let
                                                    ((context
                                                      (car tail)))
                                                  (doom-context-push context)
                                                  (setq tail
                                                        (cdr tail)))))
                                            (let
                                                (doom-local-errors doom-local-warnings)
                                              (let
                                                  (doom-doctor--errors doom-doctor--warnings)
                                                (condition-case ex
                                                    (let
                                                        ((doom-module-context
                                                          (doom-module-context
                                                           (cons group name))))
                                                      (if
                                                          (and
                                                           (not doom-inhibit-log)
                                                           (or
                                                            (not noninteractive)
                                                            (<= 2 doom-log-level)))
                                                          (progn
                                                            (doom--log 2 ":context:module: =%s" doom-module-context)))
                                                      (let
                                                          ((doctor-file
                                                            (doom-module-expand-path group name "doctor.el"))
                                                           (packages-file
                                                            (doom-module-expand-path group name doom-module-packages-file)))
                                                        (if packages-file
                                                            (progn
                                                              (let*
                                                                  ((doom-output-indent 6)
                                                                   (--cl-var--
                                                                    (let
                                                                        ((doom-context doom-context))
                                                                      (let
                                                                          ((tail
                                                                            (ensure-list 'packages)))
                                                                        (while tail
                                                                          (let
                                                                              ((context
                                                                                (car tail)))
                                                                            (doom-context-push context)
                                                                            (setq tail
                                                                                  (cdr tail)))))
                                                                      (let*
                                                                          (doom-packages doom-disabled-packages)
                                                                        (load packages-file 'noerror 'nomessage)
                                                                        (mapcar #'car doom-packages))))
                                                                   (name nil))
                                                                (while
                                                                    (consp --cl-var--)
                                                                  (setq name
                                                                        (car --cl-var--))
                                                                  (if
                                                                      (or
                                                                       (doom-package-get name :disable)
                                                                       (eval
                                                                        (doom-package-get name :ignore))
                                                                       (plist-member
                                                                        (doom-package-get name :recipe)
                                                                        :local-repo)
                                                                       (locate-library
                                                                        (symbol-name name))
                                                                       (doom-package-built-in-p name)
                                                                       (doom-package-installed-p name))
                                                                      (progn)
                                                                    (doom-print
                                                                     (doom-print--format
                                                                      (doom-print--class 'error "Missing emacs package: %S")
                                                                      name)))
                                                                  (setq --cl-var--
                                                                        (cdr --cl-var--)))
                                                                nil)))
                                                        (if doctor-file
                                                            (progn
                                                              (let
                                                                  ((inhibit-message t))
                                                                (load doctor-file 'noerror 'nomessage))))))
                                                  ((debug file-missing)
                                                   (progn
                                                     (if inhibit-message nil
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'error "%s"
                                                                            (error-message-string ex)))))
                                                     (setq doom-doctor--errors
                                                           (cons
                                                            (doom-print--format
                                                             (doom-print--class 'error "%s"
                                                                                (error-message-string ex)))
                                                            doom-doctor--errors))))
                                                  ((debug error)
                                                   (progn
                                                     (if inhibit-message nil
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'error "Syntax error: %s" ex))))
                                                     (setq doom-doctor--errors
                                                           (cons
                                                            (doom-print--format
                                                             (doom-print--class 'error "Syntax error: %s" ex))
                                                            doom-doctor--errors)))))
                                                (if
                                                    (or doom-doctor--errors doom-doctor--warnings)
                                                    (progn
                                                      (progn
                                                        (let
                                                            ((doom-print-level
                                                              (or nil doom-print-level))
                                                             (doom-print-indent
                                                              (+
                                                               (if t
                                                                   (or nil doom-print-indent-increment)
                                                                 0)
                                                               doom-print-indent)))
                                                          (doom-print
                                                           (doom-print--format
                                                            (doom-print--class 'start
                                                                               (doom-print--style 'bold "%s %s"))
                                                            group name))
                                                          (doom-print
                                                           (doom-print--format "%s"
                                                                               (string-join
                                                                                (append doom-doctor--errors doom-doctor--warnings)
                                                                                "\n")))))
                                                      (progn
                                                        (setq doom-local-errors doom-doctor--errors)
                                                        (setq doom-local-warnings doom-doctor--warnings)))))
                                              (setq doom-doctor--errors
                                                    (append doom-doctor--errors doom-local-errors))
                                              (setq doom-doctor--warnings
                                                    (append doom-doctor--warnings doom-local-warnings)))))))
                                    (setq tail
                                          (cdr tail)))))))))
                  ((debug error)
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                            (or
                                             (cdr-safe ex)
                                             (car ex))))))
                     (setq doom-doctor--warnings
                           (cons
                            (doom-print--format
                             (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                                (or
                                                 (cdr-safe ex)
                                                 (car ex))))
                            doom-doctor--warnings)))
                   (setq doom-modules nil)))
                (terpri)
                (let
                    ((tail
                      (list
                       (list doom-doctor--warnings "warning" 'yellow)
                       (list doom-doctor--errors "error" 'red))))
                  (while tail
                    (let
                        ((msg
                          (car tail)))
                      (if
                          (car msg)
                          (progn
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'color
                                                 (nth 2 msg)
                                                 (if
                                                     (cdr
                                                      (car msg))
                                                     "There are %d %ss!" "There is %d %s!")
                                                 (length
                                                  (car msg))
                                                 (nth 1 msg))))))
                      (setq tail
                            (cdr tail)))))
                (if
                    (or doom-doctor--errors doom-doctor--warnings)
                    nil
                  (doom-print
                   (doom-print--format
                    (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))))
                (exit! :pager? "+G")))))
  (prefix . "doom")
  (seen t)
  (runners
   (#s(doom-cli
       ("doom" "doctor")
       nil
       (("SUMMARY" . "Diagnoses common issues on your system.")
        ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
       nil nil nil nil
       (:benchmark nil :prefix
                   (doom)
                   :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
       (closure
           (t)
           (cli alist)
         (let nil
           (doom-print
            (doom-print--format "The doctor will see you now...\n"))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking your Emacs version...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (cond
                ((or
                  (> emacs-major-version 29)
                  (string-match-p ".\\([56]0\\|9[0-9]\\)$" emacs-version))
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))
                          doom-doctor--warnings)))
                 (if
                     (> emacs-major-version 29)
                     (progn
                       (let
                           ((doom-print-level
                             (or nil doom-print-level))
                            (doom-print-indent
                             (+
                              (if t
                                  (or nil doom-print-indent-increment)
                                0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'p "This is the bleeding edge of Emacs. As it is constantly changed, Doom will not " "(officially) support it. If you've found a stable commit, great! But be " "cautious about updating Emacs too eagerly!\n")))))
                   (progn
                     (let
                         ((doom-print-level
                           (or nil doom-print-level))
                          (doom-print-indent
                           (+
                            (if t
                                (or nil doom-print-indent-increment)
                              0)
                            doom-print-indent)))
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'p "A .50, .60, or .9X appended to the version string indicates that this is a version " "of Emacs in between stable releases. These are not well supported.\n"))))))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Because development builds are prone to random breakage, there will be a greater " "burden on you to investigate and deal with issues. Please make extra sure that " "your issue is reproducible in 29.1 before reporting them to Doom's issue tracker!\n" "\n" "If this doesn't phase you, read the \"Why does Doom not support Emacs HEAD\" QnA " "in Doom's FAQ. It offers some advice for debugging and surviving issues on the " "bleeding edge. Failing that, 29.1 is highly recommended and will always be " "Doom's best supported version of Emacs."))))))
                ((= emacs-major-version 27)
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))
                          doom-doctor--warnings)))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Emacs 28.1 is better supported, faster, and more stable. Plus, Doom will drop " "27.x support sometime late-2023.")))))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for Doom's prerequisites...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (if
                   (not
                    (executable-find "git"))
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                            doom-doctor--errors)))
                 (let
                     ((saved-match-data
                       (match-data)))
                   (unwind-protect
                       (progn
                         (let*
                             ((version
                               (cdr
                                (doom-call-process "git" "version")))
                              (version
                               (and
                                (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                                (match-string 1 version))))
                           (if version
                               (if
                                   (version< version "2.23")
                                   (progn
                                     (progn
                                       (if inhibit-message nil
                                         (doom-print
                                          (doom-print--format
                                           (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))))
                                       (setq doom-doctor--errors
                                             (cons
                                              (doom-print--format
                                               (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                              doom-doctor--errors)))))
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))))
                               (setq doom-doctor--warnings
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                      doom-doctor--warnings))))))
                     (set-match-data saved-match-data t))))
               (if
                   (executable-find "rg")
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))))
                   (setq doom-doctor--errors
                         (cons
                          (doom-print--format
                           (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                          doom-doctor--errors))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for Emacs config conflicts...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (if
                   (or
                    (file-equal-p doom-emacs-dir "~/.emacs.d")
                    (file-equal-p doom-emacs-dir "~/.config/emacs"))
                   nil
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'warn "Doom is installed in a non-standard location")))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "The standard locations are ~/.config/emacs or ~/.emacs.d. Emacs will fail " "to load Doom if it is not explicitly told where to look for it. In Emacs 29+, " "this is possible with the --init-directory option:\n\n" "  $ emacs --init-directory '"
                                          (abbreviate-file-name doom-emacs-dir)
                                          "'\n\n" "However, Emacs 27-28 users have no choice but to move Doom to a standard " "location.\n\n" "Chemacs users may ignore this warning, however."))))))
               (let
                   (found?)
                 (let
                     ((tail
                       '("~/_emacs" "~/.emacs" "~/.emacs.el" "~/.emacs.d" "~/.config/emacs")))
                   (while tail
                     (let
                         ((file
                           (car tail)))
                       (if
                           (and
                            (file-exists-p file)
                            (not
                             (file-equal-p file doom-emacs-dir)))
                           (progn
                             (setq found? t)
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Found another Emacs config: %s (%s)")
                               file
                               (if
                                   (file-directory-p file)
                                   "directory" "file")))))
                       (setq tail
                             (cdr tail)))))
                 (if found?
                     (progn
                       (progn
                         (let
                             ((doom-print-level
                               (or nil doom-print-level))
                              (doom-print-indent
                               (+
                                (if t
                                    (or nil doom-print-indent-increment)
                                  0)
                                doom-print-indent)))
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'p "Having multiple Emacs configs may prevent Doom from loading properly. Emacs " "will load the first it finds and ignore the rest. If Doom isn't starting up " "correctly (e.g. you get a vanilla splash screen), make sure that only one of " "these exist.\n\n" "Chemacs users may ignore this warning."))))))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for missing Emacs features...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (if
                   (functionp 'json-serialize)
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs was not built with native JSON support"))))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs was not built with native JSON support"))
                          doom-doctor--warnings)))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option."))))))
               (if
                   (featurep 'native-compile)
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs was not built with native compilation support"))))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs was not built with native compilation support"))
                          doom-doctor--warnings)))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option."))))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for private config conflicts...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (let*
                   ((xdg-dir
                     (concat
                      (or
                       (getenv "XDG_CONFIG_HOME")
                       "~/.config")
                      "/doom/"))
                    (doom-dir
                     (or
                      (getenv "DOOMDIR")
                      "~/.doom.d/"))
                    (dir
                     (if
                         (file-directory-p xdg-dir)
                         xdg-dir doom-dir)))
                 (if
                     (file-equal-p dir doom-emacs-dir)
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                            (doom-print--class 'path dir))))
                       (progn
                         (let
                             ((doom-print-level
                               (or nil doom-print-level))
                              (doom-print-indent
                               (+
                                (if t
                                    (or nil doom-print-indent-increment)
                                  0)
                                doom-print-indent)))
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'p "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")))))))
                 (if
                     (and
                      (not
                       (file-equal-p xdg-dir doom-dir))
                      (file-directory-p xdg-dir)
                      (file-directory-p doom-dir))
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Detected two private configs, in %s and %s")
                         (abbreviate-file-name xdg-dir)
                         doom-dir))
                       (progn
                         (let
                             ((doom-print-level
                               (or nil doom-print-level))
                              (doom-print-indent
                               (+
                                (if t
                                    (or nil doom-print-indent-increment)
                                  0)
                                doom-print-indent)))
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'p "The second directory will be ignored, as it has lower precedence."))))))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for common environmental issues...")))
           (if
               (string-match-p "/fish$" shell-file-name)
               (progn
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'warn "Detected Fish as your $SHELL")))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Fish (and possibly other non-POSIX shells) is known to inject garbage " "output into some of the child processes that Emacs spawns. Many Emacs " "packages/utilities will choke on this output, causing unpredictable issues. " "To get around this, either:\n\n" "  - Add the following to $DOOMDIR/config.el:\n\n" "    (setq shell-file-name (executable-find \"bash\"))\n\n" "  - Or change your default shell to a POSIX shell (like bash or zsh) " "    and explicitly configure your terminal apps to use the shell you " "    want.\n\n" "If you opt for option 1 and use one of Emacs' terminal emulators, you " "will also need to configure them to use Fish, e.g.\n\n" "  (setq-default vterm-shell (executable-find \"fish\"))\n\n" "  (setq-default explicit-shell-file-name (executable-find \"fish\"))\n")))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for stale elc files...")))
           (elc-check-dir doom-core-dir)
           (elc-check-dir doom-modules-dir)
           (elc-check-dir
            (doom-path doom-local-dir "straight" straight-build-dir))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for problematic git global settings...")))
           (if
               (executable-find "git")
               (if
                   (= 0
                      (car
                       (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                   (progn
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))))
                       (setq doom-doctor--warnings
                             (cons
                              (doom-print--format
                               (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                              doom-doctor--warnings)))
                     (progn
                       (let
                           ((doom-print-level
                             (or nil doom-print-level))
                            (doom-print-indent
                             (+
                              (if t
                                  (or nil doom-print-indent-increment)
                                0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'p "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")))))))
             (progn
               (if inhibit-message nil
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))))
               (setq doom-doctor--errors
                     (cons
                      (doom-print--format
                       (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                      doom-doctor--errors))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking Doom Emacs...")))
           (condition-case ex
               (progn
                 (let
                     ((doom-print-level
                       (or nil doom-print-level))
                      (doom-print-indent
                       (+
                        (if t
                            (or nil doom-print-indent-increment)
                          0)
                        doom-print-indent)))
                   (require 'doom-start)
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'success "Initialized Doom Emacs %s")
                     doom-version))
                   (doom-print
                    (doom-print--format
                     (if
                         (hash-table-p doom-modules)
                         (doom-print--class 'success "Detected %d modules"
                                            (hash-table-count doom-modules))
                       (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?"))))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'success "Detected %d packages")
                     (length doom-packages)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'start "Checking Doom core for irregularities...")))
                   (progn
                     (let
                         ((doom-print-level
                           (or nil doom-print-level))
                          (doom-print-indent
                           (+
                            (if t
                                (or nil doom-print-indent-increment)
                              0)
                            doom-print-indent)))
                       (let
                           ((tail
                             (list "savehist" "projectile.cache")))
                         (while tail
                           (let
                               ((file
                                 (car tail)))
                             (let*
                                 ((size
                                   (and t
                                        (condition-case nil
                                            (progn
                                              (doom-file-size file doom-cache-dir))
                                          (error nil)))))
                               (if size
                                   (if
                                       (> size 1048576)
                                       (progn
                                         (progn
                                           (if inhibit-message nil
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                  (/ size 1024 1024.0)))))
                                           (setq doom-doctor--warnings
                                                 (cons
                                                  (doom-print--format
                                                   (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                      (/ size 1024 1024.0)))
                                                  doom-doctor--warnings)))
                                         (progn
                                           (let
                                               ((doom-print-level
                                                 (or nil doom-print-level))
                                                (doom-print-indent
                                                 (+
                                                  (if t
                                                      (or nil doom-print-indent-increment)
                                                    0)
                                                  doom-print-indent)))
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'p "Consider deleting it from your system (manually)")))))))
                                 nil))
                             (setq tail
                                   (cdr tail)))))
                       (if
                           (condition-case nil
                               (progn
                                 (executable-find doom-fd-executable))
                             (error nil))
                           nil
                         (progn
                           (if inhibit-message nil
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))))
                           (setq doom-doctor--warnings
                                 (cons
                                  (doom-print--format
                                   (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                  doom-doctor--warnings))))
                       (require 'projectile)
                       (if
                           (projectile-project-root "~")
                           (progn
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'warn "Your $HOME is recognized as a project root"))))
                               (setq doom-doctor--warnings
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                      doom-doctor--warnings)))
                             (progn
                               (let
                                   ((doom-print-level
                                     (or nil doom-print-level))
                                    (doom-print-indent
                                     (+
                                      (if t
                                          (or nil doom-print-indent-increment)
                                        0)
                                      doom-print-indent)))
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'p "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")))))))
                       (if
                           (and
                            (file-equal-p doom-user-dir "~/.config/doom")
                            (file-directory-p "~/.doom.d"))
                           (progn
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                               (doom-print--class 'path doom-user-dir)))
                             (progn
                               (let
                                   ((doom-print-level
                                     (or nil doom-print-level))
                                    (doom-print-indent
                                     (+
                                      (if t
                                          (or nil doom-print-indent-increment)
                                        0)
                                      doom-print-indent)))
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'p "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")))))))
                       (if
                           (not
                            (executable-find "fc-list"))
                           (progn
                             (if inhibit-message nil
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))))
                             (setq doom-doctor--warnings
                                   (cons
                                    (doom-print--format
                                     (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                    doom-doctor--warnings)))
                         (if
                             (and
                              (cond
                               ((eq system-type 'gnu/linux)
                                (let nil
                                  (concat
                                   (or
                                    (getenv "XDG_DATA_HOME")
                                    "~/.local/share")
                                   "/fonts/")))
                               ((eq system-type 'darwin)
                                (let nil "~/Library/Fonts/")))
                              (require 'nerd-icons nil t))
                             (progn
                               (let
                                   ((temp-buffer
                                     (generate-new-buffer " *temp*" t)))
                                 (save-current-buffer
                                   (set-buffer temp-buffer)
                                   (unwind-protect
                                       (progn
                                         (let
                                             ((errors 0))
                                           (let*
                                               ((output
                                                 (doom-call-process "fc-list" "" "file"))
                                                (status
                                                 (if output
                                                     (car-safe
                                                      (prog1 output
                                                        (setq output
                                                              (cdr output))))
                                                   (signal 'wrong-number-of-arguments
                                                           (list
                                                            '(status . output)
                                                            (length output))))))
                                             (if
                                                 (not
                                                  (= 0 status))
                                                 (doom-print
                                                  (doom-print--format
                                                   (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?")))
                                               (insert
                                                (cdr
                                                 (doom-call-process "fc-list" "" "file")))
                                               (let
                                                   ((tail nerd-icons-font-names))
                                                 (while tail
                                                   (let
                                                       ((font
                                                         (car tail)))
                                                     (if
                                                         (save-excursion
                                                           (re-search-backward font nil t))
                                                         (doom-print
                                                          (doom-print--format
                                                           (doom-print--style 'green "Found font %s" font)))
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'warn "%S font is not installed on your system")
                                                         font))
                                                       (setq errors
                                                             (1+ errors)))
                                                     (setq tail
                                                           (cdr tail)))))
                                               (if
                                                   (> errors 0)
                                                   (progn
                                                     (progn
                                                       (let
                                                           ((doom-print-level
                                                             (or nil doom-print-level))
                                                            (doom-print-indent
                                                             (+
                                                              (if t
                                                                  (or nil doom-print-indent-increment)
                                                                0)
                                                              doom-print-indent)))
                                                         (doom-print
                                                          (doom-print--format
                                                           (doom-print--class 'p "Some needed fonts are not properly installed on your system. To download and " "install them, run `M-x nerd-icons-install-fonts' from within Doom Emacs. " "However, on Windows this command will only download them; the fonts must " "be installed manually afterwards.")))))))))))
                                     (and
                                      (buffer-name temp-buffer)
                                      (kill-buffer temp-buffer))))))))))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'start "Checking for stale elc files in your DOOMDIR...")))
                   (if
                       (file-directory-p doom-user-dir)
                       (progn
                         (progn
                           (let
                               ((doom-print-level
                                 (or nil doom-print-level))
                                (doom-print-indent
                                 (+
                                  (if t
                                      (or nil doom-print-indent-increment)
                                    0)
                                  doom-print-indent)))
                             (elc-check-dir doom-user-dir)))))
                   (if doom-modules
                       (progn
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'start "Checking your enabled modules...")))
                         (advice-add #'require :around #'doom-shut-up-a)
                         (let
                             ((tail
                               (doom-module-list)))
                           (while tail
                             (let
                                 ((x54
                                   (car tail)))
                               (progn
                                 (ignore
                                  (consp x54))
                                 (let*
                                     ((x55
                                       (car-safe x54))
                                      (x56
                                       (cdr-safe x54)))
                                   (let
                                       ((group x55)
                                        (name x56))
                                     (let
                                         ((doom-context doom-context))
                                       (let
                                           ((tail
                                             (ensure-list 'doctor)))
                                         (while tail
                                           (let
                                               ((context
                                                 (car tail)))
                                             (doom-context-push context)
                                             (setq tail
                                                   (cdr tail)))))
                                       (let
                                           (doom-local-errors doom-local-warnings)
                                         (let
                                             (doom-doctor--errors doom-doctor--warnings)
                                           (condition-case ex
                                               (let
                                                   ((doom-module-context
                                                     (doom-module-context
                                                      (cons group name))))
                                                 (if
                                                     (and
                                                      (not doom-inhibit-log)
                                                      (or
                                                       (not noninteractive)
                                                       (<= 2 doom-log-level)))
                                                     (progn
                                                       (doom--log 2 ":context:module: =%s" doom-module-context)))
                                                 (let
                                                     ((doctor-file
                                                       (doom-module-expand-path group name "doctor.el"))
                                                      (packages-file
                                                       (doom-module-expand-path group name doom-module-packages-file)))
                                                   (if packages-file
                                                       (progn
                                                         (let*
                                                             ((doom-output-indent 6)
                                                              (--cl-var--
                                                               (let
                                                                   ((doom-context doom-context))
                                                                 (let
                                                                     ((tail
                                                                       (ensure-list 'packages)))
                                                                   (while tail
                                                                     (let
                                                                         ((context
                                                                           (car tail)))
                                                                       (doom-context-push context)
                                                                       (setq tail
                                                                             (cdr tail)))))
                                                                 (let*
                                                                     (doom-packages doom-disabled-packages)
                                                                   (load packages-file 'noerror 'nomessage)
                                                                   (mapcar #'car doom-packages))))
                                                              (name nil))
                                                           (while
                                                               (consp --cl-var--)
                                                             (setq name
                                                                   (car --cl-var--))
                                                             (if
                                                                 (or
                                                                  (doom-package-get name :disable)
                                                                  (eval
                                                                   (doom-package-get name :ignore))
                                                                  (plist-member
                                                                   (doom-package-get name :recipe)
                                                                   :local-repo)
                                                                  (locate-library
                                                                   (symbol-name name))
                                                                  (doom-package-built-in-p name)
                                                                  (doom-package-installed-p name))
                                                                 (progn)
                                                               (doom-print
                                                                (doom-print--format
                                                                 (doom-print--class 'error "Missing emacs package: %S")
                                                                 name)))
                                                             (setq --cl-var--
                                                                   (cdr --cl-var--)))
                                                           nil)))
                                                   (if doctor-file
                                                       (progn
                                                         (let
                                                             ((inhibit-message t))
                                                           (load doctor-file 'noerror 'nomessage))))))
                                             ((debug file-missing)
                                              (progn
                                                (if inhibit-message nil
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'error "%s"
                                                                       (error-message-string ex)))))
                                                (setq doom-doctor--errors
                                                      (cons
                                                       (doom-print--format
                                                        (doom-print--class 'error "%s"
                                                                           (error-message-string ex)))
                                                       doom-doctor--errors))))
                                             ((debug error)
                                              (progn
                                                (if inhibit-message nil
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'error "Syntax error: %s" ex))))
                                                (setq doom-doctor--errors
                                                      (cons
                                                       (doom-print--format
                                                        (doom-print--class 'error "Syntax error: %s" ex))
                                                       doom-doctor--errors)))))
                                           (if
                                               (or doom-doctor--errors doom-doctor--warnings)
                                               (progn
                                                 (progn
                                                   (let
                                                       ((doom-print-level
                                                         (or nil doom-print-level))
                                                        (doom-print-indent
                                                         (+
                                                          (if t
                                                              (or nil doom-print-indent-increment)
                                                            0)
                                                          doom-print-indent)))
                                                     (doom-print
                                                      (doom-print--format
                                                       (doom-print--class 'start
                                                                          (doom-print--style 'bold "%s %s"))
                                                       group name))
                                                     (doom-print
                                                      (doom-print--format "%s"
                                                                          (string-join
                                                                           (append doom-doctor--errors doom-doctor--warnings)
                                                                           "\n")))))
                                                 (progn
                                                   (setq doom-local-errors doom-doctor--errors)
                                                   (setq doom-local-warnings doom-doctor--warnings)))))
                                         (setq doom-doctor--errors
                                               (append doom-doctor--errors doom-local-errors))
                                         (setq doom-doctor--warnings
                                               (append doom-doctor--warnings doom-local-warnings)))))))
                               (setq tail
                                     (cdr tail)))))))))
             ((debug error)
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                       (or
                                        (cdr-safe ex)
                                        (car ex))))))
                (setq doom-doctor--warnings
                      (cons
                       (doom-print--format
                        (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                           (or
                                            (cdr-safe ex)
                                            (car ex))))
                       doom-doctor--warnings)))
              (setq doom-modules nil)))
           (terpri)
           (let
               ((tail
                 (list
                  (list doom-doctor--warnings "warning" 'yellow)
                  (list doom-doctor--errors "error" 'red))))
             (while tail
               (let
                   ((msg
                     (car tail)))
                 (if
                     (car msg)
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'color
                                            (nth 2 msg)
                                            (if
                                                (cdr
                                                 (car msg))
                                                "There are %d %ss!" "There is %d %s!")
                                            (length
                                             (car msg))
                                            (nth 1 msg))))))
                 (setq tail
                       (cdr tail)))))
           (if
               (or doom-doctor--errors doom-doctor--warnings)
               nil
             (doom-print
              (doom-print--format
               (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))))
           (exit! :pager? "+G"))))))
  (tail
   (#s(doom-cli
       ("doom" "doctor")
       nil
       (("SUMMARY" . "Diagnoses common issues on your system.")
        ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
       nil nil nil nil
       (:benchmark nil :prefix
                   (doom)
                   :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
       (closure
           (t)
           (cli alist)
         (let nil
           (doom-print
            (doom-print--format "The doctor will see you now...\n"))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking your Emacs version...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (cond
                ((or
                  (> emacs-major-version 29)
                  (string-match-p ".\\([56]0\\|9[0-9]\\)$" emacs-version))
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))
                          doom-doctor--warnings)))
                 (if
                     (> emacs-major-version 29)
                     (progn
                       (let
                           ((doom-print-level
                             (or nil doom-print-level))
                            (doom-print-indent
                             (+
                              (if t
                                  (or nil doom-print-indent-increment)
                                0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'p "This is the bleeding edge of Emacs. As it is constantly changed, Doom will not " "(officially) support it. If you've found a stable commit, great! But be " "cautious about updating Emacs too eagerly!\n")))))
                   (progn
                     (let
                         ((doom-print-level
                           (or nil doom-print-level))
                          (doom-print-indent
                           (+
                            (if t
                                (or nil doom-print-indent-increment)
                              0)
                            doom-print-indent)))
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'p "A .50, .60, or .9X appended to the version string indicates that this is a version " "of Emacs in between stable releases. These are not well supported.\n"))))))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Because development builds are prone to random breakage, there will be a greater " "burden on you to investigate and deal with issues. Please make extra sure that " "your issue is reproducible in 29.1 before reporting them to Doom's issue tracker!\n" "\n" "If this doesn't phase you, read the \"Why does Doom not support Emacs HEAD\" QnA " "in Doom's FAQ. It offers some advice for debugging and surviving issues on the " "bleeding edge. Failing that, 29.1 is highly recommended and will always be " "Doom's best supported version of Emacs."))))))
                ((= emacs-major-version 27)
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))
                          doom-doctor--warnings)))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Emacs 28.1 is better supported, faster, and more stable. Plus, Doom will drop " "27.x support sometime late-2023.")))))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for Doom's prerequisites...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (if
                   (not
                    (executable-find "git"))
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                            doom-doctor--errors)))
                 (let
                     ((saved-match-data
                       (match-data)))
                   (unwind-protect
                       (progn
                         (let*
                             ((version
                               (cdr
                                (doom-call-process "git" "version")))
                              (version
                               (and
                                (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                                (match-string 1 version))))
                           (if version
                               (if
                                   (version< version "2.23")
                                   (progn
                                     (progn
                                       (if inhibit-message nil
                                         (doom-print
                                          (doom-print--format
                                           (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))))
                                       (setq doom-doctor--errors
                                             (cons
                                              (doom-print--format
                                               (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                              doom-doctor--errors)))))
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))))
                               (setq doom-doctor--warnings
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                      doom-doctor--warnings))))))
                     (set-match-data saved-match-data t))))
               (if
                   (executable-find "rg")
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))))
                   (setq doom-doctor--errors
                         (cons
                          (doom-print--format
                           (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                          doom-doctor--errors))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for Emacs config conflicts...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (if
                   (or
                    (file-equal-p doom-emacs-dir "~/.emacs.d")
                    (file-equal-p doom-emacs-dir "~/.config/emacs"))
                   nil
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'warn "Doom is installed in a non-standard location")))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "The standard locations are ~/.config/emacs or ~/.emacs.d. Emacs will fail " "to load Doom if it is not explicitly told where to look for it. In Emacs 29+, " "this is possible with the --init-directory option:\n\n" "  $ emacs --init-directory '"
                                          (abbreviate-file-name doom-emacs-dir)
                                          "'\n\n" "However, Emacs 27-28 users have no choice but to move Doom to a standard " "location.\n\n" "Chemacs users may ignore this warning, however."))))))
               (let
                   (found?)
                 (let
                     ((tail
                       '("~/_emacs" "~/.emacs" "~/.emacs.el" "~/.emacs.d" "~/.config/emacs")))
                   (while tail
                     (let
                         ((file
                           (car tail)))
                       (if
                           (and
                            (file-exists-p file)
                            (not
                             (file-equal-p file doom-emacs-dir)))
                           (progn
                             (setq found? t)
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Found another Emacs config: %s (%s)")
                               file
                               (if
                                   (file-directory-p file)
                                   "directory" "file")))))
                       (setq tail
                             (cdr tail)))))
                 (if found?
                     (progn
                       (progn
                         (let
                             ((doom-print-level
                               (or nil doom-print-level))
                              (doom-print-indent
                               (+
                                (if t
                                    (or nil doom-print-indent-increment)
                                  0)
                                doom-print-indent)))
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'p "Having multiple Emacs configs may prevent Doom from loading properly. Emacs " "will load the first it finds and ignore the rest. If Doom isn't starting up " "correctly (e.g. you get a vanilla splash screen), make sure that only one of " "these exist.\n\n" "Chemacs users may ignore this warning."))))))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for missing Emacs features...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (if
                   (functionp 'json-serialize)
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs was not built with native JSON support"))))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs was not built with native JSON support"))
                          doom-doctor--warnings)))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option."))))))
               (if
                   (featurep 'native-compile)
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs was not built with native compilation support"))))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs was not built with native compilation support"))
                          doom-doctor--warnings)))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option."))))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for private config conflicts...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (let*
                   ((xdg-dir
                     (concat
                      (or
                       (getenv "XDG_CONFIG_HOME")
                       "~/.config")
                      "/doom/"))
                    (doom-dir
                     (or
                      (getenv "DOOMDIR")
                      "~/.doom.d/"))
                    (dir
                     (if
                         (file-directory-p xdg-dir)
                         xdg-dir doom-dir)))
                 (if
                     (file-equal-p dir doom-emacs-dir)
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                            (doom-print--class 'path dir))))
                       (progn
                         (let
                             ((doom-print-level
                               (or nil doom-print-level))
                              (doom-print-indent
                               (+
                                (if t
                                    (or nil doom-print-indent-increment)
                                  0)
                                doom-print-indent)))
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'p "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")))))))
                 (if
                     (and
                      (not
                       (file-equal-p xdg-dir doom-dir))
                      (file-directory-p xdg-dir)
                      (file-directory-p doom-dir))
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Detected two private configs, in %s and %s")
                         (abbreviate-file-name xdg-dir)
                         doom-dir))
                       (progn
                         (let
                             ((doom-print-level
                               (or nil doom-print-level))
                              (doom-print-indent
                               (+
                                (if t
                                    (or nil doom-print-indent-increment)
                                  0)
                                doom-print-indent)))
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'p "The second directory will be ignored, as it has lower precedence."))))))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for common environmental issues...")))
           (if
               (string-match-p "/fish$" shell-file-name)
               (progn
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'warn "Detected Fish as your $SHELL")))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Fish (and possibly other non-POSIX shells) is known to inject garbage " "output into some of the child processes that Emacs spawns. Many Emacs " "packages/utilities will choke on this output, causing unpredictable issues. " "To get around this, either:\n\n" "  - Add the following to $DOOMDIR/config.el:\n\n" "    (setq shell-file-name (executable-find \"bash\"))\n\n" "  - Or change your default shell to a POSIX shell (like bash or zsh) " "    and explicitly configure your terminal apps to use the shell you " "    want.\n\n" "If you opt for option 1 and use one of Emacs' terminal emulators, you " "will also need to configure them to use Fish, e.g.\n\n" "  (setq-default vterm-shell (executable-find \"fish\"))\n\n" "  (setq-default explicit-shell-file-name (executable-find \"fish\"))\n")))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for stale elc files...")))
           (elc-check-dir doom-core-dir)
           (elc-check-dir doom-modules-dir)
           (elc-check-dir
            (doom-path doom-local-dir "straight" straight-build-dir))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for problematic git global settings...")))
           (if
               (executable-find "git")
               (if
                   (= 0
                      (car
                       (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                   (progn
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))))
                       (setq doom-doctor--warnings
                             (cons
                              (doom-print--format
                               (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                              doom-doctor--warnings)))
                     (progn
                       (let
                           ((doom-print-level
                             (or nil doom-print-level))
                            (doom-print-indent
                             (+
                              (if t
                                  (or nil doom-print-indent-increment)
                                0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'p "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")))))))
             (progn
               (if inhibit-message nil
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))))
               (setq doom-doctor--errors
                     (cons
                      (doom-print--format
                       (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                      doom-doctor--errors))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking Doom Emacs...")))
           (condition-case ex
               (progn
                 (let
                     ((doom-print-level
                       (or nil doom-print-level))
                      (doom-print-indent
                       (+
                        (if t
                            (or nil doom-print-indent-increment)
                          0)
                        doom-print-indent)))
                   (require 'doom-start)
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'success "Initialized Doom Emacs %s")
                     doom-version))
                   (doom-print
                    (doom-print--format
                     (if
                         (hash-table-p doom-modules)
                         (doom-print--class 'success "Detected %d modules"
                                            (hash-table-count doom-modules))
                       (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?"))))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'success "Detected %d packages")
                     (length doom-packages)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'start "Checking Doom core for irregularities...")))
                   (progn
                     (let
                         ((doom-print-level
                           (or nil doom-print-level))
                          (doom-print-indent
                           (+
                            (if t
                                (or nil doom-print-indent-increment)
                              0)
                            doom-print-indent)))
                       (let
                           ((tail
                             (list "savehist" "projectile.cache")))
                         (while tail
                           (let
                               ((file
                                 (car tail)))
                             (let*
                                 ((size
                                   (and t
                                        (condition-case nil
                                            (progn
                                              (doom-file-size file doom-cache-dir))
                                          (error nil)))))
                               (if size
                                   (if
                                       (> size 1048576)
                                       (progn
                                         (progn
                                           (if inhibit-message nil
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                  (/ size 1024 1024.0)))))
                                           (setq doom-doctor--warnings
                                                 (cons
                                                  (doom-print--format
                                                   (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                      (/ size 1024 1024.0)))
                                                  doom-doctor--warnings)))
                                         (progn
                                           (let
                                               ((doom-print-level
                                                 (or nil doom-print-level))
                                                (doom-print-indent
                                                 (+
                                                  (if t
                                                      (or nil doom-print-indent-increment)
                                                    0)
                                                  doom-print-indent)))
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'p "Consider deleting it from your system (manually)")))))))
                                 nil))
                             (setq tail
                                   (cdr tail)))))
                       (if
                           (condition-case nil
                               (progn
                                 (executable-find doom-fd-executable))
                             (error nil))
                           nil
                         (progn
                           (if inhibit-message nil
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))))
                           (setq doom-doctor--warnings
                                 (cons
                                  (doom-print--format
                                   (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                  doom-doctor--warnings))))
                       (require 'projectile)
                       (if
                           (projectile-project-root "~")
                           (progn
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'warn "Your $HOME is recognized as a project root"))))
                               (setq doom-doctor--warnings
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                      doom-doctor--warnings)))
                             (progn
                               (let
                                   ((doom-print-level
                                     (or nil doom-print-level))
                                    (doom-print-indent
                                     (+
                                      (if t
                                          (or nil doom-print-indent-increment)
                                        0)
                                      doom-print-indent)))
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'p "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")))))))
                       (if
                           (and
                            (file-equal-p doom-user-dir "~/.config/doom")
                            (file-directory-p "~/.doom.d"))
                           (progn
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                               (doom-print--class 'path doom-user-dir)))
                             (progn
                               (let
                                   ((doom-print-level
                                     (or nil doom-print-level))
                                    (doom-print-indent
                                     (+
                                      (if t
                                          (or nil doom-print-indent-increment)
                                        0)
                                      doom-print-indent)))
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'p "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")))))))
                       (if
                           (not
                            (executable-find "fc-list"))
                           (progn
                             (if inhibit-message nil
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))))
                             (setq doom-doctor--warnings
                                   (cons
                                    (doom-print--format
                                     (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                    doom-doctor--warnings)))
                         (if
                             (and
                              (cond
                               ((eq system-type 'gnu/linux)
                                (let nil
                                  (concat
                                   (or
                                    (getenv "XDG_DATA_HOME")
                                    "~/.local/share")
                                   "/fonts/")))
                               ((eq system-type 'darwin)
                                (let nil "~/Library/Fonts/")))
                              (require 'nerd-icons nil t))
                             (progn
                               (let
                                   ((temp-buffer
                                     (generate-new-buffer " *temp*" t)))
                                 (save-current-buffer
                                   (set-buffer temp-buffer)
                                   (unwind-protect
                                       (progn
                                         (let
                                             ((errors 0))
                                           (let*
                                               ((output
                                                 (doom-call-process "fc-list" "" "file"))
                                                (status
                                                 (if output
                                                     (car-safe
                                                      (prog1 output
                                                        (setq output
                                                              (cdr output))))
                                                   (signal 'wrong-number-of-arguments
                                                           (list
                                                            '(status . output)
                                                            (length output))))))
                                             (if
                                                 (not
                                                  (= 0 status))
                                                 (doom-print
                                                  (doom-print--format
                                                   (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?")))
                                               (insert
                                                (cdr
                                                 (doom-call-process "fc-list" "" "file")))
                                               (let
                                                   ((tail nerd-icons-font-names))
                                                 (while tail
                                                   (let
                                                       ((font
                                                         (car tail)))
                                                     (if
                                                         (save-excursion
                                                           (re-search-backward font nil t))
                                                         (doom-print
                                                          (doom-print--format
                                                           (doom-print--style 'green "Found font %s" font)))
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'warn "%S font is not installed on your system")
                                                         font))
                                                       (setq errors
                                                             (1+ errors)))
                                                     (setq tail
                                                           (cdr tail)))))
                                               (if
                                                   (> errors 0)
                                                   (progn
                                                     (progn
                                                       (let
                                                           ((doom-print-level
                                                             (or nil doom-print-level))
                                                            (doom-print-indent
                                                             (+
                                                              (if t
                                                                  (or nil doom-print-indent-increment)
                                                                0)
                                                              doom-print-indent)))
                                                         (doom-print
                                                          (doom-print--format
                                                           (doom-print--class 'p "Some needed fonts are not properly installed on your system. To download and " "install them, run `M-x nerd-icons-install-fonts' from within Doom Emacs. " "However, on Windows this command will only download them; the fonts must " "be installed manually afterwards.")))))))))))
                                     (and
                                      (buffer-name temp-buffer)
                                      (kill-buffer temp-buffer))))))))))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'start "Checking for stale elc files in your DOOMDIR...")))
                   (if
                       (file-directory-p doom-user-dir)
                       (progn
                         (progn
                           (let
                               ((doom-print-level
                                 (or nil doom-print-level))
                                (doom-print-indent
                                 (+
                                  (if t
                                      (or nil doom-print-indent-increment)
                                    0)
                                  doom-print-indent)))
                             (elc-check-dir doom-user-dir)))))
                   (if doom-modules
                       (progn
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'start "Checking your enabled modules...")))
                         (advice-add #'require :around #'doom-shut-up-a)
                         (let
                             ((tail
                               (doom-module-list)))
                           (while tail
                             (let
                                 ((x54
                                   (car tail)))
                               (progn
                                 (ignore
                                  (consp x54))
                                 (let*
                                     ((x55
                                       (car-safe x54))
                                      (x56
                                       (cdr-safe x54)))
                                   (let
                                       ((group x55)
                                        (name x56))
                                     (let
                                         ((doom-context doom-context))
                                       (let
                                           ((tail
                                             (ensure-list 'doctor)))
                                         (while tail
                                           (let
                                               ((context
                                                 (car tail)))
                                             (doom-context-push context)
                                             (setq tail
                                                   (cdr tail)))))
                                       (let
                                           (doom-local-errors doom-local-warnings)
                                         (let
                                             (doom-doctor--errors doom-doctor--warnings)
                                           (condition-case ex
                                               (let
                                                   ((doom-module-context
                                                     (doom-module-context
                                                      (cons group name))))
                                                 (if
                                                     (and
                                                      (not doom-inhibit-log)
                                                      (or
                                                       (not noninteractive)
                                                       (<= 2 doom-log-level)))
                                                     (progn
                                                       (doom--log 2 ":context:module: =%s" doom-module-context)))
                                                 (let
                                                     ((doctor-file
                                                       (doom-module-expand-path group name "doctor.el"))
                                                      (packages-file
                                                       (doom-module-expand-path group name doom-module-packages-file)))
                                                   (if packages-file
                                                       (progn
                                                         (let*
                                                             ((doom-output-indent 6)
                                                              (--cl-var--
                                                               (let
                                                                   ((doom-context doom-context))
                                                                 (let
                                                                     ((tail
                                                                       (ensure-list 'packages)))
                                                                   (while tail
                                                                     (let
                                                                         ((context
                                                                           (car tail)))
                                                                       (doom-context-push context)
                                                                       (setq tail
                                                                             (cdr tail)))))
                                                                 (let*
                                                                     (doom-packages doom-disabled-packages)
                                                                   (load packages-file 'noerror 'nomessage)
                                                                   (mapcar #'car doom-packages))))
                                                              (name nil))
                                                           (while
                                                               (consp --cl-var--)
                                                             (setq name
                                                                   (car --cl-var--))
                                                             (if
                                                                 (or
                                                                  (doom-package-get name :disable)
                                                                  (eval
                                                                   (doom-package-get name :ignore))
                                                                  (plist-member
                                                                   (doom-package-get name :recipe)
                                                                   :local-repo)
                                                                  (locate-library
                                                                   (symbol-name name))
                                                                  (doom-package-built-in-p name)
                                                                  (doom-package-installed-p name))
                                                                 (progn)
                                                               (doom-print
                                                                (doom-print--format
                                                                 (doom-print--class 'error "Missing emacs package: %S")
                                                                 name)))
                                                             (setq --cl-var--
                                                                   (cdr --cl-var--)))
                                                           nil)))
                                                   (if doctor-file
                                                       (progn
                                                         (let
                                                             ((inhibit-message t))
                                                           (load doctor-file 'noerror 'nomessage))))))
                                             ((debug file-missing)
                                              (progn
                                                (if inhibit-message nil
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'error "%s"
                                                                       (error-message-string ex)))))
                                                (setq doom-doctor--errors
                                                      (cons
                                                       (doom-print--format
                                                        (doom-print--class 'error "%s"
                                                                           (error-message-string ex)))
                                                       doom-doctor--errors))))
                                             ((debug error)
                                              (progn
                                                (if inhibit-message nil
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'error "Syntax error: %s" ex))))
                                                (setq doom-doctor--errors
                                                      (cons
                                                       (doom-print--format
                                                        (doom-print--class 'error "Syntax error: %s" ex))
                                                       doom-doctor--errors)))))
                                           (if
                                               (or doom-doctor--errors doom-doctor--warnings)
                                               (progn
                                                 (progn
                                                   (let
                                                       ((doom-print-level
                                                         (or nil doom-print-level))
                                                        (doom-print-indent
                                                         (+
                                                          (if t
                                                              (or nil doom-print-indent-increment)
                                                            0)
                                                          doom-print-indent)))
                                                     (doom-print
                                                      (doom-print--format
                                                       (doom-print--class 'start
                                                                          (doom-print--style 'bold "%s %s"))
                                                       group name))
                                                     (doom-print
                                                      (doom-print--format "%s"
                                                                          (string-join
                                                                           (append doom-doctor--errors doom-doctor--warnings)
                                                                           "\n")))))
                                                 (progn
                                                   (setq doom-local-errors doom-doctor--errors)
                                                   (setq doom-local-warnings doom-doctor--warnings)))))
                                         (setq doom-doctor--errors
                                               (append doom-doctor--errors doom-local-errors))
                                         (setq doom-doctor--warnings
                                               (append doom-doctor--warnings doom-local-warnings)))))))
                               (setq tail
                                     (cdr tail)))))))))
             ((debug error)
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                       (or
                                        (cdr-safe ex)
                                        (car ex))))))
                (setq doom-doctor--warnings
                      (cons
                       (doom-print--format
                        (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                           (or
                                            (cdr-safe ex)
                                            (car ex))))
                       doom-doctor--warnings)))
              (setq doom-modules nil)))
           (terpri)
           (let
               ((tail
                 (list
                  (list doom-doctor--warnings "warning" 'yellow)
                  (list doom-doctor--errors "error" 'red))))
             (while tail
               (let
                   ((msg
                     (car tail)))
                 (if
                     (car msg)
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'color
                                            (nth 2 msg)
                                            (if
                                                (cdr
                                                 (car msg))
                                                "There are %d %ss!" "There is %d %s!")
                                            (length
                                             (car msg))
                                            (nth 1 msg))))))
                 (setq tail
                       (cdr tail)))))
           (if
               (or doom-doctor--errors doom-doctor--warnings)
               nil
             (doom-print
              (doom-print--format
               (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))))
           (exit! :pager? "+G"))))))
  (x15 #s(doom-cli
          ("doom" "doctor")
          nil
          (("SUMMARY" . "Diagnoses common issues on your system.")
           ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
          nil nil nil nil
          (:benchmark nil :prefix
                      (doom)
                      :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
          (closure
              (t)
              (cli alist)
            (let nil
              (doom-print
               (doom-print--format "The doctor will see you now...\n"))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking your Emacs version...")))
              (progn
                (let
                    ((doom-print-level
                      (or nil doom-print-level))
                     (doom-print-indent
                      (+
                       (if t
                           (or nil doom-print-indent-increment)
                         0)
                       doom-print-indent)))
                  (cond
                   ((or
                     (> emacs-major-version 29)
                     (string-match-p ".\\([56]0\\|9[0-9]\\)$" emacs-version))
                    (progn
                      (if inhibit-message nil
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))))
                      (setq doom-doctor--warnings
                            (cons
                             (doom-print--format
                              (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))
                             doom-doctor--warnings)))
                    (if
                        (> emacs-major-version 29)
                        (progn
                          (let
                              ((doom-print-level
                                (or nil doom-print-level))
                               (doom-print-indent
                                (+
                                 (if t
                                     (or nil doom-print-indent-increment)
                                   0)
                                 doom-print-indent)))
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'p "This is the bleeding edge of Emacs. As it is constantly changed, Doom will not " "(officially) support it. If you've found a stable commit, great! But be " "cautious about updating Emacs too eagerly!\n")))))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "A .50, .60, or .9X appended to the version string indicates that this is a version " "of Emacs in between stable releases. These are not well supported.\n"))))))
                    (progn
                      (let
                          ((doom-print-level
                            (or nil doom-print-level))
                           (doom-print-indent
                            (+
                             (if t
                                 (or nil doom-print-indent-increment)
                               0)
                             doom-print-indent)))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'p "Because development builds are prone to random breakage, there will be a greater " "burden on you to investigate and deal with issues. Please make extra sure that " "your issue is reproducible in 29.1 before reporting them to Doom's issue tracker!\n" "\n" "If this doesn't phase you, read the \"Why does Doom not support Emacs HEAD\" QnA " "in Doom's FAQ. It offers some advice for debugging and surviving issues on the " "bleeding edge. Failing that, 29.1 is highly recommended and will always be " "Doom's best supported version of Emacs."))))))
                   ((= emacs-major-version 27)
                    (progn
                      (if inhibit-message nil
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))))
                      (setq doom-doctor--warnings
                            (cons
                             (doom-print--format
                              (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))
                             doom-doctor--warnings)))
                    (progn
                      (let
                          ((doom-print-level
                            (or nil doom-print-level))
                           (doom-print-indent
                            (+
                             (if t
                                 (or nil doom-print-indent-increment)
                               0)
                             doom-print-indent)))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'p "Emacs 28.1 is better supported, faster, and more stable. Plus, Doom will drop " "27.x support sometime late-2023.")))))))))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking for Doom's prerequisites...")))
              (progn
                (let
                    ((doom-print-level
                      (or nil doom-print-level))
                     (doom-print-indent
                      (+
                       (if t
                           (or nil doom-print-indent-increment)
                         0)
                       doom-print-indent)))
                  (if
                      (not
                       (executable-find "git"))
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))))
                        (setq doom-doctor--errors
                              (cons
                               (doom-print--format
                                (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                               doom-doctor--errors)))
                    (let
                        ((saved-match-data
                          (match-data)))
                      (unwind-protect
                          (progn
                            (let*
                                ((version
                                  (cdr
                                   (doom-call-process "git" "version")))
                                 (version
                                  (and
                                   (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                                   (match-string 1 version))))
                              (if version
                                  (if
                                      (version< version "2.23")
                                      (progn
                                        (progn
                                          (if inhibit-message nil
                                            (doom-print
                                             (doom-print--format
                                              (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))))
                                          (setq doom-doctor--errors
                                                (cons
                                                 (doom-print--format
                                                  (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                                 doom-doctor--errors)))))
                                (progn
                                  (if inhibit-message nil
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))))
                                  (setq doom-doctor--warnings
                                        (cons
                                         (doom-print--format
                                          (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                         doom-doctor--warnings))))))
                        (set-match-data saved-match-data t))))
                  (if
                      (executable-find "rg")
                      nil
                    (progn
                      (if inhibit-message nil
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))))
                      (setq doom-doctor--errors
                            (cons
                             (doom-print--format
                              (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                             doom-doctor--errors))))))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking for Emacs config conflicts...")))
              (progn
                (let
                    ((doom-print-level
                      (or nil doom-print-level))
                     (doom-print-indent
                      (+
                       (if t
                           (or nil doom-print-indent-increment)
                         0)
                       doom-print-indent)))
                  (if
                      (or
                       (file-equal-p doom-emacs-dir "~/.emacs.d")
                       (file-equal-p doom-emacs-dir "~/.config/emacs"))
                      nil
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'warn "Doom is installed in a non-standard location")))
                    (progn
                      (let
                          ((doom-print-level
                            (or nil doom-print-level))
                           (doom-print-indent
                            (+
                             (if t
                                 (or nil doom-print-indent-increment)
                               0)
                             doom-print-indent)))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'p "The standard locations are ~/.config/emacs or ~/.emacs.d. Emacs will fail " "to load Doom if it is not explicitly told where to look for it. In Emacs 29+, " "this is possible with the --init-directory option:\n\n" "  $ emacs --init-directory '"
                                             (abbreviate-file-name doom-emacs-dir)
                                             "'\n\n" "However, Emacs 27-28 users have no choice but to move Doom to a standard " "location.\n\n" "Chemacs users may ignore this warning, however."))))))
                  (let
                      (found?)
                    (let
                        ((tail
                          '("~/_emacs" "~/.emacs" "~/.emacs.el" "~/.emacs.d" "~/.config/emacs")))
                      (while tail
                        (let
                            ((file
                              (car tail)))
                          (if
                              (and
                               (file-exists-p file)
                               (not
                                (file-equal-p file doom-emacs-dir)))
                              (progn
                                (setq found? t)
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'warn "Found another Emacs config: %s (%s)")
                                  file
                                  (if
                                      (file-directory-p file)
                                      "directory" "file")))))
                          (setq tail
                                (cdr tail)))))
                    (if found?
                        (progn
                          (progn
                            (let
                                ((doom-print-level
                                  (or nil doom-print-level))
                                 (doom-print-indent
                                  (+
                                   (if t
                                       (or nil doom-print-indent-increment)
                                     0)
                                   doom-print-indent)))
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'p "Having multiple Emacs configs may prevent Doom from loading properly. Emacs " "will load the first it finds and ignore the rest. If Doom isn't starting up " "correctly (e.g. you get a vanilla splash screen), make sure that only one of " "these exist.\n\n" "Chemacs users may ignore this warning."))))))))))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking for missing Emacs features...")))
              (progn
                (let
                    ((doom-print-level
                      (or nil doom-print-level))
                     (doom-print-indent
                      (+
                       (if t
                           (or nil doom-print-indent-increment)
                         0)
                       doom-print-indent)))
                  (if
                      (functionp 'json-serialize)
                      nil
                    (progn
                      (if inhibit-message nil
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Emacs was not built with native JSON support"))))
                      (setq doom-doctor--warnings
                            (cons
                             (doom-print--format
                              (doom-print--class 'warn "Emacs was not built with native JSON support"))
                             doom-doctor--warnings)))
                    (progn
                      (let
                          ((doom-print-level
                            (or nil doom-print-level))
                           (doom-print-indent
                            (+
                             (if t
                                 (or nil doom-print-indent-increment)
                               0)
                             doom-print-indent)))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option."))))))
                  (if
                      (featurep 'native-compile)
                      nil
                    (progn
                      (if inhibit-message nil
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Emacs was not built with native compilation support"))))
                      (setq doom-doctor--warnings
                            (cons
                             (doom-print--format
                              (doom-print--class 'warn "Emacs was not built with native compilation support"))
                             doom-doctor--warnings)))
                    (progn
                      (let
                          ((doom-print-level
                            (or nil doom-print-level))
                           (doom-print-indent
                            (+
                             (if t
                                 (or nil doom-print-indent-increment)
                               0)
                             doom-print-indent)))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option."))))))))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking for private config conflicts...")))
              (progn
                (let
                    ((doom-print-level
                      (or nil doom-print-level))
                     (doom-print-indent
                      (+
                       (if t
                           (or nil doom-print-indent-increment)
                         0)
                       doom-print-indent)))
                  (let*
                      ((xdg-dir
                        (concat
                         (or
                          (getenv "XDG_CONFIG_HOME")
                          "~/.config")
                         "/doom/"))
                       (doom-dir
                        (or
                         (getenv "DOOMDIR")
                         "~/.doom.d/"))
                       (dir
                        (if
                            (file-directory-p xdg-dir)
                            xdg-dir doom-dir)))
                    (if
                        (file-equal-p dir doom-emacs-dir)
                        (progn
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                               (doom-print--class 'path dir))))
                          (progn
                            (let
                                ((doom-print-level
                                  (or nil doom-print-level))
                                 (doom-print-indent
                                  (+
                                   (if t
                                       (or nil doom-print-indent-increment)
                                     0)
                                   doom-print-indent)))
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'p "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")))))))
                    (if
                        (and
                         (not
                          (file-equal-p xdg-dir doom-dir))
                         (file-directory-p xdg-dir)
                         (file-directory-p doom-dir))
                        (progn
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Detected two private configs, in %s and %s")
                            (abbreviate-file-name xdg-dir)
                            doom-dir))
                          (progn
                            (let
                                ((doom-print-level
                                  (or nil doom-print-level))
                                 (doom-print-indent
                                  (+
                                   (if t
                                       (or nil doom-print-indent-increment)
                                     0)
                                   doom-print-indent)))
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'p "The second directory will be ignored, as it has lower precedence."))))))))))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking for common environmental issues...")))
              (if
                  (string-match-p "/fish$" shell-file-name)
                  (progn
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'warn "Detected Fish as your $SHELL")))
                    (progn
                      (let
                          ((doom-print-level
                            (or nil doom-print-level))
                           (doom-print-indent
                            (+
                             (if t
                                 (or nil doom-print-indent-increment)
                               0)
                             doom-print-indent)))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'p "Fish (and possibly other non-POSIX shells) is known to inject garbage " "output into some of the child processes that Emacs spawns. Many Emacs " "packages/utilities will choke on this output, causing unpredictable issues. " "To get around this, either:\n\n" "  - Add the following to $DOOMDIR/config.el:\n\n" "    (setq shell-file-name (executable-find \"bash\"))\n\n" "  - Or change your default shell to a POSIX shell (like bash or zsh) " "    and explicitly configure your terminal apps to use the shell you " "    want.\n\n" "If you opt for option 1 and use one of Emacs' terminal emulators, you " "will also need to configure them to use Fish, e.g.\n\n" "  (setq-default vterm-shell (executable-find \"fish\"))\n\n" "  (setq-default explicit-shell-file-name (executable-find \"fish\"))\n")))))))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking for stale elc files...")))
              (elc-check-dir doom-core-dir)
              (elc-check-dir doom-modules-dir)
              (elc-check-dir
               (doom-path doom-local-dir "straight" straight-build-dir))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking for problematic git global settings...")))
              (if
                  (executable-find "git")
                  (if
                      (= 0
                         (car
                          (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                      (progn
                        (progn
                          (if inhibit-message nil
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))))
                          (setq doom-doctor--warnings
                                (cons
                                 (doom-print--format
                                  (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                                 doom-doctor--warnings)))
                        (progn
                          (let
                              ((doom-print-level
                                (or nil doom-print-level))
                               (doom-print-indent
                                (+
                                 (if t
                                     (or nil doom-print-indent-increment)
                                   0)
                                 doom-print-indent)))
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'p "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")))))))
                (progn
                  (if inhibit-message nil
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))))
                  (setq doom-doctor--errors
                        (cons
                         (doom-print--format
                          (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                         doom-doctor--errors))))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking Doom Emacs...")))
              (condition-case ex
                  (progn
                    (let
                        ((doom-print-level
                          (or nil doom-print-level))
                         (doom-print-indent
                          (+
                           (if t
                               (or nil doom-print-indent-increment)
                             0)
                           doom-print-indent)))
                      (require 'doom-start)
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'success "Initialized Doom Emacs %s")
                        doom-version))
                      (doom-print
                       (doom-print--format
                        (if
                            (hash-table-p doom-modules)
                            (doom-print--class 'success "Detected %d modules"
                                               (hash-table-count doom-modules))
                          (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?"))))
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'success "Detected %d packages")
                        (length doom-packages)))
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'start "Checking Doom core for irregularities...")))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (let
                              ((tail
                                (list "savehist" "projectile.cache")))
                            (while tail
                              (let
                                  ((file
                                    (car tail)))
                                (let*
                                    ((size
                                      (and t
                                           (condition-case nil
                                               (progn
                                                 (doom-file-size file doom-cache-dir))
                                             (error nil)))))
                                  (if size
                                      (if
                                          (> size 1048576)
                                          (progn
                                            (progn
                                              (if inhibit-message nil
                                                (doom-print
                                                 (doom-print--format
                                                  (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                     (/ size 1024 1024.0)))))
                                              (setq doom-doctor--warnings
                                                    (cons
                                                     (doom-print--format
                                                      (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                         (/ size 1024 1024.0)))
                                                     doom-doctor--warnings)))
                                            (progn
                                              (let
                                                  ((doom-print-level
                                                    (or nil doom-print-level))
                                                   (doom-print-indent
                                                    (+
                                                     (if t
                                                         (or nil doom-print-indent-increment)
                                                       0)
                                                     doom-print-indent)))
                                                (doom-print
                                                 (doom-print--format
                                                  (doom-print--class 'p "Consider deleting it from your system (manually)")))))))
                                    nil))
                                (setq tail
                                      (cdr tail)))))
                          (if
                              (condition-case nil
                                  (progn
                                    (executable-find doom-fd-executable))
                                (error nil))
                              nil
                            (progn
                              (if inhibit-message nil
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))))
                              (setq doom-doctor--warnings
                                    (cons
                                     (doom-print--format
                                      (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                     doom-doctor--warnings))))
                          (require 'projectile)
                          (if
                              (projectile-project-root "~")
                              (progn
                                (progn
                                  (if inhibit-message nil
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'warn "Your $HOME is recognized as a project root"))))
                                  (setq doom-doctor--warnings
                                        (cons
                                         (doom-print--format
                                          (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                         doom-doctor--warnings)))
                                (progn
                                  (let
                                      ((doom-print-level
                                        (or nil doom-print-level))
                                       (doom-print-indent
                                        (+
                                         (if t
                                             (or nil doom-print-indent-increment)
                                           0)
                                         doom-print-indent)))
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'p "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")))))))
                          (if
                              (and
                               (file-equal-p doom-user-dir "~/.config/doom")
                               (file-directory-p "~/.doom.d"))
                              (progn
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                                  (doom-print--class 'path doom-user-dir)))
                                (progn
                                  (let
                                      ((doom-print-level
                                        (or nil doom-print-level))
                                       (doom-print-indent
                                        (+
                                         (if t
                                             (or nil doom-print-indent-increment)
                                           0)
                                         doom-print-indent)))
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'p "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")))))))
                          (if
                              (not
                               (executable-find "fc-list"))
                              (progn
                                (if inhibit-message nil
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))))
                                (setq doom-doctor--warnings
                                      (cons
                                       (doom-print--format
                                        (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                       doom-doctor--warnings)))
                            (if
                                (and
                                 (cond
                                  ((eq system-type 'gnu/linux)
                                   (let nil
                                     (concat
                                      (or
                                       (getenv "XDG_DATA_HOME")
                                       "~/.local/share")
                                      "/fonts/")))
                                  ((eq system-type 'darwin)
                                   (let nil "~/Library/Fonts/")))
                                 (require 'nerd-icons nil t))
                                (progn
                                  (let
                                      ((temp-buffer
                                        (generate-new-buffer " *temp*" t)))
                                    (save-current-buffer
                                      (set-buffer temp-buffer)
                                      (unwind-protect
                                          (progn
                                            (let
                                                ((errors 0))
                                              (let*
                                                  ((output
                                                    (doom-call-process "fc-list" "" "file"))
                                                   (status
                                                    (if output
                                                        (car-safe
                                                         (prog1 output
                                                           (setq output
                                                                 (cdr output))))
                                                      (signal 'wrong-number-of-arguments
                                                              (list
                                                               '(status . output)
                                                               (length output))))))
                                                (if
                                                    (not
                                                     (= 0 status))
                                                    (doom-print
                                                     (doom-print--format
                                                      (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?")))
                                                  (insert
                                                   (cdr
                                                    (doom-call-process "fc-list" "" "file")))
                                                  (let
                                                      ((tail nerd-icons-font-names))
                                                    (while tail
                                                      (let
                                                          ((font
                                                            (car tail)))
                                                        (if
                                                            (save-excursion
                                                              (re-search-backward font nil t))
                                                            (doom-print
                                                             (doom-print--format
                                                              (doom-print--style 'green "Found font %s" font)))
                                                          (doom-print
                                                           (doom-print--format
                                                            (doom-print--class 'warn "%S font is not installed on your system")
                                                            font))
                                                          (setq errors
                                                                (1+ errors)))
                                                        (setq tail
                                                              (cdr tail)))))
                                                  (if
                                                      (> errors 0)
                                                      (progn
                                                        (progn
                                                          (let
                                                              ((doom-print-level
                                                                (or nil doom-print-level))
                                                               (doom-print-indent
                                                                (+
                                                                 (if t
                                                                     (or nil doom-print-indent-increment)
                                                                   0)
                                                                 doom-print-indent)))
                                                            (doom-print
                                                             (doom-print--format
                                                              (doom-print--class 'p "Some needed fonts are not properly installed on your system. To download and " "install them, run `M-x nerd-icons-install-fonts' from within Doom Emacs. " "However, on Windows this command will only download them; the fonts must " "be installed manually afterwards.")))))))))))
                                        (and
                                         (buffer-name temp-buffer)
                                         (kill-buffer temp-buffer))))))))))
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'start "Checking for stale elc files in your DOOMDIR...")))
                      (if
                          (file-directory-p doom-user-dir)
                          (progn
                            (progn
                              (let
                                  ((doom-print-level
                                    (or nil doom-print-level))
                                   (doom-print-indent
                                    (+
                                     (if t
                                         (or nil doom-print-indent-increment)
                                       0)
                                     doom-print-indent)))
                                (elc-check-dir doom-user-dir)))))
                      (if doom-modules
                          (progn
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'start "Checking your enabled modules...")))
                            (advice-add #'require :around #'doom-shut-up-a)
                            (let
                                ((tail
                                  (doom-module-list)))
                              (while tail
                                (let
                                    ((x54
                                      (car tail)))
                                  (progn
                                    (ignore
                                     (consp x54))
                                    (let*
                                        ((x55
                                          (car-safe x54))
                                         (x56
                                          (cdr-safe x54)))
                                      (let
                                          ((group x55)
                                           (name x56))
                                        (let
                                            ((doom-context doom-context))
                                          (let
                                              ((tail
                                                (ensure-list 'doctor)))
                                            (while tail
                                              (let
                                                  ((context
                                                    (car tail)))
                                                (doom-context-push context)
                                                (setq tail
                                                      (cdr tail)))))
                                          (let
                                              (doom-local-errors doom-local-warnings)
                                            (let
                                                (doom-doctor--errors doom-doctor--warnings)
                                              (condition-case ex
                                                  (let
                                                      ((doom-module-context
                                                        (doom-module-context
                                                         (cons group name))))
                                                    (if
                                                        (and
                                                         (not doom-inhibit-log)
                                                         (or
                                                          (not noninteractive)
                                                          (<= 2 doom-log-level)))
                                                        (progn
                                                          (doom--log 2 ":context:module: =%s" doom-module-context)))
                                                    (let
                                                        ((doctor-file
                                                          (doom-module-expand-path group name "doctor.el"))
                                                         (packages-file
                                                          (doom-module-expand-path group name doom-module-packages-file)))
                                                      (if packages-file
                                                          (progn
                                                            (let*
                                                                ((doom-output-indent 6)
                                                                 (--cl-var--
                                                                  (let
                                                                      ((doom-context doom-context))
                                                                    (let
                                                                        ((tail
                                                                          (ensure-list 'packages)))
                                                                      (while tail
                                                                        (let
                                                                            ((context
                                                                              (car tail)))
                                                                          (doom-context-push context)
                                                                          (setq tail
                                                                                (cdr tail)))))
                                                                    (let*
                                                                        (doom-packages doom-disabled-packages)
                                                                      (load packages-file 'noerror 'nomessage)
                                                                      (mapcar #'car doom-packages))))
                                                                 (name nil))
                                                              (while
                                                                  (consp --cl-var--)
                                                                (setq name
                                                                      (car --cl-var--))
                                                                (if
                                                                    (or
                                                                     (doom-package-get name :disable)
                                                                     (eval
                                                                      (doom-package-get name :ignore))
                                                                     (plist-member
                                                                      (doom-package-get name :recipe)
                                                                      :local-repo)
                                                                     (locate-library
                                                                      (symbol-name name))
                                                                     (doom-package-built-in-p name)
                                                                     (doom-package-installed-p name))
                                                                    (progn)
                                                                  (doom-print
                                                                   (doom-print--format
                                                                    (doom-print--class 'error "Missing emacs package: %S")
                                                                    name)))
                                                                (setq --cl-var--
                                                                      (cdr --cl-var--)))
                                                              nil)))
                                                      (if doctor-file
                                                          (progn
                                                            (let
                                                                ((inhibit-message t))
                                                              (load doctor-file 'noerror 'nomessage))))))
                                                ((debug file-missing)
                                                 (progn
                                                   (if inhibit-message nil
                                                     (doom-print
                                                      (doom-print--format
                                                       (doom-print--class 'error "%s"
                                                                          (error-message-string ex)))))
                                                   (setq doom-doctor--errors
                                                         (cons
                                                          (doom-print--format
                                                           (doom-print--class 'error "%s"
                                                                              (error-message-string ex)))
                                                          doom-doctor--errors))))
                                                ((debug error)
                                                 (progn
                                                   (if inhibit-message nil
                                                     (doom-print
                                                      (doom-print--format
                                                       (doom-print--class 'error "Syntax error: %s" ex))))
                                                   (setq doom-doctor--errors
                                                         (cons
                                                          (doom-print--format
                                                           (doom-print--class 'error "Syntax error: %s" ex))
                                                          doom-doctor--errors)))))
                                              (if
                                                  (or doom-doctor--errors doom-doctor--warnings)
                                                  (progn
                                                    (progn
                                                      (let
                                                          ((doom-print-level
                                                            (or nil doom-print-level))
                                                           (doom-print-indent
                                                            (+
                                                             (if t
                                                                 (or nil doom-print-indent-increment)
                                                               0)
                                                             doom-print-indent)))
                                                        (doom-print
                                                         (doom-print--format
                                                          (doom-print--class 'start
                                                                             (doom-print--style 'bold "%s %s"))
                                                          group name))
                                                        (doom-print
                                                         (doom-print--format "%s"
                                                                             (string-join
                                                                              (append doom-doctor--errors doom-doctor--warnings)
                                                                              "\n")))))
                                                    (progn
                                                      (setq doom-local-errors doom-doctor--errors)
                                                      (setq doom-local-warnings doom-doctor--warnings)))))
                                            (setq doom-doctor--errors
                                                  (append doom-doctor--errors doom-local-errors))
                                            (setq doom-doctor--warnings
                                                  (append doom-doctor--warnings doom-local-warnings)))))))
                                  (setq tail
                                        (cdr tail)))))))))
                ((debug error)
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                          (or
                                           (cdr-safe ex)
                                           (car ex))))))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                              (or
                                               (cdr-safe ex)
                                               (car ex))))
                          doom-doctor--warnings)))
                 (setq doom-modules nil)))
              (terpri)
              (let
                  ((tail
                    (list
                     (list doom-doctor--warnings "warning" 'yellow)
                     (list doom-doctor--errors "error" 'red))))
                (while tail
                  (let
                      ((msg
                        (car tail)))
                    (if
                        (car msg)
                        (progn
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'color
                                               (nth 2 msg)
                                               (if
                                                   (cdr
                                                    (car msg))
                                                   "There are %d %ss!" "There is %d %s!")
                                               (length
                                                (car msg))
                                               (nth 1 msg))))))
                    (setq tail
                          (cdr tail)))))
              (if
                  (or doom-doctor--errors doom-doctor--warnings)
                  nil
                (doom-print
                 (doom-print--format
                  (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))))
              (exit! :pager? "+G")))))))

;;;; 39
((while tail
   (let
       ((x15
         (car tail)))
     (progn
       (ignore
        (consp x15))
       (let*
           ((x16
             (car-safe x15))
            (x17
             (cdr-safe x15)))
         (let
             ((cli x16)
              (bindings x17))
           (doom-cli-execute cli bindings))))
     (setq tail
           (cdr tail))))
 nil)

;;;; 40
((let
     ((tail
       (nreverse runners)))
   (while tail
     (let
         ((x15
           (car tail)))
       (progn
         (ignore
          (consp x15))
         (let*
             ((x16
               (car-safe x15))
              (x17
               (cdr-safe x15)))
           (let
               ((cli x16)
                (bindings x17))
             (doom-cli-execute cli bindings))))
       (setq tail
             (cdr tail)))))
 ((context . #s(doom-cli-context
                (26384 50378 735038 513000)
                65238 0
                (88 . 27)
                nil nil "doom" nil nil
                ("doom" "doctor")
                nil
                ("doctor")
                (("--eval")
                 ("-E")
                 ("--strict-load")
                 ("--load")
                 ("-L")
                 ("--color")
                 ("--benchmark")
                 ("--profile")
                 ("--pager")
                 ("--emacsdir")
                 ("--doomdir")
                 ("--verbose")
                 ("-v")
                 ("--debug")
                 ("-D")
                 ("--force")
                 ("-!"))
                ((t)
                 (("doom" "doctor"))
                 (("doom")
                  "doctor"))
                #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (command "doom" "doctor")
  (cli . #s(doom-cli
            ("doom" "doctor")
            nil
            (("SUMMARY" . "Diagnoses common issues on your system.")
             ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
            nil nil nil nil
            (:benchmark nil :prefix
                        (doom)
                        :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
            (closure
                (t)
                (cli alist)
              (let nil
                (doom-print
                 (doom-print--format "The doctor will see you now...\n"))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking your Emacs version...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (cond
                     ((or
                       (> emacs-major-version 29)
                       (string-match-p ".\\([56]0\\|9[0-9]\\)$" emacs-version))
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))
                               doom-doctor--warnings)))
                      (if
                          (> emacs-major-version 29)
                          (progn
                            (let
                                ((doom-print-level
                                  (or nil doom-print-level))
                                 (doom-print-indent
                                  (+
                                   (if t
                                       (or nil doom-print-indent-increment)
                                     0)
                                   doom-print-indent)))
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'p "This is the bleeding edge of Emacs. As it is constantly changed, Doom will not " "(officially) support it. If you've found a stable commit, great! But be " "cautious about updating Emacs too eagerly!\n")))))
                        (progn
                          (let
                              ((doom-print-level
                                (or nil doom-print-level))
                               (doom-print-indent
                                (+
                                 (if t
                                     (or nil doom-print-indent-increment)
                                   0)
                                 doom-print-indent)))
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'p "A .50, .60, or .9X appended to the version string indicates that this is a version " "of Emacs in between stable releases. These are not well supported.\n"))))))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Because development builds are prone to random breakage, there will be a greater " "burden on you to investigate and deal with issues. Please make extra sure that " "your issue is reproducible in 29.1 before reporting them to Doom's issue tracker!\n" "\n" "If this doesn't phase you, read the \"Why does Doom not support Emacs HEAD\" QnA " "in Doom's FAQ. It offers some advice for debugging and surviving issues on the " "bleeding edge. Failing that, 29.1 is highly recommended and will always be " "Doom's best supported version of Emacs."))))))
                     ((= emacs-major-version 27)
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))
                               doom-doctor--warnings)))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Emacs 28.1 is better supported, faster, and more stable. Plus, Doom will drop " "27.x support sometime late-2023.")))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for Doom's prerequisites...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (if
                        (not
                         (executable-find "git"))
                        (progn
                          (if inhibit-message nil
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))))
                          (setq doom-doctor--errors
                                (cons
                                 (doom-print--format
                                  (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                                 doom-doctor--errors)))
                      (let
                          ((saved-match-data
                            (match-data)))
                        (unwind-protect
                            (progn
                              (let*
                                  ((version
                                    (cdr
                                     (doom-call-process "git" "version")))
                                   (version
                                    (and
                                     (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                                     (match-string 1 version))))
                                (if version
                                    (if
                                        (version< version "2.23")
                                        (progn
                                          (progn
                                            (if inhibit-message nil
                                              (doom-print
                                               (doom-print--format
                                                (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))))
                                            (setq doom-doctor--errors
                                                  (cons
                                                   (doom-print--format
                                                    (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                                   doom-doctor--errors)))))
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))))
                                    (setq doom-doctor--warnings
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                           doom-doctor--warnings))))))
                          (set-match-data saved-match-data t))))
                    (if
                        (executable-find "rg")
                        nil
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))))
                        (setq doom-doctor--errors
                              (cons
                               (doom-print--format
                                (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                               doom-doctor--errors))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for Emacs config conflicts...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (if
                        (or
                         (file-equal-p doom-emacs-dir "~/.emacs.d")
                         (file-equal-p doom-emacs-dir "~/.config/emacs"))
                        nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Doom is installed in a non-standard location")))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "The standard locations are ~/.config/emacs or ~/.emacs.d. Emacs will fail " "to load Doom if it is not explicitly told where to look for it. In Emacs 29+, " "this is possible with the --init-directory option:\n\n" "  $ emacs --init-directory '"
                                               (abbreviate-file-name doom-emacs-dir)
                                               "'\n\n" "However, Emacs 27-28 users have no choice but to move Doom to a standard " "location.\n\n" "Chemacs users may ignore this warning, however."))))))
                    (let
                        (found?)
                      (let
                          ((tail
                            '("~/_emacs" "~/.emacs" "~/.emacs.el" "~/.emacs.d" "~/.config/emacs")))
                        (while tail
                          (let
                              ((file
                                (car tail)))
                            (if
                                (and
                                 (file-exists-p file)
                                 (not
                                  (file-equal-p file doom-emacs-dir)))
                                (progn
                                  (setq found? t)
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'warn "Found another Emacs config: %s (%s)")
                                    file
                                    (if
                                        (file-directory-p file)
                                        "directory" "file")))))
                            (setq tail
                                  (cdr tail)))))
                      (if found?
                          (progn
                            (progn
                              (let
                                  ((doom-print-level
                                    (or nil doom-print-level))
                                   (doom-print-indent
                                    (+
                                     (if t
                                         (or nil doom-print-indent-increment)
                                       0)
                                     doom-print-indent)))
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'p "Having multiple Emacs configs may prevent Doom from loading properly. Emacs " "will load the first it finds and ignore the rest. If Doom isn't starting up " "correctly (e.g. you get a vanilla splash screen), make sure that only one of " "these exist.\n\n" "Chemacs users may ignore this warning."))))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for missing Emacs features...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (if
                        (functionp 'json-serialize)
                        nil
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Emacs was not built with native JSON support"))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Emacs was not built with native JSON support"))
                               doom-doctor--warnings)))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option."))))))
                    (if
                        (featurep 'native-compile)
                        nil
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Emacs was not built with native compilation support"))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Emacs was not built with native compilation support"))
                               doom-doctor--warnings)))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option."))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for private config conflicts...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (let*
                        ((xdg-dir
                          (concat
                           (or
                            (getenv "XDG_CONFIG_HOME")
                            "~/.config")
                           "/doom/"))
                         (doom-dir
                          (or
                           (getenv "DOOMDIR")
                           "~/.doom.d/"))
                         (dir
                          (if
                              (file-directory-p xdg-dir)
                              xdg-dir doom-dir)))
                      (if
                          (file-equal-p dir doom-emacs-dir)
                          (progn
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                                 (doom-print--class 'path dir))))
                            (progn
                              (let
                                  ((doom-print-level
                                    (or nil doom-print-level))
                                   (doom-print-indent
                                    (+
                                     (if t
                                         (or nil doom-print-indent-increment)
                                       0)
                                     doom-print-indent)))
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'p "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")))))))
                      (if
                          (and
                           (not
                            (file-equal-p xdg-dir doom-dir))
                           (file-directory-p xdg-dir)
                           (file-directory-p doom-dir))
                          (progn
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'warn "Detected two private configs, in %s and %s")
                              (abbreviate-file-name xdg-dir)
                              doom-dir))
                            (progn
                              (let
                                  ((doom-print-level
                                    (or nil doom-print-level))
                                   (doom-print-indent
                                    (+
                                     (if t
                                         (or nil doom-print-indent-increment)
                                       0)
                                     doom-print-indent)))
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'p "The second directory will be ignored, as it has lower precedence."))))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for common environmental issues...")))
                (if
                    (string-match-p "/fish$" shell-file-name)
                    (progn
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Detected Fish as your $SHELL")))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Fish (and possibly other non-POSIX shells) is known to inject garbage " "output into some of the child processes that Emacs spawns. Many Emacs " "packages/utilities will choke on this output, causing unpredictable issues. " "To get around this, either:\n\n" "  - Add the following to $DOOMDIR/config.el:\n\n" "    (setq shell-file-name (executable-find \"bash\"))\n\n" "  - Or change your default shell to a POSIX shell (like bash or zsh) " "    and explicitly configure your terminal apps to use the shell you " "    want.\n\n" "If you opt for option 1 and use one of Emacs' terminal emulators, you " "will also need to configure them to use Fish, e.g.\n\n" "  (setq-default vterm-shell (executable-find \"fish\"))\n\n" "  (setq-default explicit-shell-file-name (executable-find \"fish\"))\n")))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for stale elc files...")))
                (elc-check-dir doom-core-dir)
                (elc-check-dir doom-modules-dir)
                (elc-check-dir
                 (doom-path doom-local-dir "straight" straight-build-dir))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for problematic git global settings...")))
                (if
                    (executable-find "git")
                    (if
                        (= 0
                           (car
                            (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                        (progn
                          (progn
                            (if inhibit-message nil
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))))
                            (setq doom-doctor--warnings
                                  (cons
                                   (doom-print--format
                                    (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                                   doom-doctor--warnings)))
                          (progn
                            (let
                                ((doom-print-level
                                  (or nil doom-print-level))
                                 (doom-print-indent
                                  (+
                                   (if t
                                       (or nil doom-print-indent-increment)
                                     0)
                                   doom-print-indent)))
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'p "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")))))))
                  (progn
                    (if inhibit-message nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))))
                    (setq doom-doctor--errors
                          (cons
                           (doom-print--format
                            (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                           doom-doctor--errors))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking Doom Emacs...")))
                (condition-case ex
                    (progn
                      (let
                          ((doom-print-level
                            (or nil doom-print-level))
                           (doom-print-indent
                            (+
                             (if t
                                 (or nil doom-print-indent-increment)
                               0)
                             doom-print-indent)))
                        (require 'doom-start)
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'success "Initialized Doom Emacs %s")
                          doom-version))
                        (doom-print
                         (doom-print--format
                          (if
                              (hash-table-p doom-modules)
                              (doom-print--class 'success "Detected %d modules"
                                                 (hash-table-count doom-modules))
                            (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?"))))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'success "Detected %d packages")
                          (length doom-packages)))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'start "Checking Doom core for irregularities...")))
                        (progn
                          (let
                              ((doom-print-level
                                (or nil doom-print-level))
                               (doom-print-indent
                                (+
                                 (if t
                                     (or nil doom-print-indent-increment)
                                   0)
                                 doom-print-indent)))
                            (let
                                ((tail
                                  (list "savehist" "projectile.cache")))
                              (while tail
                                (let
                                    ((file
                                      (car tail)))
                                  (let*
                                      ((size
                                        (and t
                                             (condition-case nil
                                                 (progn
                                                   (doom-file-size file doom-cache-dir))
                                               (error nil)))))
                                    (if size
                                        (if
                                            (> size 1048576)
                                            (progn
                                              (progn
                                                (if inhibit-message nil
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                       (/ size 1024 1024.0)))))
                                                (setq doom-doctor--warnings
                                                      (cons
                                                       (doom-print--format
                                                        (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                           (/ size 1024 1024.0)))
                                                       doom-doctor--warnings)))
                                              (progn
                                                (let
                                                    ((doom-print-level
                                                      (or nil doom-print-level))
                                                     (doom-print-indent
                                                      (+
                                                       (if t
                                                           (or nil doom-print-indent-increment)
                                                         0)
                                                       doom-print-indent)))
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'p "Consider deleting it from your system (manually)")))))))
                                      nil))
                                  (setq tail
                                        (cdr tail)))))
                            (if
                                (condition-case nil
                                    (progn
                                      (executable-find doom-fd-executable))
                                  (error nil))
                                nil
                              (progn
                                (if inhibit-message nil
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))))
                                (setq doom-doctor--warnings
                                      (cons
                                       (doom-print--format
                                        (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                       doom-doctor--warnings))))
                            (require 'projectile)
                            (if
                                (projectile-project-root "~")
                                (progn
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'warn "Your $HOME is recognized as a project root"))))
                                    (setq doom-doctor--warnings
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                           doom-doctor--warnings)))
                                  (progn
                                    (let
                                        ((doom-print-level
                                          (or nil doom-print-level))
                                         (doom-print-indent
                                          (+
                                           (if t
                                               (or nil doom-print-indent-increment)
                                             0)
                                           doom-print-indent)))
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'p "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")))))))
                            (if
                                (and
                                 (file-equal-p doom-user-dir "~/.config/doom")
                                 (file-directory-p "~/.doom.d"))
                                (progn
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                                    (doom-print--class 'path doom-user-dir)))
                                  (progn
                                    (let
                                        ((doom-print-level
                                          (or nil doom-print-level))
                                         (doom-print-indent
                                          (+
                                           (if t
                                               (or nil doom-print-indent-increment)
                                             0)
                                           doom-print-indent)))
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'p "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")))))))
                            (if
                                (not
                                 (executable-find "fc-list"))
                                (progn
                                  (if inhibit-message nil
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))))
                                  (setq doom-doctor--warnings
                                        (cons
                                         (doom-print--format
                                          (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                         doom-doctor--warnings)))
                              (if
                                  (and
                                   (cond
                                    ((eq system-type 'gnu/linux)
                                     (let nil
                                       (concat
                                        (or
                                         (getenv "XDG_DATA_HOME")
                                         "~/.local/share")
                                        "/fonts/")))
                                    ((eq system-type 'darwin)
                                     (let nil "~/Library/Fonts/")))
                                   (require 'nerd-icons nil t))
                                  (progn
                                    (let
                                        ((temp-buffer
                                          (generate-new-buffer " *temp*" t)))
                                      (save-current-buffer
                                        (set-buffer temp-buffer)
                                        (unwind-protect
                                            (progn
                                              (let
                                                  ((errors 0))
                                                (let*
                                                    ((output
                                                      (doom-call-process "fc-list" "" "file"))
                                                     (status
                                                      (if output
                                                          (car-safe
                                                           (prog1 output
                                                             (setq output
                                                                   (cdr output))))
                                                        (signal 'wrong-number-of-arguments
                                                                (list
                                                                 '(status . output)
                                                                 (length output))))))
                                                  (if
                                                      (not
                                                       (= 0 status))
                                                      (doom-print
                                                       (doom-print--format
                                                        (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?")))
                                                    (insert
                                                     (cdr
                                                      (doom-call-process "fc-list" "" "file")))
                                                    (let
                                                        ((tail nerd-icons-font-names))
                                                      (while tail
                                                        (let
                                                            ((font
                                                              (car tail)))
                                                          (if
                                                              (save-excursion
                                                                (re-search-backward font nil t))
                                                              (doom-print
                                                               (doom-print--format
                                                                (doom-print--style 'green "Found font %s" font)))
                                                            (doom-print
                                                             (doom-print--format
                                                              (doom-print--class 'warn "%S font is not installed on your system")
                                                              font))
                                                            (setq errors
                                                                  (1+ errors)))
                                                          (setq tail
                                                                (cdr tail)))))
                                                    (if
                                                        (> errors 0)
                                                        (progn
                                                          (progn
                                                            (let
                                                                ((doom-print-level
                                                                  (or nil doom-print-level))
                                                                 (doom-print-indent
                                                                  (+
                                                                   (if t
                                                                       (or nil doom-print-indent-increment)
                                                                     0)
                                                                   doom-print-indent)))
                                                              (doom-print
                                                               (doom-print--format
                                                                (doom-print--class 'p "Some needed fonts are not properly installed on your system. To download and " "install them, run `M-x nerd-icons-install-fonts' from within Doom Emacs. " "However, on Windows this command will only download them; the fonts must " "be installed manually afterwards.")))))))))))
                                          (and
                                           (buffer-name temp-buffer)
                                           (kill-buffer temp-buffer))))))))))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'start "Checking for stale elc files in your DOOMDIR...")))
                        (if
                            (file-directory-p doom-user-dir)
                            (progn
                              (progn
                                (let
                                    ((doom-print-level
                                      (or nil doom-print-level))
                                     (doom-print-indent
                                      (+
                                       (if t
                                           (or nil doom-print-indent-increment)
                                         0)
                                       doom-print-indent)))
                                  (elc-check-dir doom-user-dir)))))
                        (if doom-modules
                            (progn
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'start "Checking your enabled modules...")))
                              (advice-add #'require :around #'doom-shut-up-a)
                              (let
                                  ((tail
                                    (doom-module-list)))
                                (while tail
                                  (let
                                      ((x54
                                        (car tail)))
                                    (progn
                                      (ignore
                                       (consp x54))
                                      (let*
                                          ((x55
                                            (car-safe x54))
                                           (x56
                                            (cdr-safe x54)))
                                        (let
                                            ((group x55)
                                             (name x56))
                                          (let
                                              ((doom-context doom-context))
                                            (let
                                                ((tail
                                                  (ensure-list 'doctor)))
                                              (while tail
                                                (let
                                                    ((context
                                                      (car tail)))
                                                  (doom-context-push context)
                                                  (setq tail
                                                        (cdr tail)))))
                                            (let
                                                (doom-local-errors doom-local-warnings)
                                              (let
                                                  (doom-doctor--errors doom-doctor--warnings)
                                                (condition-case ex
                                                    (let
                                                        ((doom-module-context
                                                          (doom-module-context
                                                           (cons group name))))
                                                      (if
                                                          (and
                                                           (not doom-inhibit-log)
                                                           (or
                                                            (not noninteractive)
                                                            (<= 2 doom-log-level)))
                                                          (progn
                                                            (doom--log 2 ":context:module: =%s" doom-module-context)))
                                                      (let
                                                          ((doctor-file
                                                            (doom-module-expand-path group name "doctor.el"))
                                                           (packages-file
                                                            (doom-module-expand-path group name doom-module-packages-file)))
                                                        (if packages-file
                                                            (progn
                                                              (let*
                                                                  ((doom-output-indent 6)
                                                                   (--cl-var--
                                                                    (let
                                                                        ((doom-context doom-context))
                                                                      (let
                                                                          ((tail
                                                                            (ensure-list 'packages)))
                                                                        (while tail
                                                                          (let
                                                                              ((context
                                                                                (car tail)))
                                                                            (doom-context-push context)
                                                                            (setq tail
                                                                                  (cdr tail)))))
                                                                      (let*
                                                                          (doom-packages doom-disabled-packages)
                                                                        (load packages-file 'noerror 'nomessage)
                                                                        (mapcar #'car doom-packages))))
                                                                   (name nil))
                                                                (while
                                                                    (consp --cl-var--)
                                                                  (setq name
                                                                        (car --cl-var--))
                                                                  (if
                                                                      (or
                                                                       (doom-package-get name :disable)
                                                                       (eval
                                                                        (doom-package-get name :ignore))
                                                                       (plist-member
                                                                        (doom-package-get name :recipe)
                                                                        :local-repo)
                                                                       (locate-library
                                                                        (symbol-name name))
                                                                       (doom-package-built-in-p name)
                                                                       (doom-package-installed-p name))
                                                                      (progn)
                                                                    (doom-print
                                                                     (doom-print--format
                                                                      (doom-print--class 'error "Missing emacs package: %S")
                                                                      name)))
                                                                  (setq --cl-var--
                                                                        (cdr --cl-var--)))
                                                                nil)))
                                                        (if doctor-file
                                                            (progn
                                                              (let
                                                                  ((inhibit-message t))
                                                                (load doctor-file 'noerror 'nomessage))))))
                                                  ((debug file-missing)
                                                   (progn
                                                     (if inhibit-message nil
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'error "%s"
                                                                            (error-message-string ex)))))
                                                     (setq doom-doctor--errors
                                                           (cons
                                                            (doom-print--format
                                                             (doom-print--class 'error "%s"
                                                                                (error-message-string ex)))
                                                            doom-doctor--errors))))
                                                  ((debug error)
                                                   (progn
                                                     (if inhibit-message nil
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'error "Syntax error: %s" ex))))
                                                     (setq doom-doctor--errors
                                                           (cons
                                                            (doom-print--format
                                                             (doom-print--class 'error "Syntax error: %s" ex))
                                                            doom-doctor--errors)))))
                                                (if
                                                    (or doom-doctor--errors doom-doctor--warnings)
                                                    (progn
                                                      (progn
                                                        (let
                                                            ((doom-print-level
                                                              (or nil doom-print-level))
                                                             (doom-print-indent
                                                              (+
                                                               (if t
                                                                   (or nil doom-print-indent-increment)
                                                                 0)
                                                               doom-print-indent)))
                                                          (doom-print
                                                           (doom-print--format
                                                            (doom-print--class 'start
                                                                               (doom-print--style 'bold "%s %s"))
                                                            group name))
                                                          (doom-print
                                                           (doom-print--format "%s"
                                                                               (string-join
                                                                                (append doom-doctor--errors doom-doctor--warnings)
                                                                                "\n")))))
                                                      (progn
                                                        (setq doom-local-errors doom-doctor--errors)
                                                        (setq doom-local-warnings doom-doctor--warnings)))))
                                              (setq doom-doctor--errors
                                                    (append doom-doctor--errors doom-local-errors))
                                              (setq doom-doctor--warnings
                                                    (append doom-doctor--warnings doom-local-warnings)))))))
                                    (setq tail
                                          (cdr tail)))))))))
                  ((debug error)
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                            (or
                                             (cdr-safe ex)
                                             (car ex))))))
                     (setq doom-doctor--warnings
                           (cons
                            (doom-print--format
                             (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                                (or
                                                 (cdr-safe ex)
                                                 (car ex))))
                            doom-doctor--warnings)))
                   (setq doom-modules nil)))
                (terpri)
                (let
                    ((tail
                      (list
                       (list doom-doctor--warnings "warning" 'yellow)
                       (list doom-doctor--errors "error" 'red))))
                  (while tail
                    (let
                        ((msg
                          (car tail)))
                      (if
                          (car msg)
                          (progn
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'color
                                                 (nth 2 msg)
                                                 (if
                                                     (cdr
                                                      (car msg))
                                                     "There are %d %ss!" "There is %d %s!")
                                                 (length
                                                  (car msg))
                                                 (nth 1 msg))))))
                      (setq tail
                            (cdr tail)))))
                (if
                    (or doom-doctor--errors doom-doctor--warnings)
                    nil
                  (doom-print
                   (doom-print--format
                    (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))))
                (exit! :pager? "+G")))))
  (prefix . "doom")
  (seen t)
  (runners
   (#s(doom-cli
       ("doom" "doctor")
       nil
       (("SUMMARY" . "Diagnoses common issues on your system.")
        ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
       nil nil nil nil
       (:benchmark nil :prefix
                   (doom)
                   :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
       (closure
           (t)
           (cli alist)
         (let nil
           (doom-print
            (doom-print--format "The doctor will see you now...\n"))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking your Emacs version...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (cond
                ((or
                  (> emacs-major-version 29)
                  (string-match-p ".\\([56]0\\|9[0-9]\\)$" emacs-version))
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))
                          doom-doctor--warnings)))
                 (if
                     (> emacs-major-version 29)
                     (progn
                       (let
                           ((doom-print-level
                             (or nil doom-print-level))
                            (doom-print-indent
                             (+
                              (if t
                                  (or nil doom-print-indent-increment)
                                0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'p "This is the bleeding edge of Emacs. As it is constantly changed, Doom will not " "(officially) support it. If you've found a stable commit, great! But be " "cautious about updating Emacs too eagerly!\n")))))
                   (progn
                     (let
                         ((doom-print-level
                           (or nil doom-print-level))
                          (doom-print-indent
                           (+
                            (if t
                                (or nil doom-print-indent-increment)
                              0)
                            doom-print-indent)))
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'p "A .50, .60, or .9X appended to the version string indicates that this is a version " "of Emacs in between stable releases. These are not well supported.\n"))))))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Because development builds are prone to random breakage, there will be a greater " "burden on you to investigate and deal with issues. Please make extra sure that " "your issue is reproducible in 29.1 before reporting them to Doom's issue tracker!\n" "\n" "If this doesn't phase you, read the \"Why does Doom not support Emacs HEAD\" QnA " "in Doom's FAQ. It offers some advice for debugging and surviving issues on the " "bleeding edge. Failing that, 29.1 is highly recommended and will always be " "Doom's best supported version of Emacs."))))))
                ((= emacs-major-version 27)
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))
                          doom-doctor--warnings)))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Emacs 28.1 is better supported, faster, and more stable. Plus, Doom will drop " "27.x support sometime late-2023.")))))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for Doom's prerequisites...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (if
                   (not
                    (executable-find "git"))
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                            doom-doctor--errors)))
                 (let
                     ((saved-match-data
                       (match-data)))
                   (unwind-protect
                       (progn
                         (let*
                             ((version
                               (cdr
                                (doom-call-process "git" "version")))
                              (version
                               (and
                                (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                                (match-string 1 version))))
                           (if version
                               (if
                                   (version< version "2.23")
                                   (progn
                                     (progn
                                       (if inhibit-message nil
                                         (doom-print
                                          (doom-print--format
                                           (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))))
                                       (setq doom-doctor--errors
                                             (cons
                                              (doom-print--format
                                               (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                              doom-doctor--errors)))))
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))))
                               (setq doom-doctor--warnings
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                      doom-doctor--warnings))))))
                     (set-match-data saved-match-data t))))
               (if
                   (executable-find "rg")
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))))
                   (setq doom-doctor--errors
                         (cons
                          (doom-print--format
                           (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                          doom-doctor--errors))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for Emacs config conflicts...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (if
                   (or
                    (file-equal-p doom-emacs-dir "~/.emacs.d")
                    (file-equal-p doom-emacs-dir "~/.config/emacs"))
                   nil
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'warn "Doom is installed in a non-standard location")))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "The standard locations are ~/.config/emacs or ~/.emacs.d. Emacs will fail " "to load Doom if it is not explicitly told where to look for it. In Emacs 29+, " "this is possible with the --init-directory option:\n\n" "  $ emacs --init-directory '"
                                          (abbreviate-file-name doom-emacs-dir)
                                          "'\n\n" "However, Emacs 27-28 users have no choice but to move Doom to a standard " "location.\n\n" "Chemacs users may ignore this warning, however."))))))
               (let
                   (found?)
                 (let
                     ((tail
                       '("~/_emacs" "~/.emacs" "~/.emacs.el" "~/.emacs.d" "~/.config/emacs")))
                   (while tail
                     (let
                         ((file
                           (car tail)))
                       (if
                           (and
                            (file-exists-p file)
                            (not
                             (file-equal-p file doom-emacs-dir)))
                           (progn
                             (setq found? t)
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Found another Emacs config: %s (%s)")
                               file
                               (if
                                   (file-directory-p file)
                                   "directory" "file")))))
                       (setq tail
                             (cdr tail)))))
                 (if found?
                     (progn
                       (progn
                         (let
                             ((doom-print-level
                               (or nil doom-print-level))
                              (doom-print-indent
                               (+
                                (if t
                                    (or nil doom-print-indent-increment)
                                  0)
                                doom-print-indent)))
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'p "Having multiple Emacs configs may prevent Doom from loading properly. Emacs " "will load the first it finds and ignore the rest. If Doom isn't starting up " "correctly (e.g. you get a vanilla splash screen), make sure that only one of " "these exist.\n\n" "Chemacs users may ignore this warning."))))))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for missing Emacs features...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (if
                   (functionp 'json-serialize)
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs was not built with native JSON support"))))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs was not built with native JSON support"))
                          doom-doctor--warnings)))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option."))))))
               (if
                   (featurep 'native-compile)
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs was not built with native compilation support"))))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs was not built with native compilation support"))
                          doom-doctor--warnings)))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option."))))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for private config conflicts...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (let*
                   ((xdg-dir
                     (concat
                      (or
                       (getenv "XDG_CONFIG_HOME")
                       "~/.config")
                      "/doom/"))
                    (doom-dir
                     (or
                      (getenv "DOOMDIR")
                      "~/.doom.d/"))
                    (dir
                     (if
                         (file-directory-p xdg-dir)
                         xdg-dir doom-dir)))
                 (if
                     (file-equal-p dir doom-emacs-dir)
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                            (doom-print--class 'path dir))))
                       (progn
                         (let
                             ((doom-print-level
                               (or nil doom-print-level))
                              (doom-print-indent
                               (+
                                (if t
                                    (or nil doom-print-indent-increment)
                                  0)
                                doom-print-indent)))
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'p "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")))))))
                 (if
                     (and
                      (not
                       (file-equal-p xdg-dir doom-dir))
                      (file-directory-p xdg-dir)
                      (file-directory-p doom-dir))
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Detected two private configs, in %s and %s")
                         (abbreviate-file-name xdg-dir)
                         doom-dir))
                       (progn
                         (let
                             ((doom-print-level
                               (or nil doom-print-level))
                              (doom-print-indent
                               (+
                                (if t
                                    (or nil doom-print-indent-increment)
                                  0)
                                doom-print-indent)))
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'p "The second directory will be ignored, as it has lower precedence."))))))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for common environmental issues...")))
           (if
               (string-match-p "/fish$" shell-file-name)
               (progn
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'warn "Detected Fish as your $SHELL")))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Fish (and possibly other non-POSIX shells) is known to inject garbage " "output into some of the child processes that Emacs spawns. Many Emacs " "packages/utilities will choke on this output, causing unpredictable issues. " "To get around this, either:\n\n" "  - Add the following to $DOOMDIR/config.el:\n\n" "    (setq shell-file-name (executable-find \"bash\"))\n\n" "  - Or change your default shell to a POSIX shell (like bash or zsh) " "    and explicitly configure your terminal apps to use the shell you " "    want.\n\n" "If you opt for option 1 and use one of Emacs' terminal emulators, you " "will also need to configure them to use Fish, e.g.\n\n" "  (setq-default vterm-shell (executable-find \"fish\"))\n\n" "  (setq-default explicit-shell-file-name (executable-find \"fish\"))\n")))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for stale elc files...")))
           (elc-check-dir doom-core-dir)
           (elc-check-dir doom-modules-dir)
           (elc-check-dir
            (doom-path doom-local-dir "straight" straight-build-dir))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for problematic git global settings...")))
           (if
               (executable-find "git")
               (if
                   (= 0
                      (car
                       (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                   (progn
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))))
                       (setq doom-doctor--warnings
                             (cons
                              (doom-print--format
                               (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                              doom-doctor--warnings)))
                     (progn
                       (let
                           ((doom-print-level
                             (or nil doom-print-level))
                            (doom-print-indent
                             (+
                              (if t
                                  (or nil doom-print-indent-increment)
                                0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'p "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")))))))
             (progn
               (if inhibit-message nil
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))))
               (setq doom-doctor--errors
                     (cons
                      (doom-print--format
                       (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                      doom-doctor--errors))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking Doom Emacs...")))
           (condition-case ex
               (progn
                 (let
                     ((doom-print-level
                       (or nil doom-print-level))
                      (doom-print-indent
                       (+
                        (if t
                            (or nil doom-print-indent-increment)
                          0)
                        doom-print-indent)))
                   (require 'doom-start)
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'success "Initialized Doom Emacs %s")
                     doom-version))
                   (doom-print
                    (doom-print--format
                     (if
                         (hash-table-p doom-modules)
                         (doom-print--class 'success "Detected %d modules"
                                            (hash-table-count doom-modules))
                       (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?"))))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'success "Detected %d packages")
                     (length doom-packages)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'start "Checking Doom core for irregularities...")))
                   (progn
                     (let
                         ((doom-print-level
                           (or nil doom-print-level))
                          (doom-print-indent
                           (+
                            (if t
                                (or nil doom-print-indent-increment)
                              0)
                            doom-print-indent)))
                       (let
                           ((tail
                             (list "savehist" "projectile.cache")))
                         (while tail
                           (let
                               ((file
                                 (car tail)))
                             (let*
                                 ((size
                                   (and t
                                        (condition-case nil
                                            (progn
                                              (doom-file-size file doom-cache-dir))
                                          (error nil)))))
                               (if size
                                   (if
                                       (> size 1048576)
                                       (progn
                                         (progn
                                           (if inhibit-message nil
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                  (/ size 1024 1024.0)))))
                                           (setq doom-doctor--warnings
                                                 (cons
                                                  (doom-print--format
                                                   (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                      (/ size 1024 1024.0)))
                                                  doom-doctor--warnings)))
                                         (progn
                                           (let
                                               ((doom-print-level
                                                 (or nil doom-print-level))
                                                (doom-print-indent
                                                 (+
                                                  (if t
                                                      (or nil doom-print-indent-increment)
                                                    0)
                                                  doom-print-indent)))
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'p "Consider deleting it from your system (manually)")))))))
                                 nil))
                             (setq tail
                                   (cdr tail)))))
                       (if
                           (condition-case nil
                               (progn
                                 (executable-find doom-fd-executable))
                             (error nil))
                           nil
                         (progn
                           (if inhibit-message nil
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))))
                           (setq doom-doctor--warnings
                                 (cons
                                  (doom-print--format
                                   (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                  doom-doctor--warnings))))
                       (require 'projectile)
                       (if
                           (projectile-project-root "~")
                           (progn
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'warn "Your $HOME is recognized as a project root"))))
                               (setq doom-doctor--warnings
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                      doom-doctor--warnings)))
                             (progn
                               (let
                                   ((doom-print-level
                                     (or nil doom-print-level))
                                    (doom-print-indent
                                     (+
                                      (if t
                                          (or nil doom-print-indent-increment)
                                        0)
                                      doom-print-indent)))
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'p "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")))))))
                       (if
                           (and
                            (file-equal-p doom-user-dir "~/.config/doom")
                            (file-directory-p "~/.doom.d"))
                           (progn
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                               (doom-print--class 'path doom-user-dir)))
                             (progn
                               (let
                                   ((doom-print-level
                                     (or nil doom-print-level))
                                    (doom-print-indent
                                     (+
                                      (if t
                                          (or nil doom-print-indent-increment)
                                        0)
                                      doom-print-indent)))
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'p "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")))))))
                       (if
                           (not
                            (executable-find "fc-list"))
                           (progn
                             (if inhibit-message nil
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))))
                             (setq doom-doctor--warnings
                                   (cons
                                    (doom-print--format
                                     (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                    doom-doctor--warnings)))
                         (if
                             (and
                              (cond
                               ((eq system-type 'gnu/linux)
                                (let nil
                                  (concat
                                   (or
                                    (getenv "XDG_DATA_HOME")
                                    "~/.local/share")
                                   "/fonts/")))
                               ((eq system-type 'darwin)
                                (let nil "~/Library/Fonts/")))
                              (require 'nerd-icons nil t))
                             (progn
                               (let
                                   ((temp-buffer
                                     (generate-new-buffer " *temp*" t)))
                                 (save-current-buffer
                                   (set-buffer temp-buffer)
                                   (unwind-protect
                                       (progn
                                         (let
                                             ((errors 0))
                                           (let*
                                               ((output
                                                 (doom-call-process "fc-list" "" "file"))
                                                (status
                                                 (if output
                                                     (car-safe
                                                      (prog1 output
                                                        (setq output
                                                              (cdr output))))
                                                   (signal 'wrong-number-of-arguments
                                                           (list
                                                            '(status . output)
                                                            (length output))))))
                                             (if
                                                 (not
                                                  (= 0 status))
                                                 (doom-print
                                                  (doom-print--format
                                                   (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?")))
                                               (insert
                                                (cdr
                                                 (doom-call-process "fc-list" "" "file")))
                                               (let
                                                   ((tail nerd-icons-font-names))
                                                 (while tail
                                                   (let
                                                       ((font
                                                         (car tail)))
                                                     (if
                                                         (save-excursion
                                                           (re-search-backward font nil t))
                                                         (doom-print
                                                          (doom-print--format
                                                           (doom-print--style 'green "Found font %s" font)))
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'warn "%S font is not installed on your system")
                                                         font))
                                                       (setq errors
                                                             (1+ errors)))
                                                     (setq tail
                                                           (cdr tail)))))
                                               (if
                                                   (> errors 0)
                                                   (progn
                                                     (progn
                                                       (let
                                                           ((doom-print-level
                                                             (or nil doom-print-level))
                                                            (doom-print-indent
                                                             (+
                                                              (if t
                                                                  (or nil doom-print-indent-increment)
                                                                0)
                                                              doom-print-indent)))
                                                         (doom-print
                                                          (doom-print--format
                                                           (doom-print--class 'p "Some needed fonts are not properly installed on your system. To download and " "install them, run `M-x nerd-icons-install-fonts' from within Doom Emacs. " "However, on Windows this command will only download them; the fonts must " "be installed manually afterwards.")))))))))))
                                     (and
                                      (buffer-name temp-buffer)
                                      (kill-buffer temp-buffer))))))))))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'start "Checking for stale elc files in your DOOMDIR...")))
                   (if
                       (file-directory-p doom-user-dir)
                       (progn
                         (progn
                           (let
                               ((doom-print-level
                                 (or nil doom-print-level))
                                (doom-print-indent
                                 (+
                                  (if t
                                      (or nil doom-print-indent-increment)
                                    0)
                                  doom-print-indent)))
                             (elc-check-dir doom-user-dir)))))
                   (if doom-modules
                       (progn
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'start "Checking your enabled modules...")))
                         (advice-add #'require :around #'doom-shut-up-a)
                         (let
                             ((tail
                               (doom-module-list)))
                           (while tail
                             (let
                                 ((x54
                                   (car tail)))
                               (progn
                                 (ignore
                                  (consp x54))
                                 (let*
                                     ((x55
                                       (car-safe x54))
                                      (x56
                                       (cdr-safe x54)))
                                   (let
                                       ((group x55)
                                        (name x56))
                                     (let
                                         ((doom-context doom-context))
                                       (let
                                           ((tail
                                             (ensure-list 'doctor)))
                                         (while tail
                                           (let
                                               ((context
                                                 (car tail)))
                                             (doom-context-push context)
                                             (setq tail
                                                   (cdr tail)))))
                                       (let
                                           (doom-local-errors doom-local-warnings)
                                         (let
                                             (doom-doctor--errors doom-doctor--warnings)
                                           (condition-case ex
                                               (let
                                                   ((doom-module-context
                                                     (doom-module-context
                                                      (cons group name))))
                                                 (if
                                                     (and
                                                      (not doom-inhibit-log)
                                                      (or
                                                       (not noninteractive)
                                                       (<= 2 doom-log-level)))
                                                     (progn
                                                       (doom--log 2 ":context:module: =%s" doom-module-context)))
                                                 (let
                                                     ((doctor-file
                                                       (doom-module-expand-path group name "doctor.el"))
                                                      (packages-file
                                                       (doom-module-expand-path group name doom-module-packages-file)))
                                                   (if packages-file
                                                       (progn
                                                         (let*
                                                             ((doom-output-indent 6)
                                                              (--cl-var--
                                                               (let
                                                                   ((doom-context doom-context))
                                                                 (let
                                                                     ((tail
                                                                       (ensure-list 'packages)))
                                                                   (while tail
                                                                     (let
                                                                         ((context
                                                                           (car tail)))
                                                                       (doom-context-push context)
                                                                       (setq tail
                                                                             (cdr tail)))))
                                                                 (let*
                                                                     (doom-packages doom-disabled-packages)
                                                                   (load packages-file 'noerror 'nomessage)
                                                                   (mapcar #'car doom-packages))))
                                                              (name nil))
                                                           (while
                                                               (consp --cl-var--)
                                                             (setq name
                                                                   (car --cl-var--))
                                                             (if
                                                                 (or
                                                                  (doom-package-get name :disable)
                                                                  (eval
                                                                   (doom-package-get name :ignore))
                                                                  (plist-member
                                                                   (doom-package-get name :recipe)
                                                                   :local-repo)
                                                                  (locate-library
                                                                   (symbol-name name))
                                                                  (doom-package-built-in-p name)
                                                                  (doom-package-installed-p name))
                                                                 (progn)
                                                               (doom-print
                                                                (doom-print--format
                                                                 (doom-print--class 'error "Missing emacs package: %S")
                                                                 name)))
                                                             (setq --cl-var--
                                                                   (cdr --cl-var--)))
                                                           nil)))
                                                   (if doctor-file
                                                       (progn
                                                         (let
                                                             ((inhibit-message t))
                                                           (load doctor-file 'noerror 'nomessage))))))
                                             ((debug file-missing)
                                              (progn
                                                (if inhibit-message nil
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'error "%s"
                                                                       (error-message-string ex)))))
                                                (setq doom-doctor--errors
                                                      (cons
                                                       (doom-print--format
                                                        (doom-print--class 'error "%s"
                                                                           (error-message-string ex)))
                                                       doom-doctor--errors))))
                                             ((debug error)
                                              (progn
                                                (if inhibit-message nil
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'error "Syntax error: %s" ex))))
                                                (setq doom-doctor--errors
                                                      (cons
                                                       (doom-print--format
                                                        (doom-print--class 'error "Syntax error: %s" ex))
                                                       doom-doctor--errors)))))
                                           (if
                                               (or doom-doctor--errors doom-doctor--warnings)
                                               (progn
                                                 (progn
                                                   (let
                                                       ((doom-print-level
                                                         (or nil doom-print-level))
                                                        (doom-print-indent
                                                         (+
                                                          (if t
                                                              (or nil doom-print-indent-increment)
                                                            0)
                                                          doom-print-indent)))
                                                     (doom-print
                                                      (doom-print--format
                                                       (doom-print--class 'start
                                                                          (doom-print--style 'bold "%s %s"))
                                                       group name))
                                                     (doom-print
                                                      (doom-print--format "%s"
                                                                          (string-join
                                                                           (append doom-doctor--errors doom-doctor--warnings)
                                                                           "\n")))))
                                                 (progn
                                                   (setq doom-local-errors doom-doctor--errors)
                                                   (setq doom-local-warnings doom-doctor--warnings)))))
                                         (setq doom-doctor--errors
                                               (append doom-doctor--errors doom-local-errors))
                                         (setq doom-doctor--warnings
                                               (append doom-doctor--warnings doom-local-warnings)))))))
                               (setq tail
                                     (cdr tail)))))))))
             ((debug error)
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                       (or
                                        (cdr-safe ex)
                                        (car ex))))))
                (setq doom-doctor--warnings
                      (cons
                       (doom-print--format
                        (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                           (or
                                            (cdr-safe ex)
                                            (car ex))))
                       doom-doctor--warnings)))
              (setq doom-modules nil)))
           (terpri)
           (let
               ((tail
                 (list
                  (list doom-doctor--warnings "warning" 'yellow)
                  (list doom-doctor--errors "error" 'red))))
             (while tail
               (let
                   ((msg
                     (car tail)))
                 (if
                     (car msg)
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'color
                                            (nth 2 msg)
                                            (if
                                                (cdr
                                                 (car msg))
                                                "There are %d %ss!" "There is %d %s!")
                                            (length
                                             (car msg))
                                            (nth 1 msg))))))
                 (setq tail
                       (cdr tail)))))
           (if
               (or doom-doctor--errors doom-doctor--warnings)
               nil
             (doom-print
              (doom-print--format
               (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))))
           (exit! :pager? "+G"))))))
  (tail
   (#s(doom-cli
       ("doom" "doctor")
       nil
       (("SUMMARY" . "Diagnoses common issues on your system.")
        ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
       nil nil nil nil
       (:benchmark nil :prefix
                   (doom)
                   :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
       (closure
           (t)
           (cli alist)
         (let nil
           (doom-print
            (doom-print--format "The doctor will see you now...\n"))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking your Emacs version...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (cond
                ((or
                  (> emacs-major-version 29)
                  (string-match-p ".\\([56]0\\|9[0-9]\\)$" emacs-version))
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))
                          doom-doctor--warnings)))
                 (if
                     (> emacs-major-version 29)
                     (progn
                       (let
                           ((doom-print-level
                             (or nil doom-print-level))
                            (doom-print-indent
                             (+
                              (if t
                                  (or nil doom-print-indent-increment)
                                0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'p "This is the bleeding edge of Emacs. As it is constantly changed, Doom will not " "(officially) support it. If you've found a stable commit, great! But be " "cautious about updating Emacs too eagerly!\n")))))
                   (progn
                     (let
                         ((doom-print-level
                           (or nil doom-print-level))
                          (doom-print-indent
                           (+
                            (if t
                                (or nil doom-print-indent-increment)
                              0)
                            doom-print-indent)))
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'p "A .50, .60, or .9X appended to the version string indicates that this is a version " "of Emacs in between stable releases. These are not well supported.\n"))))))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Because development builds are prone to random breakage, there will be a greater " "burden on you to investigate and deal with issues. Please make extra sure that " "your issue is reproducible in 29.1 before reporting them to Doom's issue tracker!\n" "\n" "If this doesn't phase you, read the \"Why does Doom not support Emacs HEAD\" QnA " "in Doom's FAQ. It offers some advice for debugging and surviving issues on the " "bleeding edge. Failing that, 29.1 is highly recommended and will always be " "Doom's best supported version of Emacs."))))))
                ((= emacs-major-version 27)
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))
                          doom-doctor--warnings)))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Emacs 28.1 is better supported, faster, and more stable. Plus, Doom will drop " "27.x support sometime late-2023.")))))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for Doom's prerequisites...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (if
                   (not
                    (executable-find "git"))
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                            doom-doctor--errors)))
                 (let
                     ((saved-match-data
                       (match-data)))
                   (unwind-protect
                       (progn
                         (let*
                             ((version
                               (cdr
                                (doom-call-process "git" "version")))
                              (version
                               (and
                                (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                                (match-string 1 version))))
                           (if version
                               (if
                                   (version< version "2.23")
                                   (progn
                                     (progn
                                       (if inhibit-message nil
                                         (doom-print
                                          (doom-print--format
                                           (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))))
                                       (setq doom-doctor--errors
                                             (cons
                                              (doom-print--format
                                               (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                              doom-doctor--errors)))))
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))))
                               (setq doom-doctor--warnings
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                      doom-doctor--warnings))))))
                     (set-match-data saved-match-data t))))
               (if
                   (executable-find "rg")
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))))
                   (setq doom-doctor--errors
                         (cons
                          (doom-print--format
                           (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                          doom-doctor--errors))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for Emacs config conflicts...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (if
                   (or
                    (file-equal-p doom-emacs-dir "~/.emacs.d")
                    (file-equal-p doom-emacs-dir "~/.config/emacs"))
                   nil
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'warn "Doom is installed in a non-standard location")))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "The standard locations are ~/.config/emacs or ~/.emacs.d. Emacs will fail " "to load Doom if it is not explicitly told where to look for it. In Emacs 29+, " "this is possible with the --init-directory option:\n\n" "  $ emacs --init-directory '"
                                          (abbreviate-file-name doom-emacs-dir)
                                          "'\n\n" "However, Emacs 27-28 users have no choice but to move Doom to a standard " "location.\n\n" "Chemacs users may ignore this warning, however."))))))
               (let
                   (found?)
                 (let
                     ((tail
                       '("~/_emacs" "~/.emacs" "~/.emacs.el" "~/.emacs.d" "~/.config/emacs")))
                   (while tail
                     (let
                         ((file
                           (car tail)))
                       (if
                           (and
                            (file-exists-p file)
                            (not
                             (file-equal-p file doom-emacs-dir)))
                           (progn
                             (setq found? t)
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Found another Emacs config: %s (%s)")
                               file
                               (if
                                   (file-directory-p file)
                                   "directory" "file")))))
                       (setq tail
                             (cdr tail)))))
                 (if found?
                     (progn
                       (progn
                         (let
                             ((doom-print-level
                               (or nil doom-print-level))
                              (doom-print-indent
                               (+
                                (if t
                                    (or nil doom-print-indent-increment)
                                  0)
                                doom-print-indent)))
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'p "Having multiple Emacs configs may prevent Doom from loading properly. Emacs " "will load the first it finds and ignore the rest. If Doom isn't starting up " "correctly (e.g. you get a vanilla splash screen), make sure that only one of " "these exist.\n\n" "Chemacs users may ignore this warning."))))))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for missing Emacs features...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (if
                   (functionp 'json-serialize)
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs was not built with native JSON support"))))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs was not built with native JSON support"))
                          doom-doctor--warnings)))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option."))))))
               (if
                   (featurep 'native-compile)
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs was not built with native compilation support"))))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs was not built with native compilation support"))
                          doom-doctor--warnings)))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option."))))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for private config conflicts...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (let*
                   ((xdg-dir
                     (concat
                      (or
                       (getenv "XDG_CONFIG_HOME")
                       "~/.config")
                      "/doom/"))
                    (doom-dir
                     (or
                      (getenv "DOOMDIR")
                      "~/.doom.d/"))
                    (dir
                     (if
                         (file-directory-p xdg-dir)
                         xdg-dir doom-dir)))
                 (if
                     (file-equal-p dir doom-emacs-dir)
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                            (doom-print--class 'path dir))))
                       (progn
                         (let
                             ((doom-print-level
                               (or nil doom-print-level))
                              (doom-print-indent
                               (+
                                (if t
                                    (or nil doom-print-indent-increment)
                                  0)
                                doom-print-indent)))
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'p "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")))))))
                 (if
                     (and
                      (not
                       (file-equal-p xdg-dir doom-dir))
                      (file-directory-p xdg-dir)
                      (file-directory-p doom-dir))
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Detected two private configs, in %s and %s")
                         (abbreviate-file-name xdg-dir)
                         doom-dir))
                       (progn
                         (let
                             ((doom-print-level
                               (or nil doom-print-level))
                              (doom-print-indent
                               (+
                                (if t
                                    (or nil doom-print-indent-increment)
                                  0)
                                doom-print-indent)))
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'p "The second directory will be ignored, as it has lower precedence."))))))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for common environmental issues...")))
           (if
               (string-match-p "/fish$" shell-file-name)
               (progn
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'warn "Detected Fish as your $SHELL")))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Fish (and possibly other non-POSIX shells) is known to inject garbage " "output into some of the child processes that Emacs spawns. Many Emacs " "packages/utilities will choke on this output, causing unpredictable issues. " "To get around this, either:\n\n" "  - Add the following to $DOOMDIR/config.el:\n\n" "    (setq shell-file-name (executable-find \"bash\"))\n\n" "  - Or change your default shell to a POSIX shell (like bash or zsh) " "    and explicitly configure your terminal apps to use the shell you " "    want.\n\n" "If you opt for option 1 and use one of Emacs' terminal emulators, you " "will also need to configure them to use Fish, e.g.\n\n" "  (setq-default vterm-shell (executable-find \"fish\"))\n\n" "  (setq-default explicit-shell-file-name (executable-find \"fish\"))\n")))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for stale elc files...")))
           (elc-check-dir doom-core-dir)
           (elc-check-dir doom-modules-dir)
           (elc-check-dir
            (doom-path doom-local-dir "straight" straight-build-dir))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for problematic git global settings...")))
           (if
               (executable-find "git")
               (if
                   (= 0
                      (car
                       (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                   (progn
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))))
                       (setq doom-doctor--warnings
                             (cons
                              (doom-print--format
                               (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                              doom-doctor--warnings)))
                     (progn
                       (let
                           ((doom-print-level
                             (or nil doom-print-level))
                            (doom-print-indent
                             (+
                              (if t
                                  (or nil doom-print-indent-increment)
                                0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'p "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")))))))
             (progn
               (if inhibit-message nil
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))))
               (setq doom-doctor--errors
                     (cons
                      (doom-print--format
                       (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                      doom-doctor--errors))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking Doom Emacs...")))
           (condition-case ex
               (progn
                 (let
                     ((doom-print-level
                       (or nil doom-print-level))
                      (doom-print-indent
                       (+
                        (if t
                            (or nil doom-print-indent-increment)
                          0)
                        doom-print-indent)))
                   (require 'doom-start)
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'success "Initialized Doom Emacs %s")
                     doom-version))
                   (doom-print
                    (doom-print--format
                     (if
                         (hash-table-p doom-modules)
                         (doom-print--class 'success "Detected %d modules"
                                            (hash-table-count doom-modules))
                       (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?"))))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'success "Detected %d packages")
                     (length doom-packages)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'start "Checking Doom core for irregularities...")))
                   (progn
                     (let
                         ((doom-print-level
                           (or nil doom-print-level))
                          (doom-print-indent
                           (+
                            (if t
                                (or nil doom-print-indent-increment)
                              0)
                            doom-print-indent)))
                       (let
                           ((tail
                             (list "savehist" "projectile.cache")))
                         (while tail
                           (let
                               ((file
                                 (car tail)))
                             (let*
                                 ((size
                                   (and t
                                        (condition-case nil
                                            (progn
                                              (doom-file-size file doom-cache-dir))
                                          (error nil)))))
                               (if size
                                   (if
                                       (> size 1048576)
                                       (progn
                                         (progn
                                           (if inhibit-message nil
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                  (/ size 1024 1024.0)))))
                                           (setq doom-doctor--warnings
                                                 (cons
                                                  (doom-print--format
                                                   (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                      (/ size 1024 1024.0)))
                                                  doom-doctor--warnings)))
                                         (progn
                                           (let
                                               ((doom-print-level
                                                 (or nil doom-print-level))
                                                (doom-print-indent
                                                 (+
                                                  (if t
                                                      (or nil doom-print-indent-increment)
                                                    0)
                                                  doom-print-indent)))
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'p "Consider deleting it from your system (manually)")))))))
                                 nil))
                             (setq tail
                                   (cdr tail)))))
                       (if
                           (condition-case nil
                               (progn
                                 (executable-find doom-fd-executable))
                             (error nil))
                           nil
                         (progn
                           (if inhibit-message nil
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))))
                           (setq doom-doctor--warnings
                                 (cons
                                  (doom-print--format
                                   (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                  doom-doctor--warnings))))
                       (require 'projectile)
                       (if
                           (projectile-project-root "~")
                           (progn
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'warn "Your $HOME is recognized as a project root"))))
                               (setq doom-doctor--warnings
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                      doom-doctor--warnings)))
                             (progn
                               (let
                                   ((doom-print-level
                                     (or nil doom-print-level))
                                    (doom-print-indent
                                     (+
                                      (if t
                                          (or nil doom-print-indent-increment)
                                        0)
                                      doom-print-indent)))
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'p "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")))))))
                       (if
                           (and
                            (file-equal-p doom-user-dir "~/.config/doom")
                            (file-directory-p "~/.doom.d"))
                           (progn
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                               (doom-print--class 'path doom-user-dir)))
                             (progn
                               (let
                                   ((doom-print-level
                                     (or nil doom-print-level))
                                    (doom-print-indent
                                     (+
                                      (if t
                                          (or nil doom-print-indent-increment)
                                        0)
                                      doom-print-indent)))
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'p "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")))))))
                       (if
                           (not
                            (executable-find "fc-list"))
                           (progn
                             (if inhibit-message nil
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))))
                             (setq doom-doctor--warnings
                                   (cons
                                    (doom-print--format
                                     (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                    doom-doctor--warnings)))
                         (if
                             (and
                              (cond
                               ((eq system-type 'gnu/linux)
                                (let nil
                                  (concat
                                   (or
                                    (getenv "XDG_DATA_HOME")
                                    "~/.local/share")
                                   "/fonts/")))
                               ((eq system-type 'darwin)
                                (let nil "~/Library/Fonts/")))
                              (require 'nerd-icons nil t))
                             (progn
                               (let
                                   ((temp-buffer
                                     (generate-new-buffer " *temp*" t)))
                                 (save-current-buffer
                                   (set-buffer temp-buffer)
                                   (unwind-protect
                                       (progn
                                         (let
                                             ((errors 0))
                                           (let*
                                               ((output
                                                 (doom-call-process "fc-list" "" "file"))
                                                (status
                                                 (if output
                                                     (car-safe
                                                      (prog1 output
                                                        (setq output
                                                              (cdr output))))
                                                   (signal 'wrong-number-of-arguments
                                                           (list
                                                            '(status . output)
                                                            (length output))))))
                                             (if
                                                 (not
                                                  (= 0 status))
                                                 (doom-print
                                                  (doom-print--format
                                                   (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?")))
                                               (insert
                                                (cdr
                                                 (doom-call-process "fc-list" "" "file")))
                                               (let
                                                   ((tail nerd-icons-font-names))
                                                 (while tail
                                                   (let
                                                       ((font
                                                         (car tail)))
                                                     (if
                                                         (save-excursion
                                                           (re-search-backward font nil t))
                                                         (doom-print
                                                          (doom-print--format
                                                           (doom-print--style 'green "Found font %s" font)))
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'warn "%S font is not installed on your system")
                                                         font))
                                                       (setq errors
                                                             (1+ errors)))
                                                     (setq tail
                                                           (cdr tail)))))
                                               (if
                                                   (> errors 0)
                                                   (progn
                                                     (progn
                                                       (let
                                                           ((doom-print-level
                                                             (or nil doom-print-level))
                                                            (doom-print-indent
                                                             (+
                                                              (if t
                                                                  (or nil doom-print-indent-increment)
                                                                0)
                                                              doom-print-indent)))
                                                         (doom-print
                                                          (doom-print--format
                                                           (doom-print--class 'p "Some needed fonts are not properly installed on your system. To download and " "install them, run `M-x nerd-icons-install-fonts' from within Doom Emacs. " "However, on Windows this command will only download them; the fonts must " "be installed manually afterwards.")))))))))))
                                     (and
                                      (buffer-name temp-buffer)
                                      (kill-buffer temp-buffer))))))))))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'start "Checking for stale elc files in your DOOMDIR...")))
                   (if
                       (file-directory-p doom-user-dir)
                       (progn
                         (progn
                           (let
                               ((doom-print-level
                                 (or nil doom-print-level))
                                (doom-print-indent
                                 (+
                                  (if t
                                      (or nil doom-print-indent-increment)
                                    0)
                                  doom-print-indent)))
                             (elc-check-dir doom-user-dir)))))
                   (if doom-modules
                       (progn
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'start "Checking your enabled modules...")))
                         (advice-add #'require :around #'doom-shut-up-a)
                         (let
                             ((tail
                               (doom-module-list)))
                           (while tail
                             (let
                                 ((x54
                                   (car tail)))
                               (progn
                                 (ignore
                                  (consp x54))
                                 (let*
                                     ((x55
                                       (car-safe x54))
                                      (x56
                                       (cdr-safe x54)))
                                   (let
                                       ((group x55)
                                        (name x56))
                                     (let
                                         ((doom-context doom-context))
                                       (let
                                           ((tail
                                             (ensure-list 'doctor)))
                                         (while tail
                                           (let
                                               ((context
                                                 (car tail)))
                                             (doom-context-push context)
                                             (setq tail
                                                   (cdr tail)))))
                                       (let
                                           (doom-local-errors doom-local-warnings)
                                         (let
                                             (doom-doctor--errors doom-doctor--warnings)
                                           (condition-case ex
                                               (let
                                                   ((doom-module-context
                                                     (doom-module-context
                                                      (cons group name))))
                                                 (if
                                                     (and
                                                      (not doom-inhibit-log)
                                                      (or
                                                       (not noninteractive)
                                                       (<= 2 doom-log-level)))
                                                     (progn
                                                       (doom--log 2 ":context:module: =%s" doom-module-context)))
                                                 (let
                                                     ((doctor-file
                                                       (doom-module-expand-path group name "doctor.el"))
                                                      (packages-file
                                                       (doom-module-expand-path group name doom-module-packages-file)))
                                                   (if packages-file
                                                       (progn
                                                         (let*
                                                             ((doom-output-indent 6)
                                                              (--cl-var--
                                                               (let
                                                                   ((doom-context doom-context))
                                                                 (let
                                                                     ((tail
                                                                       (ensure-list 'packages)))
                                                                   (while tail
                                                                     (let
                                                                         ((context
                                                                           (car tail)))
                                                                       (doom-context-push context)
                                                                       (setq tail
                                                                             (cdr tail)))))
                                                                 (let*
                                                                     (doom-packages doom-disabled-packages)
                                                                   (load packages-file 'noerror 'nomessage)
                                                                   (mapcar #'car doom-packages))))
                                                              (name nil))
                                                           (while
                                                               (consp --cl-var--)
                                                             (setq name
                                                                   (car --cl-var--))
                                                             (if
                                                                 (or
                                                                  (doom-package-get name :disable)
                                                                  (eval
                                                                   (doom-package-get name :ignore))
                                                                  (plist-member
                                                                   (doom-package-get name :recipe)
                                                                   :local-repo)
                                                                  (locate-library
                                                                   (symbol-name name))
                                                                  (doom-package-built-in-p name)
                                                                  (doom-package-installed-p name))
                                                                 (progn)
                                                               (doom-print
                                                                (doom-print--format
                                                                 (doom-print--class 'error "Missing emacs package: %S")
                                                                 name)))
                                                             (setq --cl-var--
                                                                   (cdr --cl-var--)))
                                                           nil)))
                                                   (if doctor-file
                                                       (progn
                                                         (let
                                                             ((inhibit-message t))
                                                           (load doctor-file 'noerror 'nomessage))))))
                                             ((debug file-missing)
                                              (progn
                                                (if inhibit-message nil
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'error "%s"
                                                                       (error-message-string ex)))))
                                                (setq doom-doctor--errors
                                                      (cons
                                                       (doom-print--format
                                                        (doom-print--class 'error "%s"
                                                                           (error-message-string ex)))
                                                       doom-doctor--errors))))
                                             ((debug error)
                                              (progn
                                                (if inhibit-message nil
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'error "Syntax error: %s" ex))))
                                                (setq doom-doctor--errors
                                                      (cons
                                                       (doom-print--format
                                                        (doom-print--class 'error "Syntax error: %s" ex))
                                                       doom-doctor--errors)))))
                                           (if
                                               (or doom-doctor--errors doom-doctor--warnings)
                                               (progn
                                                 (progn
                                                   (let
                                                       ((doom-print-level
                                                         (or nil doom-print-level))
                                                        (doom-print-indent
                                                         (+
                                                          (if t
                                                              (or nil doom-print-indent-increment)
                                                            0)
                                                          doom-print-indent)))
                                                     (doom-print
                                                      (doom-print--format
                                                       (doom-print--class 'start
                                                                          (doom-print--style 'bold "%s %s"))
                                                       group name))
                                                     (doom-print
                                                      (doom-print--format "%s"
                                                                          (string-join
                                                                           (append doom-doctor--errors doom-doctor--warnings)
                                                                           "\n")))))
                                                 (progn
                                                   (setq doom-local-errors doom-doctor--errors)
                                                   (setq doom-local-warnings doom-doctor--warnings)))))
                                         (setq doom-doctor--errors
                                               (append doom-doctor--errors doom-local-errors))
                                         (setq doom-doctor--warnings
                                               (append doom-doctor--warnings doom-local-warnings)))))))
                               (setq tail
                                     (cdr tail)))))))))
             ((debug error)
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                       (or
                                        (cdr-safe ex)
                                        (car ex))))))
                (setq doom-doctor--warnings
                      (cons
                       (doom-print--format
                        (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                           (or
                                            (cdr-safe ex)
                                            (car ex))))
                       doom-doctor--warnings)))
              (setq doom-modules nil)))
           (terpri)
           (let
               ((tail
                 (list
                  (list doom-doctor--warnings "warning" 'yellow)
                  (list doom-doctor--errors "error" 'red))))
             (while tail
               (let
                   ((msg
                     (car tail)))
                 (if
                     (car msg)
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'color
                                            (nth 2 msg)
                                            (if
                                                (cdr
                                                 (car msg))
                                                "There are %d %ss!" "There is %d %s!")
                                            (length
                                             (car msg))
                                            (nth 1 msg))))))
                 (setq tail
                       (cdr tail)))))
           (if
               (or doom-doctor--errors doom-doctor--warnings)
               nil
             (doom-print
              (doom-print--format
               (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))))
           (exit! :pager? "+G"))))))))

;;;; 41
((let
     ((seen
       '(t))
      runners)
   (let
       ((tail
         (doom-cli-find command
                        (progn
                          (or
                           (progn
                             (and
                              (memq
                               (type-of cli)
                               cl-struct-doom-cli-tags)
                              t))
                           (signal 'wrong-type-argument
                                   (list 'doom-cli cli)))
                          (aref cli 2)))))
     (while tail
       (let
           ((cli
             (car tail)))
         (setq runners
               (cons
                (cons
                 (doom-cli-get cli)
                 (doom-cli--bindings cli context seen))
                runners))
         (setq tail
               (cdr tail)))))
   (let
       ((tail
         (nreverse runners)))
     (while tail
       (let
           ((x15
             (car tail)))
         (progn
           (ignore
            (consp x15))
           (let*
               ((x16
                 (car-safe x15))
                (x17
                 (cdr-safe x15)))
             (let
                 ((cli x16)
                  (bindings x17))
               (doom-cli-execute cli bindings))))
         (setq tail
               (cdr tail)))))
   context)
 ((context . #s(doom-cli-context
                (26384 50378 735038 513000)
                65238 0
                (88 . 27)
                nil nil "doom" nil nil
                ("doom" "doctor")
                nil
                ("doctor")
                (("--eval")
                 ("-E")
                 ("--strict-load")
                 ("--load")
                 ("-L")
                 ("--color")
                 ("--benchmark")
                 ("--profile")
                 ("--pager")
                 ("--emacsdir")
                 ("--doomdir")
                 ("--verbose")
                 ("-v")
                 ("--debug")
                 ("-D")
                 ("--force")
                 ("-!"))
                ((t)
                 (("doom" "doctor"))
                 (("doom")
                  "doctor"))
                #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (command "doom" "doctor")
  (cli . #s(doom-cli
            ("doom" "doctor")
            nil
            (("SUMMARY" . "Diagnoses common issues on your system.")
             ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
            nil nil nil nil
            (:benchmark nil :prefix
                        (doom)
                        :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
            (closure
                (t)
                (cli alist)
              (let nil
                (doom-print
                 (doom-print--format "The doctor will see you now...\n"))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking your Emacs version...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (cond
                     ((or
                       (> emacs-major-version 29)
                       (string-match-p ".\\([56]0\\|9[0-9]\\)$" emacs-version))
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))
                               doom-doctor--warnings)))
                      (if
                          (> emacs-major-version 29)
                          (progn
                            (let
                                ((doom-print-level
                                  (or nil doom-print-level))
                                 (doom-print-indent
                                  (+
                                   (if t
                                       (or nil doom-print-indent-increment)
                                     0)
                                   doom-print-indent)))
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'p "This is the bleeding edge of Emacs. As it is constantly changed, Doom will not " "(officially) support it. If you've found a stable commit, great! But be " "cautious about updating Emacs too eagerly!\n")))))
                        (progn
                          (let
                              ((doom-print-level
                                (or nil doom-print-level))
                               (doom-print-indent
                                (+
                                 (if t
                                     (or nil doom-print-indent-increment)
                                   0)
                                 doom-print-indent)))
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'p "A .50, .60, or .9X appended to the version string indicates that this is a version " "of Emacs in between stable releases. These are not well supported.\n"))))))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Because development builds are prone to random breakage, there will be a greater " "burden on you to investigate and deal with issues. Please make extra sure that " "your issue is reproducible in 29.1 before reporting them to Doom's issue tracker!\n" "\n" "If this doesn't phase you, read the \"Why does Doom not support Emacs HEAD\" QnA " "in Doom's FAQ. It offers some advice for debugging and surviving issues on the " "bleeding edge. Failing that, 29.1 is highly recommended and will always be " "Doom's best supported version of Emacs."))))))
                     ((= emacs-major-version 27)
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))
                               doom-doctor--warnings)))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Emacs 28.1 is better supported, faster, and more stable. Plus, Doom will drop " "27.x support sometime late-2023.")))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for Doom's prerequisites...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (if
                        (not
                         (executable-find "git"))
                        (progn
                          (if inhibit-message nil
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))))
                          (setq doom-doctor--errors
                                (cons
                                 (doom-print--format
                                  (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                                 doom-doctor--errors)))
                      (let
                          ((saved-match-data
                            (match-data)))
                        (unwind-protect
                            (progn
                              (let*
                                  ((version
                                    (cdr
                                     (doom-call-process "git" "version")))
                                   (version
                                    (and
                                     (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                                     (match-string 1 version))))
                                (if version
                                    (if
                                        (version< version "2.23")
                                        (progn
                                          (progn
                                            (if inhibit-message nil
                                              (doom-print
                                               (doom-print--format
                                                (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))))
                                            (setq doom-doctor--errors
                                                  (cons
                                                   (doom-print--format
                                                    (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                                   doom-doctor--errors)))))
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))))
                                    (setq doom-doctor--warnings
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                           doom-doctor--warnings))))))
                          (set-match-data saved-match-data t))))
                    (if
                        (executable-find "rg")
                        nil
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))))
                        (setq doom-doctor--errors
                              (cons
                               (doom-print--format
                                (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                               doom-doctor--errors))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for Emacs config conflicts...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (if
                        (or
                         (file-equal-p doom-emacs-dir "~/.emacs.d")
                         (file-equal-p doom-emacs-dir "~/.config/emacs"))
                        nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Doom is installed in a non-standard location")))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "The standard locations are ~/.config/emacs or ~/.emacs.d. Emacs will fail " "to load Doom if it is not explicitly told where to look for it. In Emacs 29+, " "this is possible with the --init-directory option:\n\n" "  $ emacs --init-directory '"
                                               (abbreviate-file-name doom-emacs-dir)
                                               "'\n\n" "However, Emacs 27-28 users have no choice but to move Doom to a standard " "location.\n\n" "Chemacs users may ignore this warning, however."))))))
                    (let
                        (found?)
                      (let
                          ((tail
                            '("~/_emacs" "~/.emacs" "~/.emacs.el" "~/.emacs.d" "~/.config/emacs")))
                        (while tail
                          (let
                              ((file
                                (car tail)))
                            (if
                                (and
                                 (file-exists-p file)
                                 (not
                                  (file-equal-p file doom-emacs-dir)))
                                (progn
                                  (setq found? t)
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'warn "Found another Emacs config: %s (%s)")
                                    file
                                    (if
                                        (file-directory-p file)
                                        "directory" "file")))))
                            (setq tail
                                  (cdr tail)))))
                      (if found?
                          (progn
                            (progn
                              (let
                                  ((doom-print-level
                                    (or nil doom-print-level))
                                   (doom-print-indent
                                    (+
                                     (if t
                                         (or nil doom-print-indent-increment)
                                       0)
                                     doom-print-indent)))
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'p "Having multiple Emacs configs may prevent Doom from loading properly. Emacs " "will load the first it finds and ignore the rest. If Doom isn't starting up " "correctly (e.g. you get a vanilla splash screen), make sure that only one of " "these exist.\n\n" "Chemacs users may ignore this warning."))))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for missing Emacs features...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (if
                        (functionp 'json-serialize)
                        nil
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Emacs was not built with native JSON support"))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Emacs was not built with native JSON support"))
                               doom-doctor--warnings)))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option."))))))
                    (if
                        (featurep 'native-compile)
                        nil
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Emacs was not built with native compilation support"))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Emacs was not built with native compilation support"))
                               doom-doctor--warnings)))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option."))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for private config conflicts...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (let*
                        ((xdg-dir
                          (concat
                           (or
                            (getenv "XDG_CONFIG_HOME")
                            "~/.config")
                           "/doom/"))
                         (doom-dir
                          (or
                           (getenv "DOOMDIR")
                           "~/.doom.d/"))
                         (dir
                          (if
                              (file-directory-p xdg-dir)
                              xdg-dir doom-dir)))
                      (if
                          (file-equal-p dir doom-emacs-dir)
                          (progn
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                                 (doom-print--class 'path dir))))
                            (progn
                              (let
                                  ((doom-print-level
                                    (or nil doom-print-level))
                                   (doom-print-indent
                                    (+
                                     (if t
                                         (or nil doom-print-indent-increment)
                                       0)
                                     doom-print-indent)))
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'p "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")))))))
                      (if
                          (and
                           (not
                            (file-equal-p xdg-dir doom-dir))
                           (file-directory-p xdg-dir)
                           (file-directory-p doom-dir))
                          (progn
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'warn "Detected two private configs, in %s and %s")
                              (abbreviate-file-name xdg-dir)
                              doom-dir))
                            (progn
                              (let
                                  ((doom-print-level
                                    (or nil doom-print-level))
                                   (doom-print-indent
                                    (+
                                     (if t
                                         (or nil doom-print-indent-increment)
                                       0)
                                     doom-print-indent)))
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'p "The second directory will be ignored, as it has lower precedence."))))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for common environmental issues...")))
                (if
                    (string-match-p "/fish$" shell-file-name)
                    (progn
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Detected Fish as your $SHELL")))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Fish (and possibly other non-POSIX shells) is known to inject garbage " "output into some of the child processes that Emacs spawns. Many Emacs " "packages/utilities will choke on this output, causing unpredictable issues. " "To get around this, either:\n\n" "  - Add the following to $DOOMDIR/config.el:\n\n" "    (setq shell-file-name (executable-find \"bash\"))\n\n" "  - Or change your default shell to a POSIX shell (like bash or zsh) " "    and explicitly configure your terminal apps to use the shell you " "    want.\n\n" "If you opt for option 1 and use one of Emacs' terminal emulators, you " "will also need to configure them to use Fish, e.g.\n\n" "  (setq-default vterm-shell (executable-find \"fish\"))\n\n" "  (setq-default explicit-shell-file-name (executable-find \"fish\"))\n")))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for stale elc files...")))
                (elc-check-dir doom-core-dir)
                (elc-check-dir doom-modules-dir)
                (elc-check-dir
                 (doom-path doom-local-dir "straight" straight-build-dir))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for problematic git global settings...")))
                (if
                    (executable-find "git")
                    (if
                        (= 0
                           (car
                            (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                        (progn
                          (progn
                            (if inhibit-message nil
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))))
                            (setq doom-doctor--warnings
                                  (cons
                                   (doom-print--format
                                    (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                                   doom-doctor--warnings)))
                          (progn
                            (let
                                ((doom-print-level
                                  (or nil doom-print-level))
                                 (doom-print-indent
                                  (+
                                   (if t
                                       (or nil doom-print-indent-increment)
                                     0)
                                   doom-print-indent)))
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'p "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")))))))
                  (progn
                    (if inhibit-message nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))))
                    (setq doom-doctor--errors
                          (cons
                           (doom-print--format
                            (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                           doom-doctor--errors))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking Doom Emacs...")))
                (condition-case ex
                    (progn
                      (let
                          ((doom-print-level
                            (or nil doom-print-level))
                           (doom-print-indent
                            (+
                             (if t
                                 (or nil doom-print-indent-increment)
                               0)
                             doom-print-indent)))
                        (require 'doom-start)
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'success "Initialized Doom Emacs %s")
                          doom-version))
                        (doom-print
                         (doom-print--format
                          (if
                              (hash-table-p doom-modules)
                              (doom-print--class 'success "Detected %d modules"
                                                 (hash-table-count doom-modules))
                            (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?"))))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'success "Detected %d packages")
                          (length doom-packages)))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'start "Checking Doom core for irregularities...")))
                        (progn
                          (let
                              ((doom-print-level
                                (or nil doom-print-level))
                               (doom-print-indent
                                (+
                                 (if t
                                     (or nil doom-print-indent-increment)
                                   0)
                                 doom-print-indent)))
                            (let
                                ((tail
                                  (list "savehist" "projectile.cache")))
                              (while tail
                                (let
                                    ((file
                                      (car tail)))
                                  (let*
                                      ((size
                                        (and t
                                             (condition-case nil
                                                 (progn
                                                   (doom-file-size file doom-cache-dir))
                                               (error nil)))))
                                    (if size
                                        (if
                                            (> size 1048576)
                                            (progn
                                              (progn
                                                (if inhibit-message nil
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                       (/ size 1024 1024.0)))))
                                                (setq doom-doctor--warnings
                                                      (cons
                                                       (doom-print--format
                                                        (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                           (/ size 1024 1024.0)))
                                                       doom-doctor--warnings)))
                                              (progn
                                                (let
                                                    ((doom-print-level
                                                      (or nil doom-print-level))
                                                     (doom-print-indent
                                                      (+
                                                       (if t
                                                           (or nil doom-print-indent-increment)
                                                         0)
                                                       doom-print-indent)))
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'p "Consider deleting it from your system (manually)")))))))
                                      nil))
                                  (setq tail
                                        (cdr tail)))))
                            (if
                                (condition-case nil
                                    (progn
                                      (executable-find doom-fd-executable))
                                  (error nil))
                                nil
                              (progn
                                (if inhibit-message nil
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))))
                                (setq doom-doctor--warnings
                                      (cons
                                       (doom-print--format
                                        (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                       doom-doctor--warnings))))
                            (require 'projectile)
                            (if
                                (projectile-project-root "~")
                                (progn
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'warn "Your $HOME is recognized as a project root"))))
                                    (setq doom-doctor--warnings
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                           doom-doctor--warnings)))
                                  (progn
                                    (let
                                        ((doom-print-level
                                          (or nil doom-print-level))
                                         (doom-print-indent
                                          (+
                                           (if t
                                               (or nil doom-print-indent-increment)
                                             0)
                                           doom-print-indent)))
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'p "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")))))))
                            (if
                                (and
                                 (file-equal-p doom-user-dir "~/.config/doom")
                                 (file-directory-p "~/.doom.d"))
                                (progn
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                                    (doom-print--class 'path doom-user-dir)))
                                  (progn
                                    (let
                                        ((doom-print-level
                                          (or nil doom-print-level))
                                         (doom-print-indent
                                          (+
                                           (if t
                                               (or nil doom-print-indent-increment)
                                             0)
                                           doom-print-indent)))
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'p "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")))))))
                            (if
                                (not
                                 (executable-find "fc-list"))
                                (progn
                                  (if inhibit-message nil
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))))
                                  (setq doom-doctor--warnings
                                        (cons
                                         (doom-print--format
                                          (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                         doom-doctor--warnings)))
                              (if
                                  (and
                                   (cond
                                    ((eq system-type 'gnu/linux)
                                     (let nil
                                       (concat
                                        (or
                                         (getenv "XDG_DATA_HOME")
                                         "~/.local/share")
                                        "/fonts/")))
                                    ((eq system-type 'darwin)
                                     (let nil "~/Library/Fonts/")))
                                   (require 'nerd-icons nil t))
                                  (progn
                                    (let
                                        ((temp-buffer
                                          (generate-new-buffer " *temp*" t)))
                                      (save-current-buffer
                                        (set-buffer temp-buffer)
                                        (unwind-protect
                                            (progn
                                              (let
                                                  ((errors 0))
                                                (let*
                                                    ((output
                                                      (doom-call-process "fc-list" "" "file"))
                                                     (status
                                                      (if output
                                                          (car-safe
                                                           (prog1 output
                                                             (setq output
                                                                   (cdr output))))
                                                        (signal 'wrong-number-of-arguments
                                                                (list
                                                                 '(status . output)
                                                                 (length output))))))
                                                  (if
                                                      (not
                                                       (= 0 status))
                                                      (doom-print
                                                       (doom-print--format
                                                        (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?")))
                                                    (insert
                                                     (cdr
                                                      (doom-call-process "fc-list" "" "file")))
                                                    (let
                                                        ((tail nerd-icons-font-names))
                                                      (while tail
                                                        (let
                                                            ((font
                                                              (car tail)))
                                                          (if
                                                              (save-excursion
                                                                (re-search-backward font nil t))
                                                              (doom-print
                                                               (doom-print--format
                                                                (doom-print--style 'green "Found font %s" font)))
                                                            (doom-print
                                                             (doom-print--format
                                                              (doom-print--class 'warn "%S font is not installed on your system")
                                                              font))
                                                            (setq errors
                                                                  (1+ errors)))
                                                          (setq tail
                                                                (cdr tail)))))
                                                    (if
                                                        (> errors 0)
                                                        (progn
                                                          (progn
                                                            (let
                                                                ((doom-print-level
                                                                  (or nil doom-print-level))
                                                                 (doom-print-indent
                                                                  (+
                                                                   (if t
                                                                       (or nil doom-print-indent-increment)
                                                                     0)
                                                                   doom-print-indent)))
                                                              (doom-print
                                                               (doom-print--format
                                                                (doom-print--class 'p "Some needed fonts are not properly installed on your system. To download and " "install them, run `M-x nerd-icons-install-fonts' from within Doom Emacs. " "However, on Windows this command will only download them; the fonts must " "be installed manually afterwards.")))))))))))
                                          (and
                                           (buffer-name temp-buffer)
                                           (kill-buffer temp-buffer))))))))))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'start "Checking for stale elc files in your DOOMDIR...")))
                        (if
                            (file-directory-p doom-user-dir)
                            (progn
                              (progn
                                (let
                                    ((doom-print-level
                                      (or nil doom-print-level))
                                     (doom-print-indent
                                      (+
                                       (if t
                                           (or nil doom-print-indent-increment)
                                         0)
                                       doom-print-indent)))
                                  (elc-check-dir doom-user-dir)))))
                        (if doom-modules
                            (progn
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'start "Checking your enabled modules...")))
                              (advice-add #'require :around #'doom-shut-up-a)
                              (let
                                  ((tail
                                    (doom-module-list)))
                                (while tail
                                  (let
                                      ((x54
                                        (car tail)))
                                    (progn
                                      (ignore
                                       (consp x54))
                                      (let*
                                          ((x55
                                            (car-safe x54))
                                           (x56
                                            (cdr-safe x54)))
                                        (let
                                            ((group x55)
                                             (name x56))
                                          (let
                                              ((doom-context doom-context))
                                            (let
                                                ((tail
                                                  (ensure-list 'doctor)))
                                              (while tail
                                                (let
                                                    ((context
                                                      (car tail)))
                                                  (doom-context-push context)
                                                  (setq tail
                                                        (cdr tail)))))
                                            (let
                                                (doom-local-errors doom-local-warnings)
                                              (let
                                                  (doom-doctor--errors doom-doctor--warnings)
                                                (condition-case ex
                                                    (let
                                                        ((doom-module-context
                                                          (doom-module-context
                                                           (cons group name))))
                                                      (if
                                                          (and
                                                           (not doom-inhibit-log)
                                                           (or
                                                            (not noninteractive)
                                                            (<= 2 doom-log-level)))
                                                          (progn
                                                            (doom--log 2 ":context:module: =%s" doom-module-context)))
                                                      (let
                                                          ((doctor-file
                                                            (doom-module-expand-path group name "doctor.el"))
                                                           (packages-file
                                                            (doom-module-expand-path group name doom-module-packages-file)))
                                                        (if packages-file
                                                            (progn
                                                              (let*
                                                                  ((doom-output-indent 6)
                                                                   (--cl-var--
                                                                    (let
                                                                        ((doom-context doom-context))
                                                                      (let
                                                                          ((tail
                                                                            (ensure-list 'packages)))
                                                                        (while tail
                                                                          (let
                                                                              ((context
                                                                                (car tail)))
                                                                            (doom-context-push context)
                                                                            (setq tail
                                                                                  (cdr tail)))))
                                                                      (let*
                                                                          (doom-packages doom-disabled-packages)
                                                                        (load packages-file 'noerror 'nomessage)
                                                                        (mapcar #'car doom-packages))))
                                                                   (name nil))
                                                                (while
                                                                    (consp --cl-var--)
                                                                  (setq name
                                                                        (car --cl-var--))
                                                                  (if
                                                                      (or
                                                                       (doom-package-get name :disable)
                                                                       (eval
                                                                        (doom-package-get name :ignore))
                                                                       (plist-member
                                                                        (doom-package-get name :recipe)
                                                                        :local-repo)
                                                                       (locate-library
                                                                        (symbol-name name))
                                                                       (doom-package-built-in-p name)
                                                                       (doom-package-installed-p name))
                                                                      (progn)
                                                                    (doom-print
                                                                     (doom-print--format
                                                                      (doom-print--class 'error "Missing emacs package: %S")
                                                                      name)))
                                                                  (setq --cl-var--
                                                                        (cdr --cl-var--)))
                                                                nil)))
                                                        (if doctor-file
                                                            (progn
                                                              (let
                                                                  ((inhibit-message t))
                                                                (load doctor-file 'noerror 'nomessage))))))
                                                  ((debug file-missing)
                                                   (progn
                                                     (if inhibit-message nil
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'error "%s"
                                                                            (error-message-string ex)))))
                                                     (setq doom-doctor--errors
                                                           (cons
                                                            (doom-print--format
                                                             (doom-print--class 'error "%s"
                                                                                (error-message-string ex)))
                                                            doom-doctor--errors))))
                                                  ((debug error)
                                                   (progn
                                                     (if inhibit-message nil
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'error "Syntax error: %s" ex))))
                                                     (setq doom-doctor--errors
                                                           (cons
                                                            (doom-print--format
                                                             (doom-print--class 'error "Syntax error: %s" ex))
                                                            doom-doctor--errors)))))
                                                (if
                                                    (or doom-doctor--errors doom-doctor--warnings)
                                                    (progn
                                                      (progn
                                                        (let
                                                            ((doom-print-level
                                                              (or nil doom-print-level))
                                                             (doom-print-indent
                                                              (+
                                                               (if t
                                                                   (or nil doom-print-indent-increment)
                                                                 0)
                                                               doom-print-indent)))
                                                          (doom-print
                                                           (doom-print--format
                                                            (doom-print--class 'start
                                                                               (doom-print--style 'bold "%s %s"))
                                                            group name))
                                                          (doom-print
                                                           (doom-print--format "%s"
                                                                               (string-join
                                                                                (append doom-doctor--errors doom-doctor--warnings)
                                                                                "\n")))))
                                                      (progn
                                                        (setq doom-local-errors doom-doctor--errors)
                                                        (setq doom-local-warnings doom-doctor--warnings)))))
                                              (setq doom-doctor--errors
                                                    (append doom-doctor--errors doom-local-errors))
                                              (setq doom-doctor--warnings
                                                    (append doom-doctor--warnings doom-local-warnings)))))))
                                    (setq tail
                                          (cdr tail)))))))))
                  ((debug error)
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                            (or
                                             (cdr-safe ex)
                                             (car ex))))))
                     (setq doom-doctor--warnings
                           (cons
                            (doom-print--format
                             (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                                (or
                                                 (cdr-safe ex)
                                                 (car ex))))
                            doom-doctor--warnings)))
                   (setq doom-modules nil)))
                (terpri)
                (let
                    ((tail
                      (list
                       (list doom-doctor--warnings "warning" 'yellow)
                       (list doom-doctor--errors "error" 'red))))
                  (while tail
                    (let
                        ((msg
                          (car tail)))
                      (if
                          (car msg)
                          (progn
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'color
                                                 (nth 2 msg)
                                                 (if
                                                     (cdr
                                                      (car msg))
                                                     "There are %d %ss!" "There is %d %s!")
                                                 (length
                                                  (car msg))
                                                 (nth 1 msg))))))
                      (setq tail
                            (cdr tail)))))
                (if
                    (or doom-doctor--errors doom-doctor--warnings)
                    nil
                  (doom-print
                   (doom-print--format
                    (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))))
                (exit! :pager? "+G")))))
  (prefix . "doom")
  (seen t)
  (runners
   (#s(doom-cli
       ("doom" "doctor")
       nil
       (("SUMMARY" . "Diagnoses common issues on your system.")
        ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
       nil nil nil nil
       (:benchmark nil :prefix
                   (doom)
                   :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
       (closure
           (t)
           (cli alist)
         (let nil
           (doom-print
            (doom-print--format "The doctor will see you now...\n"))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking your Emacs version...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (cond
                ((or
                  (> emacs-major-version 29)
                  (string-match-p ".\\([56]0\\|9[0-9]\\)$" emacs-version))
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))
                          doom-doctor--warnings)))
                 (if
                     (> emacs-major-version 29)
                     (progn
                       (let
                           ((doom-print-level
                             (or nil doom-print-level))
                            (doom-print-indent
                             (+
                              (if t
                                  (or nil doom-print-indent-increment)
                                0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'p "This is the bleeding edge of Emacs. As it is constantly changed, Doom will not " "(officially) support it. If you've found a stable commit, great! But be " "cautious about updating Emacs too eagerly!\n")))))
                   (progn
                     (let
                         ((doom-print-level
                           (or nil doom-print-level))
                          (doom-print-indent
                           (+
                            (if t
                                (or nil doom-print-indent-increment)
                              0)
                            doom-print-indent)))
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'p "A .50, .60, or .9X appended to the version string indicates that this is a version " "of Emacs in between stable releases. These are not well supported.\n"))))))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Because development builds are prone to random breakage, there will be a greater " "burden on you to investigate and deal with issues. Please make extra sure that " "your issue is reproducible in 29.1 before reporting them to Doom's issue tracker!\n" "\n" "If this doesn't phase you, read the \"Why does Doom not support Emacs HEAD\" QnA " "in Doom's FAQ. It offers some advice for debugging and surviving issues on the " "bleeding edge. Failing that, 29.1 is highly recommended and will always be " "Doom's best supported version of Emacs."))))))
                ((= emacs-major-version 27)
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))
                          doom-doctor--warnings)))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Emacs 28.1 is better supported, faster, and more stable. Plus, Doom will drop " "27.x support sometime late-2023.")))))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for Doom's prerequisites...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (if
                   (not
                    (executable-find "git"))
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                            doom-doctor--errors)))
                 (let
                     ((saved-match-data
                       (match-data)))
                   (unwind-protect
                       (progn
                         (let*
                             ((version
                               (cdr
                                (doom-call-process "git" "version")))
                              (version
                               (and
                                (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                                (match-string 1 version))))
                           (if version
                               (if
                                   (version< version "2.23")
                                   (progn
                                     (progn
                                       (if inhibit-message nil
                                         (doom-print
                                          (doom-print--format
                                           (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))))
                                       (setq doom-doctor--errors
                                             (cons
                                              (doom-print--format
                                               (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                              doom-doctor--errors)))))
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))))
                               (setq doom-doctor--warnings
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                      doom-doctor--warnings))))))
                     (set-match-data saved-match-data t))))
               (if
                   (executable-find "rg")
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))))
                   (setq doom-doctor--errors
                         (cons
                          (doom-print--format
                           (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                          doom-doctor--errors))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for Emacs config conflicts...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (if
                   (or
                    (file-equal-p doom-emacs-dir "~/.emacs.d")
                    (file-equal-p doom-emacs-dir "~/.config/emacs"))
                   nil
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'warn "Doom is installed in a non-standard location")))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "The standard locations are ~/.config/emacs or ~/.emacs.d. Emacs will fail " "to load Doom if it is not explicitly told where to look for it. In Emacs 29+, " "this is possible with the --init-directory option:\n\n" "  $ emacs --init-directory '"
                                          (abbreviate-file-name doom-emacs-dir)
                                          "'\n\n" "However, Emacs 27-28 users have no choice but to move Doom to a standard " "location.\n\n" "Chemacs users may ignore this warning, however."))))))
               (let
                   (found?)
                 (let
                     ((tail
                       '("~/_emacs" "~/.emacs" "~/.emacs.el" "~/.emacs.d" "~/.config/emacs")))
                   (while tail
                     (let
                         ((file
                           (car tail)))
                       (if
                           (and
                            (file-exists-p file)
                            (not
                             (file-equal-p file doom-emacs-dir)))
                           (progn
                             (setq found? t)
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Found another Emacs config: %s (%s)")
                               file
                               (if
                                   (file-directory-p file)
                                   "directory" "file")))))
                       (setq tail
                             (cdr tail)))))
                 (if found?
                     (progn
                       (progn
                         (let
                             ((doom-print-level
                               (or nil doom-print-level))
                              (doom-print-indent
                               (+
                                (if t
                                    (or nil doom-print-indent-increment)
                                  0)
                                doom-print-indent)))
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'p "Having multiple Emacs configs may prevent Doom from loading properly. Emacs " "will load the first it finds and ignore the rest. If Doom isn't starting up " "correctly (e.g. you get a vanilla splash screen), make sure that only one of " "these exist.\n\n" "Chemacs users may ignore this warning."))))))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for missing Emacs features...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (if
                   (functionp 'json-serialize)
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs was not built with native JSON support"))))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs was not built with native JSON support"))
                          doom-doctor--warnings)))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option."))))))
               (if
                   (featurep 'native-compile)
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs was not built with native compilation support"))))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs was not built with native compilation support"))
                          doom-doctor--warnings)))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option."))))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for private config conflicts...")))
           (progn
             (let
                 ((doom-print-level
                   (or nil doom-print-level))
                  (doom-print-indent
                   (+
                    (if t
                        (or nil doom-print-indent-increment)
                      0)
                    doom-print-indent)))
               (let*
                   ((xdg-dir
                     (concat
                      (or
                       (getenv "XDG_CONFIG_HOME")
                       "~/.config")
                      "/doom/"))
                    (doom-dir
                     (or
                      (getenv "DOOMDIR")
                      "~/.doom.d/"))
                    (dir
                     (if
                         (file-directory-p xdg-dir)
                         xdg-dir doom-dir)))
                 (if
                     (file-equal-p dir doom-emacs-dir)
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                            (doom-print--class 'path dir))))
                       (progn
                         (let
                             ((doom-print-level
                               (or nil doom-print-level))
                              (doom-print-indent
                               (+
                                (if t
                                    (or nil doom-print-indent-increment)
                                  0)
                                doom-print-indent)))
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'p "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")))))))
                 (if
                     (and
                      (not
                       (file-equal-p xdg-dir doom-dir))
                      (file-directory-p xdg-dir)
                      (file-directory-p doom-dir))
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Detected two private configs, in %s and %s")
                         (abbreviate-file-name xdg-dir)
                         doom-dir))
                       (progn
                         (let
                             ((doom-print-level
                               (or nil doom-print-level))
                              (doom-print-indent
                               (+
                                (if t
                                    (or nil doom-print-indent-increment)
                                  0)
                                doom-print-indent)))
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'p "The second directory will be ignored, as it has lower precedence."))))))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for common environmental issues...")))
           (if
               (string-match-p "/fish$" shell-file-name)
               (progn
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'warn "Detected Fish as your $SHELL")))
                 (progn
                   (let
                       ((doom-print-level
                         (or nil doom-print-level))
                        (doom-print-indent
                         (+
                          (if t
                              (or nil doom-print-indent-increment)
                            0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'p "Fish (and possibly other non-POSIX shells) is known to inject garbage " "output into some of the child processes that Emacs spawns. Many Emacs " "packages/utilities will choke on this output, causing unpredictable issues. " "To get around this, either:\n\n" "  - Add the following to $DOOMDIR/config.el:\n\n" "    (setq shell-file-name (executable-find \"bash\"))\n\n" "  - Or change your default shell to a POSIX shell (like bash or zsh) " "    and explicitly configure your terminal apps to use the shell you " "    want.\n\n" "If you opt for option 1 and use one of Emacs' terminal emulators, you " "will also need to configure them to use Fish, e.g.\n\n" "  (setq-default vterm-shell (executable-find \"fish\"))\n\n" "  (setq-default explicit-shell-file-name (executable-find \"fish\"))\n")))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for stale elc files...")))
           (elc-check-dir doom-core-dir)
           (elc-check-dir doom-modules-dir)
           (elc-check-dir
            (doom-path doom-local-dir "straight" straight-build-dir))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for problematic git global settings...")))
           (if
               (executable-find "git")
               (if
                   (= 0
                      (car
                       (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                   (progn
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))))
                       (setq doom-doctor--warnings
                             (cons
                              (doom-print--format
                               (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                              doom-doctor--warnings)))
                     (progn
                       (let
                           ((doom-print-level
                             (or nil doom-print-level))
                            (doom-print-indent
                             (+
                              (if t
                                  (or nil doom-print-indent-increment)
                                0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'p "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")))))))
             (progn
               (if inhibit-message nil
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))))
               (setq doom-doctor--errors
                     (cons
                      (doom-print--format
                       (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                      doom-doctor--errors))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking Doom Emacs...")))
           (condition-case ex
               (progn
                 (let
                     ((doom-print-level
                       (or nil doom-print-level))
                      (doom-print-indent
                       (+
                        (if t
                            (or nil doom-print-indent-increment)
                          0)
                        doom-print-indent)))
                   (require 'doom-start)
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'success "Initialized Doom Emacs %s")
                     doom-version))
                   (doom-print
                    (doom-print--format
                     (if
                         (hash-table-p doom-modules)
                         (doom-print--class 'success "Detected %d modules"
                                            (hash-table-count doom-modules))
                       (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?"))))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'success "Detected %d packages")
                     (length doom-packages)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'start "Checking Doom core for irregularities...")))
                   (progn
                     (let
                         ((doom-print-level
                           (or nil doom-print-level))
                          (doom-print-indent
                           (+
                            (if t
                                (or nil doom-print-indent-increment)
                              0)
                            doom-print-indent)))
                       (let
                           ((tail
                             (list "savehist" "projectile.cache")))
                         (while tail
                           (let
                               ((file
                                 (car tail)))
                             (let*
                                 ((size
                                   (and t
                                        (condition-case nil
                                            (progn
                                              (doom-file-size file doom-cache-dir))
                                          (error nil)))))
                               (if size
                                   (if
                                       (> size 1048576)
                                       (progn
                                         (progn
                                           (if inhibit-message nil
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                  (/ size 1024 1024.0)))))
                                           (setq doom-doctor--warnings
                                                 (cons
                                                  (doom-print--format
                                                   (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                      (/ size 1024 1024.0)))
                                                  doom-doctor--warnings)))
                                         (progn
                                           (let
                                               ((doom-print-level
                                                 (or nil doom-print-level))
                                                (doom-print-indent
                                                 (+
                                                  (if t
                                                      (or nil doom-print-indent-increment)
                                                    0)
                                                  doom-print-indent)))
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'p "Consider deleting it from your system (manually)")))))))
                                 nil))
                             (setq tail
                                   (cdr tail)))))
                       (if
                           (condition-case nil
                               (progn
                                 (executable-find doom-fd-executable))
                             (error nil))
                           nil
                         (progn
                           (if inhibit-message nil
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))))
                           (setq doom-doctor--warnings
                                 (cons
                                  (doom-print--format
                                   (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                  doom-doctor--warnings))))
                       (require 'projectile)
                       (if
                           (projectile-project-root "~")
                           (progn
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'warn "Your $HOME is recognized as a project root"))))
                               (setq doom-doctor--warnings
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                      doom-doctor--warnings)))
                             (progn
                               (let
                                   ((doom-print-level
                                     (or nil doom-print-level))
                                    (doom-print-indent
                                     (+
                                      (if t
                                          (or nil doom-print-indent-increment)
                                        0)
                                      doom-print-indent)))
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'p "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")))))))
                       (if
                           (and
                            (file-equal-p doom-user-dir "~/.config/doom")
                            (file-directory-p "~/.doom.d"))
                           (progn
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                               (doom-print--class 'path doom-user-dir)))
                             (progn
                               (let
                                   ((doom-print-level
                                     (or nil doom-print-level))
                                    (doom-print-indent
                                     (+
                                      (if t
                                          (or nil doom-print-indent-increment)
                                        0)
                                      doom-print-indent)))
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'p "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")))))))
                       (if
                           (not
                            (executable-find "fc-list"))
                           (progn
                             (if inhibit-message nil
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))))
                             (setq doom-doctor--warnings
                                   (cons
                                    (doom-print--format
                                     (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                    doom-doctor--warnings)))
                         (if
                             (and
                              (cond
                               ((eq system-type 'gnu/linux)
                                (let nil
                                  (concat
                                   (or
                                    (getenv "XDG_DATA_HOME")
                                    "~/.local/share")
                                   "/fonts/")))
                               ((eq system-type 'darwin)
                                (let nil "~/Library/Fonts/")))
                              (require 'nerd-icons nil t))
                             (progn
                               (let
                                   ((temp-buffer
                                     (generate-new-buffer " *temp*" t)))
                                 (save-current-buffer
                                   (set-buffer temp-buffer)
                                   (unwind-protect
                                       (progn
                                         (let
                                             ((errors 0))
                                           (let*
                                               ((output
                                                 (doom-call-process "fc-list" "" "file"))
                                                (status
                                                 (if output
                                                     (car-safe
                                                      (prog1 output
                                                        (setq output
                                                              (cdr output))))
                                                   (signal 'wrong-number-of-arguments
                                                           (list
                                                            '(status . output)
                                                            (length output))))))
                                             (if
                                                 (not
                                                  (= 0 status))
                                                 (doom-print
                                                  (doom-print--format
                                                   (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?")))
                                               (insert
                                                (cdr
                                                 (doom-call-process "fc-list" "" "file")))
                                               (let
                                                   ((tail nerd-icons-font-names))
                                                 (while tail
                                                   (let
                                                       ((font
                                                         (car tail)))
                                                     (if
                                                         (save-excursion
                                                           (re-search-backward font nil t))
                                                         (doom-print
                                                          (doom-print--format
                                                           (doom-print--style 'green "Found font %s" font)))
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'warn "%S font is not installed on your system")
                                                         font))
                                                       (setq errors
                                                             (1+ errors)))
                                                     (setq tail
                                                           (cdr tail)))))
                                               (if
                                                   (> errors 0)
                                                   (progn
                                                     (progn
                                                       (let
                                                           ((doom-print-level
                                                             (or nil doom-print-level))
                                                            (doom-print-indent
                                                             (+
                                                              (if t
                                                                  (or nil doom-print-indent-increment)
                                                                0)
                                                              doom-print-indent)))
                                                         (doom-print
                                                          (doom-print--format
                                                           (doom-print--class 'p "Some needed fonts are not properly installed on your system. To download and " "install them, run `M-x nerd-icons-install-fonts' from within Doom Emacs. " "However, on Windows this command will only download them; the fonts must " "be installed manually afterwards.")))))))))))
                                     (and
                                      (buffer-name temp-buffer)
                                      (kill-buffer temp-buffer))))))))))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'start "Checking for stale elc files in your DOOMDIR...")))
                   (if
                       (file-directory-p doom-user-dir)
                       (progn
                         (progn
                           (let
                               ((doom-print-level
                                 (or nil doom-print-level))
                                (doom-print-indent
                                 (+
                                  (if t
                                      (or nil doom-print-indent-increment)
                                    0)
                                  doom-print-indent)))
                             (elc-check-dir doom-user-dir)))))
                   (if doom-modules
                       (progn
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'start "Checking your enabled modules...")))
                         (advice-add #'require :around #'doom-shut-up-a)
                         (let
                             ((tail
                               (doom-module-list)))
                           (while tail
                             (let
                                 ((x54
                                   (car tail)))
                               (progn
                                 (ignore
                                  (consp x54))
                                 (let*
                                     ((x55
                                       (car-safe x54))
                                      (x56
                                       (cdr-safe x54)))
                                   (let
                                       ((group x55)
                                        (name x56))
                                     (let
                                         ((doom-context doom-context))
                                       (let
                                           ((tail
                                             (ensure-list 'doctor)))
                                         (while tail
                                           (let
                                               ((context
                                                 (car tail)))
                                             (doom-context-push context)
                                             (setq tail
                                                   (cdr tail)))))
                                       (let
                                           (doom-local-errors doom-local-warnings)
                                         (let
                                             (doom-doctor--errors doom-doctor--warnings)
                                           (condition-case ex
                                               (let
                                                   ((doom-module-context
                                                     (doom-module-context
                                                      (cons group name))))
                                                 (if
                                                     (and
                                                      (not doom-inhibit-log)
                                                      (or
                                                       (not noninteractive)
                                                       (<= 2 doom-log-level)))
                                                     (progn
                                                       (doom--log 2 ":context:module: =%s" doom-module-context)))
                                                 (let
                                                     ((doctor-file
                                                       (doom-module-expand-path group name "doctor.el"))
                                                      (packages-file
                                                       (doom-module-expand-path group name doom-module-packages-file)))
                                                   (if packages-file
                                                       (progn
                                                         (let*
                                                             ((doom-output-indent 6)
                                                              (--cl-var--
                                                               (let
                                                                   ((doom-context doom-context))
                                                                 (let
                                                                     ((tail
                                                                       (ensure-list 'packages)))
                                                                   (while tail
                                                                     (let
                                                                         ((context
                                                                           (car tail)))
                                                                       (doom-context-push context)
                                                                       (setq tail
                                                                             (cdr tail)))))
                                                                 (let*
                                                                     (doom-packages doom-disabled-packages)
                                                                   (load packages-file 'noerror 'nomessage)
                                                                   (mapcar #'car doom-packages))))
                                                              (name nil))
                                                           (while
                                                               (consp --cl-var--)
                                                             (setq name
                                                                   (car --cl-var--))
                                                             (if
                                                                 (or
                                                                  (doom-package-get name :disable)
                                                                  (eval
                                                                   (doom-package-get name :ignore))
                                                                  (plist-member
                                                                   (doom-package-get name :recipe)
                                                                   :local-repo)
                                                                  (locate-library
                                                                   (symbol-name name))
                                                                  (doom-package-built-in-p name)
                                                                  (doom-package-installed-p name))
                                                                 (progn)
                                                               (doom-print
                                                                (doom-print--format
                                                                 (doom-print--class 'error "Missing emacs package: %S")
                                                                 name)))
                                                             (setq --cl-var--
                                                                   (cdr --cl-var--)))
                                                           nil)))
                                                   (if doctor-file
                                                       (progn
                                                         (let
                                                             ((inhibit-message t))
                                                           (load doctor-file 'noerror 'nomessage))))))
                                             ((debug file-missing)
                                              (progn
                                                (if inhibit-message nil
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'error "%s"
                                                                       (error-message-string ex)))))
                                                (setq doom-doctor--errors
                                                      (cons
                                                       (doom-print--format
                                                        (doom-print--class 'error "%s"
                                                                           (error-message-string ex)))
                                                       doom-doctor--errors))))
                                             ((debug error)
                                              (progn
                                                (if inhibit-message nil
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'error "Syntax error: %s" ex))))
                                                (setq doom-doctor--errors
                                                      (cons
                                                       (doom-print--format
                                                        (doom-print--class 'error "Syntax error: %s" ex))
                                                       doom-doctor--errors)))))
                                           (if
                                               (or doom-doctor--errors doom-doctor--warnings)
                                               (progn
                                                 (progn
                                                   (let
                                                       ((doom-print-level
                                                         (or nil doom-print-level))
                                                        (doom-print-indent
                                                         (+
                                                          (if t
                                                              (or nil doom-print-indent-increment)
                                                            0)
                                                          doom-print-indent)))
                                                     (doom-print
                                                      (doom-print--format
                                                       (doom-print--class 'start
                                                                          (doom-print--style 'bold "%s %s"))
                                                       group name))
                                                     (doom-print
                                                      (doom-print--format "%s"
                                                                          (string-join
                                                                           (append doom-doctor--errors doom-doctor--warnings)
                                                                           "\n")))))
                                                 (progn
                                                   (setq doom-local-errors doom-doctor--errors)
                                                   (setq doom-local-warnings doom-doctor--warnings)))))
                                         (setq doom-doctor--errors
                                               (append doom-doctor--errors doom-local-errors))
                                         (setq doom-doctor--warnings
                                               (append doom-doctor--warnings doom-local-warnings)))))))
                               (setq tail
                                     (cdr tail)))))))))
             ((debug error)
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                       (or
                                        (cdr-safe ex)
                                        (car ex))))))
                (setq doom-doctor--warnings
                      (cons
                       (doom-print--format
                        (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                           (or
                                            (cdr-safe ex)
                                            (car ex))))
                       doom-doctor--warnings)))
              (setq doom-modules nil)))
           (terpri)
           (let
               ((tail
                 (list
                  (list doom-doctor--warnings "warning" 'yellow)
                  (list doom-doctor--errors "error" 'red))))
             (while tail
               (let
                   ((msg
                     (car tail)))
                 (if
                     (car msg)
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'color
                                            (nth 2 msg)
                                            (if
                                                (cdr
                                                 (car msg))
                                                "There are %d %ss!" "There is %d %s!")
                                            (length
                                             (car msg))
                                            (nth 1 msg))))))
                 (setq tail
                       (cdr tail)))))
           (if
               (or doom-doctor--errors doom-doctor--warnings)
               nil
             (doom-print
              (doom-print--format
               (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))))
           (exit! :pager? "+G"))))))))

;;;; 42
((cond
  ((null
    (or command
        (doom-cli-get
         (list prefix)
         t)))
   (signal 'doom-cli-invalid-prefix-error
           (list prefix)))
  ((progn
     (or
      (progn
        (and
         (memq
          (type-of context)
          cl-struct-doom-cli-context-tags)
         t))
      (signal 'wrong-type-argument
              (list 'doom-cli-context context)))
     (aref context 8))
   (let*
       ((val
         (progn
           (or
            (progn
              (and
               (memq
                (type-of context)
                cl-struct-doom-cli-context-tags)
               t))
            (signal 'wrong-type-argument
                    (list 'doom-cli-context context)))
           (aref context 8))))
     (cond
      ((equal val '"--version")
       (let nil
         (doom-cli-call
          (cons ':version
                (cdr command))
          context)
         t))
      ((member val
               '("--help" "-?"))
       (let nil
         (doom-cli-call
          (cons ':help
                (cdr command))
          context)
         t))
      (t
       (let nil
         (error "In meta mode with no destination!"))))))
  ((not
    (and cli
         (let
             ((cl-x
               (doom-cli-get cli)))
           (progn
             (or
              (progn
                (and
                 (memq
                  (type-of cl-x)
                  cl-struct-doom-cli-tags)
                 t))
              (signal 'wrong-type-argument
                      (list 'doom-cli cl-x)))
             (aref cl-x 9)))))
   (signal 'doom-cli-command-not-found-error
           (append command
                   (alist-get t
                              (progn
                                (or
                                 (progn
                                   (and
                                    (memq
                                     (type-of context)
                                     cl-struct-doom-cli-context-tags)
                                    t))
                                 (signal 'wrong-type-argument
                                         (list 'doom-cli-context context)))
                                (aref context 14))))))
  ((let
       ((seen
         '(t))
        runners)
     (let
         ((tail
           (doom-cli-find command
                          (progn
                            (or
                             (progn
                               (and
                                (memq
                                 (type-of cli)
                                 cl-struct-doom-cli-tags)
                                t))
                             (signal 'wrong-type-argument
                                     (list 'doom-cli cli)))
                            (aref cli 2)))))
       (while tail
         (let
             ((cli
               (car tail)))
           (setq runners
                 (cons
                  (cons
                   (doom-cli-get cli)
                   (doom-cli--bindings cli context seen))
                  runners))
           (setq tail
                 (cdr tail)))))
     (let
         ((tail
           (nreverse runners)))
       (while tail
         (let
             ((x15
               (car tail)))
           (progn
             (ignore
              (consp x15))
             (let*
                 ((x16
                   (car-safe x15))
                  (x17
                   (cdr-safe x15)))
               (let
                   ((cli x16)
                    (bindings x17))
                 (doom-cli-execute cli bindings))))
           (setq tail
                 (cdr tail)))))
     context)))
 nil)

;;;; 43
((let*
     ((command
       (progn
         (or
          (progn
            (and
             (memq
              (type-of context)
              cl-struct-doom-cli-context-tags)
             t))
          (signal 'wrong-type-argument
                  (list 'doom-cli-context context)))
         (aref context 10)))
      (cli
       (doom-cli-get command t))
      (prefix
       (progn
         (or
          (progn
            (and
             (memq
              (type-of context)
              cl-struct-doom-cli-context-tags)
             t))
          (signal 'wrong-type-argument
                  (list 'doom-cli-context context)))
         (aref context 7))))
   (if
       (and
        (not doom-inhibit-log)
        (or
         (not noninteractive)
         (<= 2 doom-log-level)))
       (progn
         (doom--log 2 "context-execute: %s"
                    (mapconcat #'doom-cli-command-string
                               (delq nil
                                     (list
                                      (car
                                       (progn
                                         (or
                                          (progn
                                            (and
                                             (memq
                                              (type-of context)
                                              cl-struct-doom-cli-context-tags)
                                             t))
                                          (signal 'wrong-type-argument
                                                  (list 'doom-cli-context context)))
                                         (aref context 11)))
                                      command))
                               " -> "))))
   (cond
    ((null
      (or command
          (doom-cli-get
           (list prefix)
           t)))
     (signal 'doom-cli-invalid-prefix-error
             (list prefix)))
    ((progn
       (or
        (progn
          (and
           (memq
            (type-of context)
            cl-struct-doom-cli-context-tags)
           t))
        (signal 'wrong-type-argument
                (list 'doom-cli-context context)))
       (aref context 8))
     (let*
         ((val
           (progn
             (or
              (progn
                (and
                 (memq
                  (type-of context)
                  cl-struct-doom-cli-context-tags)
                 t))
              (signal 'wrong-type-argument
                      (list 'doom-cli-context context)))
             (aref context 8))))
       (cond
        ((equal val '"--version")
         (let nil
           (doom-cli-call
            (cons ':version
                  (cdr command))
            context)
           t))
        ((member val
                 '("--help" "-?"))
         (let nil
           (doom-cli-call
            (cons ':help
                  (cdr command))
            context)
           t))
        (t
         (let nil
           (error "In meta mode with no destination!"))))))
    ((not
      (and cli
           (let
               ((cl-x
                 (doom-cli-get cli)))
             (progn
               (or
                (progn
                  (and
                   (memq
                    (type-of cl-x)
                    cl-struct-doom-cli-tags)
                   t))
                (signal 'wrong-type-argument
                        (list 'doom-cli cl-x)))
               (aref cl-x 9)))))
     (signal 'doom-cli-command-not-found-error
             (append command
                     (alist-get t
                                (progn
                                  (or
                                   (progn
                                     (and
                                      (memq
                                       (type-of context)
                                       cl-struct-doom-cli-context-tags)
                                      t))
                                   (signal 'wrong-type-argument
                                           (list 'doom-cli-context context)))
                                  (aref context 14))))))
    ((let
         ((seen
           '(t))
          runners)
       (let
           ((tail
             (doom-cli-find command
                            (progn
                              (or
                               (progn
                                 (and
                                  (memq
                                   (type-of cli)
                                   cl-struct-doom-cli-tags)
                                  t))
                               (signal 'wrong-type-argument
                                       (list 'doom-cli cli)))
                              (aref cli 2)))))
         (while tail
           (let
               ((cli
                 (car tail)))
             (setq runners
                   (cons
                    (cons
                     (doom-cli-get cli)
                     (doom-cli--bindings cli context seen))
                    runners))
             (setq tail
                   (cdr tail)))))
       (let
           ((tail
             (nreverse runners)))
         (while tail
           (let
               ((x15
                 (car tail)))
             (progn
               (ignore
                (consp x15))
               (let*
                   ((x16
                     (car-safe x15))
                    (x17
                     (cdr-safe x15)))
                 (let
                     ((cli x16)
                      (bindings x17))
                   (doom-cli-execute cli bindings))))
             (setq tail
                   (cdr tail)))))
       context))))
 ((context . #s(doom-cli-context
                (26384 50378 735038 513000)
                65238 0
                (88 . 27)
                nil nil "doom" nil nil
                ("doom" "doctor")
                nil
                ("doctor")
                (("--eval")
                 ("-E")
                 ("--strict-load")
                 ("--load")
                 ("-L")
                 ("--color")
                 ("--benchmark")
                 ("--profile")
                 ("--pager")
                 ("--emacsdir")
                 ("--doomdir")
                 ("--verbose")
                 ("-v")
                 ("--debug")
                 ("-D")
                 ("--force")
                 ("-!"))
                ((t)
                 (("doom" "doctor"))
                 (("doom")
                  "doctor"))
                #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (command "doom" "doctor")
  (cli . #s(doom-cli
            ("doom" "doctor")
            nil
            (("SUMMARY" . "Diagnoses common issues on your system.")
             ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
            nil nil nil nil
            (:benchmark nil :prefix
                        (doom)
                        :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
            (closure
                (t)
                (cli alist)
              (let nil
                (doom-print
                 (doom-print--format "The doctor will see you now...\n"))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking your Emacs version...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (cond
                     ((or
                       (> emacs-major-version 29)
                       (string-match-p ".\\([56]0\\|9[0-9]\\)$" emacs-version))
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Detected a development version of Emacs (%s)" emacs-version))
                               doom-doctor--warnings)))
                      (if
                          (> emacs-major-version 29)
                          (progn
                            (let
                                ((doom-print-level
                                  (or nil doom-print-level))
                                 (doom-print-indent
                                  (+
                                   (if t
                                       (or nil doom-print-indent-increment)
                                     0)
                                   doom-print-indent)))
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'p "This is the bleeding edge of Emacs. As it is constantly changed, Doom will not " "(officially) support it. If you've found a stable commit, great! But be " "cautious about updating Emacs too eagerly!\n")))))
                        (progn
                          (let
                              ((doom-print-level
                                (or nil doom-print-level))
                               (doom-print-indent
                                (+
                                 (if t
                                     (or nil doom-print-indent-increment)
                                   0)
                                 doom-print-indent)))
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'p "A .50, .60, or .9X appended to the version string indicates that this is a version " "of Emacs in between stable releases. These are not well supported.\n"))))))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Because development builds are prone to random breakage, there will be a greater " "burden on you to investigate and deal with issues. Please make extra sure that " "your issue is reproducible in 29.1 before reporting them to Doom's issue tracker!\n" "\n" "If this doesn't phase you, read the \"Why does Doom not support Emacs HEAD\" QnA " "in Doom's FAQ. It offers some advice for debugging and surviving issues on the " "bleeding edge. Failing that, 29.1 is highly recommended and will always be " "Doom's best supported version of Emacs."))))))
                     ((= emacs-major-version 27)
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Emacs 27 is supported, but consider upgrading to 28.1"))
                               doom-doctor--warnings)))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Emacs 28.1 is better supported, faster, and more stable. Plus, Doom will drop " "27.x support sometime late-2023.")))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for Doom's prerequisites...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (if
                        (not
                         (executable-find "git"))
                        (progn
                          (if inhibit-message nil
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))))
                          (setq doom-doctor--errors
                                (cons
                                 (doom-print--format
                                  (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                                 doom-doctor--errors)))
                      (let
                          ((saved-match-data
                            (match-data)))
                        (unwind-protect
                            (progn
                              (let*
                                  ((version
                                    (cdr
                                     (doom-call-process "git" "version")))
                                   (version
                                    (and
                                     (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                                     (match-string 1 version))))
                                (if version
                                    (if
                                        (version< version "2.23")
                                        (progn
                                          (progn
                                            (if inhibit-message nil
                                              (doom-print
                                               (doom-print--format
                                                (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))))
                                            (setq doom-doctor--errors
                                                  (cons
                                                   (doom-print--format
                                                    (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                                   doom-doctor--errors)))))
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))))
                                    (setq doom-doctor--warnings
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                           doom-doctor--warnings))))))
                          (set-match-data saved-match-data t))))
                    (if
                        (executable-find "rg")
                        nil
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))))
                        (setq doom-doctor--errors
                              (cons
                               (doom-print--format
                                (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                               doom-doctor--errors))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for Emacs config conflicts...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (if
                        (or
                         (file-equal-p doom-emacs-dir "~/.emacs.d")
                         (file-equal-p doom-emacs-dir "~/.config/emacs"))
                        nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Doom is installed in a non-standard location")))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "The standard locations are ~/.config/emacs or ~/.emacs.d. Emacs will fail " "to load Doom if it is not explicitly told where to look for it. In Emacs 29+, " "this is possible with the --init-directory option:\n\n" "  $ emacs --init-directory '"
                                               (abbreviate-file-name doom-emacs-dir)
                                               "'\n\n" "However, Emacs 27-28 users have no choice but to move Doom to a standard " "location.\n\n" "Chemacs users may ignore this warning, however."))))))
                    (let
                        (found?)
                      (let
                          ((tail
                            '("~/_emacs" "~/.emacs" "~/.emacs.el" "~/.emacs.d" "~/.config/emacs")))
                        (while tail
                          (let
                              ((file
                                (car tail)))
                            (if
                                (and
                                 (file-exists-p file)
                                 (not
                                  (file-equal-p file doom-emacs-dir)))
                                (progn
                                  (setq found? t)
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'warn "Found another Emacs config: %s (%s)")
                                    file
                                    (if
                                        (file-directory-p file)
                                        "directory" "file")))))
                            (setq tail
                                  (cdr tail)))))
                      (if found?
                          (progn
                            (progn
                              (let
                                  ((doom-print-level
                                    (or nil doom-print-level))
                                   (doom-print-indent
                                    (+
                                     (if t
                                         (or nil doom-print-indent-increment)
                                       0)
                                     doom-print-indent)))
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'p "Having multiple Emacs configs may prevent Doom from loading properly. Emacs " "will load the first it finds and ignore the rest. If Doom isn't starting up " "correctly (e.g. you get a vanilla splash screen), make sure that only one of " "these exist.\n\n" "Chemacs users may ignore this warning."))))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for missing Emacs features...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (if
                        (functionp 'json-serialize)
                        nil
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Emacs was not built with native JSON support"))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Emacs was not built with native JSON support"))
                               doom-doctor--warnings)))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option."))))))
                    (if
                        (featurep 'native-compile)
                        nil
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Emacs was not built with native compilation support"))))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Emacs was not built with native compilation support"))
                               doom-doctor--warnings)))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option."))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for private config conflicts...")))
                (progn
                  (let
                      ((doom-print-level
                        (or nil doom-print-level))
                       (doom-print-indent
                        (+
                         (if t
                             (or nil doom-print-indent-increment)
                           0)
                         doom-print-indent)))
                    (let*
                        ((xdg-dir
                          (concat
                           (or
                            (getenv "XDG_CONFIG_HOME")
                            "~/.config")
                           "/doom/"))
                         (doom-dir
                          (or
                           (getenv "DOOMDIR")
                           "~/.doom.d/"))
                         (dir
                          (if
                              (file-directory-p xdg-dir)
                              xdg-dir doom-dir)))
                      (if
                          (file-equal-p dir doom-emacs-dir)
                          (progn
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                                 (doom-print--class 'path dir))))
                            (progn
                              (let
                                  ((doom-print-level
                                    (or nil doom-print-level))
                                   (doom-print-indent
                                    (+
                                     (if t
                                         (or nil doom-print-indent-increment)
                                       0)
                                     doom-print-indent)))
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'p "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")))))))
                      (if
                          (and
                           (not
                            (file-equal-p xdg-dir doom-dir))
                           (file-directory-p xdg-dir)
                           (file-directory-p doom-dir))
                          (progn
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'warn "Detected two private configs, in %s and %s")
                              (abbreviate-file-name xdg-dir)
                              doom-dir))
                            (progn
                              (let
                                  ((doom-print-level
                                    (or nil doom-print-level))
                                   (doom-print-indent
                                    (+
                                     (if t
                                         (or nil doom-print-indent-increment)
                                       0)
                                     doom-print-indent)))
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'p "The second directory will be ignored, as it has lower precedence."))))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for common environmental issues...")))
                (if
                    (string-match-p "/fish$" shell-file-name)
                    (progn
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Detected Fish as your $SHELL")))
                      (progn
                        (let
                            ((doom-print-level
                              (or nil doom-print-level))
                             (doom-print-indent
                              (+
                               (if t
                                   (or nil doom-print-indent-increment)
                                 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'p "Fish (and possibly other non-POSIX shells) is known to inject garbage " "output into some of the child processes that Emacs spawns. Many Emacs " "packages/utilities will choke on this output, causing unpredictable issues. " "To get around this, either:\n\n" "  - Add the following to $DOOMDIR/config.el:\n\n" "    (setq shell-file-name (executable-find \"bash\"))\n\n" "  - Or change your default shell to a POSIX shell (like bash or zsh) " "    and explicitly configure your terminal apps to use the shell you " "    want.\n\n" "If you opt for option 1 and use one of Emacs' terminal emulators, you " "will also need to configure them to use Fish, e.g.\n\n" "  (setq-default vterm-shell (executable-find \"fish\"))\n\n" "  (setq-default explicit-shell-file-name (executable-find \"fish\"))\n")))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for stale elc files...")))
                (elc-check-dir doom-core-dir)
                (elc-check-dir doom-modules-dir)
                (elc-check-dir
                 (doom-path doom-local-dir "straight" straight-build-dir))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for problematic git global settings...")))
                (if
                    (executable-find "git")
                    (if
                        (= 0
                           (car
                            (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                        (progn
                          (progn
                            (if inhibit-message nil
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))))
                            (setq doom-doctor--warnings
                                  (cons
                                   (doom-print--format
                                    (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                                   doom-doctor--warnings)))
                          (progn
                            (let
                                ((doom-print-level
                                  (or nil doom-print-level))
                                 (doom-print-indent
                                  (+
                                   (if t
                                       (or nil doom-print-indent-increment)
                                     0)
                                   doom-print-indent)))
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'p "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")))))))
                  (progn
                    (if inhibit-message nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))))
                    (setq doom-doctor--errors
                          (cons
                           (doom-print--format
                            (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                           doom-doctor--errors))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking Doom Emacs...")))
                (condition-case ex
                    (progn
                      (let
                          ((doom-print-level
                            (or nil doom-print-level))
                           (doom-print-indent
                            (+
                             (if t
                                 (or nil doom-print-indent-increment)
                               0)
                             doom-print-indent)))
                        (require 'doom-start)
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'success "Initialized Doom Emacs %s")
                          doom-version))
                        (doom-print
                         (doom-print--format
                          (if
                              (hash-table-p doom-modules)
                              (doom-print--class 'success "Detected %d modules"
                                                 (hash-table-count doom-modules))
                            (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?"))))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'success "Detected %d packages")
                          (length doom-packages)))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'start "Checking Doom core for irregularities...")))
                        (progn
                          (let
                              ((doom-print-level
                                (or nil doom-print-level))
                               (doom-print-indent
                                (+
                                 (if t
                                     (or nil doom-print-indent-increment)
                                   0)
                                 doom-print-indent)))
                            (let
                                ((tail
                                  (list "savehist" "projectile.cache")))
                              (while tail
                                (let
                                    ((file
                                      (car tail)))
                                  (let*
                                      ((size
                                        (and t
                                             (condition-case nil
                                                 (progn
                                                   (doom-file-size file doom-cache-dir))
                                               (error nil)))))
                                    (if size
                                        (if
                                            (> size 1048576)
                                            (progn
                                              (progn
                                                (if inhibit-message nil
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                       (/ size 1024 1024.0)))))
                                                (setq doom-doctor--warnings
                                                      (cons
                                                       (doom-print--format
                                                        (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                           (/ size 1024 1024.0)))
                                                       doom-doctor--warnings)))
                                              (progn
                                                (let
                                                    ((doom-print-level
                                                      (or nil doom-print-level))
                                                     (doom-print-indent
                                                      (+
                                                       (if t
                                                           (or nil doom-print-indent-increment)
                                                         0)
                                                       doom-print-indent)))
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'p "Consider deleting it from your system (manually)")))))))
                                      nil))
                                  (setq tail
                                        (cdr tail)))))
                            (if
                                (condition-case nil
                                    (progn
                                      (executable-find doom-fd-executable))
                                  (error nil))
                                nil
                              (progn
                                (if inhibit-message nil
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))))
                                (setq doom-doctor--warnings
                                      (cons
                                       (doom-print--format
                                        (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                       doom-doctor--warnings))))
                            (require 'projectile)
                            (if
                                (projectile-project-root "~")
                                (progn
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'warn "Your $HOME is recognized as a project root"))))
                                    (setq doom-doctor--warnings
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                           doom-doctor--warnings)))
                                  (progn
                                    (let
                                        ((doom-print-level
                                          (or nil doom-print-level))
                                         (doom-print-indent
                                          (+
                                           (if t
                                               (or nil doom-print-indent-increment)
                                             0)
                                           doom-print-indent)))
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'p "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")))))))
                            (if
                                (and
                                 (file-equal-p doom-user-dir "~/.config/doom")
                                 (file-directory-p "~/.doom.d"))
                                (progn
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                                    (doom-print--class 'path doom-user-dir)))
                                  (progn
                                    (let
                                        ((doom-print-level
                                          (or nil doom-print-level))
                                         (doom-print-indent
                                          (+
                                           (if t
                                               (or nil doom-print-indent-increment)
                                             0)
                                           doom-print-indent)))
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'p "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")))))))
                            (if
                                (not
                                 (executable-find "fc-list"))
                                (progn
                                  (if inhibit-message nil
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))))
                                  (setq doom-doctor--warnings
                                        (cons
                                         (doom-print--format
                                          (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                         doom-doctor--warnings)))
                              (if
                                  (and
                                   (cond
                                    ((eq system-type 'gnu/linux)
                                     (let nil
                                       (concat
                                        (or
                                         (getenv "XDG_DATA_HOME")
                                         "~/.local/share")
                                        "/fonts/")))
                                    ((eq system-type 'darwin)
                                     (let nil "~/Library/Fonts/")))
                                   (require 'nerd-icons nil t))
                                  (progn
                                    (let
                                        ((temp-buffer
                                          (generate-new-buffer " *temp*" t)))
                                      (save-current-buffer
                                        (set-buffer temp-buffer)
                                        (unwind-protect
                                            (progn
                                              (let
                                                  ((errors 0))
                                                (let*
                                                    ((output
                                                      (doom-call-process "fc-list" "" "file"))
                                                     (status
                                                      (if output
                                                          (car-safe
                                                           (prog1 output
                                                             (setq output
                                                                   (cdr output))))
                                                        (signal 'wrong-number-of-arguments
                                                                (list
                                                                 '(status . output)
                                                                 (length output))))))
                                                  (if
                                                      (not
                                                       (= 0 status))
                                                      (doom-print
                                                       (doom-print--format
                                                        (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?")))
                                                    (insert
                                                     (cdr
                                                      (doom-call-process "fc-list" "" "file")))
                                                    (let
                                                        ((tail nerd-icons-font-names))
                                                      (while tail
                                                        (let
                                                            ((font
                                                              (car tail)))
                                                          (if
                                                              (save-excursion
                                                                (re-search-backward font nil t))
                                                              (doom-print
                                                               (doom-print--format
                                                                (doom-print--style 'green "Found font %s" font)))
                                                            (doom-print
                                                             (doom-print--format
                                                              (doom-print--class 'warn "%S font is not installed on your system")
                                                              font))
                                                            (setq errors
                                                                  (1+ errors)))
                                                          (setq tail
                                                                (cdr tail)))))
                                                    (if
                                                        (> errors 0)
                                                        (progn
                                                          (progn
                                                            (let
                                                                ((doom-print-level
                                                                  (or nil doom-print-level))
                                                                 (doom-print-indent
                                                                  (+
                                                                   (if t
                                                                       (or nil doom-print-indent-increment)
                                                                     0)
                                                                   doom-print-indent)))
                                                              (doom-print
                                                               (doom-print--format
                                                                (doom-print--class 'p "Some needed fonts are not properly installed on your system. To download and " "install them, run `M-x nerd-icons-install-fonts' from within Doom Emacs. " "However, on Windows this command will only download them; the fonts must " "be installed manually afterwards.")))))))))))
                                          (and
                                           (buffer-name temp-buffer)
                                           (kill-buffer temp-buffer))))))))))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'start "Checking for stale elc files in your DOOMDIR...")))
                        (if
                            (file-directory-p doom-user-dir)
                            (progn
                              (progn
                                (let
                                    ((doom-print-level
                                      (or nil doom-print-level))
                                     (doom-print-indent
                                      (+
                                       (if t
                                           (or nil doom-print-indent-increment)
                                         0)
                                       doom-print-indent)))
                                  (elc-check-dir doom-user-dir)))))
                        (if doom-modules
                            (progn
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'start "Checking your enabled modules...")))
                              (advice-add #'require :around #'doom-shut-up-a)
                              (let
                                  ((tail
                                    (doom-module-list)))
                                (while tail
                                  (let
                                      ((x54
                                        (car tail)))
                                    (progn
                                      (ignore
                                       (consp x54))
                                      (let*
                                          ((x55
                                            (car-safe x54))
                                           (x56
                                            (cdr-safe x54)))
                                        (let
                                            ((group x55)
                                             (name x56))
                                          (let
                                              ((doom-context doom-context))
                                            (let
                                                ((tail
                                                  (ensure-list 'doctor)))
                                              (while tail
                                                (let
                                                    ((context
                                                      (car tail)))
                                                  (doom-context-push context)
                                                  (setq tail
                                                        (cdr tail)))))
                                            (let
                                                (doom-local-errors doom-local-warnings)
                                              (let
                                                  (doom-doctor--errors doom-doctor--warnings)
                                                (condition-case ex
                                                    (let
                                                        ((doom-module-context
                                                          (doom-module-context
                                                           (cons group name))))
                                                      (if
                                                          (and
                                                           (not doom-inhibit-log)
                                                           (or
                                                            (not noninteractive)
                                                            (<= 2 doom-log-level)))
                                                          (progn
                                                            (doom--log 2 ":context:module: =%s" doom-module-context)))
                                                      (let
                                                          ((doctor-file
                                                            (doom-module-expand-path group name "doctor.el"))
                                                           (packages-file
                                                            (doom-module-expand-path group name doom-module-packages-file)))
                                                        (if packages-file
                                                            (progn
                                                              (let*
                                                                  ((doom-output-indent 6)
                                                                   (--cl-var--
                                                                    (let
                                                                        ((doom-context doom-context))
                                                                      (let
                                                                          ((tail
                                                                            (ensure-list 'packages)))
                                                                        (while tail
                                                                          (let
                                                                              ((context
                                                                                (car tail)))
                                                                            (doom-context-push context)
                                                                            (setq tail
                                                                                  (cdr tail)))))
                                                                      (let*
                                                                          (doom-packages doom-disabled-packages)
                                                                        (load packages-file 'noerror 'nomessage)
                                                                        (mapcar #'car doom-packages))))
                                                                   (name nil))
                                                                (while
                                                                    (consp --cl-var--)
                                                                  (setq name
                                                                        (car --cl-var--))
                                                                  (if
                                                                      (or
                                                                       (doom-package-get name :disable)
                                                                       (eval
                                                                        (doom-package-get name :ignore))
                                                                       (plist-member
                                                                        (doom-package-get name :recipe)
                                                                        :local-repo)
                                                                       (locate-library
                                                                        (symbol-name name))
                                                                       (doom-package-built-in-p name)
                                                                       (doom-package-installed-p name))
                                                                      (progn)
                                                                    (doom-print
                                                                     (doom-print--format
                                                                      (doom-print--class 'error "Missing emacs package: %S")
                                                                      name)))
                                                                  (setq --cl-var--
                                                                        (cdr --cl-var--)))
                                                                nil)))
                                                        (if doctor-file
                                                            (progn
                                                              (let
                                                                  ((inhibit-message t))
                                                                (load doctor-file 'noerror 'nomessage))))))
                                                  ((debug file-missing)
                                                   (progn
                                                     (if inhibit-message nil
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'error "%s"
                                                                            (error-message-string ex)))))
                                                     (setq doom-doctor--errors
                                                           (cons
                                                            (doom-print--format
                                                             (doom-print--class 'error "%s"
                                                                                (error-message-string ex)))
                                                            doom-doctor--errors))))
                                                  ((debug error)
                                                   (progn
                                                     (if inhibit-message nil
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'error "Syntax error: %s" ex))))
                                                     (setq doom-doctor--errors
                                                           (cons
                                                            (doom-print--format
                                                             (doom-print--class 'error "Syntax error: %s" ex))
                                                            doom-doctor--errors)))))
                                                (if
                                                    (or doom-doctor--errors doom-doctor--warnings)
                                                    (progn
                                                      (progn
                                                        (let
                                                            ((doom-print-level
                                                              (or nil doom-print-level))
                                                             (doom-print-indent
                                                              (+
                                                               (if t
                                                                   (or nil doom-print-indent-increment)
                                                                 0)
                                                               doom-print-indent)))
                                                          (doom-print
                                                           (doom-print--format
                                                            (doom-print--class 'start
                                                                               (doom-print--style 'bold "%s %s"))
                                                            group name))
                                                          (doom-print
                                                           (doom-print--format "%s"
                                                                               (string-join
                                                                                (append doom-doctor--errors doom-doctor--warnings)
                                                                                "\n")))))
                                                      (progn
                                                        (setq doom-local-errors doom-doctor--errors)
                                                        (setq doom-local-warnings doom-doctor--warnings)))))
                                              (setq doom-doctor--errors
                                                    (append doom-doctor--errors doom-local-errors))
                                              (setq doom-doctor--warnings
                                                    (append doom-doctor--warnings doom-local-warnings)))))))
                                    (setq tail
                                          (cdr tail)))))))))
                  ((debug error)
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                            (or
                                             (cdr-safe ex)
                                             (car ex))))))
                     (setq doom-doctor--warnings
                           (cons
                            (doom-print--format
                             (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                                (or
                                                 (cdr-safe ex)
                                                 (car ex))))
                            doom-doctor--warnings)))
                   (setq doom-modules nil)))
                (terpri)
                (let
                    ((tail
                      (list
                       (list doom-doctor--warnings "warning" 'yellow)
                       (list doom-doctor--errors "error" 'red))))
                  (while tail
                    (let
                        ((msg
                          (car tail)))
                      (if
                          (car msg)
                          (progn
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'color
                                                 (nth 2 msg)
                                                 (if
                                                     (cdr
                                                      (car msg))
                                                     "There are %d %ss!" "There is %d %s!")
                                                 (length
                                                  (car msg))
                                                 (nth 1 msg))))))
                      (setq tail
                            (cdr tail)))))
                (if
                    (or doom-doctor--errors doom-doctor--warnings)
                    nil
                  (doom-print
                   (doom-print--format
                    (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))))
                (exit! :pager? "+G")))))
  (prefix . "doom")))

;;;; 44
((doom-cli-context-execute #s(doom-cli-context
                              (26384 50378 735038 513000)
                              65238 0
                              (88 . 27)
                              nil nil "doom" nil nil
                              ("doom" "doctor")
                              nil
                              ("doctor")
                              (("--eval")
                               ("-E")
                               ("--strict-load")
                               ("--load")
                               ("-L")
                               ("--color")
                               ("--benchmark")
                               ("--profile")
                               ("--pager")
                               ("--emacsdir")
                               ("--doomdir")
                               ("--verbose")
                               ("-v")
                               ("--debug")
                               ("-D")
                               ("--force")
                               ("-!"))
                              ((t)
                               (("doom" "doctor"))
                               (("doom")
                                "doctor"))
                              #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
 ((context . #s(doom-cli-context
                (26384 50378 735038 513000)
                65238 0
                (88 . 27)
                nil nil "doom" nil nil
                ("doom" "doctor")
                nil
                ("doctor")
                (("--eval")
                 ("-E")
                 ("--strict-load")
                 ("--load")
                 ("-L")
                 ("--color")
                 ("--benchmark")
                 ("--profile")
                 ("--pager")
                 ("--emacsdir")
                 ("--doomdir")
                 ("--verbose")
                 ("-v")
                 ("--debug")
                 ("-D")
                 ("--force")
                 ("-!"))
                ((t)
                 (("doom" "doctor"))
                 (("doom")
                  "doctor"))
                #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))))

;;;; 45
((let
     ((result
       (doom-cli-context-execute context)))
   (run-hook-with-args 'doom-cli-after-run-functions context result))
 nil)

;;;; 46
((let*
     ((args
       (cons
        (if
            (getenv "__DOOMDUMP")
            :dump prefix)
        args))
      (context
       (doom-cli-context-restore
        (getenv "__DOOMCONTEXT")
        context))
      (context
       (doom-cli-context-parse args context)))
   (run-hook-with-args 'doom-cli-before-run-functions context)
   (let
       ((result
         (doom-cli-context-execute context)))
     (run-hook-with-args 'doom-cli-after-run-functions context result))
   0)
 ((prefix . "doom")
  (args
   ("doctor"))
  (args "doctor")
  (context . #s(doom-cli-context
                (26384 50378 735038 513000)
                65238 0
                (88 . 27)
                nil nil "doom" nil nil
                ("doom" "doctor")
                nil
                ("doctor")
                (("--eval")
                 ("-E")
                 ("--strict-load")
                 ("--load")
                 ("-L")
                 ("--color")
                 ("--benchmark")
                 ("--profile")
                 ("--pager")
                 ("--emacsdir")
                 ("--doomdir")
                 ("--verbose")
                 ("-v")
                 ("--debug")
                 ("-D")
                 ("--force")
                 ("-!"))
                ((t)
                 (("doom" "doctor"))
                 (("doom")
                  "doctor"))
                #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (write-logs-fn .
                 #[128 "\302\301\303\300\4\"\"\207"
                       [(#s(doom-cli-context
                            (26384 50378 735038 513000)
                            65238 0
                            (88 . 27)
                            nil nil "doom" nil nil
                            ("doom" "doctor")
                            nil
                            ("doctor")
                            (("--eval")
                             ("-E")
                             ("--strict-load")
                             ("--load")
                             ("-L")
                             ("--color")
                             ("--benchmark")
                             ("--profile")
                             ("--pager")
                             ("--emacsdir")
                             ("--doomdir")
                             ("--verbose")
                             ("-v")
                             ("--debug")
                             ("-D")
                             ("--force")
                             ("-!"))
                            ((t)
                             (("doom" "doctor"))
                             (("doom")
                              "doctor"))
                            #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
                        doom-cli--output-write-logs-h apply append]
                       6 "\n\n(fn &rest ARGS2)"])
  (show-benchmark-fn .
                     #[128 "\302\301\303\300\4\"\"\207"
                           [(#s(doom-cli-context
                                (26384 50378 735038 513000)
                                65238 0
                                (88 . 27)
                                nil nil "doom" nil nil
                                ("doom" "doctor")
                                nil
                                ("doctor")
                                (("--eval")
                                 ("-E")
                                 ("--strict-load")
                                 ("--load")
                                 ("-L")
                                 ("--color")
                                 ("--benchmark")
                                 ("--profile")
                                 ("--pager")
                                 ("--emacsdir")
                                 ("--doomdir")
                                 ("--verbose")
                                 ("-v")
                                 ("--debug")
                                 ("-D")
                                 ("--force")
                                 ("-!"))
                                ((t)
                                 (("doom" "doctor"))
                                 (("doom")
                                  "doctor"))
                                #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
                            doom-cli--output-benchmark-h apply append]
                           6 "\n\n(fn &rest ARGS2)"])
  (doomctxt . #s(doom-cli-context
                 (26384 50378 735038 513000)
                 65238 0
                 (88 . 27)
                 nil nil "doom" nil nil
                 ("doom" "doctor")
                 nil
                 ("doctor")
                 (("--eval")
                  ("-E")
                  ("--strict-load")
                  ("--load")
                  ("-L")
                  ("--color")
                  ("--benchmark")
                  ("--profile")
                  ("--pager")
                  ("--emacsdir")
                  ("--doomdir")
                  ("--verbose")
                  ("-v")
                  ("--debug")
                  ("-D")
                  ("--force")
                  ("-!"))
                 ((t)
                  (("doom" "doctor"))
                  (("doom")
                   "doctor"))
                 #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (streamspec
   (>= notice #<buffer  *doom-cli stdout*>)
   (t . #<buffer  *doom-cli stderr*>))
  (vnew closure
        ((streams
          (#[128 "\302\301\303\300\4\"\"\207"
                 [(0 2)
                  >= apply append]
                 6 "\n\n(fn &rest ARGS2)"]
           . #<buffer  *doom-cli stdout*>)
          (t . #<buffer  *doom-cli stderr*>))
         (old . #<subr message>)
         (level . debug))
        (message &rest args)
        (if message
            (progn
              (let
                  ((output
                    (apply #'doom-print--format message args)))
                (if
                    (<= doom-print--output-depth 1)
                    (doom-print output :level level :stream t)
                  (let
                      ((doom-print--output-depth
                        (1- doom-print--output-depth)))
                    (funcall old "%s" output)))
                (let
                    ((tail streams))
                  (while tail
                    (let
                        ((stream
                          (car tail)))
                      (if
                          (or
                           (eq
                            (car stream)
                            t)
                           (funcall
                            (car stream)))
                          (progn
                            (doom-print output :stream
                                        (cdr stream))))
                      (setq tail
                            (cdr tail))))))
              message)))
  (old . #<subr message>)
  (args "doom" "doctor")
  (context . #s(doom-cli-context
                (26384 50378 735038 513000)
                65238 0
                (88 . 27)
                nil nil "doom" nil nil
                ("doom" "doctor")
                nil
                ("doctor")
                (("--eval")
                 ("-E")
                 ("--strict-load")
                 ("--load")
                 ("-L")
                 ("--color")
                 ("--benchmark")
                 ("--profile")
                 ("--pager")
                 ("--emacsdir")
                 ("--doomdir")
                 ("--verbose")
                 ("-v")
                 ("--debug")
                 ("-D")
                 ("--force")
                 ("-!"))
                ((t)
                 (("doom" "doctor"))
                 (("doom")
                  "doctor"))
                #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (context . #s(doom-cli-context
                (26384 50378 735038 513000)
                65238 0
                (88 . 27)
                nil nil "doom" nil nil
                ("doom" "doctor")
                nil
                ("doctor")
                (("--eval")
                 ("-E")
                 ("--strict-load")
                 ("--load")
                 ("-L")
                 ("--color")
                 ("--benchmark")
                 ("--profile")
                 ("--pager")
                 ("--emacsdir")
                 ("--doomdir")
                 ("--verbose")
                 ("-v")
                 ("--debug")
                 ("-D")
                 ("--force")
                 ("-!"))
                ((t)
                 (("doom" "doctor"))
                 (("doom")
                  "doctor"))
                #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))))

;;;; 47
((condition-case e
     (let*
         ((args
           (cons
            (if
                (getenv "__DOOMDUMP")
                :dump prefix)
            args))
          (context
           (doom-cli-context-restore
            (getenv "__DOOMCONTEXT")
            context))
          (context
           (doom-cli-context-parse args context)))
       (run-hook-with-args 'doom-cli-before-run-functions context)
       (let
           ((result
             (doom-cli-context-execute context)))
         (run-hook-with-args 'doom-cli-after-run-functions context result))
       0)
   (doom-cli-wrong-number-of-arguments-error
    (let*
        ((val
          (cdr e)))
      (progn
        (ignore
         (consp val))
        (let*
            ((x27
              (car-safe val))
             (x28
              (cdr-safe val)))
          (progn
            (ignore
             (consp x28))
            (let*
                ((x29
                  (car-safe x28))
                 (x30
                  (cdr-safe x28)))
              (progn
                (ignore
                 (consp x30))
                (let*
                    ((x31
                      (car-safe x30))
                     (x32
                      (cdr-safe x30)))
                  (progn
                    (ignore
                     (consp x32))
                    (let*
                        ((x33
                          (car-safe x32))
                         (x34
                          (cdr-safe x32)))
                      (progn
                        (ignore
                         (consp x34))
                        (let*
                            ((x35
                              (car-safe x34))
                             (x36
                              (cdr-safe x34)))
                          (progn
                            (ignore
                             (null x36))
                            (let
                                ((command x27)
                                 (flag x29)
                                 (args x31)
                                 (min x33)
                                 (max x35))
                              (progn
                                (doom-print
                                 (doom-print--format
                                  (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
                                  (or flag
                                      (doom-cli-command-string
                                       (if
                                           (keywordp
                                            (car command))
                                           command
                                         (cdr command))))
                                  (if
                                      (or
                                       (= min max)
                                       (= max most-positive-fixnum))
                                      min
                                    (format "%d-%d" min max))
                                  (if
                                      (or
                                       (= min 0)
                                       (> min 1))
                                      "s" "")
                                  (length args)))
                                (doom-cli-call
                                 (cons ':help
                                       (cons "--synopsis"
                                             (cons "--postamble"
                                                   (cdr
                                                    (doom-cli--command context)))))
                                 context e)))))))))))))))
    5)
   (doom-cli-unrecognized-option-error
    (doom-print
     (doom-print--format
      (doom-print--style 'red "Error: unknown option %s")
      (car
       (cdr e))))
    (doom-cli-call
     (cons ':help
           (cons "--synopsis"
                 (cons "--postamble"
                       (cdr
                        (doom-cli--command context)))))
     context e)
    5)
   (doom-cli-invalid-option-error
    (let*
        ((val
          (cdr e)))
      (progn
        (ignore
         (consp val))
        (let*
            ((x37
              (car-safe val))
             (x38
              (cdr-safe val)))
          (progn
            (ignore
             (consp x38))
            (let*
                ((x39
                  (car-safe x38))
                 (x40
                  (cdr-safe x38)))
              (progn
                (ignore
                 (consp x40))
                (let*
                    ((x41
                      (car-safe x40))
                     (x42
                      (cdr-safe x40)))
                  (progn
                    (ignore
                     (consp x42))
                    (let*
                        ((x43
                          (car-safe x42))
                         (x44
                          (cdr-safe x42)))
                      (progn
                        (ignore
                         (null x44))
                        (let
                            ((types x37)
                             (option x39)
                             (value x41)
                             (errors x43))
                          (progn
                            (doom-print
                             (doom-print--format
                              (doom-print--style 'red "Error: %s received invalid value %S")
                              (string-join
                               (progn
                                 (or
                                  (progn
                                    (and
                                     (memq
                                      (type-of option)
                                      cl-struct-doom-cli-option-tags)
                                     t))
                                  (signal 'wrong-type-argument
                                          (list 'doom-cli-option option)))
                                 (aref option 5))
                               "/")
                              value))
                            (doom-print
                             (doom-print--format
                              (doom-print--style 'bold "\nValidation errors:")))
                            (let
                                ((tail errors))
                              (while tail
                                (let
                                    ((err
                                      (car tail)))
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'item "%s."
                                                       (doom-print--class 'fill err))))
                                  (setq tail
                                        (cdr tail)))))))))))))))))
    (doom-cli-call
     (cons ':help
           (cons "--postamble"
                 (cdr
                  (doom-cli--command context))))
     context e)
    5)
   (doom-cli-command-not-found-error
    (let*
        ((command
          (cdr e))
         (cli
          (doom-cli-get command)))
      (cond
       ((null cli)
        (doom-print
         (doom-print--format
          (doom-print--style 'red "Error: unrecognized command '%s'")
          (doom-cli-command-string
           (or
            (cdr command)
            command))))
        (doom-cli-call
         (cons ':help
               (cons "--similar"
                     (cons "--postamble"
                           (cdr command))))
         context e))
       ((null
         (progn
           (or
            (progn
              (and
               (memq
                (type-of cli)
                cl-struct-doom-cli-tags)
               t))
            (signal 'wrong-type-argument
                    (list 'doom-cli cli)))
           (aref cli 9)))
        (doom-print
         (doom-print--format
          (doom-print--style 'red "Error: a subcommand is required")))
        (doom-cli-call
         (cons ':help
               (cons "--subcommands"
                     (cons "--postamble"
                           (cdr command))))
         context e))))
    4)
   (doom-cli-invalid-prefix-error
    (let
        ((prefix
          (car
           (cdr e))))
      (doom-print
       (doom-print--format
        (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
        prefix))
      (let*
          ((suggested
            (and t
                 (let*
                     ((--cl-var-- t)
                      --cl-var--)
                   (catch '--cl-block---cl-finish----
                     (maphash
                      #'(lambda
                          (--cl-var-- cli)
                          (or
                           (if
                               (progn
                                 (or
                                  (progn
                                    (and
                                     (memq
                                      (type-of cli)
                                      cl-struct-doom-cli-tags)
                                     t))
                                  (signal 'wrong-type-argument
                                          (list 'doom-cli cli)))
                                 (aref cli 2))
                               t
                             (progn
                               (setq --cl-var--
                                     (car
                                      (progn
                                        (or
                                         (progn
                                           (and
                                            (memq
                                             (type-of cli)
                                             cl-struct-doom-cli-tags)
                                            t))
                                         (signal 'wrong-type-argument
                                                 (list 'doom-cli cli)))
                                        (aref cli 1))))
                               (setq --cl-var-- nil)))
                           (throw '--cl-block---cl-finish---- nil)))
                      doom-cli--table))
                   --cl-var--))))
        (if suggested
            (doom-print
             (doom-print--format "Did you mean %S?" suggested))
          (doom-print
           (doom-print--format "There are no commands defined under %S." prefix)))))
    4)
   (user-error
    (doom-print
     (doom-print--format
      (doom-print--style 'red "Error: %s")
      (car
       (cdr e))))
    (doom-print
     (doom-print--format "\nAborting..."))
    3))
 nil)

;;;; 48
((catch 'exit
   (condition-case e
       (let*
           ((args
             (cons
              (if
                  (getenv "__DOOMDUMP")
                  :dump prefix)
              args))
            (context
             (doom-cli-context-restore
              (getenv "__DOOMCONTEXT")
              context))
            (context
             (doom-cli-context-parse args context)))
         (run-hook-with-args 'doom-cli-before-run-functions context)
         (let
             ((result
               (doom-cli-context-execute context)))
           (run-hook-with-args 'doom-cli-after-run-functions context result))
         0)
     (doom-cli-wrong-number-of-arguments-error
      (let*
          ((val
            (cdr e)))
        (progn
          (ignore
           (consp val))
          (let*
              ((x27
                (car-safe val))
               (x28
                (cdr-safe val)))
            (progn
              (ignore
               (consp x28))
              (let*
                  ((x29
                    (car-safe x28))
                   (x30
                    (cdr-safe x28)))
                (progn
                  (ignore
                   (consp x30))
                  (let*
                      ((x31
                        (car-safe x30))
                       (x32
                        (cdr-safe x30)))
                    (progn
                      (ignore
                       (consp x32))
                      (let*
                          ((x33
                            (car-safe x32))
                           (x34
                            (cdr-safe x32)))
                        (progn
                          (ignore
                           (consp x34))
                          (let*
                              ((x35
                                (car-safe x34))
                               (x36
                                (cdr-safe x34)))
                            (progn
                              (ignore
                               (null x36))
                              (let
                                  ((command x27)
                                   (flag x29)
                                   (args x31)
                                   (min x33)
                                   (max x35))
                                (progn
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
                                    (or flag
                                        (doom-cli-command-string
                                         (if
                                             (keywordp
                                              (car command))
                                             command
                                           (cdr command))))
                                    (if
                                        (or
                                         (= min max)
                                         (= max most-positive-fixnum))
                                        min
                                      (format "%d-%d" min max))
                                    (if
                                        (or
                                         (= min 0)
                                         (> min 1))
                                        "s" "")
                                    (length args)))
                                  (doom-cli-call
                                   (cons ':help
                                         (cons "--synopsis"
                                               (cons "--postamble"
                                                     (cdr
                                                      (doom-cli--command context)))))
                                   context e)))))))))))))))
      5)
     (doom-cli-unrecognized-option-error
      (doom-print
       (doom-print--format
        (doom-print--style 'red "Error: unknown option %s")
        (car
         (cdr e))))
      (doom-cli-call
       (cons ':help
             (cons "--synopsis"
                   (cons "--postamble"
                         (cdr
                          (doom-cli--command context)))))
       context e)
      5)
     (doom-cli-invalid-option-error
      (let*
          ((val
            (cdr e)))
        (progn
          (ignore
           (consp val))
          (let*
              ((x37
                (car-safe val))
               (x38
                (cdr-safe val)))
            (progn
              (ignore
               (consp x38))
              (let*
                  ((x39
                    (car-safe x38))
                   (x40
                    (cdr-safe x38)))
                (progn
                  (ignore
                   (consp x40))
                  (let*
                      ((x41
                        (car-safe x40))
                       (x42
                        (cdr-safe x40)))
                    (progn
                      (ignore
                       (consp x42))
                      (let*
                          ((x43
                            (car-safe x42))
                           (x44
                            (cdr-safe x42)))
                        (progn
                          (ignore
                           (null x44))
                          (let
                              ((types x37)
                               (option x39)
                               (value x41)
                               (errors x43))
                            (progn
                              (doom-print
                               (doom-print--format
                                (doom-print--style 'red "Error: %s received invalid value %S")
                                (string-join
                                 (progn
                                   (or
                                    (progn
                                      (and
                                       (memq
                                        (type-of option)
                                        cl-struct-doom-cli-option-tags)
                                       t))
                                    (signal 'wrong-type-argument
                                            (list 'doom-cli-option option)))
                                   (aref option 5))
                                 "/")
                                value))
                              (doom-print
                               (doom-print--format
                                (doom-print--style 'bold "\nValidation errors:")))
                              (let
                                  ((tail errors))
                                (while tail
                                  (let
                                      ((err
                                        (car tail)))
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'item "%s."
                                                         (doom-print--class 'fill err))))
                                    (setq tail
                                          (cdr tail)))))))))))))))))
      (doom-cli-call
       (cons ':help
             (cons "--postamble"
                   (cdr
                    (doom-cli--command context))))
       context e)
      5)
     (doom-cli-command-not-found-error
      (let*
          ((command
            (cdr e))
           (cli
            (doom-cli-get command)))
        (cond
         ((null cli)
          (doom-print
           (doom-print--format
            (doom-print--style 'red "Error: unrecognized command '%s'")
            (doom-cli-command-string
             (or
              (cdr command)
              command))))
          (doom-cli-call
           (cons ':help
                 (cons "--similar"
                       (cons "--postamble"
                             (cdr command))))
           context e))
         ((null
           (progn
             (or
              (progn
                (and
                 (memq
                  (type-of cli)
                  cl-struct-doom-cli-tags)
                 t))
              (signal 'wrong-type-argument
                      (list 'doom-cli cli)))
             (aref cli 9)))
          (doom-print
           (doom-print--format
            (doom-print--style 'red "Error: a subcommand is required")))
          (doom-cli-call
           (cons ':help
                 (cons "--subcommands"
                       (cons "--postamble"
                             (cdr command))))
           context e))))
      4)
     (doom-cli-invalid-prefix-error
      (let
          ((prefix
            (car
             (cdr e))))
        (doom-print
         (doom-print--format
          (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
          prefix))
        (let*
            ((suggested
              (and t
                   (let*
                       ((--cl-var-- t)
                        --cl-var--)
                     (catch '--cl-block---cl-finish----
                       (maphash
                        #'(lambda
                            (--cl-var-- cli)
                            (or
                             (if
                                 (progn
                                   (or
                                    (progn
                                      (and
                                       (memq
                                        (type-of cli)
                                        cl-struct-doom-cli-tags)
                                       t))
                                    (signal 'wrong-type-argument
                                            (list 'doom-cli cli)))
                                   (aref cli 2))
                                 t
                               (progn
                                 (setq --cl-var--
                                       (car
                                        (progn
                                          (or
                                           (progn
                                             (and
                                              (memq
                                               (type-of cli)
                                               cl-struct-doom-cli-tags)
                                              t))
                                           (signal 'wrong-type-argument
                                                   (list 'doom-cli cli)))
                                          (aref cli 1))))
                                 (setq --cl-var-- nil)))
                             (throw '--cl-block---cl-finish---- nil)))
                        doom-cli--table))
                     --cl-var--))))
          (if suggested
              (doom-print
               (doom-print--format "Did you mean %S?" suggested))
            (doom-print
             (doom-print--format "There are no commands defined under %S." prefix)))))
      4)
     (user-error
      (doom-print
       (doom-print--format
        (doom-print--style 'red "Error: %s")
        (car
         (cdr e))))
      (doom-print
       (doom-print--format "\nAborting..."))
      3)))
 nil)

;;;; 49
((doom-cli--exit
  (catch 'exit
    (condition-case e
        (let*
            ((args
              (cons
               (if
                   (getenv "__DOOMDUMP")
                   :dump prefix)
               args))
             (context
              (doom-cli-context-restore
               (getenv "__DOOMCONTEXT")
               context))
             (context
              (doom-cli-context-parse args context)))
          (run-hook-with-args 'doom-cli-before-run-functions context)
          (let
              ((result
                (doom-cli-context-execute context)))
            (run-hook-with-args 'doom-cli-after-run-functions context result))
          0)
      (doom-cli-wrong-number-of-arguments-error
       (let*
           ((val
             (cdr e)))
         (progn
           (ignore
            (consp val))
           (let*
               ((x27
                 (car-safe val))
                (x28
                 (cdr-safe val)))
             (progn
               (ignore
                (consp x28))
               (let*
                   ((x29
                     (car-safe x28))
                    (x30
                     (cdr-safe x28)))
                 (progn
                   (ignore
                    (consp x30))
                   (let*
                       ((x31
                         (car-safe x30))
                        (x32
                         (cdr-safe x30)))
                     (progn
                       (ignore
                        (consp x32))
                       (let*
                           ((x33
                             (car-safe x32))
                            (x34
                             (cdr-safe x32)))
                         (progn
                           (ignore
                            (consp x34))
                           (let*
                               ((x35
                                 (car-safe x34))
                                (x36
                                 (cdr-safe x34)))
                             (progn
                               (ignore
                                (null x36))
                               (let
                                   ((command x27)
                                    (flag x29)
                                    (args x31)
                                    (min x33)
                                    (max x35))
                                 (progn
                                   (doom-print
                                    (doom-print--format
                                     (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
                                     (or flag
                                         (doom-cli-command-string
                                          (if
                                              (keywordp
                                               (car command))
                                              command
                                            (cdr command))))
                                     (if
                                         (or
                                          (= min max)
                                          (= max most-positive-fixnum))
                                         min
                                       (format "%d-%d" min max))
                                     (if
                                         (or
                                          (= min 0)
                                          (> min 1))
                                         "s" "")
                                     (length args)))
                                   (doom-cli-call
                                    (cons ':help
                                          (cons "--synopsis"
                                                (cons "--postamble"
                                                      (cdr
                                                       (doom-cli--command context)))))
                                    context e)))))))))))))))
       5)
      (doom-cli-unrecognized-option-error
       (doom-print
        (doom-print--format
         (doom-print--style 'red "Error: unknown option %s")
         (car
          (cdr e))))
       (doom-cli-call
        (cons ':help
              (cons "--synopsis"
                    (cons "--postamble"
                          (cdr
                           (doom-cli--command context)))))
        context e)
       5)
      (doom-cli-invalid-option-error
       (let*
           ((val
             (cdr e)))
         (progn
           (ignore
            (consp val))
           (let*
               ((x37
                 (car-safe val))
                (x38
                 (cdr-safe val)))
             (progn
               (ignore
                (consp x38))
               (let*
                   ((x39
                     (car-safe x38))
                    (x40
                     (cdr-safe x38)))
                 (progn
                   (ignore
                    (consp x40))
                   (let*
                       ((x41
                         (car-safe x40))
                        (x42
                         (cdr-safe x40)))
                     (progn
                       (ignore
                        (consp x42))
                       (let*
                           ((x43
                             (car-safe x42))
                            (x44
                             (cdr-safe x42)))
                         (progn
                           (ignore
                            (null x44))
                           (let
                               ((types x37)
                                (option x39)
                                (value x41)
                                (errors x43))
                             (progn
                               (doom-print
                                (doom-print--format
                                 (doom-print--style 'red "Error: %s received invalid value %S")
                                 (string-join
                                  (progn
                                    (or
                                     (progn
                                       (and
                                        (memq
                                         (type-of option)
                                         cl-struct-doom-cli-option-tags)
                                        t))
                                     (signal 'wrong-type-argument
                                             (list 'doom-cli-option option)))
                                    (aref option 5))
                                  "/")
                                 value))
                               (doom-print
                                (doom-print--format
                                 (doom-print--style 'bold "\nValidation errors:")))
                               (let
                                   ((tail errors))
                                 (while tail
                                   (let
                                       ((err
                                         (car tail)))
                                     (doom-print
                                      (doom-print--format
                                       (doom-print--class 'item "%s."
                                                          (doom-print--class 'fill err))))
                                     (setq tail
                                           (cdr tail)))))))))))))))))
       (doom-cli-call
        (cons ':help
              (cons "--postamble"
                    (cdr
                     (doom-cli--command context))))
        context e)
       5)
      (doom-cli-command-not-found-error
       (let*
           ((command
             (cdr e))
            (cli
             (doom-cli-get command)))
         (cond
          ((null cli)
           (doom-print
            (doom-print--format
             (doom-print--style 'red "Error: unrecognized command '%s'")
             (doom-cli-command-string
              (or
               (cdr command)
               command))))
           (doom-cli-call
            (cons ':help
                  (cons "--similar"
                        (cons "--postamble"
                              (cdr command))))
            context e))
          ((null
            (progn
              (or
               (progn
                 (and
                  (memq
                   (type-of cli)
                   cl-struct-doom-cli-tags)
                  t))
               (signal 'wrong-type-argument
                       (list 'doom-cli cli)))
              (aref cli 9)))
           (doom-print
            (doom-print--format
             (doom-print--style 'red "Error: a subcommand is required")))
           (doom-cli-call
            (cons ':help
                  (cons "--subcommands"
                        (cons "--postamble"
                              (cdr command))))
            context e))))
       4)
      (doom-cli-invalid-prefix-error
       (let
           ((prefix
             (car
              (cdr e))))
         (doom-print
          (doom-print--format
           (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
           prefix))
         (let*
             ((suggested
               (and t
                    (let*
                        ((--cl-var-- t)
                         --cl-var--)
                      (catch '--cl-block---cl-finish----
                        (maphash
                         #'(lambda
                             (--cl-var-- cli)
                             (or
                              (if
                                  (progn
                                    (or
                                     (progn
                                       (and
                                        (memq
                                         (type-of cli)
                                         cl-struct-doom-cli-tags)
                                        t))
                                     (signal 'wrong-type-argument
                                             (list 'doom-cli cli)))
                                    (aref cli 2))
                                  t
                                (progn
                                  (setq --cl-var--
                                        (car
                                         (progn
                                           (or
                                            (progn
                                              (and
                                               (memq
                                                (type-of cli)
                                                cl-struct-doom-cli-tags)
                                               t))
                                            (signal 'wrong-type-argument
                                                    (list 'doom-cli cli)))
                                           (aref cli 1))))
                                  (setq --cl-var-- nil)))
                              (throw '--cl-block---cl-finish---- nil)))
                         doom-cli--table))
                      --cl-var--))))
           (if suggested
               (doom-print
                (doom-print--format "Did you mean %S?" suggested))
             (doom-print
              (doom-print--format "There are no commands defined under %S." prefix)))))
       4)
      (user-error
       (doom-print
        (doom-print--format
         (doom-print--style 'red "Error: %s")
         (car
          (cdr e))))
       (doom-print
        (doom-print--format "\nAborting..."))
       3)))
  context)
 nil)

;;;; 50
((progn
   (if
       (and
        (not doom-inhibit-log)
        (or
         (not noninteractive)
         (<= 2 doom-log-level)))
       (progn
         (doom--log 2 "run!: %s %s" prefix
                    (combine-and-quote-strings args))))
   (add-hook 'kill-emacs-hook show-benchmark-fn 94)
   (add-hook 'kill-emacs-hook write-logs-fn 95)
   (if
       (doom-cli-context-pipe-p context :out t)
       (progn
         (setq doom-print-backend nil)))
   (if
       (doom-cli-context-pipe-p context :in)
       (progn
         (save-current-buffer
           (set-buffer
            (progn
              (or
               (progn
                 (and
                  (memq
                   (type-of context)
                   cl-struct-doom-cli-context-tags)
                  t))
               (signal 'wrong-type-argument
                       (list 'doom-cli-context context)))
              (aref context 15)))
           (while
               (let*
                   ((in
                     (and t
                          (condition-case nil
                              (progn
                                (read-from-minibuffer ""))
                            (error nil)))))
                 (if in
                     (insert in "\n")
                   (condition-case nil
                       (progn
                         (delete-char -1))
                     (error nil))))))))
   (doom-cli--exit
    (catch 'exit
      (condition-case e
          (let*
              ((args
                (cons
                 (if
                     (getenv "__DOOMDUMP")
                     :dump prefix)
                 args))
               (context
                (doom-cli-context-restore
                 (getenv "__DOOMCONTEXT")
                 context))
               (context
                (doom-cli-context-parse args context)))
            (run-hook-with-args 'doom-cli-before-run-functions context)
            (let
                ((result
                  (doom-cli-context-execute context)))
              (run-hook-with-args 'doom-cli-after-run-functions context result))
            0)
        (doom-cli-wrong-number-of-arguments-error
         (let*
             ((val
               (cdr e)))
           (progn
             (ignore
              (consp val))
             (let*
                 ((x27
                   (car-safe val))
                  (x28
                   (cdr-safe val)))
               (progn
                 (ignore
                  (consp x28))
                 (let*
                     ((x29
                       (car-safe x28))
                      (x30
                       (cdr-safe x28)))
                   (progn
                     (ignore
                      (consp x30))
                     (let*
                         ((x31
                           (car-safe x30))
                          (x32
                           (cdr-safe x30)))
                       (progn
                         (ignore
                          (consp x32))
                         (let*
                             ((x33
                               (car-safe x32))
                              (x34
                               (cdr-safe x32)))
                           (progn
                             (ignore
                              (consp x34))
                             (let*
                                 ((x35
                                   (car-safe x34))
                                  (x36
                                   (cdr-safe x34)))
                               (progn
                                 (ignore
                                  (null x36))
                                 (let
                                     ((command x27)
                                      (flag x29)
                                      (args x31)
                                      (min x33)
                                      (max x35))
                                   (progn
                                     (doom-print
                                      (doom-print--format
                                       (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
                                       (or flag
                                           (doom-cli-command-string
                                            (if
                                                (keywordp
                                                 (car command))
                                                command
                                              (cdr command))))
                                       (if
                                           (or
                                            (= min max)
                                            (= max most-positive-fixnum))
                                           min
                                         (format "%d-%d" min max))
                                       (if
                                           (or
                                            (= min 0)
                                            (> min 1))
                                           "s" "")
                                       (length args)))
                                     (doom-cli-call
                                      (cons ':help
                                            (cons "--synopsis"
                                                  (cons "--postamble"
                                                        (cdr
                                                         (doom-cli--command context)))))
                                      context e)))))))))))))))
         5)
        (doom-cli-unrecognized-option-error
         (doom-print
          (doom-print--format
           (doom-print--style 'red "Error: unknown option %s")
           (car
            (cdr e))))
         (doom-cli-call
          (cons ':help
                (cons "--synopsis"
                      (cons "--postamble"
                            (cdr
                             (doom-cli--command context)))))
          context e)
         5)
        (doom-cli-invalid-option-error
         (let*
             ((val
               (cdr e)))
           (progn
             (ignore
              (consp val))
             (let*
                 ((x37
                   (car-safe val))
                  (x38
                   (cdr-safe val)))
               (progn
                 (ignore
                  (consp x38))
                 (let*
                     ((x39
                       (car-safe x38))
                      (x40
                       (cdr-safe x38)))
                   (progn
                     (ignore
                      (consp x40))
                     (let*
                         ((x41
                           (car-safe x40))
                          (x42
                           (cdr-safe x40)))
                       (progn
                         (ignore
                          (consp x42))
                         (let*
                             ((x43
                               (car-safe x42))
                              (x44
                               (cdr-safe x42)))
                           (progn
                             (ignore
                              (null x44))
                             (let
                                 ((types x37)
                                  (option x39)
                                  (value x41)
                                  (errors x43))
                               (progn
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--style 'red "Error: %s received invalid value %S")
                                   (string-join
                                    (progn
                                      (or
                                       (progn
                                         (and
                                          (memq
                                           (type-of option)
                                           cl-struct-doom-cli-option-tags)
                                          t))
                                       (signal 'wrong-type-argument
                                               (list 'doom-cli-option option)))
                                      (aref option 5))
                                    "/")
                                   value))
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--style 'bold "\nValidation errors:")))
                                 (let
                                     ((tail errors))
                                   (while tail
                                     (let
                                         ((err
                                           (car tail)))
                                       (doom-print
                                        (doom-print--format
                                         (doom-print--class 'item "%s."
                                                            (doom-print--class 'fill err))))
                                       (setq tail
                                             (cdr tail)))))))))))))))))
         (doom-cli-call
          (cons ':help
                (cons "--postamble"
                      (cdr
                       (doom-cli--command context))))
          context e)
         5)
        (doom-cli-command-not-found-error
         (let*
             ((command
               (cdr e))
              (cli
               (doom-cli-get command)))
           (cond
            ((null cli)
             (doom-print
              (doom-print--format
               (doom-print--style 'red "Error: unrecognized command '%s'")
               (doom-cli-command-string
                (or
                 (cdr command)
                 command))))
             (doom-cli-call
              (cons ':help
                    (cons "--similar"
                          (cons "--postamble"
                                (cdr command))))
              context e))
            ((null
              (progn
                (or
                 (progn
                   (and
                    (memq
                     (type-of cli)
                     cl-struct-doom-cli-tags)
                    t))
                 (signal 'wrong-type-argument
                         (list 'doom-cli cli)))
                (aref cli 9)))
             (doom-print
              (doom-print--format
               (doom-print--style 'red "Error: a subcommand is required")))
             (doom-cli-call
              (cons ':help
                    (cons "--subcommands"
                          (cons "--postamble"
                                (cdr command))))
              context e))))
         4)
        (doom-cli-invalid-prefix-error
         (let
             ((prefix
               (car
                (cdr e))))
           (doom-print
            (doom-print--format
             (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
             prefix))
           (let*
               ((suggested
                 (and t
                      (let*
                          ((--cl-var-- t)
                           --cl-var--)
                        (catch '--cl-block---cl-finish----
                          (maphash
                           #'(lambda
                               (--cl-var-- cli)
                               (or
                                (if
                                    (progn
                                      (or
                                       (progn
                                         (and
                                          (memq
                                           (type-of cli)
                                           cl-struct-doom-cli-tags)
                                          t))
                                       (signal 'wrong-type-argument
                                               (list 'doom-cli cli)))
                                      (aref cli 2))
                                    t
                                  (progn
                                    (setq --cl-var--
                                          (car
                                           (progn
                                             (or
                                              (progn
                                                (and
                                                 (memq
                                                  (type-of cli)
                                                  cl-struct-doom-cli-tags)
                                                 t))
                                              (signal 'wrong-type-argument
                                                      (list 'doom-cli cli)))
                                             (aref cli 1))))
                                    (setq --cl-var-- nil)))
                                (throw '--cl-block---cl-finish---- nil)))
                           doom-cli--table))
                        --cl-var--))))
             (if suggested
                 (doom-print
                  (doom-print--format "Did you mean %S?" suggested))
               (doom-print
                (doom-print--format "There are no commands defined under %S." prefix)))))
         4)
        (user-error
         (doom-print
          (doom-print--format
           (doom-print--style 'red "Error: %s")
           (car
            (cdr e))))
         (doom-print
          (doom-print--format "\nAborting..."))
         3)))
    context))
 nil)

;;;; 51
((let
     ((doom-print-stream standard-output))
   (progn
     (if
         (and
          (not doom-inhibit-log)
          (or
           (not noninteractive)
           (<= 2 doom-log-level)))
         (progn
           (doom--log 2 "run!: %s %s" prefix
                      (combine-and-quote-strings args))))
     (add-hook 'kill-emacs-hook show-benchmark-fn 94)
     (add-hook 'kill-emacs-hook write-logs-fn 95)
     (if
         (doom-cli-context-pipe-p context :out t)
         (progn
           (setq doom-print-backend nil)))
     (if
         (doom-cli-context-pipe-p context :in)
         (progn
           (save-current-buffer
             (set-buffer
              (progn
                (or
                 (progn
                   (and
                    (memq
                     (type-of context)
                     cl-struct-doom-cli-context-tags)
                    t))
                 (signal 'wrong-type-argument
                         (list 'doom-cli-context context)))
                (aref context 15)))
             (while
                 (let*
                     ((in
                       (and t
                            (condition-case nil
                                (progn
                                  (read-from-minibuffer ""))
                              (error nil)))))
                   (if in
                       (insert in "\n")
                     (condition-case nil
                         (progn
                           (delete-char -1))
                       (error nil))))))))
     (doom-cli--exit
      (catch 'exit
        (condition-case e
            (let*
                ((args
                  (cons
                   (if
                       (getenv "__DOOMDUMP")
                       :dump prefix)
                   args))
                 (context
                  (doom-cli-context-restore
                   (getenv "__DOOMCONTEXT")
                   context))
                 (context
                  (doom-cli-context-parse args context)))
              (run-hook-with-args 'doom-cli-before-run-functions context)
              (let
                  ((result
                    (doom-cli-context-execute context)))
                (run-hook-with-args 'doom-cli-after-run-functions context result))
              0)
          (doom-cli-wrong-number-of-arguments-error
           (let*
               ((val
                 (cdr e)))
             (progn
               (ignore
                (consp val))
               (let*
                   ((x27
                     (car-safe val))
                    (x28
                     (cdr-safe val)))
                 (progn
                   (ignore
                    (consp x28))
                   (let*
                       ((x29
                         (car-safe x28))
                        (x30
                         (cdr-safe x28)))
                     (progn
                       (ignore
                        (consp x30))
                       (let*
                           ((x31
                             (car-safe x30))
                            (x32
                             (cdr-safe x30)))
                         (progn
                           (ignore
                            (consp x32))
                           (let*
                               ((x33
                                 (car-safe x32))
                                (x34
                                 (cdr-safe x32)))
                             (progn
                               (ignore
                                (consp x34))
                               (let*
                                   ((x35
                                     (car-safe x34))
                                    (x36
                                     (cdr-safe x34)))
                                 (progn
                                   (ignore
                                    (null x36))
                                   (let
                                       ((command x27)
                                        (flag x29)
                                        (args x31)
                                        (min x33)
                                        (max x35))
                                     (progn
                                       (doom-print
                                        (doom-print--format
                                         (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
                                         (or flag
                                             (doom-cli-command-string
                                              (if
                                                  (keywordp
                                                   (car command))
                                                  command
                                                (cdr command))))
                                         (if
                                             (or
                                              (= min max)
                                              (= max most-positive-fixnum))
                                             min
                                           (format "%d-%d" min max))
                                         (if
                                             (or
                                              (= min 0)
                                              (> min 1))
                                             "s" "")
                                         (length args)))
                                       (doom-cli-call
                                        (cons ':help
                                              (cons "--synopsis"
                                                    (cons "--postamble"
                                                          (cdr
                                                           (doom-cli--command context)))))
                                        context e)))))))))))))))
           5)
          (doom-cli-unrecognized-option-error
           (doom-print
            (doom-print--format
             (doom-print--style 'red "Error: unknown option %s")
             (car
              (cdr e))))
           (doom-cli-call
            (cons ':help
                  (cons "--synopsis"
                        (cons "--postamble"
                              (cdr
                               (doom-cli--command context)))))
            context e)
           5)
          (doom-cli-invalid-option-error
           (let*
               ((val
                 (cdr e)))
             (progn
               (ignore
                (consp val))
               (let*
                   ((x37
                     (car-safe val))
                    (x38
                     (cdr-safe val)))
                 (progn
                   (ignore
                    (consp x38))
                   (let*
                       ((x39
                         (car-safe x38))
                        (x40
                         (cdr-safe x38)))
                     (progn
                       (ignore
                        (consp x40))
                       (let*
                           ((x41
                             (car-safe x40))
                            (x42
                             (cdr-safe x40)))
                         (progn
                           (ignore
                            (consp x42))
                           (let*
                               ((x43
                                 (car-safe x42))
                                (x44
                                 (cdr-safe x42)))
                             (progn
                               (ignore
                                (null x44))
                               (let
                                   ((types x37)
                                    (option x39)
                                    (value x41)
                                    (errors x43))
                                 (progn
                                   (doom-print
                                    (doom-print--format
                                     (doom-print--style 'red "Error: %s received invalid value %S")
                                     (string-join
                                      (progn
                                        (or
                                         (progn
                                           (and
                                            (memq
                                             (type-of option)
                                             cl-struct-doom-cli-option-tags)
                                            t))
                                         (signal 'wrong-type-argument
                                                 (list 'doom-cli-option option)))
                                        (aref option 5))
                                      "/")
                                     value))
                                   (doom-print
                                    (doom-print--format
                                     (doom-print--style 'bold "\nValidation errors:")))
                                   (let
                                       ((tail errors))
                                     (while tail
                                       (let
                                           ((err
                                             (car tail)))
                                         (doom-print
                                          (doom-print--format
                                           (doom-print--class 'item "%s."
                                                              (doom-print--class 'fill err))))
                                         (setq tail
                                               (cdr tail)))))))))))))))))
           (doom-cli-call
            (cons ':help
                  (cons "--postamble"
                        (cdr
                         (doom-cli--command context))))
            context e)
           5)
          (doom-cli-command-not-found-error
           (let*
               ((command
                 (cdr e))
                (cli
                 (doom-cli-get command)))
             (cond
              ((null cli)
               (doom-print
                (doom-print--format
                 (doom-print--style 'red "Error: unrecognized command '%s'")
                 (doom-cli-command-string
                  (or
                   (cdr command)
                   command))))
               (doom-cli-call
                (cons ':help
                      (cons "--similar"
                            (cons "--postamble"
                                  (cdr command))))
                context e))
              ((null
                (progn
                  (or
                   (progn
                     (and
                      (memq
                       (type-of cli)
                       cl-struct-doom-cli-tags)
                      t))
                   (signal 'wrong-type-argument
                           (list 'doom-cli cli)))
                  (aref cli 9)))
               (doom-print
                (doom-print--format
                 (doom-print--style 'red "Error: a subcommand is required")))
               (doom-cli-call
                (cons ':help
                      (cons "--subcommands"
                            (cons "--postamble"
                                  (cdr command))))
                context e))))
           4)
          (doom-cli-invalid-prefix-error
           (let
               ((prefix
                 (car
                  (cdr e))))
             (doom-print
              (doom-print--format
               (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
               prefix))
             (let*
                 ((suggested
                   (and t
                        (let*
                            ((--cl-var-- t)
                             --cl-var--)
                          (catch '--cl-block---cl-finish----
                            (maphash
                             #'(lambda
                                 (--cl-var-- cli)
                                 (or
                                  (if
                                      (progn
                                        (or
                                         (progn
                                           (and
                                            (memq
                                             (type-of cli)
                                             cl-struct-doom-cli-tags)
                                            t))
                                         (signal 'wrong-type-argument
                                                 (list 'doom-cli cli)))
                                        (aref cli 2))
                                      t
                                    (progn
                                      (setq --cl-var--
                                            (car
                                             (progn
                                               (or
                                                (progn
                                                  (and
                                                   (memq
                                                    (type-of cli)
                                                    cl-struct-doom-cli-tags)
                                                   t))
                                                (signal 'wrong-type-argument
                                                        (list 'doom-cli cli)))
                                               (aref cli 1))))
                                      (setq --cl-var-- nil)))
                                  (throw '--cl-block---cl-finish---- nil)))
                             doom-cli--table))
                          --cl-var--))))
               (if suggested
                   (doom-print
                    (doom-print--format "Did you mean %S?" suggested))
                 (doom-print
                  (doom-print--format "There are no commands defined under %S." prefix)))))
           4)
          (user-error
           (doom-print
            (doom-print--format
             (doom-print--style 'red "Error: %s")
             (car
              (cdr e))))
           (doom-print
            (doom-print--format "\nAborting..."))
           3)))
      context)))
 ((doom-print-stream closure
                     ((streams
                       (t . #<buffer  *doom-cli stdout*>)
                       (t . #<buffer  *doom-cli stderr*>))
                      (level . t))
                     (ch)
                     (let
                         ((str
                           (char-to-string ch)))
                       (let
                           ((tail streams))
                         (while tail
                           (let
                               ((stream
                                 (car tail)))
                             (if
                                 (or
                                  (eq
                                   (car stream)
                                   t)
                                  (funcall
                                   (car stream)))
                                 (progn
                                   (doom-print str :newline nil :stream
                                               (cdr stream))))
                             (setq tail
                                   (cdr tail)))))
                       (doom-print str :newline nil :stream t :level level)))))

;;;; 52
((progn
   (fset #'message vnew)
   (let
       ((doom-print-stream standard-output))
     (progn
       (if
           (and
            (not doom-inhibit-log)
            (or
             (not noninteractive)
             (<= 2 doom-log-level)))
           (progn
             (doom--log 2 "run!: %s %s" prefix
                        (combine-and-quote-strings args))))
       (add-hook 'kill-emacs-hook show-benchmark-fn 94)
       (add-hook 'kill-emacs-hook write-logs-fn 95)
       (if
           (doom-cli-context-pipe-p context :out t)
           (progn
             (setq doom-print-backend nil)))
       (if
           (doom-cli-context-pipe-p context :in)
           (progn
             (save-current-buffer
               (set-buffer
                (progn
                  (or
                   (progn
                     (and
                      (memq
                       (type-of context)
                       cl-struct-doom-cli-context-tags)
                      t))
                   (signal 'wrong-type-argument
                           (list 'doom-cli-context context)))
                  (aref context 15)))
               (while
                   (let*
                       ((in
                         (and t
                              (condition-case nil
                                  (progn
                                    (read-from-minibuffer ""))
                                (error nil)))))
                     (if in
                         (insert in "\n")
                       (condition-case nil
                           (progn
                             (delete-char -1))
                         (error nil))))))))
       (doom-cli--exit
        (catch 'exit
          (condition-case e
              (let*
                  ((args
                    (cons
                     (if
                         (getenv "__DOOMDUMP")
                         :dump prefix)
                     args))
                   (context
                    (doom-cli-context-restore
                     (getenv "__DOOMCONTEXT")
                     context))
                   (context
                    (doom-cli-context-parse args context)))
                (run-hook-with-args 'doom-cli-before-run-functions context)
                (let
                    ((result
                      (doom-cli-context-execute context)))
                  (run-hook-with-args 'doom-cli-after-run-functions context result))
                0)
            (doom-cli-wrong-number-of-arguments-error
             (let*
                 ((val
                   (cdr e)))
               (progn
                 (ignore
                  (consp val))
                 (let*
                     ((x27
                       (car-safe val))
                      (x28
                       (cdr-safe val)))
                   (progn
                     (ignore
                      (consp x28))
                     (let*
                         ((x29
                           (car-safe x28))
                          (x30
                           (cdr-safe x28)))
                       (progn
                         (ignore
                          (consp x30))
                         (let*
                             ((x31
                               (car-safe x30))
                              (x32
                               (cdr-safe x30)))
                           (progn
                             (ignore
                              (consp x32))
                             (let*
                                 ((x33
                                   (car-safe x32))
                                  (x34
                                   (cdr-safe x32)))
                               (progn
                                 (ignore
                                  (consp x34))
                                 (let*
                                     ((x35
                                       (car-safe x34))
                                      (x36
                                       (cdr-safe x34)))
                                   (progn
                                     (ignore
                                      (null x36))
                                     (let
                                         ((command x27)
                                          (flag x29)
                                          (args x31)
                                          (min x33)
                                          (max x35))
                                       (progn
                                         (doom-print
                                          (doom-print--format
                                           (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
                                           (or flag
                                               (doom-cli-command-string
                                                (if
                                                    (keywordp
                                                     (car command))
                                                    command
                                                  (cdr command))))
                                           (if
                                               (or
                                                (= min max)
                                                (= max most-positive-fixnum))
                                               min
                                             (format "%d-%d" min max))
                                           (if
                                               (or
                                                (= min 0)
                                                (> min 1))
                                               "s" "")
                                           (length args)))
                                         (doom-cli-call
                                          (cons ':help
                                                (cons "--synopsis"
                                                      (cons "--postamble"
                                                            (cdr
                                                             (doom-cli--command context)))))
                                          context e)))))))))))))))
             5)
            (doom-cli-unrecognized-option-error
             (doom-print
              (doom-print--format
               (doom-print--style 'red "Error: unknown option %s")
               (car
                (cdr e))))
             (doom-cli-call
              (cons ':help
                    (cons "--synopsis"
                          (cons "--postamble"
                                (cdr
                                 (doom-cli--command context)))))
              context e)
             5)
            (doom-cli-invalid-option-error
             (let*
                 ((val
                   (cdr e)))
               (progn
                 (ignore
                  (consp val))
                 (let*
                     ((x37
                       (car-safe val))
                      (x38
                       (cdr-safe val)))
                   (progn
                     (ignore
                      (consp x38))
                     (let*
                         ((x39
                           (car-safe x38))
                          (x40
                           (cdr-safe x38)))
                       (progn
                         (ignore
                          (consp x40))
                         (let*
                             ((x41
                               (car-safe x40))
                              (x42
                               (cdr-safe x40)))
                           (progn
                             (ignore
                              (consp x42))
                             (let*
                                 ((x43
                                   (car-safe x42))
                                  (x44
                                   (cdr-safe x42)))
                               (progn
                                 (ignore
                                  (null x44))
                                 (let
                                     ((types x37)
                                      (option x39)
                                      (value x41)
                                      (errors x43))
                                   (progn
                                     (doom-print
                                      (doom-print--format
                                       (doom-print--style 'red "Error: %s received invalid value %S")
                                       (string-join
                                        (progn
                                          (or
                                           (progn
                                             (and
                                              (memq
                                               (type-of option)
                                               cl-struct-doom-cli-option-tags)
                                              t))
                                           (signal 'wrong-type-argument
                                                   (list 'doom-cli-option option)))
                                          (aref option 5))
                                        "/")
                                       value))
                                     (doom-print
                                      (doom-print--format
                                       (doom-print--style 'bold "\nValidation errors:")))
                                     (let
                                         ((tail errors))
                                       (while tail
                                         (let
                                             ((err
                                               (car tail)))
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'item "%s."
                                                                (doom-print--class 'fill err))))
                                           (setq tail
                                                 (cdr tail)))))))))))))))))
             (doom-cli-call
              (cons ':help
                    (cons "--postamble"
                          (cdr
                           (doom-cli--command context))))
              context e)
             5)
            (doom-cli-command-not-found-error
             (let*
                 ((command
                   (cdr e))
                  (cli
                   (doom-cli-get command)))
               (cond
                ((null cli)
                 (doom-print
                  (doom-print--format
                   (doom-print--style 'red "Error: unrecognized command '%s'")
                   (doom-cli-command-string
                    (or
                     (cdr command)
                     command))))
                 (doom-cli-call
                  (cons ':help
                        (cons "--similar"
                              (cons "--postamble"
                                    (cdr command))))
                  context e))
                ((null
                  (progn
                    (or
                     (progn
                       (and
                        (memq
                         (type-of cli)
                         cl-struct-doom-cli-tags)
                        t))
                     (signal 'wrong-type-argument
                             (list 'doom-cli cli)))
                    (aref cli 9)))
                 (doom-print
                  (doom-print--format
                   (doom-print--style 'red "Error: a subcommand is required")))
                 (doom-cli-call
                  (cons ':help
                        (cons "--subcommands"
                              (cons "--postamble"
                                    (cdr command))))
                  context e))))
             4)
            (doom-cli-invalid-prefix-error
             (let
                 ((prefix
                   (car
                    (cdr e))))
               (doom-print
                (doom-print--format
                 (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
                 prefix))
               (let*
                   ((suggested
                     (and t
                          (let*
                              ((--cl-var-- t)
                               --cl-var--)
                            (catch '--cl-block---cl-finish----
                              (maphash
                               #'(lambda
                                   (--cl-var-- cli)
                                   (or
                                    (if
                                        (progn
                                          (or
                                           (progn
                                             (and
                                              (memq
                                               (type-of cli)
                                               cl-struct-doom-cli-tags)
                                              t))
                                           (signal 'wrong-type-argument
                                                   (list 'doom-cli cli)))
                                          (aref cli 2))
                                        t
                                      (progn
                                        (setq --cl-var--
                                              (car
                                               (progn
                                                 (or
                                                  (progn
                                                    (and
                                                     (memq
                                                      (type-of cli)
                                                      cl-struct-doom-cli-tags)
                                                     t))
                                                  (signal 'wrong-type-argument
                                                          (list 'doom-cli cli)))
                                                 (aref cli 1))))
                                        (setq --cl-var-- nil)))
                                    (throw '--cl-block---cl-finish---- nil)))
                               doom-cli--table))
                            --cl-var--))))
                 (if suggested
                     (doom-print
                      (doom-print--format "Did you mean %S?" suggested))
                   (doom-print
                    (doom-print--format "There are no commands defined under %S." prefix)))))
             4)
            (user-error
             (doom-print
              (doom-print--format
               (doom-print--style 'red "Error: %s")
               (car
                (cdr e))))
             (doom-print
              (doom-print--format "\nAborting..."))
             3)))
        context))))
 nil)

;;;; 53
((unwind-protect
     (progn
       (fset #'message vnew)
       (let
           ((doom-print-stream standard-output))
         (progn
           (if
               (and
                (not doom-inhibit-log)
                (or
                 (not noninteractive)
                 (<= 2 doom-log-level)))
               (progn
                 (doom--log 2 "run!: %s %s" prefix
                            (combine-and-quote-strings args))))
           (add-hook 'kill-emacs-hook show-benchmark-fn 94)
           (add-hook 'kill-emacs-hook write-logs-fn 95)
           (if
               (doom-cli-context-pipe-p context :out t)
               (progn
                 (setq doom-print-backend nil)))
           (if
               (doom-cli-context-pipe-p context :in)
               (progn
                 (save-current-buffer
                   (set-buffer
                    (progn
                      (or
                       (progn
                         (and
                          (memq
                           (type-of context)
                           cl-struct-doom-cli-context-tags)
                          t))
                       (signal 'wrong-type-argument
                               (list 'doom-cli-context context)))
                      (aref context 15)))
                   (while
                       (let*
                           ((in
                             (and t
                                  (condition-case nil
                                      (progn
                                        (read-from-minibuffer ""))
                                    (error nil)))))
                         (if in
                             (insert in "\n")
                           (condition-case nil
                               (progn
                                 (delete-char -1))
                             (error nil))))))))
           (doom-cli--exit
            (catch 'exit
              (condition-case e
                  (let*
                      ((args
                        (cons
                         (if
                             (getenv "__DOOMDUMP")
                             :dump prefix)
                         args))
                       (context
                        (doom-cli-context-restore
                         (getenv "__DOOMCONTEXT")
                         context))
                       (context
                        (doom-cli-context-parse args context)))
                    (run-hook-with-args 'doom-cli-before-run-functions context)
                    (let
                        ((result
                          (doom-cli-context-execute context)))
                      (run-hook-with-args 'doom-cli-after-run-functions context result))
                    0)
                (doom-cli-wrong-number-of-arguments-error
                 (let*
                     ((val
                       (cdr e)))
                   (progn
                     (ignore
                      (consp val))
                     (let*
                         ((x27
                           (car-safe val))
                          (x28
                           (cdr-safe val)))
                       (progn
                         (ignore
                          (consp x28))
                         (let*
                             ((x29
                               (car-safe x28))
                              (x30
                               (cdr-safe x28)))
                           (progn
                             (ignore
                              (consp x30))
                             (let*
                                 ((x31
                                   (car-safe x30))
                                  (x32
                                   (cdr-safe x30)))
                               (progn
                                 (ignore
                                  (consp x32))
                                 (let*
                                     ((x33
                                       (car-safe x32))
                                      (x34
                                       (cdr-safe x32)))
                                   (progn
                                     (ignore
                                      (consp x34))
                                     (let*
                                         ((x35
                                           (car-safe x34))
                                          (x36
                                           (cdr-safe x34)))
                                       (progn
                                         (ignore
                                          (null x36))
                                         (let
                                             ((command x27)
                                              (flag x29)
                                              (args x31)
                                              (min x33)
                                              (max x35))
                                           (progn
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
                                               (or flag
                                                   (doom-cli-command-string
                                                    (if
                                                        (keywordp
                                                         (car command))
                                                        command
                                                      (cdr command))))
                                               (if
                                                   (or
                                                    (= min max)
                                                    (= max most-positive-fixnum))
                                                   min
                                                 (format "%d-%d" min max))
                                               (if
                                                   (or
                                                    (= min 0)
                                                    (> min 1))
                                                   "s" "")
                                               (length args)))
                                             (doom-cli-call
                                              (cons ':help
                                                    (cons "--synopsis"
                                                          (cons "--postamble"
                                                                (cdr
                                                                 (doom-cli--command context)))))
                                              context e)))))))))))))))
                 5)
                (doom-cli-unrecognized-option-error
                 (doom-print
                  (doom-print--format
                   (doom-print--style 'red "Error: unknown option %s")
                   (car
                    (cdr e))))
                 (doom-cli-call
                  (cons ':help
                        (cons "--synopsis"
                              (cons "--postamble"
                                    (cdr
                                     (doom-cli--command context)))))
                  context e)
                 5)
                (doom-cli-invalid-option-error
                 (let*
                     ((val
                       (cdr e)))
                   (progn
                     (ignore
                      (consp val))
                     (let*
                         ((x37
                           (car-safe val))
                          (x38
                           (cdr-safe val)))
                       (progn
                         (ignore
                          (consp x38))
                         (let*
                             ((x39
                               (car-safe x38))
                              (x40
                               (cdr-safe x38)))
                           (progn
                             (ignore
                              (consp x40))
                             (let*
                                 ((x41
                                   (car-safe x40))
                                  (x42
                                   (cdr-safe x40)))
                               (progn
                                 (ignore
                                  (consp x42))
                                 (let*
                                     ((x43
                                       (car-safe x42))
                                      (x44
                                       (cdr-safe x42)))
                                   (progn
                                     (ignore
                                      (null x44))
                                     (let
                                         ((types x37)
                                          (option x39)
                                          (value x41)
                                          (errors x43))
                                       (progn
                                         (doom-print
                                          (doom-print--format
                                           (doom-print--style 'red "Error: %s received invalid value %S")
                                           (string-join
                                            (progn
                                              (or
                                               (progn
                                                 (and
                                                  (memq
                                                   (type-of option)
                                                   cl-struct-doom-cli-option-tags)
                                                  t))
                                               (signal 'wrong-type-argument
                                                       (list 'doom-cli-option option)))
                                              (aref option 5))
                                            "/")
                                           value))
                                         (doom-print
                                          (doom-print--format
                                           (doom-print--style 'bold "\nValidation errors:")))
                                         (let
                                             ((tail errors))
                                           (while tail
                                             (let
                                                 ((err
                                                   (car tail)))
                                               (doom-print
                                                (doom-print--format
                                                 (doom-print--class 'item "%s."
                                                                    (doom-print--class 'fill err))))
                                               (setq tail
                                                     (cdr tail)))))))))))))))))
                 (doom-cli-call
                  (cons ':help
                        (cons "--postamble"
                              (cdr
                               (doom-cli--command context))))
                  context e)
                 5)
                (doom-cli-command-not-found-error
                 (let*
                     ((command
                       (cdr e))
                      (cli
                       (doom-cli-get command)))
                   (cond
                    ((null cli)
                     (doom-print
                      (doom-print--format
                       (doom-print--style 'red "Error: unrecognized command '%s'")
                       (doom-cli-command-string
                        (or
                         (cdr command)
                         command))))
                     (doom-cli-call
                      (cons ':help
                            (cons "--similar"
                                  (cons "--postamble"
                                        (cdr command))))
                      context e))
                    ((null
                      (progn
                        (or
                         (progn
                           (and
                            (memq
                             (type-of cli)
                             cl-struct-doom-cli-tags)
                            t))
                         (signal 'wrong-type-argument
                                 (list 'doom-cli cli)))
                        (aref cli 9)))
                     (doom-print
                      (doom-print--format
                       (doom-print--style 'red "Error: a subcommand is required")))
                     (doom-cli-call
                      (cons ':help
                            (cons "--subcommands"
                                  (cons "--postamble"
                                        (cdr command))))
                      context e))))
                 4)
                (doom-cli-invalid-prefix-error
                 (let
                     ((prefix
                       (car
                        (cdr e))))
                   (doom-print
                    (doom-print--format
                     (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
                     prefix))
                   (let*
                       ((suggested
                         (and t
                              (let*
                                  ((--cl-var-- t)
                                   --cl-var--)
                                (catch '--cl-block---cl-finish----
                                  (maphash
                                   #'(lambda
                                       (--cl-var-- cli)
                                       (or
                                        (if
                                            (progn
                                              (or
                                               (progn
                                                 (and
                                                  (memq
                                                   (type-of cli)
                                                   cl-struct-doom-cli-tags)
                                                  t))
                                               (signal 'wrong-type-argument
                                                       (list 'doom-cli cli)))
                                              (aref cli 2))
                                            t
                                          (progn
                                            (setq --cl-var--
                                                  (car
                                                   (progn
                                                     (or
                                                      (progn
                                                        (and
                                                         (memq
                                                          (type-of cli)
                                                          cl-struct-doom-cli-tags)
                                                         t))
                                                      (signal 'wrong-type-argument
                                                              (list 'doom-cli cli)))
                                                     (aref cli 1))))
                                            (setq --cl-var-- nil)))
                                        (throw '--cl-block---cl-finish---- nil)))
                                   doom-cli--table))
                                --cl-var--))))
                     (if suggested
                         (doom-print
                          (doom-print--format "Did you mean %S?" suggested))
                       (doom-print
                        (doom-print--format "There are no commands defined under %S." prefix)))))
                 4)
                (user-error
                 (doom-print
                  (doom-print--format
                   (doom-print--style 'red "Error: %s")
                   (car
                    (cdr e))))
                 (doom-print
                  (doom-print--format "\nAborting..."))
                 3)))
            context))))
   (fset #'message old))
 nil)

;;;; 54
((let*
     ((vnew
       (doom-print--redirect-message streamspec
                                     (if noninteractive 'debug 'notice)))
      (old
       (symbol-function #'message)))
   (unwind-protect
       (progn
         (fset #'message vnew)
         (let
             ((doom-print-stream standard-output))
           (progn
             (if
                 (and
                  (not doom-inhibit-log)
                  (or
                   (not noninteractive)
                   (<= 2 doom-log-level)))
                 (progn
                   (doom--log 2 "run!: %s %s" prefix
                              (combine-and-quote-strings args))))
             (add-hook 'kill-emacs-hook show-benchmark-fn 94)
             (add-hook 'kill-emacs-hook write-logs-fn 95)
             (if
                 (doom-cli-context-pipe-p context :out t)
                 (progn
                   (setq doom-print-backend nil)))
             (if
                 (doom-cli-context-pipe-p context :in)
                 (progn
                   (save-current-buffer
                     (set-buffer
                      (progn
                        (or
                         (progn
                           (and
                            (memq
                             (type-of context)
                             cl-struct-doom-cli-context-tags)
                            t))
                         (signal 'wrong-type-argument
                                 (list 'doom-cli-context context)))
                        (aref context 15)))
                     (while
                         (let*
                             ((in
                               (and t
                                    (condition-case nil
                                        (progn
                                          (read-from-minibuffer ""))
                                      (error nil)))))
                           (if in
                               (insert in "\n")
                             (condition-case nil
                                 (progn
                                   (delete-char -1))
                               (error nil))))))))
             (doom-cli--exit
              (catch 'exit
                (condition-case e
                    (let*
                        ((args
                          (cons
                           (if
                               (getenv "__DOOMDUMP")
                               :dump prefix)
                           args))
                         (context
                          (doom-cli-context-restore
                           (getenv "__DOOMCONTEXT")
                           context))
                         (context
                          (doom-cli-context-parse args context)))
                      (run-hook-with-args 'doom-cli-before-run-functions context)
                      (let
                          ((result
                            (doom-cli-context-execute context)))
                        (run-hook-with-args 'doom-cli-after-run-functions context result))
                      0)
                  (doom-cli-wrong-number-of-arguments-error
                   (let*
                       ((val
                         (cdr e)))
                     (progn
                       (ignore
                        (consp val))
                       (let*
                           ((x27
                             (car-safe val))
                            (x28
                             (cdr-safe val)))
                         (progn
                           (ignore
                            (consp x28))
                           (let*
                               ((x29
                                 (car-safe x28))
                                (x30
                                 (cdr-safe x28)))
                             (progn
                               (ignore
                                (consp x30))
                               (let*
                                   ((x31
                                     (car-safe x30))
                                    (x32
                                     (cdr-safe x30)))
                                 (progn
                                   (ignore
                                    (consp x32))
                                   (let*
                                       ((x33
                                         (car-safe x32))
                                        (x34
                                         (cdr-safe x32)))
                                     (progn
                                       (ignore
                                        (consp x34))
                                       (let*
                                           ((x35
                                             (car-safe x34))
                                            (x36
                                             (cdr-safe x34)))
                                         (progn
                                           (ignore
                                            (null x36))
                                           (let
                                               ((command x27)
                                                (flag x29)
                                                (args x31)
                                                (min x33)
                                                (max x35))
                                             (progn
                                               (doom-print
                                                (doom-print--format
                                                 (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
                                                 (or flag
                                                     (doom-cli-command-string
                                                      (if
                                                          (keywordp
                                                           (car command))
                                                          command
                                                        (cdr command))))
                                                 (if
                                                     (or
                                                      (= min max)
                                                      (= max most-positive-fixnum))
                                                     min
                                                   (format "%d-%d" min max))
                                                 (if
                                                     (or
                                                      (= min 0)
                                                      (> min 1))
                                                     "s" "")
                                                 (length args)))
                                               (doom-cli-call
                                                (cons ':help
                                                      (cons "--synopsis"
                                                            (cons "--postamble"
                                                                  (cdr
                                                                   (doom-cli--command context)))))
                                                context e)))))))))))))))
                   5)
                  (doom-cli-unrecognized-option-error
                   (doom-print
                    (doom-print--format
                     (doom-print--style 'red "Error: unknown option %s")
                     (car
                      (cdr e))))
                   (doom-cli-call
                    (cons ':help
                          (cons "--synopsis"
                                (cons "--postamble"
                                      (cdr
                                       (doom-cli--command context)))))
                    context e)
                   5)
                  (doom-cli-invalid-option-error
                   (let*
                       ((val
                         (cdr e)))
                     (progn
                       (ignore
                        (consp val))
                       (let*
                           ((x37
                             (car-safe val))
                            (x38
                             (cdr-safe val)))
                         (progn
                           (ignore
                            (consp x38))
                           (let*
                               ((x39
                                 (car-safe x38))
                                (x40
                                 (cdr-safe x38)))
                             (progn
                               (ignore
                                (consp x40))
                               (let*
                                   ((x41
                                     (car-safe x40))
                                    (x42
                                     (cdr-safe x40)))
                                 (progn
                                   (ignore
                                    (consp x42))
                                   (let*
                                       ((x43
                                         (car-safe x42))
                                        (x44
                                         (cdr-safe x42)))
                                     (progn
                                       (ignore
                                        (null x44))
                                       (let
                                           ((types x37)
                                            (option x39)
                                            (value x41)
                                            (errors x43))
                                         (progn
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--style 'red "Error: %s received invalid value %S")
                                             (string-join
                                              (progn
                                                (or
                                                 (progn
                                                   (and
                                                    (memq
                                                     (type-of option)
                                                     cl-struct-doom-cli-option-tags)
                                                    t))
                                                 (signal 'wrong-type-argument
                                                         (list 'doom-cli-option option)))
                                                (aref option 5))
                                              "/")
                                             value))
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--style 'bold "\nValidation errors:")))
                                           (let
                                               ((tail errors))
                                             (while tail
                                               (let
                                                   ((err
                                                     (car tail)))
                                                 (doom-print
                                                  (doom-print--format
                                                   (doom-print--class 'item "%s."
                                                                      (doom-print--class 'fill err))))
                                                 (setq tail
                                                       (cdr tail)))))))))))))))))
                   (doom-cli-call
                    (cons ':help
                          (cons "--postamble"
                                (cdr
                                 (doom-cli--command context))))
                    context e)
                   5)
                  (doom-cli-command-not-found-error
                   (let*
                       ((command
                         (cdr e))
                        (cli
                         (doom-cli-get command)))
                     (cond
                      ((null cli)
                       (doom-print
                        (doom-print--format
                         (doom-print--style 'red "Error: unrecognized command '%s'")
                         (doom-cli-command-string
                          (or
                           (cdr command)
                           command))))
                       (doom-cli-call
                        (cons ':help
                              (cons "--similar"
                                    (cons "--postamble"
                                          (cdr command))))
                        context e))
                      ((null
                        (progn
                          (or
                           (progn
                             (and
                              (memq
                               (type-of cli)
                               cl-struct-doom-cli-tags)
                              t))
                           (signal 'wrong-type-argument
                                   (list 'doom-cli cli)))
                          (aref cli 9)))
                       (doom-print
                        (doom-print--format
                         (doom-print--style 'red "Error: a subcommand is required")))
                       (doom-cli-call
                        (cons ':help
                              (cons "--subcommands"
                                    (cons "--postamble"
                                          (cdr command))))
                        context e))))
                   4)
                  (doom-cli-invalid-prefix-error
                   (let
                       ((prefix
                         (car
                          (cdr e))))
                     (doom-print
                      (doom-print--format
                       (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
                       prefix))
                     (let*
                         ((suggested
                           (and t
                                (let*
                                    ((--cl-var-- t)
                                     --cl-var--)
                                  (catch '--cl-block---cl-finish----
                                    (maphash
                                     #'(lambda
                                         (--cl-var-- cli)
                                         (or
                                          (if
                                              (progn
                                                (or
                                                 (progn
                                                   (and
                                                    (memq
                                                     (type-of cli)
                                                     cl-struct-doom-cli-tags)
                                                    t))
                                                 (signal 'wrong-type-argument
                                                         (list 'doom-cli cli)))
                                                (aref cli 2))
                                              t
                                            (progn
                                              (setq --cl-var--
                                                    (car
                                                     (progn
                                                       (or
                                                        (progn
                                                          (and
                                                           (memq
                                                            (type-of cli)
                                                            cl-struct-doom-cli-tags)
                                                           t))
                                                        (signal 'wrong-type-argument
                                                                (list 'doom-cli cli)))
                                                       (aref cli 1))))
                                              (setq --cl-var-- nil)))
                                          (throw '--cl-block---cl-finish---- nil)))
                                     doom-cli--table))
                                  --cl-var--))))
                       (if suggested
                           (doom-print
                            (doom-print--format "Did you mean %S?" suggested))
                         (doom-print
                          (doom-print--format "There are no commands defined under %S." prefix)))))
                   4)
                  (user-error
                   (doom-print
                    (doom-print--format
                     (doom-print--style 'red "Error: %s")
                     (car
                      (cdr e))))
                   (doom-print
                    (doom-print--format "\nAborting..."))
                   3)))
              context))))
     (fset #'message old)))
 ((prefix . "doom")
  (args
   ("doctor"))
  (args "doctor")
  (context . #s(doom-cli-context
                (26384 50378 735038 513000)
                65238 0
                (88 . 27)
                nil nil "doom" nil nil
                ("doom" "doctor")
                nil
                ("doctor")
                (("--eval")
                 ("-E")
                 ("--strict-load")
                 ("--load")
                 ("-L")
                 ("--color")
                 ("--benchmark")
                 ("--profile")
                 ("--pager")
                 ("--emacsdir")
                 ("--doomdir")
                 ("--verbose")
                 ("-v")
                 ("--debug")
                 ("-D")
                 ("--force")
                 ("-!"))
                ((t)
                 (("doom" "doctor"))
                 (("doom")
                  "doctor"))
                #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (write-logs-fn .
                 #[128 "\302\301\303\300\4\"\"\207"
                       [(#s(doom-cli-context
                            (26384 50378 735038 513000)
                            65238 0
                            (88 . 27)
                            nil nil "doom" nil nil
                            ("doom" "doctor")
                            nil
                            ("doctor")
                            (("--eval")
                             ("-E")
                             ("--strict-load")
                             ("--load")
                             ("-L")
                             ("--color")
                             ("--benchmark")
                             ("--profile")
                             ("--pager")
                             ("--emacsdir")
                             ("--doomdir")
                             ("--verbose")
                             ("-v")
                             ("--debug")
                             ("-D")
                             ("--force")
                             ("-!"))
                            ((t)
                             (("doom" "doctor"))
                             (("doom")
                              "doctor"))
                            #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
                        doom-cli--output-write-logs-h apply append]
                       6 "\n\n(fn &rest ARGS2)"])
  (show-benchmark-fn .
                     #[128 "\302\301\303\300\4\"\"\207"
                           [(#s(doom-cli-context
                                (26384 50378 735038 513000)
                                65238 0
                                (88 . 27)
                                nil nil "doom" nil nil
                                ("doom" "doctor")
                                nil
                                ("doctor")
                                (("--eval")
                                 ("-E")
                                 ("--strict-load")
                                 ("--load")
                                 ("-L")
                                 ("--color")
                                 ("--benchmark")
                                 ("--profile")
                                 ("--pager")
                                 ("--emacsdir")
                                 ("--doomdir")
                                 ("--verbose")
                                 ("-v")
                                 ("--debug")
                                 ("-D")
                                 ("--force")
                                 ("-!"))
                                ((t)
                                 (("doom" "doctor"))
                                 (("doom")
                                  "doctor"))
                                #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
                            doom-cli--output-benchmark-h apply append]
                           6 "\n\n(fn &rest ARGS2)"])
  (doomctxt . #s(doom-cli-context
                 (26384 50378 735038 513000)
                 65238 0
                 (88 . 27)
                 nil nil "doom" nil nil
                 ("doom" "doctor")
                 nil
                 ("doctor")
                 (("--eval")
                  ("-E")
                  ("--strict-load")
                  ("--load")
                  ("-L")
                  ("--color")
                  ("--benchmark")
                  ("--profile")
                  ("--pager")
                  ("--emacsdir")
                  ("--doomdir")
                  ("--verbose")
                  ("-v")
                  ("--debug")
                  ("-D")
                  ("--force")
                  ("-!"))
                 ((t)
                  (("doom" "doctor"))
                  (("doom")
                   "doctor"))
                 #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (streamspec
   (>= notice #<buffer  *doom-cli stdout*>)
   (t . #<buffer  *doom-cli stderr*>))
  (vnew closure
        ((streams
          (#[128 "\302\301\303\300\4\"\"\207"
                 [(0 2)
                  >= apply append]
                 6 "\n\n(fn &rest ARGS2)"]
           . #<buffer  *doom-cli stdout*>)
          (t . #<buffer  *doom-cli stderr*>))
         (old . #<subr message>)
         (level . debug))
        (message &rest args)
        (if message
            (progn
              (let
                  ((output
                    (apply #'doom-print--format message args)))
                (if
                    (<= doom-print--output-depth 1)
                    (doom-print output :level level :stream t)
                  (let
                      ((doom-print--output-depth
                        (1- doom-print--output-depth)))
                    (funcall old "%s" output)))
                (let
                    ((tail streams))
                  (while tail
                    (let
                        ((stream
                          (car tail)))
                      (if
                          (or
                           (eq
                            (car stream)
                            t)
                           (funcall
                            (car stream)))
                          (progn
                            (doom-print output :stream
                                        (cdr stream))))
                      (setq tail
                            (cdr tail))))))
              message)))
  (old . #<subr message>)))

;;;; 55
((let
     ((standard-output
       (doom-print--redirect-standard-output streamspec t)))
   (let*
       ((vnew
         (doom-print--redirect-message streamspec
                                       (if noninteractive 'debug 'notice)))
        (old
         (symbol-function #'message)))
     (unwind-protect
         (progn
           (fset #'message vnew)
           (let
               ((doom-print-stream standard-output))
             (progn
               (if
                   (and
                    (not doom-inhibit-log)
                    (or
                     (not noninteractive)
                     (<= 2 doom-log-level)))
                   (progn
                     (doom--log 2 "run!: %s %s" prefix
                                (combine-and-quote-strings args))))
               (add-hook 'kill-emacs-hook show-benchmark-fn 94)
               (add-hook 'kill-emacs-hook write-logs-fn 95)
               (if
                   (doom-cli-context-pipe-p context :out t)
                   (progn
                     (setq doom-print-backend nil)))
               (if
                   (doom-cli-context-pipe-p context :in)
                   (progn
                     (save-current-buffer
                       (set-buffer
                        (progn
                          (or
                           (progn
                             (and
                              (memq
                               (type-of context)
                               cl-struct-doom-cli-context-tags)
                              t))
                           (signal 'wrong-type-argument
                                   (list 'doom-cli-context context)))
                          (aref context 15)))
                       (while
                           (let*
                               ((in
                                 (and t
                                      (condition-case nil
                                          (progn
                                            (read-from-minibuffer ""))
                                        (error nil)))))
                             (if in
                                 (insert in "\n")
                               (condition-case nil
                                   (progn
                                     (delete-char -1))
                                 (error nil))))))))
               (doom-cli--exit
                (catch 'exit
                  (condition-case e
                      (let*
                          ((args
                            (cons
                             (if
                                 (getenv "__DOOMDUMP")
                                 :dump prefix)
                             args))
                           (context
                            (doom-cli-context-restore
                             (getenv "__DOOMCONTEXT")
                             context))
                           (context
                            (doom-cli-context-parse args context)))
                        (run-hook-with-args 'doom-cli-before-run-functions context)
                        (let
                            ((result
                              (doom-cli-context-execute context)))
                          (run-hook-with-args 'doom-cli-after-run-functions context result))
                        0)
                    (doom-cli-wrong-number-of-arguments-error
                     (let*
                         ((val
                           (cdr e)))
                       (progn
                         (ignore
                          (consp val))
                         (let*
                             ((x27
                               (car-safe val))
                              (x28
                               (cdr-safe val)))
                           (progn
                             (ignore
                              (consp x28))
                             (let*
                                 ((x29
                                   (car-safe x28))
                                  (x30
                                   (cdr-safe x28)))
                               (progn
                                 (ignore
                                  (consp x30))
                                 (let*
                                     ((x31
                                       (car-safe x30))
                                      (x32
                                       (cdr-safe x30)))
                                   (progn
                                     (ignore
                                      (consp x32))
                                     (let*
                                         ((x33
                                           (car-safe x32))
                                          (x34
                                           (cdr-safe x32)))
                                       (progn
                                         (ignore
                                          (consp x34))
                                         (let*
                                             ((x35
                                               (car-safe x34))
                                              (x36
                                               (cdr-safe x34)))
                                           (progn
                                             (ignore
                                              (null x36))
                                             (let
                                                 ((command x27)
                                                  (flag x29)
                                                  (args x31)
                                                  (min x33)
                                                  (max x35))
                                               (progn
                                                 (doom-print
                                                  (doom-print--format
                                                   (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
                                                   (or flag
                                                       (doom-cli-command-string
                                                        (if
                                                            (keywordp
                                                             (car command))
                                                            command
                                                          (cdr command))))
                                                   (if
                                                       (or
                                                        (= min max)
                                                        (= max most-positive-fixnum))
                                                       min
                                                     (format "%d-%d" min max))
                                                   (if
                                                       (or
                                                        (= min 0)
                                                        (> min 1))
                                                       "s" "")
                                                   (length args)))
                                                 (doom-cli-call
                                                  (cons ':help
                                                        (cons "--synopsis"
                                                              (cons "--postamble"
                                                                    (cdr
                                                                     (doom-cli--command context)))))
                                                  context e)))))))))))))))
                     5)
                    (doom-cli-unrecognized-option-error
                     (doom-print
                      (doom-print--format
                       (doom-print--style 'red "Error: unknown option %s")
                       (car
                        (cdr e))))
                     (doom-cli-call
                      (cons ':help
                            (cons "--synopsis"
                                  (cons "--postamble"
                                        (cdr
                                         (doom-cli--command context)))))
                      context e)
                     5)
                    (doom-cli-invalid-option-error
                     (let*
                         ((val
                           (cdr e)))
                       (progn
                         (ignore
                          (consp val))
                         (let*
                             ((x37
                               (car-safe val))
                              (x38
                               (cdr-safe val)))
                           (progn
                             (ignore
                              (consp x38))
                             (let*
                                 ((x39
                                   (car-safe x38))
                                  (x40
                                   (cdr-safe x38)))
                               (progn
                                 (ignore
                                  (consp x40))
                                 (let*
                                     ((x41
                                       (car-safe x40))
                                      (x42
                                       (cdr-safe x40)))
                                   (progn
                                     (ignore
                                      (consp x42))
                                     (let*
                                         ((x43
                                           (car-safe x42))
                                          (x44
                                           (cdr-safe x42)))
                                       (progn
                                         (ignore
                                          (null x44))
                                         (let
                                             ((types x37)
                                              (option x39)
                                              (value x41)
                                              (errors x43))
                                           (progn
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--style 'red "Error: %s received invalid value %S")
                                               (string-join
                                                (progn
                                                  (or
                                                   (progn
                                                     (and
                                                      (memq
                                                       (type-of option)
                                                       cl-struct-doom-cli-option-tags)
                                                      t))
                                                   (signal 'wrong-type-argument
                                                           (list 'doom-cli-option option)))
                                                  (aref option 5))
                                                "/")
                                               value))
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--style 'bold "\nValidation errors:")))
                                             (let
                                                 ((tail errors))
                                               (while tail
                                                 (let
                                                     ((err
                                                       (car tail)))
                                                   (doom-print
                                                    (doom-print--format
                                                     (doom-print--class 'item "%s."
                                                                        (doom-print--class 'fill err))))
                                                   (setq tail
                                                         (cdr tail)))))))))))))))))
                     (doom-cli-call
                      (cons ':help
                            (cons "--postamble"
                                  (cdr
                                   (doom-cli--command context))))
                      context e)
                     5)
                    (doom-cli-command-not-found-error
                     (let*
                         ((command
                           (cdr e))
                          (cli
                           (doom-cli-get command)))
                       (cond
                        ((null cli)
                         (doom-print
                          (doom-print--format
                           (doom-print--style 'red "Error: unrecognized command '%s'")
                           (doom-cli-command-string
                            (or
                             (cdr command)
                             command))))
                         (doom-cli-call
                          (cons ':help
                                (cons "--similar"
                                      (cons "--postamble"
                                            (cdr command))))
                          context e))
                        ((null
                          (progn
                            (or
                             (progn
                               (and
                                (memq
                                 (type-of cli)
                                 cl-struct-doom-cli-tags)
                                t))
                             (signal 'wrong-type-argument
                                     (list 'doom-cli cli)))
                            (aref cli 9)))
                         (doom-print
                          (doom-print--format
                           (doom-print--style 'red "Error: a subcommand is required")))
                         (doom-cli-call
                          (cons ':help
                                (cons "--subcommands"
                                      (cons "--postamble"
                                            (cdr command))))
                          context e))))
                     4)
                    (doom-cli-invalid-prefix-error
                     (let
                         ((prefix
                           (car
                            (cdr e))))
                       (doom-print
                        (doom-print--format
                         (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
                         prefix))
                       (let*
                           ((suggested
                             (and t
                                  (let*
                                      ((--cl-var-- t)
                                       --cl-var--)
                                    (catch '--cl-block---cl-finish----
                                      (maphash
                                       #'(lambda
                                           (--cl-var-- cli)
                                           (or
                                            (if
                                                (progn
                                                  (or
                                                   (progn
                                                     (and
                                                      (memq
                                                       (type-of cli)
                                                       cl-struct-doom-cli-tags)
                                                      t))
                                                   (signal 'wrong-type-argument
                                                           (list 'doom-cli cli)))
                                                  (aref cli 2))
                                                t
                                              (progn
                                                (setq --cl-var--
                                                      (car
                                                       (progn
                                                         (or
                                                          (progn
                                                            (and
                                                             (memq
                                                              (type-of cli)
                                                              cl-struct-doom-cli-tags)
                                                             t))
                                                          (signal 'wrong-type-argument
                                                                  (list 'doom-cli cli)))
                                                         (aref cli 1))))
                                                (setq --cl-var-- nil)))
                                            (throw '--cl-block---cl-finish---- nil)))
                                       doom-cli--table))
                                    --cl-var--))))
                         (if suggested
                             (doom-print
                              (doom-print--format "Did you mean %S?" suggested))
                           (doom-print
                            (doom-print--format "There are no commands defined under %S." prefix)))))
                     4)
                    (user-error
                     (doom-print
                      (doom-print--format
                       (doom-print--style 'red "Error: %s")
                       (car
                        (cdr e))))
                     (doom-print
                      (doom-print--format "\nAborting..."))
                     3)))
                context))))
       (fset #'message old))))
 ((standard-output closure
                   ((streams
                     (t . #<buffer  *doom-cli stdout*>)
                     (t . #<buffer  *doom-cli stderr*>))
                    (level . t))
                   (ch)
                   (let
                       ((str
                         (char-to-string ch)))
                     (let
                         ((tail streams))
                       (while tail
                         (let
                             ((stream
                               (car tail)))
                           (if
                               (or
                                (eq
                                 (car stream)
                                 t)
                                (funcall
                                 (car stream)))
                               (progn
                                 (doom-print str :newline nil :stream
                                             (cdr stream))))
                           (setq tail
                                 (cdr tail)))))
                     (doom-print str :newline nil :stream t :level level)))))

;;;; 56
((let
     ((streamspec
       (list
        (list '>= 'notice
              (progn
                (or
                 (progn
                   (and
                    (memq
                     (type-of doomctxt)
                     cl-struct-doom-cli-context-tags)
                    t))
                 (signal 'wrong-type-argument
                         (list 'doom-cli-context doomctxt)))
                (aref doomctxt 16)))
        (cons t
              (progn
                (or
                 (progn
                   (and
                    (memq
                     (type-of doomctxt)
                     cl-struct-doom-cli-context-tags)
                    t))
                 (signal 'wrong-type-argument
                         (list 'doom-cli-context doomctxt)))
                (aref doomctxt 17))))))
   (let
       ((standard-output
         (doom-print--redirect-standard-output streamspec t)))
     (let*
         ((vnew
           (doom-print--redirect-message streamspec
                                         (if noninteractive 'debug 'notice)))
          (old
           (symbol-function #'message)))
       (unwind-protect
           (progn
             (fset #'message vnew)
             (let
                 ((doom-print-stream standard-output))
               (progn
                 (if
                     (and
                      (not doom-inhibit-log)
                      (or
                       (not noninteractive)
                       (<= 2 doom-log-level)))
                     (progn
                       (doom--log 2 "run!: %s %s" prefix
                                  (combine-and-quote-strings args))))
                 (add-hook 'kill-emacs-hook show-benchmark-fn 94)
                 (add-hook 'kill-emacs-hook write-logs-fn 95)
                 (if
                     (doom-cli-context-pipe-p context :out t)
                     (progn
                       (setq doom-print-backend nil)))
                 (if
                     (doom-cli-context-pipe-p context :in)
                     (progn
                       (save-current-buffer
                         (set-buffer
                          (progn
                            (or
                             (progn
                               (and
                                (memq
                                 (type-of context)
                                 cl-struct-doom-cli-context-tags)
                                t))
                             (signal 'wrong-type-argument
                                     (list 'doom-cli-context context)))
                            (aref context 15)))
                         (while
                             (let*
                                 ((in
                                   (and t
                                        (condition-case nil
                                            (progn
                                              (read-from-minibuffer ""))
                                          (error nil)))))
                               (if in
                                   (insert in "\n")
                                 (condition-case nil
                                     (progn
                                       (delete-char -1))
                                   (error nil))))))))
                 (doom-cli--exit
                  (catch 'exit
                    (condition-case e
                        (let*
                            ((args
                              (cons
                               (if
                                   (getenv "__DOOMDUMP")
                                   :dump prefix)
                               args))
                             (context
                              (doom-cli-context-restore
                               (getenv "__DOOMCONTEXT")
                               context))
                             (context
                              (doom-cli-context-parse args context)))
                          (run-hook-with-args 'doom-cli-before-run-functions context)
                          (let
                              ((result
                                (doom-cli-context-execute context)))
                            (run-hook-with-args 'doom-cli-after-run-functions context result))
                          0)
                      (doom-cli-wrong-number-of-arguments-error
                       (let*
                           ((val
                             (cdr e)))
                         (progn
                           (ignore
                            (consp val))
                           (let*
                               ((x27
                                 (car-safe val))
                                (x28
                                 (cdr-safe val)))
                             (progn
                               (ignore
                                (consp x28))
                               (let*
                                   ((x29
                                     (car-safe x28))
                                    (x30
                                     (cdr-safe x28)))
                                 (progn
                                   (ignore
                                    (consp x30))
                                   (let*
                                       ((x31
                                         (car-safe x30))
                                        (x32
                                         (cdr-safe x30)))
                                     (progn
                                       (ignore
                                        (consp x32))
                                       (let*
                                           ((x33
                                             (car-safe x32))
                                            (x34
                                             (cdr-safe x32)))
                                         (progn
                                           (ignore
                                            (consp x34))
                                           (let*
                                               ((x35
                                                 (car-safe x34))
                                                (x36
                                                 (cdr-safe x34)))
                                             (progn
                                               (ignore
                                                (null x36))
                                               (let
                                                   ((command x27)
                                                    (flag x29)
                                                    (args x31)
                                                    (min x33)
                                                    (max x35))
                                                 (progn
                                                   (doom-print
                                                    (doom-print--format
                                                     (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
                                                     (or flag
                                                         (doom-cli-command-string
                                                          (if
                                                              (keywordp
                                                               (car command))
                                                              command
                                                            (cdr command))))
                                                     (if
                                                         (or
                                                          (= min max)
                                                          (= max most-positive-fixnum))
                                                         min
                                                       (format "%d-%d" min max))
                                                     (if
                                                         (or
                                                          (= min 0)
                                                          (> min 1))
                                                         "s" "")
                                                     (length args)))
                                                   (doom-cli-call
                                                    (cons ':help
                                                          (cons "--synopsis"
                                                                (cons "--postamble"
                                                                      (cdr
                                                                       (doom-cli--command context)))))
                                                    context e)))))))))))))))
                       5)
                      (doom-cli-unrecognized-option-error
                       (doom-print
                        (doom-print--format
                         (doom-print--style 'red "Error: unknown option %s")
                         (car
                          (cdr e))))
                       (doom-cli-call
                        (cons ':help
                              (cons "--synopsis"
                                    (cons "--postamble"
                                          (cdr
                                           (doom-cli--command context)))))
                        context e)
                       5)
                      (doom-cli-invalid-option-error
                       (let*
                           ((val
                             (cdr e)))
                         (progn
                           (ignore
                            (consp val))
                           (let*
                               ((x37
                                 (car-safe val))
                                (x38
                                 (cdr-safe val)))
                             (progn
                               (ignore
                                (consp x38))
                               (let*
                                   ((x39
                                     (car-safe x38))
                                    (x40
                                     (cdr-safe x38)))
                                 (progn
                                   (ignore
                                    (consp x40))
                                   (let*
                                       ((x41
                                         (car-safe x40))
                                        (x42
                                         (cdr-safe x40)))
                                     (progn
                                       (ignore
                                        (consp x42))
                                       (let*
                                           ((x43
                                             (car-safe x42))
                                            (x44
                                             (cdr-safe x42)))
                                         (progn
                                           (ignore
                                            (null x44))
                                           (let
                                               ((types x37)
                                                (option x39)
                                                (value x41)
                                                (errors x43))
                                             (progn
                                               (doom-print
                                                (doom-print--format
                                                 (doom-print--style 'red "Error: %s received invalid value %S")
                                                 (string-join
                                                  (progn
                                                    (or
                                                     (progn
                                                       (and
                                                        (memq
                                                         (type-of option)
                                                         cl-struct-doom-cli-option-tags)
                                                        t))
                                                     (signal 'wrong-type-argument
                                                             (list 'doom-cli-option option)))
                                                    (aref option 5))
                                                  "/")
                                                 value))
                                               (doom-print
                                                (doom-print--format
                                                 (doom-print--style 'bold "\nValidation errors:")))
                                               (let
                                                   ((tail errors))
                                                 (while tail
                                                   (let
                                                       ((err
                                                         (car tail)))
                                                     (doom-print
                                                      (doom-print--format
                                                       (doom-print--class 'item "%s."
                                                                          (doom-print--class 'fill err))))
                                                     (setq tail
                                                           (cdr tail)))))))))))))))))
                       (doom-cli-call
                        (cons ':help
                              (cons "--postamble"
                                    (cdr
                                     (doom-cli--command context))))
                        context e)
                       5)
                      (doom-cli-command-not-found-error
                       (let*
                           ((command
                             (cdr e))
                            (cli
                             (doom-cli-get command)))
                         (cond
                          ((null cli)
                           (doom-print
                            (doom-print--format
                             (doom-print--style 'red "Error: unrecognized command '%s'")
                             (doom-cli-command-string
                              (or
                               (cdr command)
                               command))))
                           (doom-cli-call
                            (cons ':help
                                  (cons "--similar"
                                        (cons "--postamble"
                                              (cdr command))))
                            context e))
                          ((null
                            (progn
                              (or
                               (progn
                                 (and
                                  (memq
                                   (type-of cli)
                                   cl-struct-doom-cli-tags)
                                  t))
                               (signal 'wrong-type-argument
                                       (list 'doom-cli cli)))
                              (aref cli 9)))
                           (doom-print
                            (doom-print--format
                             (doom-print--style 'red "Error: a subcommand is required")))
                           (doom-cli-call
                            (cons ':help
                                  (cons "--subcommands"
                                        (cons "--postamble"
                                              (cdr command))))
                            context e))))
                       4)
                      (doom-cli-invalid-prefix-error
                       (let
                           ((prefix
                             (car
                              (cdr e))))
                         (doom-print
                          (doom-print--format
                           (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
                           prefix))
                         (let*
                             ((suggested
                               (and t
                                    (let*
                                        ((--cl-var-- t)
                                         --cl-var--)
                                      (catch '--cl-block---cl-finish----
                                        (maphash
                                         #'(lambda
                                             (--cl-var-- cli)
                                             (or
                                              (if
                                                  (progn
                                                    (or
                                                     (progn
                                                       (and
                                                        (memq
                                                         (type-of cli)
                                                         cl-struct-doom-cli-tags)
                                                        t))
                                                     (signal 'wrong-type-argument
                                                             (list 'doom-cli cli)))
                                                    (aref cli 2))
                                                  t
                                                (progn
                                                  (setq --cl-var--
                                                        (car
                                                         (progn
                                                           (or
                                                            (progn
                                                              (and
                                                               (memq
                                                                (type-of cli)
                                                                cl-struct-doom-cli-tags)
                                                               t))
                                                            (signal 'wrong-type-argument
                                                                    (list 'doom-cli cli)))
                                                           (aref cli 1))))
                                                  (setq --cl-var-- nil)))
                                              (throw '--cl-block---cl-finish---- nil)))
                                         doom-cli--table))
                                      --cl-var--))))
                           (if suggested
                               (doom-print
                                (doom-print--format "Did you mean %S?" suggested))
                             (doom-print
                              (doom-print--format "There are no commands defined under %S." prefix)))))
                       4)
                      (user-error
                       (doom-print
                        (doom-print--format
                         (doom-print--style 'red "Error: %s")
                         (car
                          (cdr e))))
                       (doom-print
                        (doom-print--format "\nAborting..."))
                       3)))
                  context))))
         (fset #'message old)))))
 ((prefix . "doom")
  (args
   ("doctor"))
  (args "doctor")
  (context . #s(doom-cli-context
                (26384 50378 735038 513000)
                65238 0
                (88 . 27)
                nil nil "doom" nil nil
                ("doom" "doctor")
                nil
                ("doctor")
                (("--eval")
                 ("-E")
                 ("--strict-load")
                 ("--load")
                 ("-L")
                 ("--color")
                 ("--benchmark")
                 ("--profile")
                 ("--pager")
                 ("--emacsdir")
                 ("--doomdir")
                 ("--verbose")
                 ("-v")
                 ("--debug")
                 ("-D")
                 ("--force")
                 ("-!"))
                ((t)
                 (("doom" "doctor"))
                 (("doom")
                  "doctor"))
                #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (write-logs-fn .
                 #[128 "\302\301\303\300\4\"\"\207"
                       [(#s(doom-cli-context
                            (26384 50378 735038 513000)
                            65238 0
                            (88 . 27)
                            nil nil "doom" nil nil
                            ("doom" "doctor")
                            nil
                            ("doctor")
                            (("--eval")
                             ("-E")
                             ("--strict-load")
                             ("--load")
                             ("-L")
                             ("--color")
                             ("--benchmark")
                             ("--profile")
                             ("--pager")
                             ("--emacsdir")
                             ("--doomdir")
                             ("--verbose")
                             ("-v")
                             ("--debug")
                             ("-D")
                             ("--force")
                             ("-!"))
                            ((t)
                             (("doom" "doctor"))
                             (("doom")
                              "doctor"))
                            #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
                        doom-cli--output-write-logs-h apply append]
                       6 "\n\n(fn &rest ARGS2)"])
  (show-benchmark-fn .
                     #[128 "\302\301\303\300\4\"\"\207"
                           [(#s(doom-cli-context
                                (26384 50378 735038 513000)
                                65238 0
                                (88 . 27)
                                nil nil "doom" nil nil
                                ("doom" "doctor")
                                nil
                                ("doctor")
                                (("--eval")
                                 ("-E")
                                 ("--strict-load")
                                 ("--load")
                                 ("-L")
                                 ("--color")
                                 ("--benchmark")
                                 ("--profile")
                                 ("--pager")
                                 ("--emacsdir")
                                 ("--doomdir")
                                 ("--verbose")
                                 ("-v")
                                 ("--debug")
                                 ("-D")
                                 ("--force")
                                 ("-!"))
                                ((t)
                                 (("doom" "doctor"))
                                 (("doom")
                                  "doctor"))
                                #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
                            doom-cli--output-benchmark-h apply append]
                           6 "\n\n(fn &rest ARGS2)"])
  (doomctxt . #s(doom-cli-context
                 (26384 50378 735038 513000)
                 65238 0
                 (88 . 27)
                 nil nil "doom" nil nil
                 ("doom" "doctor")
                 nil
                 ("doctor")
                 (("--eval")
                  ("-E")
                  ("--strict-load")
                  ("--load")
                  ("-L")
                  ("--color")
                  ("--benchmark")
                  ("--profile")
                  ("--pager")
                  ("--emacsdir")
                  ("--doomdir")
                  ("--verbose")
                  ("-v")
                  ("--debug")
                  ("-D")
                  ("--force")
                  ("-!"))
                 ((t)
                  (("doom" "doctor"))
                  (("doom")
                   "doctor"))
                 #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (streamspec
   (>= notice #<buffer  *doom-cli stdout*>)
   (t . #<buffer  *doom-cli stderr*>))))

;;;; 57
((let*
     ((doomctxt context)
      (debugger
       (doom-rpartial #'doom-cli-debugger doomctxt))
      (debug-on-error t))
   (let
       ((streamspec
         (list
          (list '>= 'notice
                (progn
                  (or
                   (progn
                     (and
                      (memq
                       (type-of doomctxt)
                       cl-struct-doom-cli-context-tags)
                      t))
                   (signal 'wrong-type-argument
                           (list 'doom-cli-context doomctxt)))
                  (aref doomctxt 16)))
          (cons t
                (progn
                  (or
                   (progn
                     (and
                      (memq
                       (type-of doomctxt)
                       cl-struct-doom-cli-context-tags)
                      t))
                   (signal 'wrong-type-argument
                           (list 'doom-cli-context doomctxt)))
                  (aref doomctxt 17))))))
     (let
         ((standard-output
           (doom-print--redirect-standard-output streamspec t)))
       (let*
           ((vnew
             (doom-print--redirect-message streamspec
                                           (if noninteractive 'debug 'notice)))
            (old
             (symbol-function #'message)))
         (unwind-protect
             (progn
               (fset #'message vnew)
               (let
                   ((doom-print-stream standard-output))
                 (progn
                   (if
                       (and
                        (not doom-inhibit-log)
                        (or
                         (not noninteractive)
                         (<= 2 doom-log-level)))
                       (progn
                         (doom--log 2 "run!: %s %s" prefix
                                    (combine-and-quote-strings args))))
                   (add-hook 'kill-emacs-hook show-benchmark-fn 94)
                   (add-hook 'kill-emacs-hook write-logs-fn 95)
                   (if
                       (doom-cli-context-pipe-p context :out t)
                       (progn
                         (setq doom-print-backend nil)))
                   (if
                       (doom-cli-context-pipe-p context :in)
                       (progn
                         (save-current-buffer
                           (set-buffer
                            (progn
                              (or
                               (progn
                                 (and
                                  (memq
                                   (type-of context)
                                   cl-struct-doom-cli-context-tags)
                                  t))
                               (signal 'wrong-type-argument
                                       (list 'doom-cli-context context)))
                              (aref context 15)))
                           (while
                               (let*
                                   ((in
                                     (and t
                                          (condition-case nil
                                              (progn
                                                (read-from-minibuffer ""))
                                            (error nil)))))
                                 (if in
                                     (insert in "\n")
                                   (condition-case nil
                                       (progn
                                         (delete-char -1))
                                     (error nil))))))))
                   (doom-cli--exit
                    (catch 'exit
                      (condition-case e
                          (let*
                              ((args
                                (cons
                                 (if
                                     (getenv "__DOOMDUMP")
                                     :dump prefix)
                                 args))
                               (context
                                (doom-cli-context-restore
                                 (getenv "__DOOMCONTEXT")
                                 context))
                               (context
                                (doom-cli-context-parse args context)))
                            (run-hook-with-args 'doom-cli-before-run-functions context)
                            (let
                                ((result
                                  (doom-cli-context-execute context)))
                              (run-hook-with-args 'doom-cli-after-run-functions context result))
                            0)
                        (doom-cli-wrong-number-of-arguments-error
                         (let*
                             ((val
                               (cdr e)))
                           (progn
                             (ignore
                              (consp val))
                             (let*
                                 ((x27
                                   (car-safe val))
                                  (x28
                                   (cdr-safe val)))
                               (progn
                                 (ignore
                                  (consp x28))
                                 (let*
                                     ((x29
                                       (car-safe x28))
                                      (x30
                                       (cdr-safe x28)))
                                   (progn
                                     (ignore
                                      (consp x30))
                                     (let*
                                         ((x31
                                           (car-safe x30))
                                          (x32
                                           (cdr-safe x30)))
                                       (progn
                                         (ignore
                                          (consp x32))
                                         (let*
                                             ((x33
                                               (car-safe x32))
                                              (x34
                                               (cdr-safe x32)))
                                           (progn
                                             (ignore
                                              (consp x34))
                                             (let*
                                                 ((x35
                                                   (car-safe x34))
                                                  (x36
                                                   (cdr-safe x34)))
                                               (progn
                                                 (ignore
                                                  (null x36))
                                                 (let
                                                     ((command x27)
                                                      (flag x29)
                                                      (args x31)
                                                      (min x33)
                                                      (max x35))
                                                   (progn
                                                     (doom-print
                                                      (doom-print--format
                                                       (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
                                                       (or flag
                                                           (doom-cli-command-string
                                                            (if
                                                                (keywordp
                                                                 (car command))
                                                                command
                                                              (cdr command))))
                                                       (if
                                                           (or
                                                            (= min max)
                                                            (= max most-positive-fixnum))
                                                           min
                                                         (format "%d-%d" min max))
                                                       (if
                                                           (or
                                                            (= min 0)
                                                            (> min 1))
                                                           "s" "")
                                                       (length args)))
                                                     (doom-cli-call
                                                      (cons ':help
                                                            (cons "--synopsis"
                                                                  (cons "--postamble"
                                                                        (cdr
                                                                         (doom-cli--command context)))))
                                                      context e)))))))))))))))
                         5)
                        (doom-cli-unrecognized-option-error
                         (doom-print
                          (doom-print--format
                           (doom-print--style 'red "Error: unknown option %s")
                           (car
                            (cdr e))))
                         (doom-cli-call
                          (cons ':help
                                (cons "--synopsis"
                                      (cons "--postamble"
                                            (cdr
                                             (doom-cli--command context)))))
                          context e)
                         5)
                        (doom-cli-invalid-option-error
                         (let*
                             ((val
                               (cdr e)))
                           (progn
                             (ignore
                              (consp val))
                             (let*
                                 ((x37
                                   (car-safe val))
                                  (x38
                                   (cdr-safe val)))
                               (progn
                                 (ignore
                                  (consp x38))
                                 (let*
                                     ((x39
                                       (car-safe x38))
                                      (x40
                                       (cdr-safe x38)))
                                   (progn
                                     (ignore
                                      (consp x40))
                                     (let*
                                         ((x41
                                           (car-safe x40))
                                          (x42
                                           (cdr-safe x40)))
                                       (progn
                                         (ignore
                                          (consp x42))
                                         (let*
                                             ((x43
                                               (car-safe x42))
                                              (x44
                                               (cdr-safe x42)))
                                           (progn
                                             (ignore
                                              (null x44))
                                             (let
                                                 ((types x37)
                                                  (option x39)
                                                  (value x41)
                                                  (errors x43))
                                               (progn
                                                 (doom-print
                                                  (doom-print--format
                                                   (doom-print--style 'red "Error: %s received invalid value %S")
                                                   (string-join
                                                    (progn
                                                      (or
                                                       (progn
                                                         (and
                                                          (memq
                                                           (type-of option)
                                                           cl-struct-doom-cli-option-tags)
                                                          t))
                                                       (signal 'wrong-type-argument
                                                               (list 'doom-cli-option option)))
                                                      (aref option 5))
                                                    "/")
                                                   value))
                                                 (doom-print
                                                  (doom-print--format
                                                   (doom-print--style 'bold "\nValidation errors:")))
                                                 (let
                                                     ((tail errors))
                                                   (while tail
                                                     (let
                                                         ((err
                                                           (car tail)))
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'item "%s."
                                                                            (doom-print--class 'fill err))))
                                                       (setq tail
                                                             (cdr tail)))))))))))))))))
                         (doom-cli-call
                          (cons ':help
                                (cons "--postamble"
                                      (cdr
                                       (doom-cli--command context))))
                          context e)
                         5)
                        (doom-cli-command-not-found-error
                         (let*
                             ((command
                               (cdr e))
                              (cli
                               (doom-cli-get command)))
                           (cond
                            ((null cli)
                             (doom-print
                              (doom-print--format
                               (doom-print--style 'red "Error: unrecognized command '%s'")
                               (doom-cli-command-string
                                (or
                                 (cdr command)
                                 command))))
                             (doom-cli-call
                              (cons ':help
                                    (cons "--similar"
                                          (cons "--postamble"
                                                (cdr command))))
                              context e))
                            ((null
                              (progn
                                (or
                                 (progn
                                   (and
                                    (memq
                                     (type-of cli)
                                     cl-struct-doom-cli-tags)
                                    t))
                                 (signal 'wrong-type-argument
                                         (list 'doom-cli cli)))
                                (aref cli 9)))
                             (doom-print
                              (doom-print--format
                               (doom-print--style 'red "Error: a subcommand is required")))
                             (doom-cli-call
                              (cons ':help
                                    (cons "--subcommands"
                                          (cons "--postamble"
                                                (cdr command))))
                              context e))))
                         4)
                        (doom-cli-invalid-prefix-error
                         (let
                             ((prefix
                               (car
                                (cdr e))))
                           (doom-print
                            (doom-print--format
                             (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
                             prefix))
                           (let*
                               ((suggested
                                 (and t
                                      (let*
                                          ((--cl-var-- t)
                                           --cl-var--)
                                        (catch '--cl-block---cl-finish----
                                          (maphash
                                           #'(lambda
                                               (--cl-var-- cli)
                                               (or
                                                (if
                                                    (progn
                                                      (or
                                                       (progn
                                                         (and
                                                          (memq
                                                           (type-of cli)
                                                           cl-struct-doom-cli-tags)
                                                          t))
                                                       (signal 'wrong-type-argument
                                                               (list 'doom-cli cli)))
                                                      (aref cli 2))
                                                    t
                                                  (progn
                                                    (setq --cl-var--
                                                          (car
                                                           (progn
                                                             (or
                                                              (progn
                                                                (and
                                                                 (memq
                                                                  (type-of cli)
                                                                  cl-struct-doom-cli-tags)
                                                                 t))
                                                              (signal 'wrong-type-argument
                                                                      (list 'doom-cli cli)))
                                                             (aref cli 1))))
                                                    (setq --cl-var-- nil)))
                                                (throw '--cl-block---cl-finish---- nil)))
                                           doom-cli--table))
                                        --cl-var--))))
                             (if suggested
                                 (doom-print
                                  (doom-print--format "Did you mean %S?" suggested))
                               (doom-print
                                (doom-print--format "There are no commands defined under %S." prefix)))))
                         4)
                        (user-error
                         (doom-print
                          (doom-print--format
                           (doom-print--style 'red "Error: %s")
                           (car
                            (cdr e))))
                         (doom-print
                          (doom-print--format "\nAborting..."))
                         3)))
                    context))))
           (fset #'message old))))))
 ((prefix . "doom")
  (args
   ("doctor"))
  (args "doctor")
  (context . #s(doom-cli-context
                (26384 50378 735038 513000)
                65238 0
                (88 . 27)
                nil nil "doom" nil nil
                ("doom" "doctor")
                nil
                ("doctor")
                (("--eval")
                 ("-E")
                 ("--strict-load")
                 ("--load")
                 ("-L")
                 ("--color")
                 ("--benchmark")
                 ("--profile")
                 ("--pager")
                 ("--emacsdir")
                 ("--doomdir")
                 ("--verbose")
                 ("-v")
                 ("--debug")
                 ("-D")
                 ("--force")
                 ("-!"))
                ((t)
                 (("doom" "doctor"))
                 (("doom")
                  "doctor"))
                #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (write-logs-fn .
                 #[128 "\302\301\303\300\4\"\"\207"
                       [(#s(doom-cli-context
                            (26384 50378 735038 513000)
                            65238 0
                            (88 . 27)
                            nil nil "doom" nil nil
                            ("doom" "doctor")
                            nil
                            ("doctor")
                            (("--eval")
                             ("-E")
                             ("--strict-load")
                             ("--load")
                             ("-L")
                             ("--color")
                             ("--benchmark")
                             ("--profile")
                             ("--pager")
                             ("--emacsdir")
                             ("--doomdir")
                             ("--verbose")
                             ("-v")
                             ("--debug")
                             ("-D")
                             ("--force")
                             ("-!"))
                            ((t)
                             (("doom" "doctor"))
                             (("doom")
                              "doctor"))
                            #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
                        doom-cli--output-write-logs-h apply append]
                       6 "\n\n(fn &rest ARGS2)"])
  (show-benchmark-fn .
                     #[128 "\302\301\303\300\4\"\"\207"
                           [(#s(doom-cli-context
                                (26384 50378 735038 513000)
                                65238 0
                                (88 . 27)
                                nil nil "doom" nil nil
                                ("doom" "doctor")
                                nil
                                ("doctor")
                                (("--eval")
                                 ("-E")
                                 ("--strict-load")
                                 ("--load")
                                 ("-L")
                                 ("--color")
                                 ("--benchmark")
                                 ("--profile")
                                 ("--pager")
                                 ("--emacsdir")
                                 ("--doomdir")
                                 ("--verbose")
                                 ("-v")
                                 ("--debug")
                                 ("-D")
                                 ("--force")
                                 ("-!"))
                                ((t)
                                 (("doom" "doctor"))
                                 (("doom")
                                  "doctor"))
                                #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
                            doom-cli--output-benchmark-h apply append]
                           6 "\n\n(fn &rest ARGS2)"])
  (doomctxt . #s(doom-cli-context
                 (26384 50378 735038 513000)
                 65238 0
                 (88 . 27)
                 nil nil "doom" nil nil
                 ("doom" "doctor")
                 nil
                 ("doctor")
                 (("--eval")
                  ("-E")
                  ("--strict-load")
                  ("--load")
                  ("-L")
                  ("--color")
                  ("--benchmark")
                  ("--profile")
                  ("--pager")
                  ("--emacsdir")
                  ("--doomdir")
                  ("--verbose")
                  ("-v")
                  ("--debug")
                  ("-D")
                  ("--force")
                  ("-!"))
                 ((t)
                  (("doom" "doctor"))
                  (("doom")
                   "doctor"))
                 #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (debugger closure
            ((args #s(doom-cli-context
                      (26384 50378 735038 513000)
                      65238 0
                      (88 . 27)
                      nil nil "doom" nil nil
                      ("doom" "doctor")
                      nil
                      ("doctor")
                      (("--eval")
                       ("-E")
                       ("--strict-load")
                       ("--load")
                       ("-L")
                       ("--color")
                       ("--benchmark")
                       ("--profile")
                       ("--pager")
                       ("--emacsdir")
                       ("--doomdir")
                       ("--verbose")
                       ("-v")
                       ("--debug")
                       ("-D")
                       ("--force")
                       ("-!"))
                      ((t)
                       (("doom" "doctor"))
                       (("doom")
                        "doctor"))
                      #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
             (fn . doom-cli-debugger))
            (&rest pre-args)
            (apply fn
                   (append pre-args args)))
  (debug-on-error . t)))

;;;; 58
((let*
     ((args
       (flatten-list args))
      (context
       (make-doom-cli-context :prefix prefix :whole args))
      (doom-cli--context context)
      (write-logs-fn
       (doom-partial #'doom-cli--output-write-logs-h context))
      (show-benchmark-fn
       (doom-partial #'doom-cli--output-benchmark-h context)))
   (let*
       ((doomctxt context)
        (debugger
         (doom-rpartial #'doom-cli-debugger doomctxt))
        (debug-on-error t))
     (let
         ((streamspec
           (list
            (list '>= 'notice
                  (progn
                    (or
                     (progn
                       (and
                        (memq
                         (type-of doomctxt)
                         cl-struct-doom-cli-context-tags)
                        t))
                     (signal 'wrong-type-argument
                             (list 'doom-cli-context doomctxt)))
                    (aref doomctxt 16)))
            (cons t
                  (progn
                    (or
                     (progn
                       (and
                        (memq
                         (type-of doomctxt)
                         cl-struct-doom-cli-context-tags)
                        t))
                     (signal 'wrong-type-argument
                             (list 'doom-cli-context doomctxt)))
                    (aref doomctxt 17))))))
       (let
           ((standard-output
             (doom-print--redirect-standard-output streamspec t)))
         (let*
             ((vnew
               (doom-print--redirect-message streamspec
                                             (if noninteractive 'debug 'notice)))
              (old
               (symbol-function #'message)))
           (unwind-protect
               (progn
                 (fset #'message vnew)
                 (let
                     ((doom-print-stream standard-output))
                   (progn
                     (if
                         (and
                          (not doom-inhibit-log)
                          (or
                           (not noninteractive)
                           (<= 2 doom-log-level)))
                         (progn
                           (doom--log 2 "run!: %s %s" prefix
                                      (combine-and-quote-strings args))))
                     (add-hook 'kill-emacs-hook show-benchmark-fn 94)
                     (add-hook 'kill-emacs-hook write-logs-fn 95)
                     (if
                         (doom-cli-context-pipe-p context :out t)
                         (progn
                           (setq doom-print-backend nil)))
                     (if
                         (doom-cli-context-pipe-p context :in)
                         (progn
                           (save-current-buffer
                             (set-buffer
                              (progn
                                (or
                                 (progn
                                   (and
                                    (memq
                                     (type-of context)
                                     cl-struct-doom-cli-context-tags)
                                    t))
                                 (signal 'wrong-type-argument
                                         (list 'doom-cli-context context)))
                                (aref context 15)))
                             (while
                                 (let*
                                     ((in
                                       (and t
                                            (condition-case nil
                                                (progn
                                                  (read-from-minibuffer ""))
                                              (error nil)))))
                                   (if in
                                       (insert in "\n")
                                     (condition-case nil
                                         (progn
                                           (delete-char -1))
                                       (error nil))))))))
                     (doom-cli--exit
                      (catch 'exit
                        (condition-case e
                            (let*
                                ((args
                                  (cons
                                   (if
                                       (getenv "__DOOMDUMP")
                                       :dump prefix)
                                   args))
                                 (context
                                  (doom-cli-context-restore
                                   (getenv "__DOOMCONTEXT")
                                   context))
                                 (context
                                  (doom-cli-context-parse args context)))
                              (run-hook-with-args 'doom-cli-before-run-functions context)
                              (let
                                  ((result
                                    (doom-cli-context-execute context)))
                                (run-hook-with-args 'doom-cli-after-run-functions context result))
                              0)
                          (doom-cli-wrong-number-of-arguments-error
                           (let*
                               ((val
                                 (cdr e)))
                             (progn
                               (ignore
                                (consp val))
                               (let*
                                   ((x27
                                     (car-safe val))
                                    (x28
                                     (cdr-safe val)))
                                 (progn
                                   (ignore
                                    (consp x28))
                                   (let*
                                       ((x29
                                         (car-safe x28))
                                        (x30
                                         (cdr-safe x28)))
                                     (progn
                                       (ignore
                                        (consp x30))
                                       (let*
                                           ((x31
                                             (car-safe x30))
                                            (x32
                                             (cdr-safe x30)))
                                         (progn
                                           (ignore
                                            (consp x32))
                                           (let*
                                               ((x33
                                                 (car-safe x32))
                                                (x34
                                                 (cdr-safe x32)))
                                             (progn
                                               (ignore
                                                (consp x34))
                                               (let*
                                                   ((x35
                                                     (car-safe x34))
                                                    (x36
                                                     (cdr-safe x34)))
                                                 (progn
                                                   (ignore
                                                    (null x36))
                                                   (let
                                                       ((command x27)
                                                        (flag x29)
                                                        (args x31)
                                                        (min x33)
                                                        (max x35))
                                                     (progn
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
                                                         (or flag
                                                             (doom-cli-command-string
                                                              (if
                                                                  (keywordp
                                                                   (car command))
                                                                  command
                                                                (cdr command))))
                                                         (if
                                                             (or
                                                              (= min max)
                                                              (= max most-positive-fixnum))
                                                             min
                                                           (format "%d-%d" min max))
                                                         (if
                                                             (or
                                                              (= min 0)
                                                              (> min 1))
                                                             "s" "")
                                                         (length args)))
                                                       (doom-cli-call
                                                        (cons ':help
                                                              (cons "--synopsis"
                                                                    (cons "--postamble"
                                                                          (cdr
                                                                           (doom-cli--command context)))))
                                                        context e)))))))))))))))
                           5)
                          (doom-cli-unrecognized-option-error
                           (doom-print
                            (doom-print--format
                             (doom-print--style 'red "Error: unknown option %s")
                             (car
                              (cdr e))))
                           (doom-cli-call
                            (cons ':help
                                  (cons "--synopsis"
                                        (cons "--postamble"
                                              (cdr
                                               (doom-cli--command context)))))
                            context e)
                           5)
                          (doom-cli-invalid-option-error
                           (let*
                               ((val
                                 (cdr e)))
                             (progn
                               (ignore
                                (consp val))
                               (let*
                                   ((x37
                                     (car-safe val))
                                    (x38
                                     (cdr-safe val)))
                                 (progn
                                   (ignore
                                    (consp x38))
                                   (let*
                                       ((x39
                                         (car-safe x38))
                                        (x40
                                         (cdr-safe x38)))
                                     (progn
                                       (ignore
                                        (consp x40))
                                       (let*
                                           ((x41
                                             (car-safe x40))
                                            (x42
                                             (cdr-safe x40)))
                                         (progn
                                           (ignore
                                            (consp x42))
                                           (let*
                                               ((x43
                                                 (car-safe x42))
                                                (x44
                                                 (cdr-safe x42)))
                                             (progn
                                               (ignore
                                                (null x44))
                                               (let
                                                   ((types x37)
                                                    (option x39)
                                                    (value x41)
                                                    (errors x43))
                                                 (progn
                                                   (doom-print
                                                    (doom-print--format
                                                     (doom-print--style 'red "Error: %s received invalid value %S")
                                                     (string-join
                                                      (progn
                                                        (or
                                                         (progn
                                                           (and
                                                            (memq
                                                             (type-of option)
                                                             cl-struct-doom-cli-option-tags)
                                                            t))
                                                         (signal 'wrong-type-argument
                                                                 (list 'doom-cli-option option)))
                                                        (aref option 5))
                                                      "/")
                                                     value))
                                                   (doom-print
                                                    (doom-print--format
                                                     (doom-print--style 'bold "\nValidation errors:")))
                                                   (let
                                                       ((tail errors))
                                                     (while tail
                                                       (let
                                                           ((err
                                                             (car tail)))
                                                         (doom-print
                                                          (doom-print--format
                                                           (doom-print--class 'item "%s."
                                                                              (doom-print--class 'fill err))))
                                                         (setq tail
                                                               (cdr tail)))))))))))))))))
                           (doom-cli-call
                            (cons ':help
                                  (cons "--postamble"
                                        (cdr
                                         (doom-cli--command context))))
                            context e)
                           5)
                          (doom-cli-command-not-found-error
                           (let*
                               ((command
                                 (cdr e))
                                (cli
                                 (doom-cli-get command)))
                             (cond
                              ((null cli)
                               (doom-print
                                (doom-print--format
                                 (doom-print--style 'red "Error: unrecognized command '%s'")
                                 (doom-cli-command-string
                                  (or
                                   (cdr command)
                                   command))))
                               (doom-cli-call
                                (cons ':help
                                      (cons "--similar"
                                            (cons "--postamble"
                                                  (cdr command))))
                                context e))
                              ((null
                                (progn
                                  (or
                                   (progn
                                     (and
                                      (memq
                                       (type-of cli)
                                       cl-struct-doom-cli-tags)
                                      t))
                                   (signal 'wrong-type-argument
                                           (list 'doom-cli cli)))
                                  (aref cli 9)))
                               (doom-print
                                (doom-print--format
                                 (doom-print--style 'red "Error: a subcommand is required")))
                               (doom-cli-call
                                (cons ':help
                                      (cons "--subcommands"
                                            (cons "--postamble"
                                                  (cdr command))))
                                context e))))
                           4)
                          (doom-cli-invalid-prefix-error
                           (let
                               ((prefix
                                 (car
                                  (cdr e))))
                             (doom-print
                              (doom-print--format
                               (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
                               prefix))
                             (let*
                                 ((suggested
                                   (and t
                                        (let*
                                            ((--cl-var-- t)
                                             --cl-var--)
                                          (catch '--cl-block---cl-finish----
                                            (maphash
                                             #'(lambda
                                                 (--cl-var-- cli)
                                                 (or
                                                  (if
                                                      (progn
                                                        (or
                                                         (progn
                                                           (and
                                                            (memq
                                                             (type-of cli)
                                                             cl-struct-doom-cli-tags)
                                                            t))
                                                         (signal 'wrong-type-argument
                                                                 (list 'doom-cli cli)))
                                                        (aref cli 2))
                                                      t
                                                    (progn
                                                      (setq --cl-var--
                                                            (car
                                                             (progn
                                                               (or
                                                                (progn
                                                                  (and
                                                                   (memq
                                                                    (type-of cli)
                                                                    cl-struct-doom-cli-tags)
                                                                   t))
                                                                (signal 'wrong-type-argument
                                                                        (list 'doom-cli cli)))
                                                               (aref cli 1))))
                                                      (setq --cl-var-- nil)))
                                                  (throw '--cl-block---cl-finish---- nil)))
                                             doom-cli--table))
                                          --cl-var--))))
                               (if suggested
                                   (doom-print
                                    (doom-print--format "Did you mean %S?" suggested))
                                 (doom-print
                                  (doom-print--format "There are no commands defined under %S." prefix)))))
                           4)
                          (user-error
                           (doom-print
                            (doom-print--format
                             (doom-print--style 'red "Error: %s")
                             (car
                              (cdr e))))
                           (doom-print
                            (doom-print--format "\nAborting..."))
                           3)))
                      context))))
             (fset #'message old)))))))
 ((prefix . "doom")
  (args
   ("doctor"))
  (args "doctor")
  (context . #s(doom-cli-context
                (26384 50378 735038 513000)
                65238 0
                (88 . 27)
                nil nil "doom" nil nil
                ("doom" "doctor")
                nil
                ("doctor")
                (("--eval")
                 ("-E")
                 ("--strict-load")
                 ("--load")
                 ("-L")
                 ("--color")
                 ("--benchmark")
                 ("--profile")
                 ("--pager")
                 ("--emacsdir")
                 ("--doomdir")
                 ("--verbose")
                 ("-v")
                 ("--debug")
                 ("-D")
                 ("--force")
                 ("-!"))
                ((t)
                 (("doom" "doctor"))
                 (("doom")
                  "doctor"))
                #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (write-logs-fn .
                 #[128 "\302\301\303\300\4\"\"\207"
                       [(#s(doom-cli-context
                            (26384 50378 735038 513000)
                            65238 0
                            (88 . 27)
                            nil nil "doom" nil nil
                            ("doom" "doctor")
                            nil
                            ("doctor")
                            (("--eval")
                             ("-E")
                             ("--strict-load")
                             ("--load")
                             ("-L")
                             ("--color")
                             ("--benchmark")
                             ("--profile")
                             ("--pager")
                             ("--emacsdir")
                             ("--doomdir")
                             ("--verbose")
                             ("-v")
                             ("--debug")
                             ("-D")
                             ("--force")
                             ("-!"))
                            ((t)
                             (("doom" "doctor"))
                             (("doom")
                              "doctor"))
                            #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
                        doom-cli--output-write-logs-h apply append]
                       6 "\n\n(fn &rest ARGS2)"])
  (show-benchmark-fn .
                     #[128 "\302\301\303\300\4\"\"\207"
                           [(#s(doom-cli-context
                                (26384 50378 735038 513000)
                                65238 0
                                (88 . 27)
                                nil nil "doom" nil nil
                                ("doom" "doctor")
                                nil
                                ("doctor")
                                (("--eval")
                                 ("-E")
                                 ("--strict-load")
                                 ("--load")
                                 ("-L")
                                 ("--color")
                                 ("--benchmark")
                                 ("--profile")
                                 ("--pager")
                                 ("--emacsdir")
                                 ("--doomdir")
                                 ("--verbose")
                                 ("-v")
                                 ("--debug")
                                 ("-D")
                                 ("--force")
                                 ("-!"))
                                ((t)
                                 (("doom" "doctor"))
                                 (("doom")
                                  "doctor"))
                                #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
                            doom-cli--output-benchmark-h apply append]
                           6 "\n\n(fn &rest ARGS2)"])
  (doom-cli--context . #s(doom-cli-context
                          (26384 50378 735038 513000)
                          65238 0
                          (88 . 27)
                          nil nil "doom" nil nil
                          ("doom" "doctor")
                          nil
                          ("doctor")
                          (("--eval")
                           ("-E")
                           ("--strict-load")
                           ("--load")
                           ("-L")
                           ("--color")
                           ("--benchmark")
                           ("--profile")
                           ("--pager")
                           ("--emacsdir")
                           ("--doomdir")
                           ("--verbose")
                           ("-v")
                           ("--debug")
                           ("-D")
                           ("--force")
                           ("-!"))
                          ((t)
                           (("doom" "doctor"))
                           (("doom")
                            "doctor"))
                          #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))))

;;;; 59
((let
     ((doom-context doom-context))
   (let
       ((tail
         (ensure-list 'cli)))
     (while tail
       (let
           ((context
             (car tail)))
         (doom-context-push context)
         (setq tail
               (cdr tail)))))
   (let*
       ((args
         (flatten-list args))
        (context
         (make-doom-cli-context :prefix prefix :whole args))
        (doom-cli--context context)
        (write-logs-fn
         (doom-partial #'doom-cli--output-write-logs-h context))
        (show-benchmark-fn
         (doom-partial #'doom-cli--output-benchmark-h context)))
     (let*
         ((doomctxt context)
          (debugger
           (doom-rpartial #'doom-cli-debugger doomctxt))
          (debug-on-error t))
       (let
           ((streamspec
             (list
              (list '>= 'notice
                    (progn
                      (or
                       (progn
                         (and
                          (memq
                           (type-of doomctxt)
                           cl-struct-doom-cli-context-tags)
                          t))
                       (signal 'wrong-type-argument
                               (list 'doom-cli-context doomctxt)))
                      (aref doomctxt 16)))
              (cons t
                    (progn
                      (or
                       (progn
                         (and
                          (memq
                           (type-of doomctxt)
                           cl-struct-doom-cli-context-tags)
                          t))
                       (signal 'wrong-type-argument
                               (list 'doom-cli-context doomctxt)))
                      (aref doomctxt 17))))))
         (let
             ((standard-output
               (doom-print--redirect-standard-output streamspec t)))
           (let*
               ((vnew
                 (doom-print--redirect-message streamspec
                                               (if noninteractive 'debug 'notice)))
                (old
                 (symbol-function #'message)))
             (unwind-protect
                 (progn
                   (fset #'message vnew)
                   (let
                       ((doom-print-stream standard-output))
                     (progn
                       (if
                           (and
                            (not doom-inhibit-log)
                            (or
                             (not noninteractive)
                             (<= 2 doom-log-level)))
                           (progn
                             (doom--log 2 "run!: %s %s" prefix
                                        (combine-and-quote-strings args))))
                       (add-hook 'kill-emacs-hook show-benchmark-fn 94)
                       (add-hook 'kill-emacs-hook write-logs-fn 95)
                       (if
                           (doom-cli-context-pipe-p context :out t)
                           (progn
                             (setq doom-print-backend nil)))
                       (if
                           (doom-cli-context-pipe-p context :in)
                           (progn
                             (save-current-buffer
                               (set-buffer
                                (progn
                                  (or
                                   (progn
                                     (and
                                      (memq
                                       (type-of context)
                                       cl-struct-doom-cli-context-tags)
                                      t))
                                   (signal 'wrong-type-argument
                                           (list 'doom-cli-context context)))
                                  (aref context 15)))
                               (while
                                   (let*
                                       ((in
                                         (and t
                                              (condition-case nil
                                                  (progn
                                                    (read-from-minibuffer ""))
                                                (error nil)))))
                                     (if in
                                         (insert in "\n")
                                       (condition-case nil
                                           (progn
                                             (delete-char -1))
                                         (error nil))))))))
                       (doom-cli--exit
                        (catch 'exit
                          (condition-case e
                              (let*
                                  ((args
                                    (cons
                                     (if
                                         (getenv "__DOOMDUMP")
                                         :dump prefix)
                                     args))
                                   (context
                                    (doom-cli-context-restore
                                     (getenv "__DOOMCONTEXT")
                                     context))
                                   (context
                                    (doom-cli-context-parse args context)))
                                (run-hook-with-args 'doom-cli-before-run-functions context)
                                (let
                                    ((result
                                      (doom-cli-context-execute context)))
                                  (run-hook-with-args 'doom-cli-after-run-functions context result))
                                0)
                            (doom-cli-wrong-number-of-arguments-error
                             (let*
                                 ((val
                                   (cdr e)))
                               (progn
                                 (ignore
                                  (consp val))
                                 (let*
                                     ((x27
                                       (car-safe val))
                                      (x28
                                       (cdr-safe val)))
                                   (progn
                                     (ignore
                                      (consp x28))
                                     (let*
                                         ((x29
                                           (car-safe x28))
                                          (x30
                                           (cdr-safe x28)))
                                       (progn
                                         (ignore
                                          (consp x30))
                                         (let*
                                             ((x31
                                               (car-safe x30))
                                              (x32
                                               (cdr-safe x30)))
                                           (progn
                                             (ignore
                                              (consp x32))
                                             (let*
                                                 ((x33
                                                   (car-safe x32))
                                                  (x34
                                                   (cdr-safe x32)))
                                               (progn
                                                 (ignore
                                                  (consp x34))
                                                 (let*
                                                     ((x35
                                                       (car-safe x34))
                                                      (x36
                                                       (cdr-safe x34)))
                                                   (progn
                                                     (ignore
                                                      (null x36))
                                                     (let
                                                         ((command x27)
                                                          (flag x29)
                                                          (args x31)
                                                          (min x33)
                                                          (max x35))
                                                       (progn
                                                         (doom-print
                                                          (doom-print--format
                                                           (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
                                                           (or flag
                                                               (doom-cli-command-string
                                                                (if
                                                                    (keywordp
                                                                     (car command))
                                                                    command
                                                                  (cdr command))))
                                                           (if
                                                               (or
                                                                (= min max)
                                                                (= max most-positive-fixnum))
                                                               min
                                                             (format "%d-%d" min max))
                                                           (if
                                                               (or
                                                                (= min 0)
                                                                (> min 1))
                                                               "s" "")
                                                           (length args)))
                                                         (doom-cli-call
                                                          (cons ':help
                                                                (cons "--synopsis"
                                                                      (cons "--postamble"
                                                                            (cdr
                                                                             (doom-cli--command context)))))
                                                          context e)))))))))))))))
                             5)
                            (doom-cli-unrecognized-option-error
                             (doom-print
                              (doom-print--format
                               (doom-print--style 'red "Error: unknown option %s")
                               (car
                                (cdr e))))
                             (doom-cli-call
                              (cons ':help
                                    (cons "--synopsis"
                                          (cons "--postamble"
                                                (cdr
                                                 (doom-cli--command context)))))
                              context e)
                             5)
                            (doom-cli-invalid-option-error
                             (let*
                                 ((val
                                   (cdr e)))
                               (progn
                                 (ignore
                                  (consp val))
                                 (let*
                                     ((x37
                                       (car-safe val))
                                      (x38
                                       (cdr-safe val)))
                                   (progn
                                     (ignore
                                      (consp x38))
                                     (let*
                                         ((x39
                                           (car-safe x38))
                                          (x40
                                           (cdr-safe x38)))
                                       (progn
                                         (ignore
                                          (consp x40))
                                         (let*
                                             ((x41
                                               (car-safe x40))
                                              (x42
                                               (cdr-safe x40)))
                                           (progn
                                             (ignore
                                              (consp x42))
                                             (let*
                                                 ((x43
                                                   (car-safe x42))
                                                  (x44
                                                   (cdr-safe x42)))
                                               (progn
                                                 (ignore
                                                  (null x44))
                                                 (let
                                                     ((types x37)
                                                      (option x39)
                                                      (value x41)
                                                      (errors x43))
                                                   (progn
                                                     (doom-print
                                                      (doom-print--format
                                                       (doom-print--style 'red "Error: %s received invalid value %S")
                                                       (string-join
                                                        (progn
                                                          (or
                                                           (progn
                                                             (and
                                                              (memq
                                                               (type-of option)
                                                               cl-struct-doom-cli-option-tags)
                                                              t))
                                                           (signal 'wrong-type-argument
                                                                   (list 'doom-cli-option option)))
                                                          (aref option 5))
                                                        "/")
                                                       value))
                                                     (doom-print
                                                      (doom-print--format
                                                       (doom-print--style 'bold "\nValidation errors:")))
                                                     (let
                                                         ((tail errors))
                                                       (while tail
                                                         (let
                                                             ((err
                                                               (car tail)))
                                                           (doom-print
                                                            (doom-print--format
                                                             (doom-print--class 'item "%s."
                                                                                (doom-print--class 'fill err))))
                                                           (setq tail
                                                                 (cdr tail)))))))))))))))))
                             (doom-cli-call
                              (cons ':help
                                    (cons "--postamble"
                                          (cdr
                                           (doom-cli--command context))))
                              context e)
                             5)
                            (doom-cli-command-not-found-error
                             (let*
                                 ((command
                                   (cdr e))
                                  (cli
                                   (doom-cli-get command)))
                               (cond
                                ((null cli)
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--style 'red "Error: unrecognized command '%s'")
                                   (doom-cli-command-string
                                    (or
                                     (cdr command)
                                     command))))
                                 (doom-cli-call
                                  (cons ':help
                                        (cons "--similar"
                                              (cons "--postamble"
                                                    (cdr command))))
                                  context e))
                                ((null
                                  (progn
                                    (or
                                     (progn
                                       (and
                                        (memq
                                         (type-of cli)
                                         cl-struct-doom-cli-tags)
                                        t))
                                     (signal 'wrong-type-argument
                                             (list 'doom-cli cli)))
                                    (aref cli 9)))
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--style 'red "Error: a subcommand is required")))
                                 (doom-cli-call
                                  (cons ':help
                                        (cons "--subcommands"
                                              (cons "--postamble"
                                                    (cdr command))))
                                  context e))))
                             4)
                            (doom-cli-invalid-prefix-error
                             (let
                                 ((prefix
                                   (car
                                    (cdr e))))
                               (doom-print
                                (doom-print--format
                                 (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
                                 prefix))
                               (let*
                                   ((suggested
                                     (and t
                                          (let*
                                              ((--cl-var-- t)
                                               --cl-var--)
                                            (catch '--cl-block---cl-finish----
                                              (maphash
                                               #'(lambda
                                                   (--cl-var-- cli)
                                                   (or
                                                    (if
                                                        (progn
                                                          (or
                                                           (progn
                                                             (and
                                                              (memq
                                                               (type-of cli)
                                                               cl-struct-doom-cli-tags)
                                                              t))
                                                           (signal 'wrong-type-argument
                                                                   (list 'doom-cli cli)))
                                                          (aref cli 2))
                                                        t
                                                      (progn
                                                        (setq --cl-var--
                                                              (car
                                                               (progn
                                                                 (or
                                                                  (progn
                                                                    (and
                                                                     (memq
                                                                      (type-of cli)
                                                                      cl-struct-doom-cli-tags)
                                                                     t))
                                                                  (signal 'wrong-type-argument
                                                                          (list 'doom-cli cli)))
                                                                 (aref cli 1))))
                                                        (setq --cl-var-- nil)))
                                                    (throw '--cl-block---cl-finish---- nil)))
                                               doom-cli--table))
                                            --cl-var--))))
                                 (if suggested
                                     (doom-print
                                      (doom-print--format "Did you mean %S?" suggested))
                                   (doom-print
                                    (doom-print--format "There are no commands defined under %S." prefix)))))
                             4)
                            (user-error
                             (doom-print
                              (doom-print--format
                               (doom-print--style 'red "Error: %s")
                               (car
                                (cdr e))))
                             (doom-print
                              (doom-print--format "\nAborting..."))
                             3)))
                        context))))
               (fset #'message old))))))))
 ((doom-context init cli t)))

;;;; 60
((run! "doom"
       ("doctor"))
 ((prefix . "doom")
  (args
   ("doctor"))))

;;;; 61
((eval-buffer #<buffer  *load*> nil "/home/max/.emacs.d/bin/doom" nil t)
 ((eval-buffer-list #<buffer  *load*>)
  (standard-output)
  (lexical-binding)
  (standard-input . #<buffer  *load*>)
  (macroexp--dynvars)
  (current-load-list
   (require . doom-start)
   "/home/max/.emacs.d/bin/doom")))

;;;; 62
((load-with-code-conversion "/home/max/.emacs.d/bin/doom" "/home/max/.emacs.d/bin/doom" nil t)
 ((load-in-progress . t)
  (inhibit-file-name-operation)
  (set-auto-coding-for-load . t)
  (load-file-name . "/home/max/.emacs.d/bin/doom")
  (load-true-file-name . "/home/max/.emacs.d/bin/doom")
  (read-symbol-shorthands)))

;;;; 63
((load "/home/max/.emacs.d/bin/doom" nil t)
 ((lexical-binding)
  (lread--unescaped-character-literals)))

;;;; 64
((command-line-1
  ("--load" "/home/max/.emacs.d/bin/doom" "--" "doctor"))
 ((command-line-args-left "--" "doctor")
  (argi . "-load")))

;;;; 65
((command-line)
 nil)

;;;; 66
((normal-top-level)
 nil)

