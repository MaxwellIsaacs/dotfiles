;; -*- lisp-interaction -*-
;; vim: set ft=lisp:
;; command=("emacs" "--load" "/home/max/.emacs.d/bin/doom" "--" "sync")
;; date="2024-10-19 14-16-26"

;;;; ENVIRONMENT

;;;; 0
((signal error
	 ("Could not find package doom-gruvbox. Updating recipe repositories: (org-elpa melpa nongnu-elpa gnu-elpa-mirror el-get emacsmirror-mirror) with `straight-pull-recipe-repositories' may fix this"))
 ((debugger-may-continue . t)
  (inhibit-redisplay)
  (inhibit-debugger . t)
  (inhibit-changing-match-data)))

;;;; 1
((error "Could not find package %S. Updating recipe repositories: %S with `straight-pull-recipe-repositories' may fix this" doom-gruvbox
	(org-elpa melpa nongnu-elpa gnu-elpa-mirror el-get emacsmirror-mirror))
 nil)

;;;; 2
((if
     (straight--package-built-in-p melpa-style-recipe)
     (throw '--cl-block-straight--convert-recipe--
	    (list ':type 'built-in ':package
		  (symbol-name melpa-style-recipe)))
   (error
    (concat "Could not find package %S. " "Updating recipe repositories: %S " "with `straight-pull-recipe-repositories' " "may fix this")
    melpa-style-recipe straight-recipe-repositories))
 nil)

;;;; 3
((or
  (straight-recipes-retrieve melpa-style-recipe nil cause)
  (if
      (straight--package-built-in-p melpa-style-recipe)
      (throw '--cl-block-straight--convert-recipe--
	     (list ':type 'built-in ':package
		   (symbol-name melpa-style-recipe)))
    (error
     (concat "Could not find package %S. " "Updating recipe repositories: %S " "with `straight-pull-recipe-repositories' " "may fix this")
     melpa-style-recipe straight-recipe-repositories)))
 nil)

;;;; 4
((if recipe-specified-p melpa-style-recipe
   (or
    (straight-recipes-retrieve melpa-style-recipe nil cause)
    (if
	(straight--package-built-in-p melpa-style-recipe)
	(throw '--cl-block-straight--convert-recipe--
	       (list ':type 'built-in ':package
		     (symbol-name melpa-style-recipe)))
      (error
       (concat "Could not find package %S. " "Updating recipe repositories: %S " "with `straight-pull-recipe-repositories' " "may fix this")
       melpa-style-recipe straight-recipe-repositories))))
 nil)

;;;; 5
((let*
     ((recipe-specified-p
       (listp melpa-style-recipe))
      (full-melpa-style-recipe
       (if recipe-specified-p melpa-style-recipe
	 (or
	  (straight-recipes-retrieve melpa-style-recipe nil cause)
	  (if
	      (straight--package-built-in-p melpa-style-recipe)
	      (throw '--cl-block-straight--convert-recipe--
		     (list ':type 'built-in ':package
			   (symbol-name melpa-style-recipe)))
	    (error
	     (concat "Could not find package %S. " "Updating recipe repositories: %S " "with `straight-pull-recipe-repositories' " "may fix this")
	     melpa-style-recipe straight-recipe-repositories))))))
   (if
       (straight--quoted-form-p full-melpa-style-recipe)
       (progn
	 (setq full-melpa-style-recipe
	       (eval full-melpa-style-recipe))))
   (let*
       ((plist full-melpa-style-recipe)
	(package
	 (if plist
	     (car-safe
	      (prog1 plist
		(setq plist
		      (cdr plist))))
	   (signal 'wrong-number-of-arguments
		   (list
		    '(package . plist)
		    (length plist))))))
     (progn
       (let*
	   ((inherit
	     (plist-member plist :inherit))
	    (inheritance
	     (if inherit
		 (car
		  (cdr inherit))
	       straight-allow-recipe-inheritance)))
	 (if inheritance
	     (progn
	       (let*
		   ((sources
		     (plist-get plist :source))
		    (default
		     (or
		      (let*
			  ((retrieved
			    (and t
				 (straight-recipes-retrieve package
							    (if
								(listp sources)
								sources
							      (list sources))))))
			(if retrieved
			    (cdr
			     (if
				 (straight--quoted-form-p retrieved)
				 (eval retrieved)
			       retrieved))
			  nil))
		      plist))
		    (type
		     (if
			 (plist-member default :type)
			 (plist-get default :type)
		       straight-default-vc))
		    (keywords
		     (append straight--build-keywords
			     (straight-vc-keywords type))))
		 (let*
		     ((fork
		       (and t
			    (plist-get plist :fork))))
		   (if fork
		       (progn
			 (progn
			   (setq default
				 (copy-sequence default))
			   (setq default
				 (plist-put default :fork fork)))
			 (if
			     (listp fork)
			     nil
			   (setq fork 'nil))
			 (progn
			   (setq fork
				 (copy-sequence fork))
			   (setq fork
				 (plist-put fork :repo
					    (straight-vc-git--fork-repo default))))
			 (progn
			   (setq plist
				 (copy-sequence plist))
			   (setq plist
				 (plist-put plist :fork fork))))
		     nil))
		 (let
		     ((tail keywords))
		   (while tail
		     (let
			 ((keyword
			   (car tail)))
		       (if
			   (plist-member plist keyword)
			   nil
			 (let*
			     ((value
			       (and t
				    (plist-get default keyword))))
			   (if value
			       (setq plist
				     (plist-put plist keyword value))
			     nil)))
		       (setq tail
			     (cdr tail)))))))))
       (let
	   ((package
	     (symbol-name package)))
	 (progn
	   (setq plist
		 (copy-sequence plist))
	   (setq plist
		 (plist-put plist :package package)))
	 (if
	     (plist-member plist :type)
	     nil
	   (progn
	     (setq plist
		   (copy-sequence plist))
	     (setq plist
		   (plist-put plist :type straight-default-vc))))
	 (if
	     (or
	      (plist-member plist :local-repo)
	      (eq
	       (plist-get plist :type)
	       'built-in))
	     nil
	   (progn
	     (setq plist
		   (copy-sequence plist))
	     (setq plist
		   (plist-put plist :local-repo
			      (or
			       (straight-vc-local-repo-name plist)
			       package)))))
	 (if recipe-specified-p nil
	   (let*
	       ((--cl-rest-- plist)
		(local-repo
		 (car
		  (cdr
		   (plist-member --cl-rest-- ':local-repo)))))
	     (let*
		 ((original-recipe
		   (and t
			(gethash local-repo straight--repo-cache))))
	       (if original-recipe
		   (progn
		     (let
			 ((props
			   (cons :type
				 (straight-vc-keywords
				  (plist-get plist :type)))))
		       (setq plist
			     (let*
				 ((--cl-var-- plist)
				  (prop nil)
				  (val nil)
				  (--cl-var--)
				  (--cl-var-- nil))
			       (while
				   (consp --cl-var--)
				 (progn
				   (setq --cl-var-- --cl-var--)
				   (setq prop
					 (car-safe
					  (prog1 --cl-var--
					    (setq --cl-var--
						  (cdr --cl-var--)))))
				   (setq val
					 (car --cl-var--)))
				 (if
				     (memq prop props)
				     (progn)
				   (setq --cl-var--
					 (cons prop --cl-var--))
				   (setq --cl-var--
					 (cons val --cl-var--)))
				 (setq --cl-var--
				       (cdr
					(cdr --cl-var--))))
			       (nreverse --cl-var--))))
		     (let
			 ((tail
			   (cons :type
				 (straight-vc-keywords
				  (plist-get original-recipe :type)))))
		       (while tail
			 (let
			     ((keyword
			       (car tail)))
			   (let*
			       ((value
				 (and t
				      (plist-get original-recipe keyword))))
			     (if value
				 (progn
				   (setq plist
					 (copy-sequence plist))
				   (setq plist
					 (plist-put plist keyword value)))
			       nil))
			   (setq tail
				 (cdr tail))))))
		 nil))))
	 plist))))
 ((melpa-style-recipe . doom-gruvbox)
  (cause)
  (recipe-specified-p)))

;;;; 6
((or
  (and
   (symbolp melpa-style-recipe)
   (gethash
    (symbol-name melpa-style-recipe)
    straight--recipe-cache))
  (let*
      ((recipe-specified-p
	(listp melpa-style-recipe))
       (full-melpa-style-recipe
	(if recipe-specified-p melpa-style-recipe
	  (or
	   (straight-recipes-retrieve melpa-style-recipe nil cause)
	   (if
	       (straight--package-built-in-p melpa-style-recipe)
	       (throw '--cl-block-straight--convert-recipe--
		      (list ':type 'built-in ':package
			    (symbol-name melpa-style-recipe)))
	     (error
	      (concat "Could not find package %S. " "Updating recipe repositories: %S " "with `straight-pull-recipe-repositories' " "may fix this")
	      melpa-style-recipe straight-recipe-repositories))))))
    (if
	(straight--quoted-form-p full-melpa-style-recipe)
	(progn
	  (setq full-melpa-style-recipe
		(eval full-melpa-style-recipe))))
    (let*
	((plist full-melpa-style-recipe)
	 (package
	  (if plist
	      (car-safe
	       (prog1 plist
		 (setq plist
		       (cdr plist))))
	    (signal 'wrong-number-of-arguments
		    (list
		     '(package . plist)
		     (length plist))))))
      (progn
	(let*
	    ((inherit
	      (plist-member plist :inherit))
	     (inheritance
	      (if inherit
		  (car
		   (cdr inherit))
		straight-allow-recipe-inheritance)))
	  (if inheritance
	      (progn
		(let*
		    ((sources
		      (plist-get plist :source))
		     (default
		      (or
		       (let*
			   ((retrieved
			     (and t
				  (straight-recipes-retrieve package
							     (if
								 (listp sources)
								 sources
							       (list sources))))))
			 (if retrieved
			     (cdr
			      (if
				  (straight--quoted-form-p retrieved)
				  (eval retrieved)
				retrieved))
			   nil))
		       plist))
		     (type
		      (if
			  (plist-member default :type)
			  (plist-get default :type)
			straight-default-vc))
		     (keywords
		      (append straight--build-keywords
			      (straight-vc-keywords type))))
		  (let*
		      ((fork
			(and t
			     (plist-get plist :fork))))
		    (if fork
			(progn
			  (progn
			    (setq default
				  (copy-sequence default))
			    (setq default
				  (plist-put default :fork fork)))
			  (if
			      (listp fork)
			      nil
			    (setq fork 'nil))
			  (progn
			    (setq fork
				  (copy-sequence fork))
			    (setq fork
				  (plist-put fork :repo
					     (straight-vc-git--fork-repo default))))
			  (progn
			    (setq plist
				  (copy-sequence plist))
			    (setq plist
				  (plist-put plist :fork fork))))
		      nil))
		  (let
		      ((tail keywords))
		    (while tail
		      (let
			  ((keyword
			    (car tail)))
			(if
			    (plist-member plist keyword)
			    nil
			  (let*
			      ((value
				(and t
				     (plist-get default keyword))))
			    (if value
				(setq plist
				      (plist-put plist keyword value))
			      nil)))
			(setq tail
			      (cdr tail)))))))))
	(let
	    ((package
	      (symbol-name package)))
	  (progn
	    (setq plist
		  (copy-sequence plist))
	    (setq plist
		  (plist-put plist :package package)))
	  (if
	      (plist-member plist :type)
	      nil
	    (progn
	      (setq plist
		    (copy-sequence plist))
	      (setq plist
		    (plist-put plist :type straight-default-vc))))
	  (if
	      (or
	       (plist-member plist :local-repo)
	       (eq
		(plist-get plist :type)
		'built-in))
	      nil
	    (progn
	      (setq plist
		    (copy-sequence plist))
	      (setq plist
		    (plist-put plist :local-repo
			       (or
				(straight-vc-local-repo-name plist)
				package)))))
	  (if recipe-specified-p nil
	    (let*
		((--cl-rest-- plist)
		 (local-repo
		  (car
		   (cdr
		    (plist-member --cl-rest-- ':local-repo)))))
	      (let*
		  ((original-recipe
		    (and t
			 (gethash local-repo straight--repo-cache))))
		(if original-recipe
		    (progn
		      (let
			  ((props
			    (cons :type
				  (straight-vc-keywords
				   (plist-get plist :type)))))
			(setq plist
			      (let*
				  ((--cl-var-- plist)
				   (prop nil)
				   (val nil)
				   (--cl-var--)
				   (--cl-var-- nil))
				(while
				    (consp --cl-var--)
				  (progn
				    (setq --cl-var-- --cl-var--)
				    (setq prop
					  (car-safe
					   (prog1 --cl-var--
					     (setq --cl-var--
						   (cdr --cl-var--)))))
				    (setq val
					  (car --cl-var--)))
				  (if
				      (memq prop props)
				      (progn)
				    (setq --cl-var--
					  (cons prop --cl-var--))
				    (setq --cl-var--
					  (cons val --cl-var--)))
				  (setq --cl-var--
					(cdr
					 (cdr --cl-var--))))
				(nreverse --cl-var--))))
		      (let
			  ((tail
			    (cons :type
				  (straight-vc-keywords
				   (plist-get original-recipe :type)))))
			(while tail
			  (let
			      ((keyword
				(car tail)))
			    (let*
				((value
				  (and t
				       (plist-get original-recipe keyword))))
			      (if value
				  (progn
				    (setq plist
					  (copy-sequence plist))
				    (setq plist
					  (plist-put plist keyword value)))
				nil))
			    (setq tail
				  (cdr tail))))))
		  nil))))
	  plist)))))
 nil)

;;;; 7
((catch '--cl-block-straight--convert-recipe--
   (if
       (memq melpa-style-recipe straight-built-in-pseudo-packages)
       (progn
	 (throw '--cl-block-straight--convert-recipe--
		(list ':type 'built-in ':package
		      (symbol-name melpa-style-recipe)))))
   (or
    (and
     (symbolp melpa-style-recipe)
     (gethash
      (symbol-name melpa-style-recipe)
      straight--recipe-cache))
    (let*
	((recipe-specified-p
	  (listp melpa-style-recipe))
	 (full-melpa-style-recipe
	  (if recipe-specified-p melpa-style-recipe
	    (or
	     (straight-recipes-retrieve melpa-style-recipe nil cause)
	     (if
		 (straight--package-built-in-p melpa-style-recipe)
		 (throw '--cl-block-straight--convert-recipe--
			(list ':type 'built-in ':package
			      (symbol-name melpa-style-recipe)))
	       (error
		(concat "Could not find package %S. " "Updating recipe repositories: %S " "with `straight-pull-recipe-repositories' " "may fix this")
		melpa-style-recipe straight-recipe-repositories))))))
      (if
	  (straight--quoted-form-p full-melpa-style-recipe)
	  (progn
	    (setq full-melpa-style-recipe
		  (eval full-melpa-style-recipe))))
      (let*
	  ((plist full-melpa-style-recipe)
	   (package
	    (if plist
		(car-safe
		 (prog1 plist
		   (setq plist
			 (cdr plist))))
	      (signal 'wrong-number-of-arguments
		      (list
		       '(package . plist)
		       (length plist))))))
	(progn
	  (let*
	      ((inherit
		(plist-member plist :inherit))
	       (inheritance
		(if inherit
		    (car
		     (cdr inherit))
		  straight-allow-recipe-inheritance)))
	    (if inheritance
		(progn
		  (let*
		      ((sources
			(plist-get plist :source))
		       (default
			(or
			 (let*
			     ((retrieved
			       (and t
				    (straight-recipes-retrieve package
							       (if
								   (listp sources)
								   sources
								 (list sources))))))
			   (if retrieved
			       (cdr
				(if
				    (straight--quoted-form-p retrieved)
				    (eval retrieved)
				  retrieved))
			     nil))
			 plist))
		       (type
			(if
			    (plist-member default :type)
			    (plist-get default :type)
			  straight-default-vc))
		       (keywords
			(append straight--build-keywords
				(straight-vc-keywords type))))
		    (let*
			((fork
			  (and t
			       (plist-get plist :fork))))
		      (if fork
			  (progn
			    (progn
			      (setq default
				    (copy-sequence default))
			      (setq default
				    (plist-put default :fork fork)))
			    (if
				(listp fork)
				nil
			      (setq fork 'nil))
			    (progn
			      (setq fork
				    (copy-sequence fork))
			      (setq fork
				    (plist-put fork :repo
					       (straight-vc-git--fork-repo default))))
			    (progn
			      (setq plist
				    (copy-sequence plist))
			      (setq plist
				    (plist-put plist :fork fork))))
			nil))
		    (let
			((tail keywords))
		      (while tail
			(let
			    ((keyword
			      (car tail)))
			  (if
			      (plist-member plist keyword)
			      nil
			    (let*
				((value
				  (and t
				       (plist-get default keyword))))
			      (if value
				  (setq plist
					(plist-put plist keyword value))
				nil)))
			  (setq tail
				(cdr tail)))))))))
	  (let
	      ((package
		(symbol-name package)))
	    (progn
	      (setq plist
		    (copy-sequence plist))
	      (setq plist
		    (plist-put plist :package package)))
	    (if
		(plist-member plist :type)
		nil
	      (progn
		(setq plist
		      (copy-sequence plist))
		(setq plist
		      (plist-put plist :type straight-default-vc))))
	    (if
		(or
		 (plist-member plist :local-repo)
		 (eq
		  (plist-get plist :type)
		  'built-in))
		nil
	      (progn
		(setq plist
		      (copy-sequence plist))
		(setq plist
		      (plist-put plist :local-repo
				 (or
				  (straight-vc-local-repo-name plist)
				  package)))))
	    (if recipe-specified-p nil
	      (let*
		  ((--cl-rest-- plist)
		   (local-repo
		    (car
		     (cdr
		      (plist-member --cl-rest-- ':local-repo)))))
		(let*
		    ((original-recipe
		      (and t
			   (gethash local-repo straight--repo-cache))))
		  (if original-recipe
		      (progn
			(let
			    ((props
			      (cons :type
				    (straight-vc-keywords
				     (plist-get plist :type)))))
			  (setq plist
				(let*
				    ((--cl-var-- plist)
				     (prop nil)
				     (val nil)
				     (--cl-var--)
				     (--cl-var-- nil))
				  (while
				      (consp --cl-var--)
				    (progn
				      (setq --cl-var-- --cl-var--)
				      (setq prop
					    (car-safe
					     (prog1 --cl-var--
					       (setq --cl-var--
						     (cdr --cl-var--)))))
				      (setq val
					    (car --cl-var--)))
				    (if
					(memq prop props)
					(progn)
				      (setq --cl-var--
					    (cons prop --cl-var--))
				      (setq --cl-var--
					    (cons val --cl-var--)))
				    (setq --cl-var--
					  (cdr
					   (cdr --cl-var--))))
				  (nreverse --cl-var--))))
			(let
			    ((tail
			      (cons :type
				    (straight-vc-keywords
				     (plist-get original-recipe :type)))))
			  (while tail
			    (let
				((keyword
				  (car tail)))
			      (let*
				  ((value
				    (and t
					 (plist-get original-recipe keyword))))
				(if value
				    (progn
				      (setq plist
					    (copy-sequence plist))
				      (setq plist
					    (plist-put plist keyword value)))
				  nil))
			      (setq tail
				    (cdr tail))))))
		    nil))))
	    plist))))))
 nil)

;;;; 8
((straight--convert-recipe doom-gruvbox nil)
 ((melpa-style-recipe . doom-gruvbox)
  (cause)))

;;;; 9
((let
     ((recipe
       (straight--convert-recipe
	(or
	 (straight--get-overridden-recipe
	  (if
	      (listp melpa-style-recipe)
	      (car melpa-style-recipe)
	    melpa-style-recipe))
	 melpa-style-recipe)
	cause)))
   (straight--register-recipe recipe)
   (let*
       ((--cl-rest-- recipe)
	(package
	 (car
	  (cdr
	   (plist-member --cl-rest-- ':package))))
	(local-repo
	 (car
	  (cdr
	   (plist-member --cl-rest-- ':local-repo))))
	(type
	 (car
	  (cdr
	   (plist-member --cl-rest-- ':type)))))
     (progn
       (if
	   (eq type 'built-in)
	   (progn
	     (throw '--cl-block-straight-use-package-- t)))
       (straight--transaction-exec
	(intern
	 (format "use-package-%S-%S-%S"
		 (secure-hash 'md5
			      (prin1-to-string recipe 'noescape))
		 (if
		     (let
			 ((object no-clone))
		       (and
			(not
			 (memq object
			       '(no-clone t)))
			(functionp object)))
		     (random)
		   no-clone)
		 (if
		     (let
			 ((object no-build))
		       (and
			(not
			 (memq object
			       '(no-build t)))
			(functionp object)))
		     (random)
		   no-build)))
	:now
	#'(lambda nil
	    (let
		((already-registered
		  (gethash package straight--success-cache))
		 (available
		  (or
		   (null local-repo)
		   (straight--repository-is-available-p recipe))))
	      (if
		  (if
		      (let
			  ((object no-clone))
			(and
			 (not
			  (memq object
				'(no-clone t)))
			 (functionp object)))
		      (funcall no-clone package available)
		    no-clone)
		  (progn
		    (throw '--cl-block-straight-use-package-- nil)))
	      (if available nil
		(straight--clone-repository recipe cause))
	      (straight--make-build-cache-available)
	      (let*
		  ((no-build
		    (or
		     (null local-repo)
		     (straight--build-disabled-p recipe)
		     (if
			 (let
			     ((object no-build))
			   (and
			    (not
			     (memq object
				   '(no-build t)))
			    (functionp object)))
			 (funcall no-build package)
		       no-build)))
		   (modified
		    (or
		     (and straight--packages-to-rebuild
			  (or
			   (eq straight--packages-to-rebuild :all)
			   (gethash package straight--packages-to-rebuild))
			  (not
			   (gethash package straight--packages-not-to-rebuild))
			  (puthash package t straight--packages-not-to-rebuild))
		     (straight--package-might-be-modified-p recipe no-build))))
		(let
		    ((func
		      (intern
		       (format "straight-recipes-%s-version" package)))
		     (table
		      (gethash
		       (intern package)
		       straight--recipe-lookup-cache)))
		  (if
		      (or modified
			  (not
			   (fboundp func))
			  (not
			   (equal
			    (and table
				 (gethash 'version table))
			    (funcall func))))
		      (progn
			(remhash
			 (intern package)
			 straight--recipe-lookup-cache))))
		(if no-build nil
		  (straight--add-package-to-load-path recipe))
		(run-hook-with-args 'straight-use-package-prepare-functions package)
		(let
		    ((tail
		      '(native-comp-deferred-compilation-deny-list native-comp-jit-compilation-deny-list)))
		  (while tail
		    (let
			((list-var
			  (car tail)))
		      (if
			  (boundp list-var)
			  (progn
			    (let*
				((build
				  (and t
				       (car
					(cdr
					 (plist-member recipe :build))))))
			      (if build
				  (if
				      (and
				       (eq
					(car-safe build)
					:not)
				       (member 'native-compile
					       (cdr build)))
				      (progn
					(set list-var
					     (let*
						 ((va
						   (format "^%s"
							   (straight--build-dir package)))
						  (vlist
						   (symbol-value list-var)))
					       (if
						   (cl-member va vlist :test #'string=)
						   vlist
						 (cons va vlist))))))
				nil))))
		      (setq tail
			    (cdr tail)))))
		(if
		    (and modified
			 (not no-build))
		    (progn
		      (run-hook-with-args 'straight-use-package-pre-build-functions package)
		      (straight--build-package recipe cause)))
		(straight--declare-successful-build recipe)
		(if no-build nil
		  (let
		      ((tail
			(straight--get-dependencies package)))
		    (while tail
		      (let
			  ((dependency
			    (car tail)))
			(straight-use-package
			 (intern dependency)
			 nil nil cause)
			(setq tail
			      (cdr tail)))))
		  (straight--add-package-to-info-path recipe)
		  (straight--activate-package-autoloads recipe))
		(if
		    (and interactive
			 (not already-registered))
		    (progn
		      (straight--output
		       (concat "If you want to keep %s, put " "(straight-use-package %s%S) " "in your init-file.")
		       package "'"
		       (intern package)))))
	      (puthash package t straight--success-cache)
	      t))))))
 nil)

;;;; 10
((catch '--cl-block-straight-use-package--
   (let
       ((recipe
	 (straight--convert-recipe
	  (or
	   (straight--get-overridden-recipe
	    (if
		(listp melpa-style-recipe)
		(car melpa-style-recipe)
	      melpa-style-recipe))
	   melpa-style-recipe)
	  cause)))
     (straight--register-recipe recipe)
     (let*
	 ((--cl-rest-- recipe)
	  (package
	   (car
	    (cdr
	     (plist-member --cl-rest-- ':package))))
	  (local-repo
	   (car
	    (cdr
	     (plist-member --cl-rest-- ':local-repo))))
	  (type
	   (car
	    (cdr
	     (plist-member --cl-rest-- ':type)))))
       (progn
	 (if
	     (eq type 'built-in)
	     (progn
	       (throw '--cl-block-straight-use-package-- t)))
	 (straight--transaction-exec
	  (intern
	   (format "use-package-%S-%S-%S"
		   (secure-hash 'md5
				(prin1-to-string recipe 'noescape))
		   (if
		       (let
			   ((object no-clone))
			 (and
			  (not
			   (memq object
				 '(no-clone t)))
			  (functionp object)))
		       (random)
		     no-clone)
		   (if
		       (let
			   ((object no-build))
			 (and
			  (not
			   (memq object
				 '(no-build t)))
			  (functionp object)))
		       (random)
		     no-build)))
	  :now
	  #'(lambda nil
	      (let
		  ((already-registered
		    (gethash package straight--success-cache))
		   (available
		    (or
		     (null local-repo)
		     (straight--repository-is-available-p recipe))))
		(if
		    (if
			(let
			    ((object no-clone))
			  (and
			   (not
			    (memq object
				  '(no-clone t)))
			   (functionp object)))
			(funcall no-clone package available)
		      no-clone)
		    (progn
		      (throw '--cl-block-straight-use-package-- nil)))
		(if available nil
		  (straight--clone-repository recipe cause))
		(straight--make-build-cache-available)
		(let*
		    ((no-build
		      (or
		       (null local-repo)
		       (straight--build-disabled-p recipe)
		       (if
			   (let
			       ((object no-build))
			     (and
			      (not
			       (memq object
				     '(no-build t)))
			      (functionp object)))
			   (funcall no-build package)
			 no-build)))
		     (modified
		      (or
		       (and straight--packages-to-rebuild
			    (or
			     (eq straight--packages-to-rebuild :all)
			     (gethash package straight--packages-to-rebuild))
			    (not
			     (gethash package straight--packages-not-to-rebuild))
			    (puthash package t straight--packages-not-to-rebuild))
		       (straight--package-might-be-modified-p recipe no-build))))
		  (let
		      ((func
			(intern
			 (format "straight-recipes-%s-version" package)))
		       (table
			(gethash
			 (intern package)
			 straight--recipe-lookup-cache)))
		    (if
			(or modified
			    (not
			     (fboundp func))
			    (not
			     (equal
			      (and table
				   (gethash 'version table))
			      (funcall func))))
			(progn
			  (remhash
			   (intern package)
			   straight--recipe-lookup-cache))))
		  (if no-build nil
		    (straight--add-package-to-load-path recipe))
		  (run-hook-with-args 'straight-use-package-prepare-functions package)
		  (let
		      ((tail
			'(native-comp-deferred-compilation-deny-list native-comp-jit-compilation-deny-list)))
		    (while tail
		      (let
			  ((list-var
			    (car tail)))
			(if
			    (boundp list-var)
			    (progn
			      (let*
				  ((build
				    (and t
					 (car
					  (cdr
					   (plist-member recipe :build))))))
				(if build
				    (if
					(and
					 (eq
					  (car-safe build)
					  :not)
					 (member 'native-compile
						 (cdr build)))
					(progn
					  (set list-var
					       (let*
						   ((va
						     (format "^%s"
							     (straight--build-dir package)))
						    (vlist
						     (symbol-value list-var)))
						 (if
						     (cl-member va vlist :test #'string=)
						     vlist
						   (cons va vlist))))))
				  nil))))
			(setq tail
			      (cdr tail)))))
		  (if
		      (and modified
			   (not no-build))
		      (progn
			(run-hook-with-args 'straight-use-package-pre-build-functions package)
			(straight--build-package recipe cause)))
		  (straight--declare-successful-build recipe)
		  (if no-build nil
		    (let
			((tail
			  (straight--get-dependencies package)))
		      (while tail
			(let
			    ((dependency
			      (car tail)))
			  (straight-use-package
			   (intern dependency)
			   nil nil cause)
			  (setq tail
				(cdr tail)))))
		    (straight--add-package-to-info-path recipe)
		    (straight--activate-package-autoloads recipe))
		  (if
		      (and interactive
			   (not already-registered))
		      (progn
			(straight--output
			 (concat "If you want to keep %s, put " "(straight-use-package %s%S) " "in your init-file.")
			 package "'"
			 (intern package)))))
		(puthash package t straight--success-cache)
		t)))))))
 nil)

;;;; 11
((straight-use-package doom-gruvbox no-clone)
 ((melpa-style-recipe . doom-gruvbox)
  (no-clone . no-clone)
  (no-build)
  (cause)
  (interactive)))

;;;; 12
((straight-register-package doom-gruvbox)
 ((melpa-style-recipe . doom-gruvbox)))

;;;; 13
((let
     ((package
       (car tail)))
   (straight-register-package package)
   (let
       ((name
	 (symbol-name package)))
     (add-to-list 'load-path
		  (directory-file-name
		   (straight--build-dir name)))
     (straight--load-package-autoloads name))
   (setq tail
	 (cdr tail)))
 ((force-p)
  (packages use-package auto-minor-mode compat gcmh straight nerd-icons hide-mode-line highlight-numbers rainbow-delimiters restart-emacs better-jumper dtrt-indent smartparens ws-butler projectile project general which-key smudge doom-gruvbox company company-dict corfu cape corfu-terminal yasnippet-capf vertico orderless consult consult-dir consult-flycheck embark embark-consult marginalia wgrep consult-yasnippet doom-themes solaire-mode hl-todo doom-modeline anzu evil-anzu evil-goggles treemacs treemacs-nerd-icons treemacs-evil treemacs-projectile treemacs-magit treemacs-persp diff-hl vi-tilde-fringe persp-mode writeroom-mode mixed-pitch evil evil-args evil-easymotion evil-embrace evil-escape evil-exchange evil-indent-plus evil-lion evil-nerd-commenter evil-numbers evil-snipe evil-surround evil-textobj-anyblock evil-traces evil-visualstar exato evil-quick-diff evil-collection yasnippet vimish-fold evil-vimish-fold auto-yasnippet doom-snippets dirvish diredfl undo-fu undo-fu-session vundo browse-at-remote git-timemachine git-modes flycheck flycheck-popup-tip flyspell-correct flyspell-lazy langtool writegood-mode quickrun eros dumb-jump request magit pdf-tools saveplace-pdf-view xclip evil-terminal-cursor-changer kkp cmake-mode cuda-mode demangle-mode disaster opencl-mode modern-cpp-font-lock glsl-mode company-glsl ccls highlight-quoted helpful macrostep overseer elisp-def elisp-demos flycheck-package flycheck-cask buttercup android-mode groovy-mode lsp-treemacs lsp-java rjsx-mode typescript-mode js2-refactor npm-mode nodejs-repl skewer-mode tide xref-js2 julia-mode julia-repl auctex adaptive-wrap latex-preview-pane evil-tex company-auctex company-reftex company-math markdown-mode markdown-toc edit-indirect evil-markdown org org-contrib avy htmlize ox-clip toc-org org-cliplink evil-org org-pdftools orgit ob-async rust-mode rustic company-shell calfw calfw-org calfw-cal calfw-ical org-gcal link-hint)
  (tail doom-gruvbox company company-dict corfu cape corfu-terminal yasnippet-capf vertico orderless consult consult-dir consult-flycheck embark embark-consult marginalia wgrep consult-yasnippet doom-themes solaire-mode hl-todo doom-modeline anzu evil-anzu evil-goggles treemacs treemacs-nerd-icons treemacs-evil treemacs-projectile treemacs-magit treemacs-persp diff-hl vi-tilde-fringe persp-mode writeroom-mode mixed-pitch evil evil-args evil-easymotion evil-embrace evil-escape evil-exchange evil-indent-plus evil-lion evil-nerd-commenter evil-numbers evil-snipe evil-surround evil-textobj-anyblock evil-traces evil-visualstar exato evil-quick-diff evil-collection yasnippet vimish-fold evil-vimish-fold auto-yasnippet doom-snippets dirvish diredfl undo-fu undo-fu-session vundo browse-at-remote git-timemachine git-modes flycheck flycheck-popup-tip flyspell-correct flyspell-lazy langtool writegood-mode quickrun eros dumb-jump request magit pdf-tools saveplace-pdf-view xclip evil-terminal-cursor-changer kkp cmake-mode cuda-mode demangle-mode disaster opencl-mode modern-cpp-font-lock glsl-mode company-glsl ccls highlight-quoted helpful macrostep overseer elisp-def elisp-demos flycheck-package flycheck-cask buttercup android-mode groovy-mode lsp-treemacs lsp-java rjsx-mode typescript-mode js2-refactor npm-mode nodejs-repl skewer-mode tide xref-js2 julia-mode julia-repl auctex adaptive-wrap latex-preview-pane evil-tex company-auctex company-reftex company-math markdown-mode markdown-toc edit-indirect evil-markdown org org-contrib avy htmlize ox-clip toc-org org-cliplink evil-org org-pdftools orgit ob-async rust-mode rustic company-shell calfw calfw-org calfw-cal calfw-ical org-gcal link-hint)
  (package . doom-gruvbox)))

;;;; 14
((while tail
   (let
       ((package
	 (car tail)))
     (straight-register-package package)
     (let
	 ((name
	   (symbol-name package)))
       (add-to-list 'load-path
		    (directory-file-name
		     (straight--build-dir name)))
       (straight--load-package-autoloads name))
     (setq tail
	   (cdr tail))))
 nil)

;;;; 15
((let
     ((tail
       (cl-delete-duplicates packages :test #'equal)))
   (while tail
     (let
	 ((package
	   (car tail)))
       (straight-register-package package)
       (let
	   ((name
	     (symbol-name package)))
	 (add-to-list 'load-path
		      (directory-file-name
		       (straight--build-dir name)))
	 (straight--load-package-autoloads name))
       (setq tail
	     (cdr tail)))))
 ((force-p)
  (packages use-package auto-minor-mode compat gcmh straight nerd-icons hide-mode-line highlight-numbers rainbow-delimiters restart-emacs better-jumper dtrt-indent smartparens ws-butler projectile project general which-key smudge doom-gruvbox company company-dict corfu cape corfu-terminal yasnippet-capf vertico orderless consult consult-dir consult-flycheck embark embark-consult marginalia wgrep consult-yasnippet doom-themes solaire-mode hl-todo doom-modeline anzu evil-anzu evil-goggles treemacs treemacs-nerd-icons treemacs-evil treemacs-projectile treemacs-magit treemacs-persp diff-hl vi-tilde-fringe persp-mode writeroom-mode mixed-pitch evil evil-args evil-easymotion evil-embrace evil-escape evil-exchange evil-indent-plus evil-lion evil-nerd-commenter evil-numbers evil-snipe evil-surround evil-textobj-anyblock evil-traces evil-visualstar exato evil-quick-diff evil-collection yasnippet vimish-fold evil-vimish-fold auto-yasnippet doom-snippets dirvish diredfl undo-fu undo-fu-session vundo browse-at-remote git-timemachine git-modes flycheck flycheck-popup-tip flyspell-correct flyspell-lazy langtool writegood-mode quickrun eros dumb-jump request magit pdf-tools saveplace-pdf-view xclip evil-terminal-cursor-changer kkp cmake-mode cuda-mode demangle-mode disaster opencl-mode modern-cpp-font-lock glsl-mode company-glsl ccls highlight-quoted helpful macrostep overseer elisp-def elisp-demos flycheck-package flycheck-cask buttercup android-mode groovy-mode lsp-treemacs lsp-java rjsx-mode typescript-mode js2-refactor npm-mode nodejs-repl skewer-mode tide xref-js2 julia-mode julia-repl auctex adaptive-wrap latex-preview-pane evil-tex company-auctex company-reftex company-math markdown-mode markdown-toc edit-indirect evil-markdown org org-contrib avy htmlize ox-clip toc-org org-cliplink evil-org org-pdftools orgit ob-async rust-mode rustic company-shell calfw calfw-org calfw-cal calfw-ical org-gcal link-hint)
  (tail doom-gruvbox company company-dict corfu cape corfu-terminal yasnippet-capf vertico orderless consult consult-dir consult-flycheck embark embark-consult marginalia wgrep consult-yasnippet doom-themes solaire-mode hl-todo doom-modeline anzu evil-anzu evil-goggles treemacs treemacs-nerd-icons treemacs-evil treemacs-projectile treemacs-magit treemacs-persp diff-hl vi-tilde-fringe persp-mode writeroom-mode mixed-pitch evil evil-args evil-easymotion evil-embrace evil-escape evil-exchange evil-indent-plus evil-lion evil-nerd-commenter evil-numbers evil-snipe evil-surround evil-textobj-anyblock evil-traces evil-visualstar exato evil-quick-diff evil-collection yasnippet vimish-fold evil-vimish-fold auto-yasnippet doom-snippets dirvish diredfl undo-fu undo-fu-session vundo browse-at-remote git-timemachine git-modes flycheck flycheck-popup-tip flyspell-correct flyspell-lazy langtool writegood-mode quickrun eros dumb-jump request magit pdf-tools saveplace-pdf-view xclip evil-terminal-cursor-changer kkp cmake-mode cuda-mode demangle-mode disaster opencl-mode modern-cpp-font-lock glsl-mode company-glsl ccls highlight-quoted helpful macrostep overseer elisp-def elisp-demos flycheck-package flycheck-cask buttercup android-mode groovy-mode lsp-treemacs lsp-java rjsx-mode typescript-mode js2-refactor npm-mode nodejs-repl skewer-mode tide xref-js2 julia-mode julia-repl auctex adaptive-wrap latex-preview-pane evil-tex company-auctex company-reftex company-math markdown-mode markdown-toc edit-indirect evil-markdown org org-contrib avy htmlize ox-clip toc-org org-cliplink evil-org org-pdftools orgit ob-async rust-mode rustic company-shell calfw calfw-org calfw-cal calfw-ical org-gcal link-hint)))

;;;; 16
((let
     (packages)
   (let
       ((tail doom-packages))
     (while tail
       (let
	   ((package
	     (car tail)))
	 (let*
	     ((--cl-rest-- package)
	      (name
	       (if --cl-rest--
		   (car-safe
		    (prog1 --cl-rest--
		      (setq --cl-rest--
			    (cdr --cl-rest--))))
		 (signal 'wrong-number-of-arguments
			 (list
			  '(name &key recipe disable ignore &allow-other-keys)
			  (length --cl-rest--)))))
	      (recipe
	       (car
		(cdr
		 (plist-member --cl-rest-- ':recipe))))
	      (disable
	       (car
		(cdr
		 (plist-member --cl-rest-- ':disable))))
	      (ignore
	       (car
		(cdr
		 (plist-member --cl-rest-- ':ignore)))))
	   (if ignore
	       (straight-override-recipe
		(cons name
		      '(:type built-in)))
	     (if disable
		 (let*
		     ((var name))
		   (if
		       (memql var doom-disabled-packages)
		       (with-no-warnings doom-disabled-packages)
		     (setq doom-disabled-packages
			   (cons var doom-disabled-packages))))
	       (if recipe
		   (progn
		     (straight-override-recipe
		      (cons name recipe))))
	       (setq packages
		     (append packages
			     (cons name
				   (straight--get-dependencies name)))))))
	 (setq tail
	       (cdr tail)))))
   (let
       ((tail
	 (cl-delete-duplicates packages :test #'equal)))
     (while tail
       (let
	   ((package
	     (car tail)))
	 (straight-register-package package)
	 (let
	     ((name
	       (symbol-name package)))
	   (add-to-list 'load-path
			(directory-file-name
			 (straight--build-dir name)))
	   (straight--load-package-autoloads name))
	 (setq tail
	       (cdr tail))))))
 ((force-p)
  (packages use-package auto-minor-mode compat gcmh straight nerd-icons hide-mode-line highlight-numbers rainbow-delimiters restart-emacs better-jumper dtrt-indent smartparens ws-butler projectile project general which-key smudge doom-gruvbox company company-dict corfu cape corfu-terminal yasnippet-capf vertico orderless consult consult-dir consult-flycheck embark embark-consult marginalia wgrep consult-yasnippet doom-themes solaire-mode hl-todo doom-modeline anzu evil-anzu evil-goggles treemacs treemacs-nerd-icons treemacs-evil treemacs-projectile treemacs-magit treemacs-persp diff-hl vi-tilde-fringe persp-mode writeroom-mode mixed-pitch evil evil-args evil-easymotion evil-embrace evil-escape evil-exchange evil-indent-plus evil-lion evil-nerd-commenter evil-numbers evil-snipe evil-surround evil-textobj-anyblock evil-traces evil-visualstar exato evil-quick-diff evil-collection yasnippet vimish-fold evil-vimish-fold auto-yasnippet doom-snippets dirvish diredfl undo-fu undo-fu-session vundo browse-at-remote git-timemachine git-modes flycheck flycheck-popup-tip flyspell-correct flyspell-lazy langtool writegood-mode quickrun eros dumb-jump request magit pdf-tools saveplace-pdf-view xclip evil-terminal-cursor-changer kkp cmake-mode cuda-mode demangle-mode disaster opencl-mode modern-cpp-font-lock glsl-mode company-glsl ccls highlight-quoted helpful macrostep overseer elisp-def elisp-demos flycheck-package flycheck-cask buttercup android-mode groovy-mode lsp-treemacs lsp-java rjsx-mode typescript-mode js2-refactor npm-mode nodejs-repl skewer-mode tide xref-js2 julia-mode julia-repl auctex adaptive-wrap latex-preview-pane evil-tex company-auctex company-reftex company-math markdown-mode markdown-toc edit-indirect evil-markdown org org-contrib avy htmlize ox-clip toc-org org-cliplink evil-org org-pdftools orgit ob-async rust-mode rustic company-shell calfw calfw-org calfw-cal calfw-ical org-gcal link-hint)))

;;;; 17
((progn
   (if
       (and
	(not doom-inhibit-log)
	(or
	 (not noninteractive)
	 (<= 2 doom-log-level)))
       (progn
	 (doom--log 2 "Initializing straight.el")))
   (progn
     (setq doom-disabled-packages nil)
     (setq doom-packages
	   (doom-package-list)))
   (let
       (packages)
     (let
	 ((tail doom-packages))
       (while tail
	 (let
	     ((package
	       (car tail)))
	   (let*
	       ((--cl-rest-- package)
		(name
		 (if --cl-rest--
		     (car-safe
		      (prog1 --cl-rest--
			(setq --cl-rest--
			      (cdr --cl-rest--))))
		   (signal 'wrong-number-of-arguments
			   (list
			    '(name &key recipe disable ignore &allow-other-keys)
			    (length --cl-rest--)))))
		(recipe
		 (car
		  (cdr
		   (plist-member --cl-rest-- ':recipe))))
		(disable
		 (car
		  (cdr
		   (plist-member --cl-rest-- ':disable))))
		(ignore
		 (car
		  (cdr
		   (plist-member --cl-rest-- ':ignore)))))
	     (if ignore
		 (straight-override-recipe
		  (cons name
			'(:type built-in)))
	       (if disable
		   (let*
		       ((var name))
		     (if
			 (memql var doom-disabled-packages)
			 (with-no-warnings doom-disabled-packages)
		       (setq doom-disabled-packages
			     (cons var doom-disabled-packages))))
		 (if recipe
		     (progn
		       (straight-override-recipe
			(cons name recipe))))
		 (setq packages
		       (append packages
			       (cons name
				     (straight--get-dependencies name)))))))
	   (setq tail
		 (cdr tail)))))
     (let
	 ((tail
	   (cl-delete-duplicates packages :test #'equal)))
       (while tail
	 (let
	     ((package
	       (car tail)))
	   (straight-register-package package)
	   (let
	       ((name
		 (symbol-name package)))
	     (add-to-list 'load-path
			  (directory-file-name
			   (straight--build-dir name)))
	     (straight--load-package-autoloads name))
	   (setq tail
		 (cdr tail)))))))
 nil)

;;;; 18
((if
     (or force-p
	 (null doom-packages))
     (progn
       (if
	   (and
	    (not doom-inhibit-log)
	    (or
	     (not noninteractive)
	     (<= 2 doom-log-level)))
	   (progn
	     (doom--log 2 "Initializing straight.el")))
       (progn
	 (setq doom-disabled-packages nil)
	 (setq doom-packages
	       (doom-package-list)))
       (let
	   (packages)
	 (let
	     ((tail doom-packages))
	   (while tail
	     (let
		 ((package
		   (car tail)))
	       (let*
		   ((--cl-rest-- package)
		    (name
		     (if --cl-rest--
			 (car-safe
			  (prog1 --cl-rest--
			    (setq --cl-rest--
				  (cdr --cl-rest--))))
		       (signal 'wrong-number-of-arguments
			       (list
				'(name &key recipe disable ignore &allow-other-keys)
				(length --cl-rest--)))))
		    (recipe
		     (car
		      (cdr
		       (plist-member --cl-rest-- ':recipe))))
		    (disable
		     (car
		      (cdr
		       (plist-member --cl-rest-- ':disable))))
		    (ignore
		     (car
		      (cdr
		       (plist-member --cl-rest-- ':ignore)))))
		 (if ignore
		     (straight-override-recipe
		      (cons name
			    '(:type built-in)))
		   (if disable
		       (let*
			   ((var name))
			 (if
			     (memql var doom-disabled-packages)
			     (with-no-warnings doom-disabled-packages)
			   (setq doom-disabled-packages
				 (cons var doom-disabled-packages))))
		     (if recipe
			 (progn
			   (straight-override-recipe
			    (cons name recipe))))
		     (setq packages
			   (append packages
				   (cons name
					 (straight--get-dependencies name)))))))
	       (setq tail
		     (cdr tail)))))
	 (let
	     ((tail
	       (cl-delete-duplicates packages :test #'equal)))
	   (while tail
	     (let
		 ((package
		   (car tail)))
	       (straight-register-package package)
	       (let
		   ((name
		     (symbol-name package)))
		 (add-to-list 'load-path
			      (directory-file-name
			       (straight--build-dir name)))
		 (straight--load-package-autoloads name))
	       (setq tail
		     (cdr tail))))))))
 nil)

;;;; 19
((doom-initialize-packages)
 ((force-p)))

;;;; 20
((doom-packages-ensure nil)
 ((force-p)))

;;;; 21
((let
     ((doom-print-level
       (or nil doom-print-level))
      (doom-print-indent
       (+
	(if t
	    (or nil doom-print-indent-increment)
	  0)
	doom-print-indent)))
   (let
       ((x0
	 (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
	(to-rebuild nil))
     (progn
       (ignore
	(consp x0))
       (let*
	   ((x54
	     (car-safe x0))
	    (x55
	     (cdr-safe x0)))
	 (let
	     ((old-version x54)
	      (hash x55))
	   (progn
	     (if
		 (and old-version
		      (not
		       (equal old-version emacs-version)))
		 (progn
		   (doom-print
		    (doom-print--format
		     (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
		     old-version emacs-version))
		   (setq to-rebuild t)))
	     (if
		 (and
		  (stringp hash)
		  (not
		   (equal hash
			  (doom-sync--system-hash))))
		 (progn
		   (doom-print
		    (doom-print--format
		     (doom-print--class 'warn "Your system has changed since last sync")))
		   (setq to-rebuild t)))
	     (if
		 (and to-rebuild
		      (not rebuild?)
		      (not
		       (progn
			 (or
			  (progn
			    (and
			     (memq
			      (type-of context)
			      cl-struct-doom-cli-context-tags)
			     t))
			  (signal 'wrong-type-argument
				  (list 'doom-cli-context context)))
			 (aref context 6))))
		 (progn
		   (cond
		    (nobuild?
		     (doom-print
		      (doom-print--format
		       (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
		    ((doom-cli-context-get context 'upgrading)
		     (doom-print
		      (doom-print--format
		       (doom-print--class 'warn "Packages will be rebuilt")))
		     (setq rebuild? t))
		    ((y-or-n-p
		      (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
		     (setq rebuild? t))
		    ((exit! 0))))))))))
   (if
       (and
	(not noenvvar?)
	(file-exists-p doom-env-file))
       (progn
	 (call!
	  '(env))))
   (doom-packages-ensure rebuild?)
   (if noupdate? nil
     (doom-packages-update
      (not update?)))
   (doom-packages-purge purge? purge? purge? purge? purge?)
   (if
       (doom-profile-generate)
       (progn
	 (doom-print
	  (doom-print--format
	   (doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
	 (run-hooks 'doom-after-sync-hook)))
   (if
       (or rebuild?
	   (not
	    (file-exists-p doom-cli-sync-info-file)))
       (progn
	 (let
	     ((temp-file doom-cli-sync-info-file)
	      (temp-buffer
	       (generate-new-buffer " *temp file*" t)))
	   (unwind-protect
	       (prog1
		   (save-current-buffer
		     (set-buffer temp-buffer)
		     (prin1
		      (cons emacs-version
			    (doom-sync--system-hash))
		      (current-buffer)))
		 (save-current-buffer
		   (set-buffer temp-buffer)
		   (write-region nil nil temp-file nil 0)))
	     (and
	      (buffer-name temp-buffer)
	      (kill-buffer temp-buffer))))))
   t)
 ((doom-print-level . notice)
  (doom-print-indent . 2)))

;;;; 22
((progn
   (let
       ((doom-print-level
	 (or nil doom-print-level))
	(doom-print-indent
	 (+
	  (if t
	      (or nil doom-print-indent-increment)
	    0)
	  doom-print-indent)))
     (let
	 ((x0
	   (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
	  (to-rebuild nil))
       (progn
	 (ignore
	  (consp x0))
	 (let*
	     ((x54
	       (car-safe x0))
	      (x55
	       (cdr-safe x0)))
	   (let
	       ((old-version x54)
		(hash x55))
	     (progn
	       (if
		   (and old-version
			(not
			 (equal old-version emacs-version)))
		   (progn
		     (doom-print
		      (doom-print--format
		       (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
		       old-version emacs-version))
		     (setq to-rebuild t)))
	       (if
		   (and
		    (stringp hash)
		    (not
		     (equal hash
			    (doom-sync--system-hash))))
		   (progn
		     (doom-print
		      (doom-print--format
		       (doom-print--class 'warn "Your system has changed since last sync")))
		     (setq to-rebuild t)))
	       (if
		   (and to-rebuild
			(not rebuild?)
			(not
			 (progn
			   (or
			    (progn
			      (and
			       (memq
				(type-of context)
				cl-struct-doom-cli-context-tags)
			       t))
			    (signal 'wrong-type-argument
				    (list 'doom-cli-context context)))
			   (aref context 6))))
		   (progn
		     (cond
		      (nobuild?
		       (doom-print
			(doom-print--format
			 (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
		      ((doom-cli-context-get context 'upgrading)
		       (doom-print
			(doom-print--format
			 (doom-print--class 'warn "Packages will be rebuilt")))
		       (setq rebuild? t))
		      ((y-or-n-p
			(doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
		       (setq rebuild? t))
		      ((exit! 0))))))))))
     (if
	 (and
	  (not noenvvar?)
	  (file-exists-p doom-env-file))
	 (progn
	   (call!
	    '(env))))
     (doom-packages-ensure rebuild?)
     (if noupdate? nil
       (doom-packages-update
	(not update?)))
     (doom-packages-purge purge? purge? purge? purge? purge?)
     (if
	 (doom-profile-generate)
	 (progn
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
	   (run-hooks 'doom-after-sync-hook)))
     (if
	 (or rebuild?
	     (not
	      (file-exists-p doom-cli-sync-info-file)))
	 (progn
	   (let
	       ((temp-file doom-cli-sync-info-file)
		(temp-buffer
		 (generate-new-buffer " *temp file*" t)))
	     (unwind-protect
		 (prog1
		     (save-current-buffer
		       (set-buffer temp-buffer)
		       (prin1
			(cons emacs-version
			      (doom-sync--system-hash))
			(current-buffer)))
		   (save-current-buffer
		     (set-buffer temp-buffer)
		     (write-region nil nil temp-file nil 0)))
	       (and
		(buffer-name temp-buffer)
		(kill-buffer temp-buffer))))))
     t))
 nil)

;;;; 23
((unwind-protect
     (progn
       (let
	   ((doom-print-level
	     (or nil doom-print-level))
	    (doom-print-indent
	     (+
	      (if t
		  (or nil doom-print-indent-increment)
		0)
	      doom-print-indent)))
	 (let
	     ((x0
	       (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
	      (to-rebuild nil))
	   (progn
	     (ignore
	      (consp x0))
	     (let*
		 ((x54
		   (car-safe x0))
		  (x55
		   (cdr-safe x0)))
	       (let
		   ((old-version x54)
		    (hash x55))
		 (progn
		   (if
		       (and old-version
			    (not
			     (equal old-version emacs-version)))
		       (progn
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
			   old-version emacs-version))
			 (setq to-rebuild t)))
		   (if
		       (and
			(stringp hash)
			(not
			 (equal hash
				(doom-sync--system-hash))))
		       (progn
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'warn "Your system has changed since last sync")))
			 (setq to-rebuild t)))
		   (if
		       (and to-rebuild
			    (not rebuild?)
			    (not
			     (progn
			       (or
				(progn
				  (and
				   (memq
				    (type-of context)
				    cl-struct-doom-cli-context-tags)
				   t))
				(signal 'wrong-type-argument
					(list 'doom-cli-context context)))
			       (aref context 6))))
		       (progn
			 (cond
			  (nobuild?
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
			  ((doom-cli-context-get context 'upgrading)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn "Packages will be rebuilt")))
			   (setq rebuild? t))
			  ((y-or-n-p
			    (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
			   (setq rebuild? t))
			  ((exit! 0))))))))))
	 (if
	     (and
	      (not noenvvar?)
	      (file-exists-p doom-env-file))
	     (progn
	       (call!
		'(env))))
	 (doom-packages-ensure rebuild?)
	 (if noupdate? nil
	   (doom-packages-update
	    (not update?)))
	 (doom-packages-purge purge? purge? purge? purge? purge?)
	 (if
	     (doom-profile-generate)
	     (progn
	       (doom-print
		(doom-print--format
		 (doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
	       (run-hooks 'doom-after-sync-hook)))
	 (if
	     (or rebuild?
		 (not
		  (file-exists-p doom-cli-sync-info-file)))
	     (progn
	       (let
		   ((temp-file doom-cli-sync-info-file)
		    (temp-buffer
		     (generate-new-buffer " *temp file*" t)))
		 (unwind-protect
		     (prog1
			 (save-current-buffer
			   (set-buffer temp-buffer)
			   (prin1
			    (cons emacs-version
				  (doom-sync--system-hash))
			    (current-buffer)))
		       (save-current-buffer
			 (set-buffer temp-buffer)
			 (write-region nil nil temp-file nil 0)))
		   (and
		    (buffer-name temp-buffer)
		    (kill-buffer temp-buffer))))))
	 t))
   (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h))
 nil)

;;;; 24
((let
     ((noenvvar?
       (cdr
	(assq 'noenvvar? alist)))
      (update?
       (cdr
	(assq 'update? alist)))
      (noupdate?
       (cdr
	(assq 'noupdate? alist)))
      (purge?
       (cdr
	(assq 'purge? alist)))
      (jobs
       (cdr
	(assq 'jobs alist)))
      (rebuild?
       (cdr
	(assq 'rebuild? alist)))
      (nobuild?
       (cdr
	(assq 'nobuild? alist)))
      (aot?
       (cdr
	(assq 'aot? alist)))
      (context
       (cdr
	(assq 'context alist))))
   (if
       (doom-profiles-bootloadable-p)
       (progn
	 (call!
	  '(profiles sync "--reload"))))
   (if aot?
       (progn
	 (progn
	   (eval-after-load 'straight
	     #'(lambda nil
		 (setq straight--native-comp-available t))))))
   (if jobs
       (progn
	 (setq native-comp-async-jobs-number
	       (truncate jobs))))
   (run-hooks 'doom-before-sync-hook)
   (add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
   (doom-print
    (doom-print--format
     (doom-print--class 'item "Using Emacs %s @ %s")
     emacs-version
     (doom-print--class 'path invocation-directory invocation-name)))
   (doom-print
    (doom-print--format
     (doom-print--class 'start "Synchronizing %S profile...")
     (or
      (car doom-profile)
      "default")))
   (unwind-protect
       (progn
	 (let
	     ((doom-print-level
	       (or nil doom-print-level))
	      (doom-print-indent
	       (+
		(if t
		    (or nil doom-print-indent-increment)
		  0)
		doom-print-indent)))
	   (let
	       ((x0
		 (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
		(to-rebuild nil))
	     (progn
	       (ignore
		(consp x0))
	       (let*
		   ((x54
		     (car-safe x0))
		    (x55
		     (cdr-safe x0)))
		 (let
		     ((old-version x54)
		      (hash x55))
		   (progn
		     (if
			 (and old-version
			      (not
			       (equal old-version emacs-version)))
			 (progn
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
			     old-version emacs-version))
			   (setq to-rebuild t)))
		     (if
			 (and
			  (stringp hash)
			  (not
			   (equal hash
				  (doom-sync--system-hash))))
			 (progn
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn "Your system has changed since last sync")))
			   (setq to-rebuild t)))
		     (if
			 (and to-rebuild
			      (not rebuild?)
			      (not
			       (progn
				 (or
				  (progn
				    (and
				     (memq
				      (type-of context)
				      cl-struct-doom-cli-context-tags)
				     t))
				  (signal 'wrong-type-argument
					  (list 'doom-cli-context context)))
				 (aref context 6))))
			 (progn
			   (cond
			    (nobuild?
			     (doom-print
			      (doom-print--format
			       (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
			    ((doom-cli-context-get context 'upgrading)
			     (doom-print
			      (doom-print--format
			       (doom-print--class 'warn "Packages will be rebuilt")))
			     (setq rebuild? t))
			    ((y-or-n-p
			      (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
			     (setq rebuild? t))
			    ((exit! 0))))))))))
	   (if
	       (and
		(not noenvvar?)
		(file-exists-p doom-env-file))
	       (progn
		 (call!
		  '(env))))
	   (doom-packages-ensure rebuild?)
	   (if noupdate? nil
	     (doom-packages-update
	      (not update?)))
	   (doom-packages-purge purge? purge? purge? purge? purge?)
	   (if
	       (doom-profile-generate)
	       (progn
		 (doom-print
		  (doom-print--format
		   (doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
		 (run-hooks 'doom-after-sync-hook)))
	   (if
	       (or rebuild?
		   (not
		    (file-exists-p doom-cli-sync-info-file)))
	       (progn
		 (let
		     ((temp-file doom-cli-sync-info-file)
		      (temp-buffer
		       (generate-new-buffer " *temp file*" t)))
		   (unwind-protect
		       (prog1
			   (save-current-buffer
			     (set-buffer temp-buffer)
			     (prin1
			      (cons emacs-version
				    (doom-sync--system-hash))
			      (current-buffer)))
			 (save-current-buffer
			   (set-buffer temp-buffer)
			   (write-region nil nil temp-file nil 0)))
		     (and
		      (buffer-name temp-buffer)
		      (kill-buffer temp-buffer))))))
	   t))
     (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)))
 ((cli . #s(doom-cli
	    ("doom" "sync")
	    nil
	    (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	     ("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add, remove, or modify `package!' blocks to your config,\n  3. Add, remove, or modify autoloaded functions in module autoloaded files,\n  4. Update Doom manually (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. Up or downgrade Emacs itself (e.g. 29.1 -> 29.4).\n\nSync'ing ensures that unneeded packages are removed, needed packages are\ninstalled, autoloads files are up-to-date, and no byte-compiled files have gone\nstale.")
	     ("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined).\n--aot\n  Will only perform AOT native-compilation for packages updated/installed\n  during the execution of this command. Use --rebuild as well to do so for all\n  packages."))
	    nil nil
	    (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
				("-e")
				nil nil)
	       #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
				  ("-u")
				  nil nil)
	       #s(doom-cli-option noupdate? "Don't update any packages" nil nil
				  ("-U")
				  nil nil)
	       #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
				  ("--gc")
				  nil nil)
	       #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
				  ("-j" "--jobs")
				  (num)
				  nil)
	       #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
				  ("-b" "--rebuild")
				  nil nil)
	       #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
				  ("-B")
				  nil nil)
	       #s(doom-cli-option aot? "Natively compile packages ahead-of-time (if available)" nil nil
				  ("--aot")
				  nil nil))
	    ((&context context))
	    (:benchmark t :prefix
			(doom)
			:group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
	    (closure
		(t)
		(cli alist)
	      (let
		  ((noenvvar?
		    (cdr
		     (assq 'noenvvar? alist)))
		   (update?
		    (cdr
		     (assq 'update? alist)))
		   (noupdate?
		    (cdr
		     (assq 'noupdate? alist)))
		   (purge?
		    (cdr
		     (assq 'purge? alist)))
		   (jobs
		    (cdr
		     (assq 'jobs alist)))
		   (rebuild?
		    (cdr
		     (assq 'rebuild? alist)))
		   (nobuild?
		    (cdr
		     (assq 'nobuild? alist)))
		   (aot?
		    (cdr
		     (assq 'aot? alist)))
		   (context
		    (cdr
		     (assq 'context alist))))
		(if
		    (doom-profiles-bootloadable-p)
		    (progn
		      (call!
		       '(profiles sync "--reload"))))
		(if aot?
		    (progn
		      (progn
			(eval-after-load 'straight
			  #'(lambda nil
			      (setq straight--native-comp-available t))))))
		(if jobs
		    (progn
		      (setq native-comp-async-jobs-number
			    (truncate jobs))))
		(run-hooks 'doom-before-sync-hook)
		(add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
		(doom-print
		 (doom-print--format
		  (doom-print--class 'item "Using Emacs %s @ %s")
		  emacs-version
		  (doom-print--class 'path invocation-directory invocation-name)))
		(doom-print
		 (doom-print--format
		  (doom-print--class 'start "Synchronizing %S profile...")
		  (or
		   (car doom-profile)
		   "default")))
		(unwind-protect
		    (progn
		      (let
			  ((doom-print-level
			    (or nil doom-print-level))
			   (doom-print-indent
			    (+
			     (if t
				 (or nil doom-print-indent-increment)
			       0)
			     doom-print-indent)))
			(let
			    ((x0
			      (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			     (to-rebuild nil))
			  (progn
			    (ignore
			     (consp x0))
			    (let*
				((x54
				  (car-safe x0))
				 (x55
				  (cdr-safe x0)))
			      (let
				  ((old-version x54)
				   (hash x55))
				(progn
				  (if
				      (and old-version
					   (not
					    (equal old-version emacs-version)))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
					  old-version emacs-version))
					(setq to-rebuild t)))
				  (if
				      (and
				       (stringp hash)
				       (not
					(equal hash
					       (doom-sync--system-hash))))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Your system has changed since last sync")))
					(setq to-rebuild t)))
				  (if
				      (and to-rebuild
					   (not rebuild?)
					   (not
					    (progn
					      (or
					       (progn
						 (and
						  (memq
						   (type-of context)
						   cl-struct-doom-cli-context-tags)
						  t))
					       (signal 'wrong-type-argument
						       (list 'doom-cli-context context)))
					      (aref context 6))))
				      (progn
					(cond
					 (nobuild?
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
					 ((doom-cli-context-get context 'upgrading)
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages will be rebuilt")))
					  (setq rebuild? t))
					 ((y-or-n-p
					   (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
					  (setq rebuild? t))
					 ((exit! 0))))))))))
			(if
			    (and
			     (not noenvvar?)
			     (file-exists-p doom-env-file))
			    (progn
			      (call!
			       '(env))))
			(doom-packages-ensure rebuild?)
			(if noupdate? nil
			  (doom-packages-update
			   (not update?)))
			(doom-packages-purge purge? purge? purge? purge? purge?)
			(if
			    (doom-profile-generate)
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			      (run-hooks 'doom-after-sync-hook)))
			(if
			    (or rebuild?
				(not
				 (file-exists-p doom-cli-sync-info-file)))
			    (progn
			      (let
				  ((temp-file doom-cli-sync-info-file)
				   (temp-buffer
				    (generate-new-buffer " *temp file*" t)))
				(unwind-protect
				    (prog1
					(save-current-buffer
					  (set-buffer temp-buffer)
					  (prin1
					   (cons emacs-version
						 (doom-sync--system-hash))
					   (current-buffer)))
				      (save-current-buffer
					(set-buffer temp-buffer)
					(write-region nil nil temp-file nil 0)))
				  (and
				   (buffer-name temp-buffer)
				   (kill-buffer temp-buffer))))))
			t))
		  (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h))))))
  (alist
   (context . #s(doom-cli-context
		 (26387 63354 473960 173000)
		 8602 0
		 (90 . 8)
		 nil nil "doom" nil nil
		 ("doom" "profiles" "sync")
		 nil
		 ("sync")
		 (("--reload" . "--reload")
		  ("--aot")
		  ("-B")
		  ("--rebuild")
		  ("-b")
		  ("--jobs")
		  ("-j")
		  ("--gc")
		  ("-U")
		  ("-u")
		  ("-e")
		  ("--eval")
		  ("-E")
		  ("--strict-load")
		  ("--load")
		  ("-L")
		  ("--color")
		  ("--benchmark")
		  ("--profile")
		  ("--pager")
		  ("--emacsdir")
		  ("--doomdir")
		  ("--verbose")
		  ("-v")
		  ("--debug")
		  ("-D")
		  ("--force")
		  ("-!"))
		 ((t)
		  (("doom" "profiles" "sync")
		   "--reload")
		  (("doom" "profiles")
		   "sync" "--reload")
		  (("doom")
		   "profiles" "sync" "--reload"))
		 #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
   (aot?)
   (nobuild?)
   (rebuild?)
   (jobs)
   (purge?)
   (noupdate?)
   (update?)
   (noenvvar?))
  (noenvvar?)
  (update?)
  (noupdate?)
  (purge?)
  (jobs)
  (rebuild?)
  (nobuild?)
  (aot?)
  (context . #s(doom-cli-context
		(26387 63354 473960 173000)
		8602 0
		(90 . 8)
		nil nil "doom" nil nil
		("doom" "profiles" "sync")
		nil
		("sync")
		(("--reload" . "--reload")
		 ("--aot")
		 ("-B")
		 ("--rebuild")
		 ("-b")
		 ("--jobs")
		 ("-j")
		 ("--gc")
		 ("-U")
		 ("-u")
		 ("-e")
		 ("--eval")
		 ("-E")
		 ("--strict-load")
		 ("--load")
		 ("-L")
		 ("--color")
		 ("--benchmark")
		 ("--profile")
		 ("--pager")
		 ("--emacsdir")
		 ("--doomdir")
		 ("--verbose")
		 ("-v")
		 ("--debug")
		 ("-D")
		 ("--force")
		 ("-!"))
		((t)
		 (("doom" "profiles" "sync")
		  "--reload")
		 (("doom" "profiles")
		  "sync" "--reload")
		 (("doom")
		  "profiles" "sync" "--reload"))
		#<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))))

;;;; 25
(((closure
      (t)
      (cli alist)
    (let
	((noenvvar?
	  (cdr
	   (assq 'noenvvar? alist)))
	 (update?
	  (cdr
	   (assq 'update? alist)))
	 (noupdate?
	  (cdr
	   (assq 'noupdate? alist)))
	 (purge?
	  (cdr
	   (assq 'purge? alist)))
	 (jobs
	  (cdr
	   (assq 'jobs alist)))
	 (rebuild?
	  (cdr
	   (assq 'rebuild? alist)))
	 (nobuild?
	  (cdr
	   (assq 'nobuild? alist)))
	 (aot?
	  (cdr
	   (assq 'aot? alist)))
	 (context
	  (cdr
	   (assq 'context alist))))
      (if
	  (doom-profiles-bootloadable-p)
	  (progn
	    (call!
	     '(profiles sync "--reload"))))
      (if aot?
	  (progn
	    (progn
	      (eval-after-load 'straight
		#'(lambda nil
		    (setq straight--native-comp-available t))))))
      (if jobs
	  (progn
	    (setq native-comp-async-jobs-number
		  (truncate jobs))))
      (run-hooks 'doom-before-sync-hook)
      (add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
      (doom-print
       (doom-print--format
	(doom-print--class 'item "Using Emacs %s @ %s")
	emacs-version
	(doom-print--class 'path invocation-directory invocation-name)))
      (doom-print
       (doom-print--format
	(doom-print--class 'start "Synchronizing %S profile...")
	(or
	 (car doom-profile)
	 "default")))
      (unwind-protect
	  (progn
	    (let
		((doom-print-level
		  (or nil doom-print-level))
		 (doom-print-indent
		  (+
		   (if t
		       (or nil doom-print-indent-increment)
		     0)
		   doom-print-indent)))
	      (let
		  ((x0
		    (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
		   (to-rebuild nil))
		(progn
		  (ignore
		   (consp x0))
		  (let*
		      ((x54
			(car-safe x0))
		       (x55
			(cdr-safe x0)))
		    (let
			((old-version x54)
			 (hash x55))
		      (progn
			(if
			    (and old-version
				 (not
				  (equal old-version emacs-version)))
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
				old-version emacs-version))
			      (setq to-rebuild t)))
			(if
			    (and
			     (stringp hash)
			     (not
			      (equal hash
				     (doom-sync--system-hash))))
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'warn "Your system has changed since last sync")))
			      (setq to-rebuild t)))
			(if
			    (and to-rebuild
				 (not rebuild?)
				 (not
				  (progn
				    (or
				     (progn
				       (and
					(memq
					 (type-of context)
					 cl-struct-doom-cli-context-tags)
					t))
				     (signal 'wrong-type-argument
					     (list 'doom-cli-context context)))
				    (aref context 6))))
			    (progn
			      (cond
			       (nobuild?
				(doom-print
				 (doom-print--format
				  (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
			       ((doom-cli-context-get context 'upgrading)
				(doom-print
				 (doom-print--format
				  (doom-print--class 'warn "Packages will be rebuilt")))
				(setq rebuild? t))
			       ((y-or-n-p
				 (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
				(setq rebuild? t))
			       ((exit! 0))))))))))
	      (if
		  (and
		   (not noenvvar?)
		   (file-exists-p doom-env-file))
		  (progn
		    (call!
		     '(env))))
	      (doom-packages-ensure rebuild?)
	      (if noupdate? nil
		(doom-packages-update
		 (not update?)))
	      (doom-packages-purge purge? purge? purge? purge? purge?)
	      (if
		  (doom-profile-generate)
		  (progn
		    (doom-print
		     (doom-print--format
		      (doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
		    (run-hooks 'doom-after-sync-hook)))
	      (if
		  (or rebuild?
		      (not
		       (file-exists-p doom-cli-sync-info-file)))
		  (progn
		    (let
			((temp-file doom-cli-sync-info-file)
			 (temp-buffer
			  (generate-new-buffer " *temp file*" t)))
		      (unwind-protect
			  (prog1
			      (save-current-buffer
				(set-buffer temp-buffer)
				(prin1
				 (cons emacs-version
				       (doom-sync--system-hash))
				 (current-buffer)))
			    (save-current-buffer
			      (set-buffer temp-buffer)
			      (write-region nil nil temp-file nil 0)))
			(and
			 (buffer-name temp-buffer)
			 (kill-buffer temp-buffer))))))
	      t))
	(remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h))))
  #s(doom-cli
     ("doom" "sync")
     nil
     (("SUMMARY" . "Synchronize your config with Doom Emacs.")
      ("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add, remove, or modify `package!' blocks to your config,\n  3. Add, remove, or modify autoloaded functions in module autoloaded files,\n  4. Update Doom manually (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. Up or downgrade Emacs itself (e.g. 29.1 -> 29.4).\n\nSync'ing ensures that unneeded packages are removed, needed packages are\ninstalled, autoloads files are up-to-date, and no byte-compiled files have gone\nstale.")
      ("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined).\n--aot\n  Will only perform AOT native-compilation for packages updated/installed\n  during the execution of this command. Use --rebuild as well to do so for all\n  packages."))
     nil nil
     (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
			 ("-e")
			 nil nil)
	#s(doom-cli-option update? "Update all installed packages after syncing" nil nil
			   ("-u")
			   nil nil)
	#s(doom-cli-option noupdate? "Don't update any packages" nil nil
			   ("-U")
			   nil nil)
	#s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
			   ("--gc")
			   nil nil)
	#s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
			   ("-j" "--jobs")
			   (num)
			   nil)
	#s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
			   ("-b" "--rebuild")
			   nil nil)
	#s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
			   ("-B")
			   nil nil)
	#s(doom-cli-option aot? "Natively compile packages ahead-of-time (if available)" nil nil
			   ("--aot")
			   nil nil))
     ((&context context))
     (:benchmark t :prefix
		 (doom)
		 :group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
     (closure
	 (t)
	 (cli alist)
       (let
	   ((noenvvar?
	     (cdr
	      (assq 'noenvvar? alist)))
	    (update?
	     (cdr
	      (assq 'update? alist)))
	    (noupdate?
	     (cdr
	      (assq 'noupdate? alist)))
	    (purge?
	     (cdr
	      (assq 'purge? alist)))
	    (jobs
	     (cdr
	      (assq 'jobs alist)))
	    (rebuild?
	     (cdr
	      (assq 'rebuild? alist)))
	    (nobuild?
	     (cdr
	      (assq 'nobuild? alist)))
	    (aot?
	     (cdr
	      (assq 'aot? alist)))
	    (context
	     (cdr
	      (assq 'context alist))))
	 (if
	     (doom-profiles-bootloadable-p)
	     (progn
	       (call!
		'(profiles sync "--reload"))))
	 (if aot?
	     (progn
	       (progn
		 (eval-after-load 'straight
		   #'(lambda nil
		       (setq straight--native-comp-available t))))))
	 (if jobs
	     (progn
	       (setq native-comp-async-jobs-number
		     (truncate jobs))))
	 (run-hooks 'doom-before-sync-hook)
	 (add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
	 (doom-print
	  (doom-print--format
	   (doom-print--class 'item "Using Emacs %s @ %s")
	   emacs-version
	   (doom-print--class 'path invocation-directory invocation-name)))
	 (doom-print
	  (doom-print--format
	   (doom-print--class 'start "Synchronizing %S profile...")
	   (or
	    (car doom-profile)
	    "default")))
	 (unwind-protect
	     (progn
	       (let
		   ((doom-print-level
		     (or nil doom-print-level))
		    (doom-print-indent
		     (+
		      (if t
			  (or nil doom-print-indent-increment)
			0)
		      doom-print-indent)))
		 (let
		     ((x0
		       (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
		      (to-rebuild nil))
		   (progn
		     (ignore
		      (consp x0))
		     (let*
			 ((x54
			   (car-safe x0))
			  (x55
			   (cdr-safe x0)))
		       (let
			   ((old-version x54)
			    (hash x55))
			 (progn
			   (if
			       (and old-version
				    (not
				     (equal old-version emacs-version)))
			       (progn
				 (doom-print
				  (doom-print--format
				   (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
				   old-version emacs-version))
				 (setq to-rebuild t)))
			   (if
			       (and
				(stringp hash)
				(not
				 (equal hash
					(doom-sync--system-hash))))
			       (progn
				 (doom-print
				  (doom-print--format
				   (doom-print--class 'warn "Your system has changed since last sync")))
				 (setq to-rebuild t)))
			   (if
			       (and to-rebuild
				    (not rebuild?)
				    (not
				     (progn
				       (or
					(progn
					  (and
					   (memq
					    (type-of context)
					    cl-struct-doom-cli-context-tags)
					   t))
					(signal 'wrong-type-argument
						(list 'doom-cli-context context)))
				       (aref context 6))))
			       (progn
				 (cond
				  (nobuild?
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
				  ((doom-cli-context-get context 'upgrading)
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'warn "Packages will be rebuilt")))
				   (setq rebuild? t))
				  ((y-or-n-p
				    (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
				   (setq rebuild? t))
				  ((exit! 0))))))))))
		 (if
		     (and
		      (not noenvvar?)
		      (file-exists-p doom-env-file))
		     (progn
		       (call!
			'(env))))
		 (doom-packages-ensure rebuild?)
		 (if noupdate? nil
		   (doom-packages-update
		    (not update?)))
		 (doom-packages-purge purge? purge? purge? purge? purge?)
		 (if
		     (doom-profile-generate)
		     (progn
		       (doom-print
			(doom-print--format
			 (doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
		       (run-hooks 'doom-after-sync-hook)))
		 (if
		     (or rebuild?
			 (not
			  (file-exists-p doom-cli-sync-info-file)))
		     (progn
		       (let
			   ((temp-file doom-cli-sync-info-file)
			    (temp-buffer
			     (generate-new-buffer " *temp file*" t)))
			 (unwind-protect
			     (prog1
				 (save-current-buffer
				   (set-buffer temp-buffer)
				   (prin1
				    (cons emacs-version
					  (doom-sync--system-hash))
				    (current-buffer)))
			       (save-current-buffer
				 (set-buffer temp-buffer)
				 (write-region nil nil temp-file nil 0)))
			   (and
			    (buffer-name temp-buffer)
			    (kill-buffer temp-buffer))))))
		 t))
	   (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)))))
  ((context . #s(doom-cli-context
		 (26387 63354 473960 173000)
		 8602 0
		 (90 . 8)
		 nil nil "doom" nil nil
		 ("doom" "profiles" "sync")
		 nil
		 ("sync")
		 (("--reload" . "--reload")
		  ("--aot")
		  ("-B")
		  ("--rebuild")
		  ("-b")
		  ("--jobs")
		  ("-j")
		  ("--gc")
		  ("-U")
		  ("-u")
		  ("-e")
		  ("--eval")
		  ("-E")
		  ("--strict-load")
		  ("--load")
		  ("-L")
		  ("--color")
		  ("--benchmark")
		  ("--profile")
		  ("--pager")
		  ("--emacsdir")
		  ("--doomdir")
		  ("--verbose")
		  ("-v")
		  ("--debug")
		  ("-D")
		  ("--force")
		  ("-!"))
		 ((t)
		  (("doom" "profiles" "sync")
		   "--reload")
		  (("doom" "profiles")
		   "sync" "--reload")
		  (("doom")
		   "profiles" "sync" "--reload"))
		 #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
   (aot?)
   (nobuild?)
   (rebuild?)
   (jobs)
   (purge?)
   (noupdate?)
   (update?)
   (noenvvar?)))
 ((cli . #s(doom-cli
	    ("doom" "sync")
	    nil
	    (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	     ("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add, remove, or modify `package!' blocks to your config,\n  3. Add, remove, or modify autoloaded functions in module autoloaded files,\n  4. Update Doom manually (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. Up or downgrade Emacs itself (e.g. 29.1 -> 29.4).\n\nSync'ing ensures that unneeded packages are removed, needed packages are\ninstalled, autoloads files are up-to-date, and no byte-compiled files have gone\nstale.")
	     ("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined).\n--aot\n  Will only perform AOT native-compilation for packages updated/installed\n  during the execution of this command. Use --rebuild as well to do so for all\n  packages."))
	    nil nil
	    (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
				("-e")
				nil nil)
	       #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
				  ("-u")
				  nil nil)
	       #s(doom-cli-option noupdate? "Don't update any packages" nil nil
				  ("-U")
				  nil nil)
	       #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
				  ("--gc")
				  nil nil)
	       #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
				  ("-j" "--jobs")
				  (num)
				  nil)
	       #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
				  ("-b" "--rebuild")
				  nil nil)
	       #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
				  ("-B")
				  nil nil)
	       #s(doom-cli-option aot? "Natively compile packages ahead-of-time (if available)" nil nil
				  ("--aot")
				  nil nil))
	    ((&context context))
	    (:benchmark t :prefix
			(doom)
			:group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
	    (closure
		(t)
		(cli alist)
	      (let
		  ((noenvvar?
		    (cdr
		     (assq 'noenvvar? alist)))
		   (update?
		    (cdr
		     (assq 'update? alist)))
		   (noupdate?
		    (cdr
		     (assq 'noupdate? alist)))
		   (purge?
		    (cdr
		     (assq 'purge? alist)))
		   (jobs
		    (cdr
		     (assq 'jobs alist)))
		   (rebuild?
		    (cdr
		     (assq 'rebuild? alist)))
		   (nobuild?
		    (cdr
		     (assq 'nobuild? alist)))
		   (aot?
		    (cdr
		     (assq 'aot? alist)))
		   (context
		    (cdr
		     (assq 'context alist))))
		(if
		    (doom-profiles-bootloadable-p)
		    (progn
		      (call!
		       '(profiles sync "--reload"))))
		(if aot?
		    (progn
		      (progn
			(eval-after-load 'straight
			  #'(lambda nil
			      (setq straight--native-comp-available t))))))
		(if jobs
		    (progn
		      (setq native-comp-async-jobs-number
			    (truncate jobs))))
		(run-hooks 'doom-before-sync-hook)
		(add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
		(doom-print
		 (doom-print--format
		  (doom-print--class 'item "Using Emacs %s @ %s")
		  emacs-version
		  (doom-print--class 'path invocation-directory invocation-name)))
		(doom-print
		 (doom-print--format
		  (doom-print--class 'start "Synchronizing %S profile...")
		  (or
		   (car doom-profile)
		   "default")))
		(unwind-protect
		    (progn
		      (let
			  ((doom-print-level
			    (or nil doom-print-level))
			   (doom-print-indent
			    (+
			     (if t
				 (or nil doom-print-indent-increment)
			       0)
			     doom-print-indent)))
			(let
			    ((x0
			      (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			     (to-rebuild nil))
			  (progn
			    (ignore
			     (consp x0))
			    (let*
				((x54
				  (car-safe x0))
				 (x55
				  (cdr-safe x0)))
			      (let
				  ((old-version x54)
				   (hash x55))
				(progn
				  (if
				      (and old-version
					   (not
					    (equal old-version emacs-version)))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
					  old-version emacs-version))
					(setq to-rebuild t)))
				  (if
				      (and
				       (stringp hash)
				       (not
					(equal hash
					       (doom-sync--system-hash))))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Your system has changed since last sync")))
					(setq to-rebuild t)))
				  (if
				      (and to-rebuild
					   (not rebuild?)
					   (not
					    (progn
					      (or
					       (progn
						 (and
						  (memq
						   (type-of context)
						   cl-struct-doom-cli-context-tags)
						  t))
					       (signal 'wrong-type-argument
						       (list 'doom-cli-context context)))
					      (aref context 6))))
				      (progn
					(cond
					 (nobuild?
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
					 ((doom-cli-context-get context 'upgrading)
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages will be rebuilt")))
					  (setq rebuild? t))
					 ((y-or-n-p
					   (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
					  (setq rebuild? t))
					 ((exit! 0))))))))))
			(if
			    (and
			     (not noenvvar?)
			     (file-exists-p doom-env-file))
			    (progn
			      (call!
			       '(env))))
			(doom-packages-ensure rebuild?)
			(if noupdate? nil
			  (doom-packages-update
			   (not update?)))
			(doom-packages-purge purge? purge? purge? purge? purge?)
			(if
			    (doom-profile-generate)
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			      (run-hooks 'doom-after-sync-hook)))
			(if
			    (or rebuild?
				(not
				 (file-exists-p doom-cli-sync-info-file)))
			    (progn
			      (let
				  ((temp-file doom-cli-sync-info-file)
				   (temp-buffer
				    (generate-new-buffer " *temp file*" t)))
				(unwind-protect
				    (prog1
					(save-current-buffer
					  (set-buffer temp-buffer)
					  (prin1
					   (cons emacs-version
						 (doom-sync--system-hash))
					   (current-buffer)))
				      (save-current-buffer
					(set-buffer temp-buffer)
					(write-region nil nil temp-file nil 0)))
				  (and
				   (buffer-name temp-buffer)
				   (kill-buffer temp-buffer))))))
			t))
		  (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h))))))
  (alist
   (context . #s(doom-cli-context
		 (26387 63354 473960 173000)
		 8602 0
		 (90 . 8)
		 nil nil "doom" nil nil
		 ("doom" "profiles" "sync")
		 nil
		 ("sync")
		 (("--reload" . "--reload")
		  ("--aot")
		  ("-B")
		  ("--rebuild")
		  ("-b")
		  ("--jobs")
		  ("-j")
		  ("--gc")
		  ("-U")
		  ("-u")
		  ("-e")
		  ("--eval")
		  ("-E")
		  ("--strict-load")
		  ("--load")
		  ("-L")
		  ("--color")
		  ("--benchmark")
		  ("--profile")
		  ("--pager")
		  ("--emacsdir")
		  ("--doomdir")
		  ("--verbose")
		  ("-v")
		  ("--debug")
		  ("-D")
		  ("--force")
		  ("-!"))
		 ((t)
		  (("doom" "profiles" "sync")
		   "--reload")
		  (("doom" "profiles")
		   "sync" "--reload")
		  (("doom")
		   "profiles" "sync" "--reload"))
		 #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
   (aot?)
   (nobuild?)
   (rebuild?)
   (jobs)
   (purge?)
   (noupdate?)
   (update?)
   (noenvvar?))))

;;;; 26
((funcall
  (closure
      (t)
      (cli alist)
    (let
	((noenvvar?
	  (cdr
	   (assq 'noenvvar? alist)))
	 (update?
	  (cdr
	   (assq 'update? alist)))
	 (noupdate?
	  (cdr
	   (assq 'noupdate? alist)))
	 (purge?
	  (cdr
	   (assq 'purge? alist)))
	 (jobs
	  (cdr
	   (assq 'jobs alist)))
	 (rebuild?
	  (cdr
	   (assq 'rebuild? alist)))
	 (nobuild?
	  (cdr
	   (assq 'nobuild? alist)))
	 (aot?
	  (cdr
	   (assq 'aot? alist)))
	 (context
	  (cdr
	   (assq 'context alist))))
      (if
	  (doom-profiles-bootloadable-p)
	  (progn
	    (call!
	     '(profiles sync "--reload"))))
      (if aot?
	  (progn
	    (progn
	      (eval-after-load 'straight
		#'(lambda nil
		    (setq straight--native-comp-available t))))))
      (if jobs
	  (progn
	    (setq native-comp-async-jobs-number
		  (truncate jobs))))
      (run-hooks 'doom-before-sync-hook)
      (add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
      (doom-print
       (doom-print--format
	(doom-print--class 'item "Using Emacs %s @ %s")
	emacs-version
	(doom-print--class 'path invocation-directory invocation-name)))
      (doom-print
       (doom-print--format
	(doom-print--class 'start "Synchronizing %S profile...")
	(or
	 (car doom-profile)
	 "default")))
      (unwind-protect
	  (progn
	    (let
		((doom-print-level
		  (or nil doom-print-level))
		 (doom-print-indent
		  (+
		   (if t
		       (or nil doom-print-indent-increment)
		     0)
		   doom-print-indent)))
	      (let
		  ((x0
		    (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
		   (to-rebuild nil))
		(progn
		  (ignore
		   (consp x0))
		  (let*
		      ((x54
			(car-safe x0))
		       (x55
			(cdr-safe x0)))
		    (let
			((old-version x54)
			 (hash x55))
		      (progn
			(if
			    (and old-version
				 (not
				  (equal old-version emacs-version)))
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
				old-version emacs-version))
			      (setq to-rebuild t)))
			(if
			    (and
			     (stringp hash)
			     (not
			      (equal hash
				     (doom-sync--system-hash))))
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'warn "Your system has changed since last sync")))
			      (setq to-rebuild t)))
			(if
			    (and to-rebuild
				 (not rebuild?)
				 (not
				  (progn
				    (or
				     (progn
				       (and
					(memq
					 (type-of context)
					 cl-struct-doom-cli-context-tags)
					t))
				     (signal 'wrong-type-argument
					     (list 'doom-cli-context context)))
				    (aref context 6))))
			    (progn
			      (cond
			       (nobuild?
				(doom-print
				 (doom-print--format
				  (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
			       ((doom-cli-context-get context 'upgrading)
				(doom-print
				 (doom-print--format
				  (doom-print--class 'warn "Packages will be rebuilt")))
				(setq rebuild? t))
			       ((y-or-n-p
				 (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
				(setq rebuild? t))
			       ((exit! 0))))))))))
	      (if
		  (and
		   (not noenvvar?)
		   (file-exists-p doom-env-file))
		  (progn
		    (call!
		     '(env))))
	      (doom-packages-ensure rebuild?)
	      (if noupdate? nil
		(doom-packages-update
		 (not update?)))
	      (doom-packages-purge purge? purge? purge? purge? purge?)
	      (if
		  (doom-profile-generate)
		  (progn
		    (doom-print
		     (doom-print--format
		      (doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
		    (run-hooks 'doom-after-sync-hook)))
	      (if
		  (or rebuild?
		      (not
		       (file-exists-p doom-cli-sync-info-file)))
		  (progn
		    (let
			((temp-file doom-cli-sync-info-file)
			 (temp-buffer
			  (generate-new-buffer " *temp file*" t)))
		      (unwind-protect
			  (prog1
			      (save-current-buffer
				(set-buffer temp-buffer)
				(prin1
				 (cons emacs-version
				       (doom-sync--system-hash))
				 (current-buffer)))
			    (save-current-buffer
			      (set-buffer temp-buffer)
			      (write-region nil nil temp-file nil 0)))
			(and
			 (buffer-name temp-buffer)
			 (kill-buffer temp-buffer))))))
	      t))
	(remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h))))
  #s(doom-cli
     ("doom" "sync")
     nil
     (("SUMMARY" . "Synchronize your config with Doom Emacs.")
      ("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add, remove, or modify `package!' blocks to your config,\n  3. Add, remove, or modify autoloaded functions in module autoloaded files,\n  4. Update Doom manually (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. Up or downgrade Emacs itself (e.g. 29.1 -> 29.4).\n\nSync'ing ensures that unneeded packages are removed, needed packages are\ninstalled, autoloads files are up-to-date, and no byte-compiled files have gone\nstale.")
      ("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined).\n--aot\n  Will only perform AOT native-compilation for packages updated/installed\n  during the execution of this command. Use --rebuild as well to do so for all\n  packages."))
     nil nil
     (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
			 ("-e")
			 nil nil)
	#s(doom-cli-option update? "Update all installed packages after syncing" nil nil
			   ("-u")
			   nil nil)
	#s(doom-cli-option noupdate? "Don't update any packages" nil nil
			   ("-U")
			   nil nil)
	#s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
			   ("--gc")
			   nil nil)
	#s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
			   ("-j" "--jobs")
			   (num)
			   nil)
	#s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
			   ("-b" "--rebuild")
			   nil nil)
	#s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
			   ("-B")
			   nil nil)
	#s(doom-cli-option aot? "Natively compile packages ahead-of-time (if available)" nil nil
			   ("--aot")
			   nil nil))
     ((&context context))
     (:benchmark t :prefix
		 (doom)
		 :group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
     (closure
	 (t)
	 (cli alist)
       (let
	   ((noenvvar?
	     (cdr
	      (assq 'noenvvar? alist)))
	    (update?
	     (cdr
	      (assq 'update? alist)))
	    (noupdate?
	     (cdr
	      (assq 'noupdate? alist)))
	    (purge?
	     (cdr
	      (assq 'purge? alist)))
	    (jobs
	     (cdr
	      (assq 'jobs alist)))
	    (rebuild?
	     (cdr
	      (assq 'rebuild? alist)))
	    (nobuild?
	     (cdr
	      (assq 'nobuild? alist)))
	    (aot?
	     (cdr
	      (assq 'aot? alist)))
	    (context
	     (cdr
	      (assq 'context alist))))
	 (if
	     (doom-profiles-bootloadable-p)
	     (progn
	       (call!
		'(profiles sync "--reload"))))
	 (if aot?
	     (progn
	       (progn
		 (eval-after-load 'straight
		   #'(lambda nil
		       (setq straight--native-comp-available t))))))
	 (if jobs
	     (progn
	       (setq native-comp-async-jobs-number
		     (truncate jobs))))
	 (run-hooks 'doom-before-sync-hook)
	 (add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
	 (doom-print
	  (doom-print--format
	   (doom-print--class 'item "Using Emacs %s @ %s")
	   emacs-version
	   (doom-print--class 'path invocation-directory invocation-name)))
	 (doom-print
	  (doom-print--format
	   (doom-print--class 'start "Synchronizing %S profile...")
	   (or
	    (car doom-profile)
	    "default")))
	 (unwind-protect
	     (progn
	       (let
		   ((doom-print-level
		     (or nil doom-print-level))
		    (doom-print-indent
		     (+
		      (if t
			  (or nil doom-print-indent-increment)
			0)
		      doom-print-indent)))
		 (let
		     ((x0
		       (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
		      (to-rebuild nil))
		   (progn
		     (ignore
		      (consp x0))
		     (let*
			 ((x54
			   (car-safe x0))
			  (x55
			   (cdr-safe x0)))
		       (let
			   ((old-version x54)
			    (hash x55))
			 (progn
			   (if
			       (and old-version
				    (not
				     (equal old-version emacs-version)))
			       (progn
				 (doom-print
				  (doom-print--format
				   (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
				   old-version emacs-version))
				 (setq to-rebuild t)))
			   (if
			       (and
				(stringp hash)
				(not
				 (equal hash
					(doom-sync--system-hash))))
			       (progn
				 (doom-print
				  (doom-print--format
				   (doom-print--class 'warn "Your system has changed since last sync")))
				 (setq to-rebuild t)))
			   (if
			       (and to-rebuild
				    (not rebuild?)
				    (not
				     (progn
				       (or
					(progn
					  (and
					   (memq
					    (type-of context)
					    cl-struct-doom-cli-context-tags)
					   t))
					(signal 'wrong-type-argument
						(list 'doom-cli-context context)))
				       (aref context 6))))
			       (progn
				 (cond
				  (nobuild?
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
				  ((doom-cli-context-get context 'upgrading)
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'warn "Packages will be rebuilt")))
				   (setq rebuild? t))
				  ((y-or-n-p
				    (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
				   (setq rebuild? t))
				  ((exit! 0))))))))))
		 (if
		     (and
		      (not noenvvar?)
		      (file-exists-p doom-env-file))
		     (progn
		       (call!
			'(env))))
		 (doom-packages-ensure rebuild?)
		 (if noupdate? nil
		   (doom-packages-update
		    (not update?)))
		 (doom-packages-purge purge? purge? purge? purge? purge?)
		 (if
		     (doom-profile-generate)
		     (progn
		       (doom-print
			(doom-print--format
			 (doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
		       (run-hooks 'doom-after-sync-hook)))
		 (if
		     (or rebuild?
			 (not
			  (file-exists-p doom-cli-sync-info-file)))
		     (progn
		       (let
			   ((temp-file doom-cli-sync-info-file)
			    (temp-buffer
			     (generate-new-buffer " *temp file*" t)))
			 (unwind-protect
			     (prog1
				 (save-current-buffer
				   (set-buffer temp-buffer)
				   (prin1
				    (cons emacs-version
					  (doom-sync--system-hash))
				    (current-buffer)))
			       (save-current-buffer
				 (set-buffer temp-buffer)
				 (write-region nil nil temp-file nil 0)))
			   (and
			    (buffer-name temp-buffer)
			    (kill-buffer temp-buffer))))))
		 t))
	   (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)))))
  ((context . #s(doom-cli-context
		 (26387 63354 473960 173000)
		 8602 0
		 (90 . 8)
		 nil nil "doom" nil nil
		 ("doom" "profiles" "sync")
		 nil
		 ("sync")
		 (("--reload" . "--reload")
		  ("--aot")
		  ("-B")
		  ("--rebuild")
		  ("-b")
		  ("--jobs")
		  ("-j")
		  ("--gc")
		  ("-U")
		  ("-u")
		  ("-e")
		  ("--eval")
		  ("-E")
		  ("--strict-load")
		  ("--load")
		  ("-L")
		  ("--color")
		  ("--benchmark")
		  ("--profile")
		  ("--pager")
		  ("--emacsdir")
		  ("--doomdir")
		  ("--verbose")
		  ("-v")
		  ("--debug")
		  ("-D")
		  ("--force")
		  ("-!"))
		 ((t)
		  (("doom" "profiles" "sync")
		   "--reload")
		  (("doom" "profiles")
		   "sync" "--reload")
		  (("doom")
		   "profiles" "sync" "--reload"))
		 #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
   (aot?)
   (nobuild?)
   (rebuild?)
   (jobs)
   (purge?)
   (noupdate?)
   (update?)
   (noenvvar?)))
 nil)

;;;; 27
((doom-cli-execute #s(doom-cli
		      ("doom" "sync")
		      nil
		      (("SUMMARY" . "Synchronize your config with Doom Emacs.")
		       ("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add, remove, or modify `package!' blocks to your config,\n  3. Add, remove, or modify autoloaded functions in module autoloaded files,\n  4. Update Doom manually (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. Up or downgrade Emacs itself (e.g. 29.1 -> 29.4).\n\nSync'ing ensures that unneeded packages are removed, needed packages are\ninstalled, autoloads files are up-to-date, and no byte-compiled files have gone\nstale.")
		       ("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined).\n--aot\n  Will only perform AOT native-compilation for packages updated/installed\n  during the execution of this command. Use --rebuild as well to do so for all\n  packages."))
		      nil nil
		      (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
					  ("-e")
					  nil nil)
			 #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
					    ("-u")
					    nil nil)
			 #s(doom-cli-option noupdate? "Don't update any packages" nil nil
					    ("-U")
					    nil nil)
			 #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
					    ("--gc")
					    nil nil)
			 #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
					    ("-j" "--jobs")
					    (num)
					    nil)
			 #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
					    ("-b" "--rebuild")
					    nil nil)
			 #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
					    ("-B")
					    nil nil)
			 #s(doom-cli-option aot? "Natively compile packages ahead-of-time (if available)" nil nil
					    ("--aot")
					    nil nil))
		      ((&context context))
		      (:benchmark t :prefix
				  (doom)
				  :group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
		      (closure
			  (t)
			  (cli alist)
			(let
			    ((noenvvar?
			      (cdr
			       (assq 'noenvvar? alist)))
			     (update?
			      (cdr
			       (assq 'update? alist)))
			     (noupdate?
			      (cdr
			       (assq 'noupdate? alist)))
			     (purge?
			      (cdr
			       (assq 'purge? alist)))
			     (jobs
			      (cdr
			       (assq 'jobs alist)))
			     (rebuild?
			      (cdr
			       (assq 'rebuild? alist)))
			     (nobuild?
			      (cdr
			       (assq 'nobuild? alist)))
			     (aot?
			      (cdr
			       (assq 'aot? alist)))
			     (context
			      (cdr
			       (assq 'context alist))))
			  (if
			      (doom-profiles-bootloadable-p)
			      (progn
				(call!
				 '(profiles sync "--reload"))))
			  (if aot?
			      (progn
				(progn
				  (eval-after-load 'straight
				    #'(lambda nil
					(setq straight--native-comp-available t))))))
			  (if jobs
			      (progn
				(setq native-comp-async-jobs-number
				      (truncate jobs))))
			  (run-hooks 'doom-before-sync-hook)
			  (add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'item "Using Emacs %s @ %s")
			    emacs-version
			    (doom-print--class 'path invocation-directory invocation-name)))
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'start "Synchronizing %S profile...")
			    (or
			     (car doom-profile)
			     "default")))
			  (unwind-protect
			      (progn
				(let
				    ((doom-print-level
				      (or nil doom-print-level))
				     (doom-print-indent
				      (+
				       (if t
					   (or nil doom-print-indent-increment)
					 0)
				       doom-print-indent)))
				  (let
				      ((x0
					(doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
				       (to-rebuild nil))
				    (progn
				      (ignore
				       (consp x0))
				      (let*
					  ((x54
					    (car-safe x0))
					   (x55
					    (cdr-safe x0)))
					(let
					    ((old-version x54)
					     (hash x55))
					  (progn
					    (if
						(and old-version
						     (not
						      (equal old-version emacs-version)))
						(progn
						  (doom-print
						   (doom-print--format
						    (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
						    old-version emacs-version))
						  (setq to-rebuild t)))
					    (if
						(and
						 (stringp hash)
						 (not
						  (equal hash
							 (doom-sync--system-hash))))
						(progn
						  (doom-print
						   (doom-print--format
						    (doom-print--class 'warn "Your system has changed since last sync")))
						  (setq to-rebuild t)))
					    (if
						(and to-rebuild
						     (not rebuild?)
						     (not
						      (progn
							(or
							 (progn
							   (and
							    (memq
							     (type-of context)
							     cl-struct-doom-cli-context-tags)
							    t))
							 (signal 'wrong-type-argument
								 (list 'doom-cli-context context)))
							(aref context 6))))
						(progn
						  (cond
						   (nobuild?
						    (doom-print
						     (doom-print--format
						      (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
						   ((doom-cli-context-get context 'upgrading)
						    (doom-print
						     (doom-print--format
						      (doom-print--class 'warn "Packages will be rebuilt")))
						    (setq rebuild? t))
						   ((y-or-n-p
						     (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
						    (setq rebuild? t))
						   ((exit! 0))))))))))
				  (if
				      (and
				       (not noenvvar?)
				       (file-exists-p doom-env-file))
				      (progn
					(call!
					 '(env))))
				  (doom-packages-ensure rebuild?)
				  (if noupdate? nil
				    (doom-packages-update
				     (not update?)))
				  (doom-packages-purge purge? purge? purge? purge? purge?)
				  (if
				      (doom-profile-generate)
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
					(run-hooks 'doom-after-sync-hook)))
				  (if
				      (or rebuild?
					  (not
					   (file-exists-p doom-cli-sync-info-file)))
				      (progn
					(let
					    ((temp-file doom-cli-sync-info-file)
					     (temp-buffer
					      (generate-new-buffer " *temp file*" t)))
					  (unwind-protect
					      (prog1
						  (save-current-buffer
						    (set-buffer temp-buffer)
						    (prin1
						     (cons emacs-version
							   (doom-sync--system-hash))
						     (current-buffer)))
						(save-current-buffer
						  (set-buffer temp-buffer)
						  (write-region nil nil temp-file nil 0)))
					    (and
					     (buffer-name temp-buffer)
					     (kill-buffer temp-buffer))))))
				  t))
			    (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)))))
		   ((context . #s(doom-cli-context
				  (26387 63354 473960 173000)
				  8602 0
				  (90 . 8)
				  nil nil "doom" nil nil
				  ("doom" "profiles" "sync")
				  nil
				  ("sync")
				  (("--reload" . "--reload")
				   ("--aot")
				   ("-B")
				   ("--rebuild")
				   ("-b")
				   ("--jobs")
				   ("-j")
				   ("--gc")
				   ("-U")
				   ("-u")
				   ("-e")
				   ("--eval")
				   ("-E")
				   ("--strict-load")
				   ("--load")
				   ("-L")
				   ("--color")
				   ("--benchmark")
				   ("--profile")
				   ("--pager")
				   ("--emacsdir")
				   ("--doomdir")
				   ("--verbose")
				   ("-v")
				   ("--debug")
				   ("-D")
				   ("--force")
				   ("-!"))
				  ((t)
				   (("doom" "profiles" "sync")
				    "--reload")
				   (("doom" "profiles")
				    "sync" "--reload")
				   (("doom")
				    "profiles" "sync" "--reload"))
				  #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
		    (aot?)
		    (nobuild?)
		    (rebuild?)
		    (jobs)
		    (purge?)
		    (noupdate?)
		    (update?)
		    (noenvvar?)))
 ((cli . #s(doom-cli
	    ("doom" "sync")
	    nil
	    (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	     ("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add, remove, or modify `package!' blocks to your config,\n  3. Add, remove, or modify autoloaded functions in module autoloaded files,\n  4. Update Doom manually (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. Up or downgrade Emacs itself (e.g. 29.1 -> 29.4).\n\nSync'ing ensures that unneeded packages are removed, needed packages are\ninstalled, autoloads files are up-to-date, and no byte-compiled files have gone\nstale.")
	     ("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined).\n--aot\n  Will only perform AOT native-compilation for packages updated/installed\n  during the execution of this command. Use --rebuild as well to do so for all\n  packages."))
	    nil nil
	    (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
				("-e")
				nil nil)
	       #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
				  ("-u")
				  nil nil)
	       #s(doom-cli-option noupdate? "Don't update any packages" nil nil
				  ("-U")
				  nil nil)
	       #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
				  ("--gc")
				  nil nil)
	       #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
				  ("-j" "--jobs")
				  (num)
				  nil)
	       #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
				  ("-b" "--rebuild")
				  nil nil)
	       #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
				  ("-B")
				  nil nil)
	       #s(doom-cli-option aot? "Natively compile packages ahead-of-time (if available)" nil nil
				  ("--aot")
				  nil nil))
	    ((&context context))
	    (:benchmark t :prefix
			(doom)
			:group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
	    (closure
		(t)
		(cli alist)
	      (let
		  ((noenvvar?
		    (cdr
		     (assq 'noenvvar? alist)))
		   (update?
		    (cdr
		     (assq 'update? alist)))
		   (noupdate?
		    (cdr
		     (assq 'noupdate? alist)))
		   (purge?
		    (cdr
		     (assq 'purge? alist)))
		   (jobs
		    (cdr
		     (assq 'jobs alist)))
		   (rebuild?
		    (cdr
		     (assq 'rebuild? alist)))
		   (nobuild?
		    (cdr
		     (assq 'nobuild? alist)))
		   (aot?
		    (cdr
		     (assq 'aot? alist)))
		   (context
		    (cdr
		     (assq 'context alist))))
		(if
		    (doom-profiles-bootloadable-p)
		    (progn
		      (call!
		       '(profiles sync "--reload"))))
		(if aot?
		    (progn
		      (progn
			(eval-after-load 'straight
			  #'(lambda nil
			      (setq straight--native-comp-available t))))))
		(if jobs
		    (progn
		      (setq native-comp-async-jobs-number
			    (truncate jobs))))
		(run-hooks 'doom-before-sync-hook)
		(add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
		(doom-print
		 (doom-print--format
		  (doom-print--class 'item "Using Emacs %s @ %s")
		  emacs-version
		  (doom-print--class 'path invocation-directory invocation-name)))
		(doom-print
		 (doom-print--format
		  (doom-print--class 'start "Synchronizing %S profile...")
		  (or
		   (car doom-profile)
		   "default")))
		(unwind-protect
		    (progn
		      (let
			  ((doom-print-level
			    (or nil doom-print-level))
			   (doom-print-indent
			    (+
			     (if t
				 (or nil doom-print-indent-increment)
			       0)
			     doom-print-indent)))
			(let
			    ((x0
			      (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			     (to-rebuild nil))
			  (progn
			    (ignore
			     (consp x0))
			    (let*
				((x54
				  (car-safe x0))
				 (x55
				  (cdr-safe x0)))
			      (let
				  ((old-version x54)
				   (hash x55))
				(progn
				  (if
				      (and old-version
					   (not
					    (equal old-version emacs-version)))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
					  old-version emacs-version))
					(setq to-rebuild t)))
				  (if
				      (and
				       (stringp hash)
				       (not
					(equal hash
					       (doom-sync--system-hash))))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Your system has changed since last sync")))
					(setq to-rebuild t)))
				  (if
				      (and to-rebuild
					   (not rebuild?)
					   (not
					    (progn
					      (or
					       (progn
						 (and
						  (memq
						   (type-of context)
						   cl-struct-doom-cli-context-tags)
						  t))
					       (signal 'wrong-type-argument
						       (list 'doom-cli-context context)))
					      (aref context 6))))
				      (progn
					(cond
					 (nobuild?
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
					 ((doom-cli-context-get context 'upgrading)
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages will be rebuilt")))
					  (setq rebuild? t))
					 ((y-or-n-p
					   (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
					  (setq rebuild? t))
					 ((exit! 0))))))))))
			(if
			    (and
			     (not noenvvar?)
			     (file-exists-p doom-env-file))
			    (progn
			      (call!
			       '(env))))
			(doom-packages-ensure rebuild?)
			(if noupdate? nil
			  (doom-packages-update
			   (not update?)))
			(doom-packages-purge purge? purge? purge? purge? purge?)
			(if
			    (doom-profile-generate)
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			      (run-hooks 'doom-after-sync-hook)))
			(if
			    (or rebuild?
				(not
				 (file-exists-p doom-cli-sync-info-file)))
			    (progn
			      (let
				  ((temp-file doom-cli-sync-info-file)
				   (temp-buffer
				    (generate-new-buffer " *temp file*" t)))
				(unwind-protect
				    (prog1
					(save-current-buffer
					  (set-buffer temp-buffer)
					  (prin1
					   (cons emacs-version
						 (doom-sync--system-hash))
					   (current-buffer)))
				      (save-current-buffer
					(set-buffer temp-buffer)
					(write-region nil nil temp-file nil 0)))
				  (and
				   (buffer-name temp-buffer)
				   (kill-buffer temp-buffer))))))
			t))
		  (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h))))))
  (bindings
   (context . #s(doom-cli-context
		 (26387 63354 473960 173000)
		 8602 0
		 (90 . 8)
		 nil nil "doom" nil nil
		 ("doom" "profiles" "sync")
		 nil
		 ("sync")
		 (("--reload" . "--reload")
		  ("--aot")
		  ("-B")
		  ("--rebuild")
		  ("-b")
		  ("--jobs")
		  ("-j")
		  ("--gc")
		  ("-U")
		  ("-u")
		  ("-e")
		  ("--eval")
		  ("-E")
		  ("--strict-load")
		  ("--load")
		  ("-L")
		  ("--color")
		  ("--benchmark")
		  ("--profile")
		  ("--pager")
		  ("--emacsdir")
		  ("--doomdir")
		  ("--verbose")
		  ("-v")
		  ("--debug")
		  ("-D")
		  ("--force")
		  ("-!"))
		 ((t)
		  (("doom" "profiles" "sync")
		   "--reload")
		  (("doom" "profiles")
		   "sync" "--reload")
		  (("doom")
		   "profiles" "sync" "--reload"))
		 #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
   (aot?)
   (nobuild?)
   (rebuild?)
   (jobs)
   (purge?)
   (noupdate?)
   (update?)
   (noenvvar?))))

;;;; 28
((let
     ((cli x16)
      (bindings x17))
   (doom-cli-execute cli bindings))
 ((context . #s(doom-cli-context
		(26387 63354 473960 173000)
		8602 0
		(90 . 8)
		nil nil "doom" nil nil
		("doom" "profiles" "sync")
		nil
		("sync")
		(("--reload" . "--reload")
		 ("--aot")
		 ("-B")
		 ("--rebuild")
		 ("-b")
		 ("--jobs")
		 ("-j")
		 ("--gc")
		 ("-U")
		 ("-u")
		 ("-e")
		 ("--eval")
		 ("-E")
		 ("--strict-load")
		 ("--load")
		 ("-L")
		 ("--color")
		 ("--benchmark")
		 ("--profile")
		 ("--pager")
		 ("--emacsdir")
		 ("--doomdir")
		 ("--verbose")
		 ("-v")
		 ("--debug")
		 ("-D")
		 ("--force")
		 ("-!"))
		((t)
		 (("doom" "profiles" "sync")
		  "--reload")
		 (("doom" "profiles")
		  "sync" "--reload")
		 (("doom")
		  "profiles" "sync" "--reload"))
		#<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (command "doom" "sync")
  (cli . #s(doom-cli
	    ("doom" "sync")
	    nil
	    (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	     ("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add, remove, or modify `package!' blocks to your config,\n  3. Add, remove, or modify autoloaded functions in module autoloaded files,\n  4. Update Doom manually (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. Up or downgrade Emacs itself (e.g. 29.1 -> 29.4).\n\nSync'ing ensures that unneeded packages are removed, needed packages are\ninstalled, autoloads files are up-to-date, and no byte-compiled files have gone\nstale.")
	     ("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined).\n--aot\n  Will only perform AOT native-compilation for packages updated/installed\n  during the execution of this command. Use --rebuild as well to do so for all\n  packages."))
	    nil nil
	    (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
				("-e")
				nil nil)
	       #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
				  ("-u")
				  nil nil)
	       #s(doom-cli-option noupdate? "Don't update any packages" nil nil
				  ("-U")
				  nil nil)
	       #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
				  ("--gc")
				  nil nil)
	       #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
				  ("-j" "--jobs")
				  (num)
				  nil)
	       #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
				  ("-b" "--rebuild")
				  nil nil)
	       #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
				  ("-B")
				  nil nil)
	       #s(doom-cli-option aot? "Natively compile packages ahead-of-time (if available)" nil nil
				  ("--aot")
				  nil nil))
	    ((&context context))
	    (:benchmark t :prefix
			(doom)
			:group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
	    (closure
		(t)
		(cli alist)
	      (let
		  ((noenvvar?
		    (cdr
		     (assq 'noenvvar? alist)))
		   (update?
		    (cdr
		     (assq 'update? alist)))
		   (noupdate?
		    (cdr
		     (assq 'noupdate? alist)))
		   (purge?
		    (cdr
		     (assq 'purge? alist)))
		   (jobs
		    (cdr
		     (assq 'jobs alist)))
		   (rebuild?
		    (cdr
		     (assq 'rebuild? alist)))
		   (nobuild?
		    (cdr
		     (assq 'nobuild? alist)))
		   (aot?
		    (cdr
		     (assq 'aot? alist)))
		   (context
		    (cdr
		     (assq 'context alist))))
		(if
		    (doom-profiles-bootloadable-p)
		    (progn
		      (call!
		       '(profiles sync "--reload"))))
		(if aot?
		    (progn
		      (progn
			(eval-after-load 'straight
			  #'(lambda nil
			      (setq straight--native-comp-available t))))))
		(if jobs
		    (progn
		      (setq native-comp-async-jobs-number
			    (truncate jobs))))
		(run-hooks 'doom-before-sync-hook)
		(add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
		(doom-print
		 (doom-print--format
		  (doom-print--class 'item "Using Emacs %s @ %s")
		  emacs-version
		  (doom-print--class 'path invocation-directory invocation-name)))
		(doom-print
		 (doom-print--format
		  (doom-print--class 'start "Synchronizing %S profile...")
		  (or
		   (car doom-profile)
		   "default")))
		(unwind-protect
		    (progn
		      (let
			  ((doom-print-level
			    (or nil doom-print-level))
			   (doom-print-indent
			    (+
			     (if t
				 (or nil doom-print-indent-increment)
			       0)
			     doom-print-indent)))
			(let
			    ((x0
			      (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			     (to-rebuild nil))
			  (progn
			    (ignore
			     (consp x0))
			    (let*
				((x54
				  (car-safe x0))
				 (x55
				  (cdr-safe x0)))
			      (let
				  ((old-version x54)
				   (hash x55))
				(progn
				  (if
				      (and old-version
					   (not
					    (equal old-version emacs-version)))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
					  old-version emacs-version))
					(setq to-rebuild t)))
				  (if
				      (and
				       (stringp hash)
				       (not
					(equal hash
					       (doom-sync--system-hash))))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Your system has changed since last sync")))
					(setq to-rebuild t)))
				  (if
				      (and to-rebuild
					   (not rebuild?)
					   (not
					    (progn
					      (or
					       (progn
						 (and
						  (memq
						   (type-of context)
						   cl-struct-doom-cli-context-tags)
						  t))
					       (signal 'wrong-type-argument
						       (list 'doom-cli-context context)))
					      (aref context 6))))
				      (progn
					(cond
					 (nobuild?
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
					 ((doom-cli-context-get context 'upgrading)
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages will be rebuilt")))
					  (setq rebuild? t))
					 ((y-or-n-p
					   (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
					  (setq rebuild? t))
					 ((exit! 0))))))))))
			(if
			    (and
			     (not noenvvar?)
			     (file-exists-p doom-env-file))
			    (progn
			      (call!
			       '(env))))
			(doom-packages-ensure rebuild?)
			(if noupdate? nil
			  (doom-packages-update
			   (not update?)))
			(doom-packages-purge purge? purge? purge? purge? purge?)
			(if
			    (doom-profile-generate)
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			      (run-hooks 'doom-after-sync-hook)))
			(if
			    (or rebuild?
				(not
				 (file-exists-p doom-cli-sync-info-file)))
			    (progn
			      (let
				  ((temp-file doom-cli-sync-info-file)
				   (temp-buffer
				    (generate-new-buffer " *temp file*" t)))
				(unwind-protect
				    (prog1
					(save-current-buffer
					  (set-buffer temp-buffer)
					  (prin1
					   (cons emacs-version
						 (doom-sync--system-hash))
					   (current-buffer)))
				      (save-current-buffer
					(set-buffer temp-buffer)
					(write-region nil nil temp-file nil 0)))
				  (and
				   (buffer-name temp-buffer)
				   (kill-buffer temp-buffer))))))
			t))
		  (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h))))))
  (prefix . "doom")
  (seen t)
  (runners
   (#s(doom-cli
       ("doom" "sync")
       nil
       (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add, remove, or modify `package!' blocks to your config,\n  3. Add, remove, or modify autoloaded functions in module autoloaded files,\n  4. Update Doom manually (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. Up or downgrade Emacs itself (e.g. 29.1 -> 29.4).\n\nSync'ing ensures that unneeded packages are removed, needed packages are\ninstalled, autoloads files are up-to-date, and no byte-compiled files have gone\nstale.")
	("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined).\n--aot\n  Will only perform AOT native-compilation for packages updated/installed\n  during the execution of this command. Use --rebuild as well to do so for all\n  packages."))
       nil nil
       (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
			   ("-e")
			   nil nil)
	  #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
			     ("-u")
			     nil nil)
	  #s(doom-cli-option noupdate? "Don't update any packages" nil nil
			     ("-U")
			     nil nil)
	  #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
			     ("--gc")
			     nil nil)
	  #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
			     ("-j" "--jobs")
			     (num)
			     nil)
	  #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
			     ("-b" "--rebuild")
			     nil nil)
	  #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
			     ("-B")
			     nil nil)
	  #s(doom-cli-option aot? "Natively compile packages ahead-of-time (if available)" nil nil
			     ("--aot")
			     nil nil))
       ((&context context))
       (:benchmark t :prefix
		   (doom)
		   :group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
       (closure
	   (t)
	   (cli alist)
	 (let
	     ((noenvvar?
	       (cdr
		(assq 'noenvvar? alist)))
	      (update?
	       (cdr
		(assq 'update? alist)))
	      (noupdate?
	       (cdr
		(assq 'noupdate? alist)))
	      (purge?
	       (cdr
		(assq 'purge? alist)))
	      (jobs
	       (cdr
		(assq 'jobs alist)))
	      (rebuild?
	       (cdr
		(assq 'rebuild? alist)))
	      (nobuild?
	       (cdr
		(assq 'nobuild? alist)))
	      (aot?
	       (cdr
		(assq 'aot? alist)))
	      (context
	       (cdr
		(assq 'context alist))))
	   (if
	       (doom-profiles-bootloadable-p)
	       (progn
		 (call!
		  '(profiles sync "--reload"))))
	   (if aot?
	       (progn
		 (progn
		   (eval-after-load 'straight
		     #'(lambda nil
			 (setq straight--native-comp-available t))))))
	   (if jobs
	       (progn
		 (setq native-comp-async-jobs-number
		       (truncate jobs))))
	   (run-hooks 'doom-before-sync-hook)
	   (add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'item "Using Emacs %s @ %s")
	     emacs-version
	     (doom-print--class 'path invocation-directory invocation-name)))
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'start "Synchronizing %S profile...")
	     (or
	      (car doom-profile)
	      "default")))
	   (unwind-protect
	       (progn
		 (let
		     ((doom-print-level
		       (or nil doom-print-level))
		      (doom-print-indent
		       (+
			(if t
			    (or nil doom-print-indent-increment)
			  0)
			doom-print-indent)))
		   (let
		       ((x0
			 (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			(to-rebuild nil))
		     (progn
		       (ignore
			(consp x0))
		       (let*
			   ((x54
			     (car-safe x0))
			    (x55
			     (cdr-safe x0)))
			 (let
			     ((old-version x54)
			      (hash x55))
			   (progn
			     (if
				 (and old-version
				      (not
				       (equal old-version emacs-version)))
				 (progn
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
				     old-version emacs-version))
				   (setq to-rebuild t)))
			     (if
				 (and
				  (stringp hash)
				  (not
				   (equal hash
					  (doom-sync--system-hash))))
				 (progn
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'warn "Your system has changed since last sync")))
				   (setq to-rebuild t)))
			     (if
				 (and to-rebuild
				      (not rebuild?)
				      (not
				       (progn
					 (or
					  (progn
					    (and
					     (memq
					      (type-of context)
					      cl-struct-doom-cli-context-tags)
					     t))
					  (signal 'wrong-type-argument
						  (list 'doom-cli-context context)))
					 (aref context 6))))
				 (progn
				   (cond
				    (nobuild?
				     (doom-print
				      (doom-print--format
				       (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
				    ((doom-cli-context-get context 'upgrading)
				     (doom-print
				      (doom-print--format
				       (doom-print--class 'warn "Packages will be rebuilt")))
				     (setq rebuild? t))
				    ((y-or-n-p
				      (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
				     (setq rebuild? t))
				    ((exit! 0))))))))))
		   (if
		       (and
			(not noenvvar?)
			(file-exists-p doom-env-file))
		       (progn
			 (call!
			  '(env))))
		   (doom-packages-ensure rebuild?)
		   (if noupdate? nil
		     (doom-packages-update
		      (not update?)))
		   (doom-packages-purge purge? purge? purge? purge? purge?)
		   (if
		       (doom-profile-generate)
		       (progn
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			 (run-hooks 'doom-after-sync-hook)))
		   (if
		       (or rebuild?
			   (not
			    (file-exists-p doom-cli-sync-info-file)))
		       (progn
			 (let
			     ((temp-file doom-cli-sync-info-file)
			      (temp-buffer
			       (generate-new-buffer " *temp file*" t)))
			   (unwind-protect
			       (prog1
				   (save-current-buffer
				     (set-buffer temp-buffer)
				     (prin1
				      (cons emacs-version
					    (doom-sync--system-hash))
				      (current-buffer)))
				 (save-current-buffer
				   (set-buffer temp-buffer)
				   (write-region nil nil temp-file nil 0)))
			     (and
			      (buffer-name temp-buffer)
			      (kill-buffer temp-buffer))))))
		   t))
	     (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)))))
      (context . #s(doom-cli-context
		    (26387 63354 473960 173000)
		    8602 0
		    (90 . 8)
		    nil nil "doom" nil nil
		    ("doom" "profiles" "sync")
		    nil
		    ("sync")
		    (("--reload" . "--reload")
		     ("--aot")
		     ("-B")
		     ("--rebuild")
		     ("-b")
		     ("--jobs")
		     ("-j")
		     ("--gc")
		     ("-U")
		     ("-u")
		     ("-e")
		     ("--eval")
		     ("-E")
		     ("--strict-load")
		     ("--load")
		     ("-L")
		     ("--color")
		     ("--benchmark")
		     ("--profile")
		     ("--pager")
		     ("--emacsdir")
		     ("--doomdir")
		     ("--verbose")
		     ("-v")
		     ("--debug")
		     ("-D")
		     ("--force")
		     ("-!"))
		    ((t)
		     (("doom" "profiles" "sync")
		      "--reload")
		     (("doom" "profiles")
		      "sync" "--reload")
		     (("doom")
		      "profiles" "sync" "--reload"))
		    #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
      (aot?)
      (nobuild?)
      (rebuild?)
      (jobs)
      (purge?)
      (noupdate?)
      (update?)
      (noenvvar?)))
  (tail
   (#s(doom-cli
       ("doom" "sync")
       nil
       (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add, remove, or modify `package!' blocks to your config,\n  3. Add, remove, or modify autoloaded functions in module autoloaded files,\n  4. Update Doom manually (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. Up or downgrade Emacs itself (e.g. 29.1 -> 29.4).\n\nSync'ing ensures that unneeded packages are removed, needed packages are\ninstalled, autoloads files are up-to-date, and no byte-compiled files have gone\nstale.")
	("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined).\n--aot\n  Will only perform AOT native-compilation for packages updated/installed\n  during the execution of this command. Use --rebuild as well to do so for all\n  packages."))
       nil nil
       (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
			   ("-e")
			   nil nil)
	  #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
			     ("-u")
			     nil nil)
	  #s(doom-cli-option noupdate? "Don't update any packages" nil nil
			     ("-U")
			     nil nil)
	  #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
			     ("--gc")
			     nil nil)
	  #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
			     ("-j" "--jobs")
			     (num)
			     nil)
	  #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
			     ("-b" "--rebuild")
			     nil nil)
	  #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
			     ("-B")
			     nil nil)
	  #s(doom-cli-option aot? "Natively compile packages ahead-of-time (if available)" nil nil
			     ("--aot")
			     nil nil))
       ((&context context))
       (:benchmark t :prefix
		   (doom)
		   :group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
       (closure
	   (t)
	   (cli alist)
	 (let
	     ((noenvvar?
	       (cdr
		(assq 'noenvvar? alist)))
	      (update?
	       (cdr
		(assq 'update? alist)))
	      (noupdate?
	       (cdr
		(assq 'noupdate? alist)))
	      (purge?
	       (cdr
		(assq 'purge? alist)))
	      (jobs
	       (cdr
		(assq 'jobs alist)))
	      (rebuild?
	       (cdr
		(assq 'rebuild? alist)))
	      (nobuild?
	       (cdr
		(assq 'nobuild? alist)))
	      (aot?
	       (cdr
		(assq 'aot? alist)))
	      (context
	       (cdr
		(assq 'context alist))))
	   (if
	       (doom-profiles-bootloadable-p)
	       (progn
		 (call!
		  '(profiles sync "--reload"))))
	   (if aot?
	       (progn
		 (progn
		   (eval-after-load 'straight
		     #'(lambda nil
			 (setq straight--native-comp-available t))))))
	   (if jobs
	       (progn
		 (setq native-comp-async-jobs-number
		       (truncate jobs))))
	   (run-hooks 'doom-before-sync-hook)
	   (add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'item "Using Emacs %s @ %s")
	     emacs-version
	     (doom-print--class 'path invocation-directory invocation-name)))
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'start "Synchronizing %S profile...")
	     (or
	      (car doom-profile)
	      "default")))
	   (unwind-protect
	       (progn
		 (let
		     ((doom-print-level
		       (or nil doom-print-level))
		      (doom-print-indent
		       (+
			(if t
			    (or nil doom-print-indent-increment)
			  0)
			doom-print-indent)))
		   (let
		       ((x0
			 (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			(to-rebuild nil))
		     (progn
		       (ignore
			(consp x0))
		       (let*
			   ((x54
			     (car-safe x0))
			    (x55
			     (cdr-safe x0)))
			 (let
			     ((old-version x54)
			      (hash x55))
			   (progn
			     (if
				 (and old-version
				      (not
				       (equal old-version emacs-version)))
				 (progn
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
				     old-version emacs-version))
				   (setq to-rebuild t)))
			     (if
				 (and
				  (stringp hash)
				  (not
				   (equal hash
					  (doom-sync--system-hash))))
				 (progn
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'warn "Your system has changed since last sync")))
				   (setq to-rebuild t)))
			     (if
				 (and to-rebuild
				      (not rebuild?)
				      (not
				       (progn
					 (or
					  (progn
					    (and
					     (memq
					      (type-of context)
					      cl-struct-doom-cli-context-tags)
					     t))
					  (signal 'wrong-type-argument
						  (list 'doom-cli-context context)))
					 (aref context 6))))
				 (progn
				   (cond
				    (nobuild?
				     (doom-print
				      (doom-print--format
				       (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
				    ((doom-cli-context-get context 'upgrading)
				     (doom-print
				      (doom-print--format
				       (doom-print--class 'warn "Packages will be rebuilt")))
				     (setq rebuild? t))
				    ((y-or-n-p
				      (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
				     (setq rebuild? t))
				    ((exit! 0))))))))))
		   (if
		       (and
			(not noenvvar?)
			(file-exists-p doom-env-file))
		       (progn
			 (call!
			  '(env))))
		   (doom-packages-ensure rebuild?)
		   (if noupdate? nil
		     (doom-packages-update
		      (not update?)))
		   (doom-packages-purge purge? purge? purge? purge? purge?)
		   (if
		       (doom-profile-generate)
		       (progn
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			 (run-hooks 'doom-after-sync-hook)))
		   (if
		       (or rebuild?
			   (not
			    (file-exists-p doom-cli-sync-info-file)))
		       (progn
			 (let
			     ((temp-file doom-cli-sync-info-file)
			      (temp-buffer
			       (generate-new-buffer " *temp file*" t)))
			   (unwind-protect
			       (prog1
				   (save-current-buffer
				     (set-buffer temp-buffer)
				     (prin1
				      (cons emacs-version
					    (doom-sync--system-hash))
				      (current-buffer)))
				 (save-current-buffer
				   (set-buffer temp-buffer)
				   (write-region nil nil temp-file nil 0)))
			     (and
			      (buffer-name temp-buffer)
			      (kill-buffer temp-buffer))))))
		   t))
	     (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)))))
      (context . #s(doom-cli-context
		    (26387 63354 473960 173000)
		    8602 0
		    (90 . 8)
		    nil nil "doom" nil nil
		    ("doom" "profiles" "sync")
		    nil
		    ("sync")
		    (("--reload" . "--reload")
		     ("--aot")
		     ("-B")
		     ("--rebuild")
		     ("-b")
		     ("--jobs")
		     ("-j")
		     ("--gc")
		     ("-U")
		     ("-u")
		     ("-e")
		     ("--eval")
		     ("-E")
		     ("--strict-load")
		     ("--load")
		     ("-L")
		     ("--color")
		     ("--benchmark")
		     ("--profile")
		     ("--pager")
		     ("--emacsdir")
		     ("--doomdir")
		     ("--verbose")
		     ("-v")
		     ("--debug")
		     ("-D")
		     ("--force")
		     ("-!"))
		    ((t)
		     (("doom" "profiles" "sync")
		      "--reload")
		     (("doom" "profiles")
		      "sync" "--reload")
		     (("doom")
		      "profiles" "sync" "--reload"))
		    #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
      (aot?)
      (nobuild?)
      (rebuild?)
      (jobs)
      (purge?)
      (noupdate?)
      (update?)
      (noenvvar?)))
  (x15 #s(doom-cli
	  ("doom" "sync")
	  nil
	  (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	   ("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add, remove, or modify `package!' blocks to your config,\n  3. Add, remove, or modify autoloaded functions in module autoloaded files,\n  4. Update Doom manually (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. Up or downgrade Emacs itself (e.g. 29.1 -> 29.4).\n\nSync'ing ensures that unneeded packages are removed, needed packages are\ninstalled, autoloads files are up-to-date, and no byte-compiled files have gone\nstale.")
	   ("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined).\n--aot\n  Will only perform AOT native-compilation for packages updated/installed\n  during the execution of this command. Use --rebuild as well to do so for all\n  packages."))
	  nil nil
	  (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
			      ("-e")
			      nil nil)
	     #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
				("-u")
				nil nil)
	     #s(doom-cli-option noupdate? "Don't update any packages" nil nil
				("-U")
				nil nil)
	     #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
				("--gc")
				nil nil)
	     #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
				("-j" "--jobs")
				(num)
				nil)
	     #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
				("-b" "--rebuild")
				nil nil)
	     #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
				("-B")
				nil nil)
	     #s(doom-cli-option aot? "Natively compile packages ahead-of-time (if available)" nil nil
				("--aot")
				nil nil))
	  ((&context context))
	  (:benchmark t :prefix
		      (doom)
		      :group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
	  (closure
	      (t)
	      (cli alist)
	    (let
		((noenvvar?
		  (cdr
		   (assq 'noenvvar? alist)))
		 (update?
		  (cdr
		   (assq 'update? alist)))
		 (noupdate?
		  (cdr
		   (assq 'noupdate? alist)))
		 (purge?
		  (cdr
		   (assq 'purge? alist)))
		 (jobs
		  (cdr
		   (assq 'jobs alist)))
		 (rebuild?
		  (cdr
		   (assq 'rebuild? alist)))
		 (nobuild?
		  (cdr
		   (assq 'nobuild? alist)))
		 (aot?
		  (cdr
		   (assq 'aot? alist)))
		 (context
		  (cdr
		   (assq 'context alist))))
	      (if
		  (doom-profiles-bootloadable-p)
		  (progn
		    (call!
		     '(profiles sync "--reload"))))
	      (if aot?
		  (progn
		    (progn
		      (eval-after-load 'straight
			#'(lambda nil
			    (setq straight--native-comp-available t))))))
	      (if jobs
		  (progn
		    (setq native-comp-async-jobs-number
			  (truncate jobs))))
	      (run-hooks 'doom-before-sync-hook)
	      (add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
	      (doom-print
	       (doom-print--format
		(doom-print--class 'item "Using Emacs %s @ %s")
		emacs-version
		(doom-print--class 'path invocation-directory invocation-name)))
	      (doom-print
	       (doom-print--format
		(doom-print--class 'start "Synchronizing %S profile...")
		(or
		 (car doom-profile)
		 "default")))
	      (unwind-protect
		  (progn
		    (let
			((doom-print-level
			  (or nil doom-print-level))
			 (doom-print-indent
			  (+
			   (if t
			       (or nil doom-print-indent-increment)
			     0)
			   doom-print-indent)))
		      (let
			  ((x0
			    (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			   (to-rebuild nil))
			(progn
			  (ignore
			   (consp x0))
			  (let*
			      ((x54
				(car-safe x0))
			       (x55
				(cdr-safe x0)))
			    (let
				((old-version x54)
				 (hash x55))
			      (progn
				(if
				    (and old-version
					 (not
					  (equal old-version emacs-version)))
				    (progn
				      (doom-print
				       (doom-print--format
					(doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
					old-version emacs-version))
				      (setq to-rebuild t)))
				(if
				    (and
				     (stringp hash)
				     (not
				      (equal hash
					     (doom-sync--system-hash))))
				    (progn
				      (doom-print
				       (doom-print--format
					(doom-print--class 'warn "Your system has changed since last sync")))
				      (setq to-rebuild t)))
				(if
				    (and to-rebuild
					 (not rebuild?)
					 (not
					  (progn
					    (or
					     (progn
					       (and
						(memq
						 (type-of context)
						 cl-struct-doom-cli-context-tags)
						t))
					     (signal 'wrong-type-argument
						     (list 'doom-cli-context context)))
					    (aref context 6))))
				    (progn
				      (cond
				       (nobuild?
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
				       ((doom-cli-context-get context 'upgrading)
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Packages will be rebuilt")))
					(setq rebuild? t))
				       ((y-or-n-p
					 (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
					(setq rebuild? t))
				       ((exit! 0))))))))))
		      (if
			  (and
			   (not noenvvar?)
			   (file-exists-p doom-env-file))
			  (progn
			    (call!
			     '(env))))
		      (doom-packages-ensure rebuild?)
		      (if noupdate? nil
			(doom-packages-update
			 (not update?)))
		      (doom-packages-purge purge? purge? purge? purge? purge?)
		      (if
			  (doom-profile-generate)
			  (progn
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			    (run-hooks 'doom-after-sync-hook)))
		      (if
			  (or rebuild?
			      (not
			       (file-exists-p doom-cli-sync-info-file)))
			  (progn
			    (let
				((temp-file doom-cli-sync-info-file)
				 (temp-buffer
				  (generate-new-buffer " *temp file*" t)))
			      (unwind-protect
				  (prog1
				      (save-current-buffer
					(set-buffer temp-buffer)
					(prin1
					 (cons emacs-version
					       (doom-sync--system-hash))
					 (current-buffer)))
				    (save-current-buffer
				      (set-buffer temp-buffer)
				      (write-region nil nil temp-file nil 0)))
				(and
				 (buffer-name temp-buffer)
				 (kill-buffer temp-buffer))))))
		      t))
		(remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)))))
       (context . #s(doom-cli-context
		     (26387 63354 473960 173000)
		     8602 0
		     (90 . 8)
		     nil nil "doom" nil nil
		     ("doom" "profiles" "sync")
		     nil
		     ("sync")
		     (("--reload" . "--reload")
		      ("--aot")
		      ("-B")
		      ("--rebuild")
		      ("-b")
		      ("--jobs")
		      ("-j")
		      ("--gc")
		      ("-U")
		      ("-u")
		      ("-e")
		      ("--eval")
		      ("-E")
		      ("--strict-load")
		      ("--load")
		      ("-L")
		      ("--color")
		      ("--benchmark")
		      ("--profile")
		      ("--pager")
		      ("--emacsdir")
		      ("--doomdir")
		      ("--verbose")
		      ("-v")
		      ("--debug")
		      ("-D")
		      ("--force")
		      ("-!"))
		     ((t)
		      (("doom" "profiles" "sync")
		       "--reload")
		      (("doom" "profiles")
		       "sync" "--reload")
		      (("doom")
		       "profiles" "sync" "--reload"))
		     #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
       (aot?)
       (nobuild?)
       (rebuild?)
       (jobs)
       (purge?)
       (noupdate?)
       (update?)
       (noenvvar?))
  (x16 . #s(doom-cli
	    ("doom" "sync")
	    nil
	    (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	     ("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add, remove, or modify `package!' blocks to your config,\n  3. Add, remove, or modify autoloaded functions in module autoloaded files,\n  4. Update Doom manually (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. Up or downgrade Emacs itself (e.g. 29.1 -> 29.4).\n\nSync'ing ensures that unneeded packages are removed, needed packages are\ninstalled, autoloads files are up-to-date, and no byte-compiled files have gone\nstale.")
	     ("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined).\n--aot\n  Will only perform AOT native-compilation for packages updated/installed\n  during the execution of this command. Use --rebuild as well to do so for all\n  packages."))
	    nil nil
	    (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
				("-e")
				nil nil)
	       #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
				  ("-u")
				  nil nil)
	       #s(doom-cli-option noupdate? "Don't update any packages" nil nil
				  ("-U")
				  nil nil)
	       #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
				  ("--gc")
				  nil nil)
	       #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
				  ("-j" "--jobs")
				  (num)
				  nil)
	       #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
				  ("-b" "--rebuild")
				  nil nil)
	       #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
				  ("-B")
				  nil nil)
	       #s(doom-cli-option aot? "Natively compile packages ahead-of-time (if available)" nil nil
				  ("--aot")
				  nil nil))
	    ((&context context))
	    (:benchmark t :prefix
			(doom)
			:group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
	    (closure
		(t)
		(cli alist)
	      (let
		  ((noenvvar?
		    (cdr
		     (assq 'noenvvar? alist)))
		   (update?
		    (cdr
		     (assq 'update? alist)))
		   (noupdate?
		    (cdr
		     (assq 'noupdate? alist)))
		   (purge?
		    (cdr
		     (assq 'purge? alist)))
		   (jobs
		    (cdr
		     (assq 'jobs alist)))
		   (rebuild?
		    (cdr
		     (assq 'rebuild? alist)))
		   (nobuild?
		    (cdr
		     (assq 'nobuild? alist)))
		   (aot?
		    (cdr
		     (assq 'aot? alist)))
		   (context
		    (cdr
		     (assq 'context alist))))
		(if
		    (doom-profiles-bootloadable-p)
		    (progn
		      (call!
		       '(profiles sync "--reload"))))
		(if aot?
		    (progn
		      (progn
			(eval-after-load 'straight
			  #'(lambda nil
			      (setq straight--native-comp-available t))))))
		(if jobs
		    (progn
		      (setq native-comp-async-jobs-number
			    (truncate jobs))))
		(run-hooks 'doom-before-sync-hook)
		(add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
		(doom-print
		 (doom-print--format
		  (doom-print--class 'item "Using Emacs %s @ %s")
		  emacs-version
		  (doom-print--class 'path invocation-directory invocation-name)))
		(doom-print
		 (doom-print--format
		  (doom-print--class 'start "Synchronizing %S profile...")
		  (or
		   (car doom-profile)
		   "default")))
		(unwind-protect
		    (progn
		      (let
			  ((doom-print-level
			    (or nil doom-print-level))
			   (doom-print-indent
			    (+
			     (if t
				 (or nil doom-print-indent-increment)
			       0)
			     doom-print-indent)))
			(let
			    ((x0
			      (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			     (to-rebuild nil))
			  (progn
			    (ignore
			     (consp x0))
			    (let*
				((x54
				  (car-safe x0))
				 (x55
				  (cdr-safe x0)))
			      (let
				  ((old-version x54)
				   (hash x55))
				(progn
				  (if
				      (and old-version
					   (not
					    (equal old-version emacs-version)))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
					  old-version emacs-version))
					(setq to-rebuild t)))
				  (if
				      (and
				       (stringp hash)
				       (not
					(equal hash
					       (doom-sync--system-hash))))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Your system has changed since last sync")))
					(setq to-rebuild t)))
				  (if
				      (and to-rebuild
					   (not rebuild?)
					   (not
					    (progn
					      (or
					       (progn
						 (and
						  (memq
						   (type-of context)
						   cl-struct-doom-cli-context-tags)
						  t))
					       (signal 'wrong-type-argument
						       (list 'doom-cli-context context)))
					      (aref context 6))))
				      (progn
					(cond
					 (nobuild?
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
					 ((doom-cli-context-get context 'upgrading)
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages will be rebuilt")))
					  (setq rebuild? t))
					 ((y-or-n-p
					   (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
					  (setq rebuild? t))
					 ((exit! 0))))))))))
			(if
			    (and
			     (not noenvvar?)
			     (file-exists-p doom-env-file))
			    (progn
			      (call!
			       '(env))))
			(doom-packages-ensure rebuild?)
			(if noupdate? nil
			  (doom-packages-update
			   (not update?)))
			(doom-packages-purge purge? purge? purge? purge? purge?)
			(if
			    (doom-profile-generate)
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			      (run-hooks 'doom-after-sync-hook)))
			(if
			    (or rebuild?
				(not
				 (file-exists-p doom-cli-sync-info-file)))
			    (progn
			      (let
				  ((temp-file doom-cli-sync-info-file)
				   (temp-buffer
				    (generate-new-buffer " *temp file*" t)))
				(unwind-protect
				    (prog1
					(save-current-buffer
					  (set-buffer temp-buffer)
					  (prin1
					   (cons emacs-version
						 (doom-sync--system-hash))
					   (current-buffer)))
				      (save-current-buffer
					(set-buffer temp-buffer)
					(write-region nil nil temp-file nil 0)))
				  (and
				   (buffer-name temp-buffer)
				   (kill-buffer temp-buffer))))))
			t))
		  (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h))))))
  (x17
   (context . #s(doom-cli-context
		 (26387 63354 473960 173000)
		 8602 0
		 (90 . 8)
		 nil nil "doom" nil nil
		 ("doom" "profiles" "sync")
		 nil
		 ("sync")
		 (("--reload" . "--reload")
		  ("--aot")
		  ("-B")
		  ("--rebuild")
		  ("-b")
		  ("--jobs")
		  ("-j")
		  ("--gc")
		  ("-U")
		  ("-u")
		  ("-e")
		  ("--eval")
		  ("-E")
		  ("--strict-load")
		  ("--load")
		  ("-L")
		  ("--color")
		  ("--benchmark")
		  ("--profile")
		  ("--pager")
		  ("--emacsdir")
		  ("--doomdir")
		  ("--verbose")
		  ("-v")
		  ("--debug")
		  ("-D")
		  ("--force")
		  ("-!"))
		 ((t)
		  (("doom" "profiles" "sync")
		   "--reload")
		  (("doom" "profiles")
		   "sync" "--reload")
		  (("doom")
		   "profiles" "sync" "--reload"))
		 #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
   (aot?)
   (nobuild?)
   (rebuild?)
   (jobs)
   (purge?)
   (noupdate?)
   (update?)
   (noenvvar?))
  (cli . #s(doom-cli
	    ("doom" "sync")
	    nil
	    (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	     ("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add, remove, or modify `package!' blocks to your config,\n  3. Add, remove, or modify autoloaded functions in module autoloaded files,\n  4. Update Doom manually (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. Up or downgrade Emacs itself (e.g. 29.1 -> 29.4).\n\nSync'ing ensures that unneeded packages are removed, needed packages are\ninstalled, autoloads files are up-to-date, and no byte-compiled files have gone\nstale.")
	     ("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined).\n--aot\n  Will only perform AOT native-compilation for packages updated/installed\n  during the execution of this command. Use --rebuild as well to do so for all\n  packages."))
	    nil nil
	    (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
				("-e")
				nil nil)
	       #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
				  ("-u")
				  nil nil)
	       #s(doom-cli-option noupdate? "Don't update any packages" nil nil
				  ("-U")
				  nil nil)
	       #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
				  ("--gc")
				  nil nil)
	       #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
				  ("-j" "--jobs")
				  (num)
				  nil)
	       #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
				  ("-b" "--rebuild")
				  nil nil)
	       #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
				  ("-B")
				  nil nil)
	       #s(doom-cli-option aot? "Natively compile packages ahead-of-time (if available)" nil nil
				  ("--aot")
				  nil nil))
	    ((&context context))
	    (:benchmark t :prefix
			(doom)
			:group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
	    (closure
		(t)
		(cli alist)
	      (let
		  ((noenvvar?
		    (cdr
		     (assq 'noenvvar? alist)))
		   (update?
		    (cdr
		     (assq 'update? alist)))
		   (noupdate?
		    (cdr
		     (assq 'noupdate? alist)))
		   (purge?
		    (cdr
		     (assq 'purge? alist)))
		   (jobs
		    (cdr
		     (assq 'jobs alist)))
		   (rebuild?
		    (cdr
		     (assq 'rebuild? alist)))
		   (nobuild?
		    (cdr
		     (assq 'nobuild? alist)))
		   (aot?
		    (cdr
		     (assq 'aot? alist)))
		   (context
		    (cdr
		     (assq 'context alist))))
		(if
		    (doom-profiles-bootloadable-p)
		    (progn
		      (call!
		       '(profiles sync "--reload"))))
		(if aot?
		    (progn
		      (progn
			(eval-after-load 'straight
			  #'(lambda nil
			      (setq straight--native-comp-available t))))))
		(if jobs
		    (progn
		      (setq native-comp-async-jobs-number
			    (truncate jobs))))
		(run-hooks 'doom-before-sync-hook)
		(add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
		(doom-print
		 (doom-print--format
		  (doom-print--class 'item "Using Emacs %s @ %s")
		  emacs-version
		  (doom-print--class 'path invocation-directory invocation-name)))
		(doom-print
		 (doom-print--format
		  (doom-print--class 'start "Synchronizing %S profile...")
		  (or
		   (car doom-profile)
		   "default")))
		(unwind-protect
		    (progn
		      (let
			  ((doom-print-level
			    (or nil doom-print-level))
			   (doom-print-indent
			    (+
			     (if t
				 (or nil doom-print-indent-increment)
			       0)
			     doom-print-indent)))
			(let
			    ((x0
			      (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			     (to-rebuild nil))
			  (progn
			    (ignore
			     (consp x0))
			    (let*
				((x54
				  (car-safe x0))
				 (x55
				  (cdr-safe x0)))
			      (let
				  ((old-version x54)
				   (hash x55))
				(progn
				  (if
				      (and old-version
					   (not
					    (equal old-version emacs-version)))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
					  old-version emacs-version))
					(setq to-rebuild t)))
				  (if
				      (and
				       (stringp hash)
				       (not
					(equal hash
					       (doom-sync--system-hash))))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Your system has changed since last sync")))
					(setq to-rebuild t)))
				  (if
				      (and to-rebuild
					   (not rebuild?)
					   (not
					    (progn
					      (or
					       (progn
						 (and
						  (memq
						   (type-of context)
						   cl-struct-doom-cli-context-tags)
						  t))
					       (signal 'wrong-type-argument
						       (list 'doom-cli-context context)))
					      (aref context 6))))
				      (progn
					(cond
					 (nobuild?
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
					 ((doom-cli-context-get context 'upgrading)
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages will be rebuilt")))
					  (setq rebuild? t))
					 ((y-or-n-p
					   (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
					  (setq rebuild? t))
					 ((exit! 0))))))))))
			(if
			    (and
			     (not noenvvar?)
			     (file-exists-p doom-env-file))
			    (progn
			      (call!
			       '(env))))
			(doom-packages-ensure rebuild?)
			(if noupdate? nil
			  (doom-packages-update
			   (not update?)))
			(doom-packages-purge purge? purge? purge? purge? purge?)
			(if
			    (doom-profile-generate)
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			      (run-hooks 'doom-after-sync-hook)))
			(if
			    (or rebuild?
				(not
				 (file-exists-p doom-cli-sync-info-file)))
			    (progn
			      (let
				  ((temp-file doom-cli-sync-info-file)
				   (temp-buffer
				    (generate-new-buffer " *temp file*" t)))
				(unwind-protect
				    (prog1
					(save-current-buffer
					  (set-buffer temp-buffer)
					  (prin1
					   (cons emacs-version
						 (doom-sync--system-hash))
					   (current-buffer)))
				      (save-current-buffer
					(set-buffer temp-buffer)
					(write-region nil nil temp-file nil 0)))
				  (and
				   (buffer-name temp-buffer)
				   (kill-buffer temp-buffer))))))
			t))
		  (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h))))))
  (bindings
   (context . #s(doom-cli-context
		 (26387 63354 473960 173000)
		 8602 0
		 (90 . 8)
		 nil nil "doom" nil nil
		 ("doom" "profiles" "sync")
		 nil
		 ("sync")
		 (("--reload" . "--reload")
		  ("--aot")
		  ("-B")
		  ("--rebuild")
		  ("-b")
		  ("--jobs")
		  ("-j")
		  ("--gc")
		  ("-U")
		  ("-u")
		  ("-e")
		  ("--eval")
		  ("-E")
		  ("--strict-load")
		  ("--load")
		  ("-L")
		  ("--color")
		  ("--benchmark")
		  ("--profile")
		  ("--pager")
		  ("--emacsdir")
		  ("--doomdir")
		  ("--verbose")
		  ("-v")
		  ("--debug")
		  ("-D")
		  ("--force")
		  ("-!"))
		 ((t)
		  (("doom" "profiles" "sync")
		   "--reload")
		  (("doom" "profiles")
		   "sync" "--reload")
		  (("doom")
		   "profiles" "sync" "--reload"))
		 #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
   (aot?)
   (nobuild?)
   (rebuild?)
   (jobs)
   (purge?)
   (noupdate?)
   (update?)
   (noenvvar?))))

;;;; 29
((let*
     ((x16
       (car-safe x15))
      (x17
       (cdr-safe x15)))
   (let
       ((cli x16)
	(bindings x17))
     (doom-cli-execute cli bindings)))
 ((context . #s(doom-cli-context
		(26387 63354 473960 173000)
		8602 0
		(90 . 8)
		nil nil "doom" nil nil
		("doom" "profiles" "sync")
		nil
		("sync")
		(("--reload" . "--reload")
		 ("--aot")
		 ("-B")
		 ("--rebuild")
		 ("-b")
		 ("--jobs")
		 ("-j")
		 ("--gc")
		 ("-U")
		 ("-u")
		 ("-e")
		 ("--eval")
		 ("-E")
		 ("--strict-load")
		 ("--load")
		 ("-L")
		 ("--color")
		 ("--benchmark")
		 ("--profile")
		 ("--pager")
		 ("--emacsdir")
		 ("--doomdir")
		 ("--verbose")
		 ("-v")
		 ("--debug")
		 ("-D")
		 ("--force")
		 ("-!"))
		((t)
		 (("doom" "profiles" "sync")
		  "--reload")
		 (("doom" "profiles")
		  "sync" "--reload")
		 (("doom")
		  "profiles" "sync" "--reload"))
		#<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (command "doom" "sync")
  (cli . #s(doom-cli
	    ("doom" "sync")
	    nil
	    (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	     ("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add, remove, or modify `package!' blocks to your config,\n  3. Add, remove, or modify autoloaded functions in module autoloaded files,\n  4. Update Doom manually (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. Up or downgrade Emacs itself (e.g. 29.1 -> 29.4).\n\nSync'ing ensures that unneeded packages are removed, needed packages are\ninstalled, autoloads files are up-to-date, and no byte-compiled files have gone\nstale.")
	     ("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined).\n--aot\n  Will only perform AOT native-compilation for packages updated/installed\n  during the execution of this command. Use --rebuild as well to do so for all\n  packages."))
	    nil nil
	    (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
				("-e")
				nil nil)
	       #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
				  ("-u")
				  nil nil)
	       #s(doom-cli-option noupdate? "Don't update any packages" nil nil
				  ("-U")
				  nil nil)
	       #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
				  ("--gc")
				  nil nil)
	       #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
				  ("-j" "--jobs")
				  (num)
				  nil)
	       #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
				  ("-b" "--rebuild")
				  nil nil)
	       #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
				  ("-B")
				  nil nil)
	       #s(doom-cli-option aot? "Natively compile packages ahead-of-time (if available)" nil nil
				  ("--aot")
				  nil nil))
	    ((&context context))
	    (:benchmark t :prefix
			(doom)
			:group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
	    (closure
		(t)
		(cli alist)
	      (let
		  ((noenvvar?
		    (cdr
		     (assq 'noenvvar? alist)))
		   (update?
		    (cdr
		     (assq 'update? alist)))
		   (noupdate?
		    (cdr
		     (assq 'noupdate? alist)))
		   (purge?
		    (cdr
		     (assq 'purge? alist)))
		   (jobs
		    (cdr
		     (assq 'jobs alist)))
		   (rebuild?
		    (cdr
		     (assq 'rebuild? alist)))
		   (nobuild?
		    (cdr
		     (assq 'nobuild? alist)))
		   (aot?
		    (cdr
		     (assq 'aot? alist)))
		   (context
		    (cdr
		     (assq 'context alist))))
		(if
		    (doom-profiles-bootloadable-p)
		    (progn
		      (call!
		       '(profiles sync "--reload"))))
		(if aot?
		    (progn
		      (progn
			(eval-after-load 'straight
			  #'(lambda nil
			      (setq straight--native-comp-available t))))))
		(if jobs
		    (progn
		      (setq native-comp-async-jobs-number
			    (truncate jobs))))
		(run-hooks 'doom-before-sync-hook)
		(add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
		(doom-print
		 (doom-print--format
		  (doom-print--class 'item "Using Emacs %s @ %s")
		  emacs-version
		  (doom-print--class 'path invocation-directory invocation-name)))
		(doom-print
		 (doom-print--format
		  (doom-print--class 'start "Synchronizing %S profile...")
		  (or
		   (car doom-profile)
		   "default")))
		(unwind-protect
		    (progn
		      (let
			  ((doom-print-level
			    (or nil doom-print-level))
			   (doom-print-indent
			    (+
			     (if t
				 (or nil doom-print-indent-increment)
			       0)
			     doom-print-indent)))
			(let
			    ((x0
			      (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			     (to-rebuild nil))
			  (progn
			    (ignore
			     (consp x0))
			    (let*
				((x54
				  (car-safe x0))
				 (x55
				  (cdr-safe x0)))
			      (let
				  ((old-version x54)
				   (hash x55))
				(progn
				  (if
				      (and old-version
					   (not
					    (equal old-version emacs-version)))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
					  old-version emacs-version))
					(setq to-rebuild t)))
				  (if
				      (and
				       (stringp hash)
				       (not
					(equal hash
					       (doom-sync--system-hash))))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Your system has changed since last sync")))
					(setq to-rebuild t)))
				  (if
				      (and to-rebuild
					   (not rebuild?)
					   (not
					    (progn
					      (or
					       (progn
						 (and
						  (memq
						   (type-of context)
						   cl-struct-doom-cli-context-tags)
						  t))
					       (signal 'wrong-type-argument
						       (list 'doom-cli-context context)))
					      (aref context 6))))
				      (progn
					(cond
					 (nobuild?
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
					 ((doom-cli-context-get context 'upgrading)
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages will be rebuilt")))
					  (setq rebuild? t))
					 ((y-or-n-p
					   (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
					  (setq rebuild? t))
					 ((exit! 0))))))))))
			(if
			    (and
			     (not noenvvar?)
			     (file-exists-p doom-env-file))
			    (progn
			      (call!
			       '(env))))
			(doom-packages-ensure rebuild?)
			(if noupdate? nil
			  (doom-packages-update
			   (not update?)))
			(doom-packages-purge purge? purge? purge? purge? purge?)
			(if
			    (doom-profile-generate)
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			      (run-hooks 'doom-after-sync-hook)))
			(if
			    (or rebuild?
				(not
				 (file-exists-p doom-cli-sync-info-file)))
			    (progn
			      (let
				  ((temp-file doom-cli-sync-info-file)
				   (temp-buffer
				    (generate-new-buffer " *temp file*" t)))
				(unwind-protect
				    (prog1
					(save-current-buffer
					  (set-buffer temp-buffer)
					  (prin1
					   (cons emacs-version
						 (doom-sync--system-hash))
					   (current-buffer)))
				      (save-current-buffer
					(set-buffer temp-buffer)
					(write-region nil nil temp-file nil 0)))
				  (and
				   (buffer-name temp-buffer)
				   (kill-buffer temp-buffer))))))
			t))
		  (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h))))))
  (prefix . "doom")
  (seen t)
  (runners
   (#s(doom-cli
       ("doom" "sync")
       nil
       (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add, remove, or modify `package!' blocks to your config,\n  3. Add, remove, or modify autoloaded functions in module autoloaded files,\n  4. Update Doom manually (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. Up or downgrade Emacs itself (e.g. 29.1 -> 29.4).\n\nSync'ing ensures that unneeded packages are removed, needed packages are\ninstalled, autoloads files are up-to-date, and no byte-compiled files have gone\nstale.")
	("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined).\n--aot\n  Will only perform AOT native-compilation for packages updated/installed\n  during the execution of this command. Use --rebuild as well to do so for all\n  packages."))
       nil nil
       (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
			   ("-e")
			   nil nil)
	  #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
			     ("-u")
			     nil nil)
	  #s(doom-cli-option noupdate? "Don't update any packages" nil nil
			     ("-U")
			     nil nil)
	  #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
			     ("--gc")
			     nil nil)
	  #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
			     ("-j" "--jobs")
			     (num)
			     nil)
	  #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
			     ("-b" "--rebuild")
			     nil nil)
	  #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
			     ("-B")
			     nil nil)
	  #s(doom-cli-option aot? "Natively compile packages ahead-of-time (if available)" nil nil
			     ("--aot")
			     nil nil))
       ((&context context))
       (:benchmark t :prefix
		   (doom)
		   :group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
       (closure
	   (t)
	   (cli alist)
	 (let
	     ((noenvvar?
	       (cdr
		(assq 'noenvvar? alist)))
	      (update?
	       (cdr
		(assq 'update? alist)))
	      (noupdate?
	       (cdr
		(assq 'noupdate? alist)))
	      (purge?
	       (cdr
		(assq 'purge? alist)))
	      (jobs
	       (cdr
		(assq 'jobs alist)))
	      (rebuild?
	       (cdr
		(assq 'rebuild? alist)))
	      (nobuild?
	       (cdr
		(assq 'nobuild? alist)))
	      (aot?
	       (cdr
		(assq 'aot? alist)))
	      (context
	       (cdr
		(assq 'context alist))))
	   (if
	       (doom-profiles-bootloadable-p)
	       (progn
		 (call!
		  '(profiles sync "--reload"))))
	   (if aot?
	       (progn
		 (progn
		   (eval-after-load 'straight
		     #'(lambda nil
			 (setq straight--native-comp-available t))))))
	   (if jobs
	       (progn
		 (setq native-comp-async-jobs-number
		       (truncate jobs))))
	   (run-hooks 'doom-before-sync-hook)
	   (add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'item "Using Emacs %s @ %s")
	     emacs-version
	     (doom-print--class 'path invocation-directory invocation-name)))
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'start "Synchronizing %S profile...")
	     (or
	      (car doom-profile)
	      "default")))
	   (unwind-protect
	       (progn
		 (let
		     ((doom-print-level
		       (or nil doom-print-level))
		      (doom-print-indent
		       (+
			(if t
			    (or nil doom-print-indent-increment)
			  0)
			doom-print-indent)))
		   (let
		       ((x0
			 (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			(to-rebuild nil))
		     (progn
		       (ignore
			(consp x0))
		       (let*
			   ((x54
			     (car-safe x0))
			    (x55
			     (cdr-safe x0)))
			 (let
			     ((old-version x54)
			      (hash x55))
			   (progn
			     (if
				 (and old-version
				      (not
				       (equal old-version emacs-version)))
				 (progn
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
				     old-version emacs-version))
				   (setq to-rebuild t)))
			     (if
				 (and
				  (stringp hash)
				  (not
				   (equal hash
					  (doom-sync--system-hash))))
				 (progn
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'warn "Your system has changed since last sync")))
				   (setq to-rebuild t)))
			     (if
				 (and to-rebuild
				      (not rebuild?)
				      (not
				       (progn
					 (or
					  (progn
					    (and
					     (memq
					      (type-of context)
					      cl-struct-doom-cli-context-tags)
					     t))
					  (signal 'wrong-type-argument
						  (list 'doom-cli-context context)))
					 (aref context 6))))
				 (progn
				   (cond
				    (nobuild?
				     (doom-print
				      (doom-print--format
				       (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
				    ((doom-cli-context-get context 'upgrading)
				     (doom-print
				      (doom-print--format
				       (doom-print--class 'warn "Packages will be rebuilt")))
				     (setq rebuild? t))
				    ((y-or-n-p
				      (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
				     (setq rebuild? t))
				    ((exit! 0))))))))))
		   (if
		       (and
			(not noenvvar?)
			(file-exists-p doom-env-file))
		       (progn
			 (call!
			  '(env))))
		   (doom-packages-ensure rebuild?)
		   (if noupdate? nil
		     (doom-packages-update
		      (not update?)))
		   (doom-packages-purge purge? purge? purge? purge? purge?)
		   (if
		       (doom-profile-generate)
		       (progn
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			 (run-hooks 'doom-after-sync-hook)))
		   (if
		       (or rebuild?
			   (not
			    (file-exists-p doom-cli-sync-info-file)))
		       (progn
			 (let
			     ((temp-file doom-cli-sync-info-file)
			      (temp-buffer
			       (generate-new-buffer " *temp file*" t)))
			   (unwind-protect
			       (prog1
				   (save-current-buffer
				     (set-buffer temp-buffer)
				     (prin1
				      (cons emacs-version
					    (doom-sync--system-hash))
				      (current-buffer)))
				 (save-current-buffer
				   (set-buffer temp-buffer)
				   (write-region nil nil temp-file nil 0)))
			     (and
			      (buffer-name temp-buffer)
			      (kill-buffer temp-buffer))))))
		   t))
	     (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)))))
      (context . #s(doom-cli-context
		    (26387 63354 473960 173000)
		    8602 0
		    (90 . 8)
		    nil nil "doom" nil nil
		    ("doom" "profiles" "sync")
		    nil
		    ("sync")
		    (("--reload" . "--reload")
		     ("--aot")
		     ("-B")
		     ("--rebuild")
		     ("-b")
		     ("--jobs")
		     ("-j")
		     ("--gc")
		     ("-U")
		     ("-u")
		     ("-e")
		     ("--eval")
		     ("-E")
		     ("--strict-load")
		     ("--load")
		     ("-L")
		     ("--color")
		     ("--benchmark")
		     ("--profile")
		     ("--pager")
		     ("--emacsdir")
		     ("--doomdir")
		     ("--verbose")
		     ("-v")
		     ("--debug")
		     ("-D")
		     ("--force")
		     ("-!"))
		    ((t)
		     (("doom" "profiles" "sync")
		      "--reload")
		     (("doom" "profiles")
		      "sync" "--reload")
		     (("doom")
		      "profiles" "sync" "--reload"))
		    #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
      (aot?)
      (nobuild?)
      (rebuild?)
      (jobs)
      (purge?)
      (noupdate?)
      (update?)
      (noenvvar?)))
  (tail
   (#s(doom-cli
       ("doom" "sync")
       nil
       (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add, remove, or modify `package!' blocks to your config,\n  3. Add, remove, or modify autoloaded functions in module autoloaded files,\n  4. Update Doom manually (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. Up or downgrade Emacs itself (e.g. 29.1 -> 29.4).\n\nSync'ing ensures that unneeded packages are removed, needed packages are\ninstalled, autoloads files are up-to-date, and no byte-compiled files have gone\nstale.")
	("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined).\n--aot\n  Will only perform AOT native-compilation for packages updated/installed\n  during the execution of this command. Use --rebuild as well to do so for all\n  packages."))
       nil nil
       (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
			   ("-e")
			   nil nil)
	  #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
			     ("-u")
			     nil nil)
	  #s(doom-cli-option noupdate? "Don't update any packages" nil nil
			     ("-U")
			     nil nil)
	  #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
			     ("--gc")
			     nil nil)
	  #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
			     ("-j" "--jobs")
			     (num)
			     nil)
	  #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
			     ("-b" "--rebuild")
			     nil nil)
	  #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
			     ("-B")
			     nil nil)
	  #s(doom-cli-option aot? "Natively compile packages ahead-of-time (if available)" nil nil
			     ("--aot")
			     nil nil))
       ((&context context))
       (:benchmark t :prefix
		   (doom)
		   :group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
       (closure
	   (t)
	   (cli alist)
	 (let
	     ((noenvvar?
	       (cdr
		(assq 'noenvvar? alist)))
	      (update?
	       (cdr
		(assq 'update? alist)))
	      (noupdate?
	       (cdr
		(assq 'noupdate? alist)))
	      (purge?
	       (cdr
		(assq 'purge? alist)))
	      (jobs
	       (cdr
		(assq 'jobs alist)))
	      (rebuild?
	       (cdr
		(assq 'rebuild? alist)))
	      (nobuild?
	       (cdr
		(assq 'nobuild? alist)))
	      (aot?
	       (cdr
		(assq 'aot? alist)))
	      (context
	       (cdr
		(assq 'context alist))))
	   (if
	       (doom-profiles-bootloadable-p)
	       (progn
		 (call!
		  '(profiles sync "--reload"))))
	   (if aot?
	       (progn
		 (progn
		   (eval-after-load 'straight
		     #'(lambda nil
			 (setq straight--native-comp-available t))))))
	   (if jobs
	       (progn
		 (setq native-comp-async-jobs-number
		       (truncate jobs))))
	   (run-hooks 'doom-before-sync-hook)
	   (add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'item "Using Emacs %s @ %s")
	     emacs-version
	     (doom-print--class 'path invocation-directory invocation-name)))
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'start "Synchronizing %S profile...")
	     (or
	      (car doom-profile)
	      "default")))
	   (unwind-protect
	       (progn
		 (let
		     ((doom-print-level
		       (or nil doom-print-level))
		      (doom-print-indent
		       (+
			(if t
			    (or nil doom-print-indent-increment)
			  0)
			doom-print-indent)))
		   (let
		       ((x0
			 (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			(to-rebuild nil))
		     (progn
		       (ignore
			(consp x0))
		       (let*
			   ((x54
			     (car-safe x0))
			    (x55
			     (cdr-safe x0)))
			 (let
			     ((old-version x54)
			      (hash x55))
			   (progn
			     (if
				 (and old-version
				      (not
				       (equal old-version emacs-version)))
				 (progn
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
				     old-version emacs-version))
				   (setq to-rebuild t)))
			     (if
				 (and
				  (stringp hash)
				  (not
				   (equal hash
					  (doom-sync--system-hash))))
				 (progn
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'warn "Your system has changed since last sync")))
				   (setq to-rebuild t)))
			     (if
				 (and to-rebuild
				      (not rebuild?)
				      (not
				       (progn
					 (or
					  (progn
					    (and
					     (memq
					      (type-of context)
					      cl-struct-doom-cli-context-tags)
					     t))
					  (signal 'wrong-type-argument
						  (list 'doom-cli-context context)))
					 (aref context 6))))
				 (progn
				   (cond
				    (nobuild?
				     (doom-print
				      (doom-print--format
				       (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
				    ((doom-cli-context-get context 'upgrading)
				     (doom-print
				      (doom-print--format
				       (doom-print--class 'warn "Packages will be rebuilt")))
				     (setq rebuild? t))
				    ((y-or-n-p
				      (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
				     (setq rebuild? t))
				    ((exit! 0))))))))))
		   (if
		       (and
			(not noenvvar?)
			(file-exists-p doom-env-file))
		       (progn
			 (call!
			  '(env))))
		   (doom-packages-ensure rebuild?)
		   (if noupdate? nil
		     (doom-packages-update
		      (not update?)))
		   (doom-packages-purge purge? purge? purge? purge? purge?)
		   (if
		       (doom-profile-generate)
		       (progn
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			 (run-hooks 'doom-after-sync-hook)))
		   (if
		       (or rebuild?
			   (not
			    (file-exists-p doom-cli-sync-info-file)))
		       (progn
			 (let
			     ((temp-file doom-cli-sync-info-file)
			      (temp-buffer
			       (generate-new-buffer " *temp file*" t)))
			   (unwind-protect
			       (prog1
				   (save-current-buffer
				     (set-buffer temp-buffer)
				     (prin1
				      (cons emacs-version
					    (doom-sync--system-hash))
				      (current-buffer)))
				 (save-current-buffer
				   (set-buffer temp-buffer)
				   (write-region nil nil temp-file nil 0)))
			     (and
			      (buffer-name temp-buffer)
			      (kill-buffer temp-buffer))))))
		   t))
	     (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)))))
      (context . #s(doom-cli-context
		    (26387 63354 473960 173000)
		    8602 0
		    (90 . 8)
		    nil nil "doom" nil nil
		    ("doom" "profiles" "sync")
		    nil
		    ("sync")
		    (("--reload" . "--reload")
		     ("--aot")
		     ("-B")
		     ("--rebuild")
		     ("-b")
		     ("--jobs")
		     ("-j")
		     ("--gc")
		     ("-U")
		     ("-u")
		     ("-e")
		     ("--eval")
		     ("-E")
		     ("--strict-load")
		     ("--load")
		     ("-L")
		     ("--color")
		     ("--benchmark")
		     ("--profile")
		     ("--pager")
		     ("--emacsdir")
		     ("--doomdir")
		     ("--verbose")
		     ("-v")
		     ("--debug")
		     ("-D")
		     ("--force")
		     ("-!"))
		    ((t)
		     (("doom" "profiles" "sync")
		      "--reload")
		     (("doom" "profiles")
		      "sync" "--reload")
		     (("doom")
		      "profiles" "sync" "--reload"))
		    #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
      (aot?)
      (nobuild?)
      (rebuild?)
      (jobs)
      (purge?)
      (noupdate?)
      (update?)
      (noenvvar?)))
  (x15 #s(doom-cli
	  ("doom" "sync")
	  nil
	  (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	   ("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add, remove, or modify `package!' blocks to your config,\n  3. Add, remove, or modify autoloaded functions in module autoloaded files,\n  4. Update Doom manually (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. Up or downgrade Emacs itself (e.g. 29.1 -> 29.4).\n\nSync'ing ensures that unneeded packages are removed, needed packages are\ninstalled, autoloads files are up-to-date, and no byte-compiled files have gone\nstale.")
	   ("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined).\n--aot\n  Will only perform AOT native-compilation for packages updated/installed\n  during the execution of this command. Use --rebuild as well to do so for all\n  packages."))
	  nil nil
	  (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
			      ("-e")
			      nil nil)
	     #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
				("-u")
				nil nil)
	     #s(doom-cli-option noupdate? "Don't update any packages" nil nil
				("-U")
				nil nil)
	     #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
				("--gc")
				nil nil)
	     #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
				("-j" "--jobs")
				(num)
				nil)
	     #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
				("-b" "--rebuild")
				nil nil)
	     #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
				("-B")
				nil nil)
	     #s(doom-cli-option aot? "Natively compile packages ahead-of-time (if available)" nil nil
				("--aot")
				nil nil))
	  ((&context context))
	  (:benchmark t :prefix
		      (doom)
		      :group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
	  (closure
	      (t)
	      (cli alist)
	    (let
		((noenvvar?
		  (cdr
		   (assq 'noenvvar? alist)))
		 (update?
		  (cdr
		   (assq 'update? alist)))
		 (noupdate?
		  (cdr
		   (assq 'noupdate? alist)))
		 (purge?
		  (cdr
		   (assq 'purge? alist)))
		 (jobs
		  (cdr
		   (assq 'jobs alist)))
		 (rebuild?
		  (cdr
		   (assq 'rebuild? alist)))
		 (nobuild?
		  (cdr
		   (assq 'nobuild? alist)))
		 (aot?
		  (cdr
		   (assq 'aot? alist)))
		 (context
		  (cdr
		   (assq 'context alist))))
	      (if
		  (doom-profiles-bootloadable-p)
		  (progn
		    (call!
		     '(profiles sync "--reload"))))
	      (if aot?
		  (progn
		    (progn
		      (eval-after-load 'straight
			#'(lambda nil
			    (setq straight--native-comp-available t))))))
	      (if jobs
		  (progn
		    (setq native-comp-async-jobs-number
			  (truncate jobs))))
	      (run-hooks 'doom-before-sync-hook)
	      (add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
	      (doom-print
	       (doom-print--format
		(doom-print--class 'item "Using Emacs %s @ %s")
		emacs-version
		(doom-print--class 'path invocation-directory invocation-name)))
	      (doom-print
	       (doom-print--format
		(doom-print--class 'start "Synchronizing %S profile...")
		(or
		 (car doom-profile)
		 "default")))
	      (unwind-protect
		  (progn
		    (let
			((doom-print-level
			  (or nil doom-print-level))
			 (doom-print-indent
			  (+
			   (if t
			       (or nil doom-print-indent-increment)
			     0)
			   doom-print-indent)))
		      (let
			  ((x0
			    (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			   (to-rebuild nil))
			(progn
			  (ignore
			   (consp x0))
			  (let*
			      ((x54
				(car-safe x0))
			       (x55
				(cdr-safe x0)))
			    (let
				((old-version x54)
				 (hash x55))
			      (progn
				(if
				    (and old-version
					 (not
					  (equal old-version emacs-version)))
				    (progn
				      (doom-print
				       (doom-print--format
					(doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
					old-version emacs-version))
				      (setq to-rebuild t)))
				(if
				    (and
				     (stringp hash)
				     (not
				      (equal hash
					     (doom-sync--system-hash))))
				    (progn
				      (doom-print
				       (doom-print--format
					(doom-print--class 'warn "Your system has changed since last sync")))
				      (setq to-rebuild t)))
				(if
				    (and to-rebuild
					 (not rebuild?)
					 (not
					  (progn
					    (or
					     (progn
					       (and
						(memq
						 (type-of context)
						 cl-struct-doom-cli-context-tags)
						t))
					     (signal 'wrong-type-argument
						     (list 'doom-cli-context context)))
					    (aref context 6))))
				    (progn
				      (cond
				       (nobuild?
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
				       ((doom-cli-context-get context 'upgrading)
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Packages will be rebuilt")))
					(setq rebuild? t))
				       ((y-or-n-p
					 (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
					(setq rebuild? t))
				       ((exit! 0))))))))))
		      (if
			  (and
			   (not noenvvar?)
			   (file-exists-p doom-env-file))
			  (progn
			    (call!
			     '(env))))
		      (doom-packages-ensure rebuild?)
		      (if noupdate? nil
			(doom-packages-update
			 (not update?)))
		      (doom-packages-purge purge? purge? purge? purge? purge?)
		      (if
			  (doom-profile-generate)
			  (progn
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			    (run-hooks 'doom-after-sync-hook)))
		      (if
			  (or rebuild?
			      (not
			       (file-exists-p doom-cli-sync-info-file)))
			  (progn
			    (let
				((temp-file doom-cli-sync-info-file)
				 (temp-buffer
				  (generate-new-buffer " *temp file*" t)))
			      (unwind-protect
				  (prog1
				      (save-current-buffer
					(set-buffer temp-buffer)
					(prin1
					 (cons emacs-version
					       (doom-sync--system-hash))
					 (current-buffer)))
				    (save-current-buffer
				      (set-buffer temp-buffer)
				      (write-region nil nil temp-file nil 0)))
				(and
				 (buffer-name temp-buffer)
				 (kill-buffer temp-buffer))))))
		      t))
		(remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)))))
       (context . #s(doom-cli-context
		     (26387 63354 473960 173000)
		     8602 0
		     (90 . 8)
		     nil nil "doom" nil nil
		     ("doom" "profiles" "sync")
		     nil
		     ("sync")
		     (("--reload" . "--reload")
		      ("--aot")
		      ("-B")
		      ("--rebuild")
		      ("-b")
		      ("--jobs")
		      ("-j")
		      ("--gc")
		      ("-U")
		      ("-u")
		      ("-e")
		      ("--eval")
		      ("-E")
		      ("--strict-load")
		      ("--load")
		      ("-L")
		      ("--color")
		      ("--benchmark")
		      ("--profile")
		      ("--pager")
		      ("--emacsdir")
		      ("--doomdir")
		      ("--verbose")
		      ("-v")
		      ("--debug")
		      ("-D")
		      ("--force")
		      ("-!"))
		     ((t)
		      (("doom" "profiles" "sync")
		       "--reload")
		      (("doom" "profiles")
		       "sync" "--reload")
		      (("doom")
		       "profiles" "sync" "--reload"))
		     #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
       (aot?)
       (nobuild?)
       (rebuild?)
       (jobs)
       (purge?)
       (noupdate?)
       (update?)
       (noenvvar?))
  (x16 . #s(doom-cli
	    ("doom" "sync")
	    nil
	    (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	     ("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add, remove, or modify `package!' blocks to your config,\n  3. Add, remove, or modify autoloaded functions in module autoloaded files,\n  4. Update Doom manually (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. Up or downgrade Emacs itself (e.g. 29.1 -> 29.4).\n\nSync'ing ensures that unneeded packages are removed, needed packages are\ninstalled, autoloads files are up-to-date, and no byte-compiled files have gone\nstale.")
	     ("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined).\n--aot\n  Will only perform AOT native-compilation for packages updated/installed\n  during the execution of this command. Use --rebuild as well to do so for all\n  packages."))
	    nil nil
	    (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
				("-e")
				nil nil)
	       #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
				  ("-u")
				  nil nil)
	       #s(doom-cli-option noupdate? "Don't update any packages" nil nil
				  ("-U")
				  nil nil)
	       #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
				  ("--gc")
				  nil nil)
	       #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
				  ("-j" "--jobs")
				  (num)
				  nil)
	       #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
				  ("-b" "--rebuild")
				  nil nil)
	       #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
				  ("-B")
				  nil nil)
	       #s(doom-cli-option aot? "Natively compile packages ahead-of-time (if available)" nil nil
				  ("--aot")
				  nil nil))
	    ((&context context))
	    (:benchmark t :prefix
			(doom)
			:group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
	    (closure
		(t)
		(cli alist)
	      (let
		  ((noenvvar?
		    (cdr
		     (assq 'noenvvar? alist)))
		   (update?
		    (cdr
		     (assq 'update? alist)))
		   (noupdate?
		    (cdr
		     (assq 'noupdate? alist)))
		   (purge?
		    (cdr
		     (assq 'purge? alist)))
		   (jobs
		    (cdr
		     (assq 'jobs alist)))
		   (rebuild?
		    (cdr
		     (assq 'rebuild? alist)))
		   (nobuild?
		    (cdr
		     (assq 'nobuild? alist)))
		   (aot?
		    (cdr
		     (assq 'aot? alist)))
		   (context
		    (cdr
		     (assq 'context alist))))
		(if
		    (doom-profiles-bootloadable-p)
		    (progn
		      (call!
		       '(profiles sync "--reload"))))
		(if aot?
		    (progn
		      (progn
			(eval-after-load 'straight
			  #'(lambda nil
			      (setq straight--native-comp-available t))))))
		(if jobs
		    (progn
		      (setq native-comp-async-jobs-number
			    (truncate jobs))))
		(run-hooks 'doom-before-sync-hook)
		(add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
		(doom-print
		 (doom-print--format
		  (doom-print--class 'item "Using Emacs %s @ %s")
		  emacs-version
		  (doom-print--class 'path invocation-directory invocation-name)))
		(doom-print
		 (doom-print--format
		  (doom-print--class 'start "Synchronizing %S profile...")
		  (or
		   (car doom-profile)
		   "default")))
		(unwind-protect
		    (progn
		      (let
			  ((doom-print-level
			    (or nil doom-print-level))
			   (doom-print-indent
			    (+
			     (if t
				 (or nil doom-print-indent-increment)
			       0)
			     doom-print-indent)))
			(let
			    ((x0
			      (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			     (to-rebuild nil))
			  (progn
			    (ignore
			     (consp x0))
			    (let*
				((x54
				  (car-safe x0))
				 (x55
				  (cdr-safe x0)))
			      (let
				  ((old-version x54)
				   (hash x55))
				(progn
				  (if
				      (and old-version
					   (not
					    (equal old-version emacs-version)))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
					  old-version emacs-version))
					(setq to-rebuild t)))
				  (if
				      (and
				       (stringp hash)
				       (not
					(equal hash
					       (doom-sync--system-hash))))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Your system has changed since last sync")))
					(setq to-rebuild t)))
				  (if
				      (and to-rebuild
					   (not rebuild?)
					   (not
					    (progn
					      (or
					       (progn
						 (and
						  (memq
						   (type-of context)
						   cl-struct-doom-cli-context-tags)
						  t))
					       (signal 'wrong-type-argument
						       (list 'doom-cli-context context)))
					      (aref context 6))))
				      (progn
					(cond
					 (nobuild?
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
					 ((doom-cli-context-get context 'upgrading)
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages will be rebuilt")))
					  (setq rebuild? t))
					 ((y-or-n-p
					   (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
					  (setq rebuild? t))
					 ((exit! 0))))))))))
			(if
			    (and
			     (not noenvvar?)
			     (file-exists-p doom-env-file))
			    (progn
			      (call!
			       '(env))))
			(doom-packages-ensure rebuild?)
			(if noupdate? nil
			  (doom-packages-update
			   (not update?)))
			(doom-packages-purge purge? purge? purge? purge? purge?)
			(if
			    (doom-profile-generate)
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			      (run-hooks 'doom-after-sync-hook)))
			(if
			    (or rebuild?
				(not
				 (file-exists-p doom-cli-sync-info-file)))
			    (progn
			      (let
				  ((temp-file doom-cli-sync-info-file)
				   (temp-buffer
				    (generate-new-buffer " *temp file*" t)))
				(unwind-protect
				    (prog1
					(save-current-buffer
					  (set-buffer temp-buffer)
					  (prin1
					   (cons emacs-version
						 (doom-sync--system-hash))
					   (current-buffer)))
				      (save-current-buffer
					(set-buffer temp-buffer)
					(write-region nil nil temp-file nil 0)))
				  (and
				   (buffer-name temp-buffer)
				   (kill-buffer temp-buffer))))))
			t))
		  (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h))))))
  (x17
   (context . #s(doom-cli-context
		 (26387 63354 473960 173000)
		 8602 0
		 (90 . 8)
		 nil nil "doom" nil nil
		 ("doom" "profiles" "sync")
		 nil
		 ("sync")
		 (("--reload" . "--reload")
		  ("--aot")
		  ("-B")
		  ("--rebuild")
		  ("-b")
		  ("--jobs")
		  ("-j")
		  ("--gc")
		  ("-U")
		  ("-u")
		  ("-e")
		  ("--eval")
		  ("-E")
		  ("--strict-load")
		  ("--load")
		  ("-L")
		  ("--color")
		  ("--benchmark")
		  ("--profile")
		  ("--pager")
		  ("--emacsdir")
		  ("--doomdir")
		  ("--verbose")
		  ("-v")
		  ("--debug")
		  ("-D")
		  ("--force")
		  ("-!"))
		 ((t)
		  (("doom" "profiles" "sync")
		   "--reload")
		  (("doom" "profiles")
		   "sync" "--reload")
		  (("doom")
		   "profiles" "sync" "--reload"))
		 #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
   (aot?)
   (nobuild?)
   (rebuild?)
   (jobs)
   (purge?)
   (noupdate?)
   (update?)
   (noenvvar?))))

;;;; 30
((progn
   (ignore
    (consp x15))
   (let*
       ((x16
	 (car-safe x15))
	(x17
	 (cdr-safe x15)))
     (let
	 ((cli x16)
	  (bindings x17))
       (doom-cli-execute cli bindings))))
 nil)

;;;; 31
((let
     ((x15
       (car tail)))
   (progn
     (ignore
      (consp x15))
     (let*
	 ((x16
	   (car-safe x15))
	  (x17
	   (cdr-safe x15)))
       (let
	   ((cli x16)
	    (bindings x17))
	 (doom-cli-execute cli bindings))))
   (setq tail
	 (cdr tail)))
 ((context . #s(doom-cli-context
		(26387 63354 473960 173000)
		8602 0
		(90 . 8)
		nil nil "doom" nil nil
		("doom" "profiles" "sync")
		nil
		("sync")
		(("--reload" . "--reload")
		 ("--aot")
		 ("-B")
		 ("--rebuild")
		 ("-b")
		 ("--jobs")
		 ("-j")
		 ("--gc")
		 ("-U")
		 ("-u")
		 ("-e")
		 ("--eval")
		 ("-E")
		 ("--strict-load")
		 ("--load")
		 ("-L")
		 ("--color")
		 ("--benchmark")
		 ("--profile")
		 ("--pager")
		 ("--emacsdir")
		 ("--doomdir")
		 ("--verbose")
		 ("-v")
		 ("--debug")
		 ("-D")
		 ("--force")
		 ("-!"))
		((t)
		 (("doom" "profiles" "sync")
		  "--reload")
		 (("doom" "profiles")
		  "sync" "--reload")
		 (("doom")
		  "profiles" "sync" "--reload"))
		#<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (command "doom" "sync")
  (cli . #s(doom-cli
	    ("doom" "sync")
	    nil
	    (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	     ("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add, remove, or modify `package!' blocks to your config,\n  3. Add, remove, or modify autoloaded functions in module autoloaded files,\n  4. Update Doom manually (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. Up or downgrade Emacs itself (e.g. 29.1 -> 29.4).\n\nSync'ing ensures that unneeded packages are removed, needed packages are\ninstalled, autoloads files are up-to-date, and no byte-compiled files have gone\nstale.")
	     ("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined).\n--aot\n  Will only perform AOT native-compilation for packages updated/installed\n  during the execution of this command. Use --rebuild as well to do so for all\n  packages."))
	    nil nil
	    (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
				("-e")
				nil nil)
	       #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
				  ("-u")
				  nil nil)
	       #s(doom-cli-option noupdate? "Don't update any packages" nil nil
				  ("-U")
				  nil nil)
	       #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
				  ("--gc")
				  nil nil)
	       #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
				  ("-j" "--jobs")
				  (num)
				  nil)
	       #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
				  ("-b" "--rebuild")
				  nil nil)
	       #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
				  ("-B")
				  nil nil)
	       #s(doom-cli-option aot? "Natively compile packages ahead-of-time (if available)" nil nil
				  ("--aot")
				  nil nil))
	    ((&context context))
	    (:benchmark t :prefix
			(doom)
			:group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
	    (closure
		(t)
		(cli alist)
	      (let
		  ((noenvvar?
		    (cdr
		     (assq 'noenvvar? alist)))
		   (update?
		    (cdr
		     (assq 'update? alist)))
		   (noupdate?
		    (cdr
		     (assq 'noupdate? alist)))
		   (purge?
		    (cdr
		     (assq 'purge? alist)))
		   (jobs
		    (cdr
		     (assq 'jobs alist)))
		   (rebuild?
		    (cdr
		     (assq 'rebuild? alist)))
		   (nobuild?
		    (cdr
		     (assq 'nobuild? alist)))
		   (aot?
		    (cdr
		     (assq 'aot? alist)))
		   (context
		    (cdr
		     (assq 'context alist))))
		(if
		    (doom-profiles-bootloadable-p)
		    (progn
		      (call!
		       '(profiles sync "--reload"))))
		(if aot?
		    (progn
		      (progn
			(eval-after-load 'straight
			  #'(lambda nil
			      (setq straight--native-comp-available t))))))
		(if jobs
		    (progn
		      (setq native-comp-async-jobs-number
			    (truncate jobs))))
		(run-hooks 'doom-before-sync-hook)
		(add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
		(doom-print
		 (doom-print--format
		  (doom-print--class 'item "Using Emacs %s @ %s")
		  emacs-version
		  (doom-print--class 'path invocation-directory invocation-name)))
		(doom-print
		 (doom-print--format
		  (doom-print--class 'start "Synchronizing %S profile...")
		  (or
		   (car doom-profile)
		   "default")))
		(unwind-protect
		    (progn
		      (let
			  ((doom-print-level
			    (or nil doom-print-level))
			   (doom-print-indent
			    (+
			     (if t
				 (or nil doom-print-indent-increment)
			       0)
			     doom-print-indent)))
			(let
			    ((x0
			      (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			     (to-rebuild nil))
			  (progn
			    (ignore
			     (consp x0))
			    (let*
				((x54
				  (car-safe x0))
				 (x55
				  (cdr-safe x0)))
			      (let
				  ((old-version x54)
				   (hash x55))
				(progn
				  (if
				      (and old-version
					   (not
					    (equal old-version emacs-version)))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
					  old-version emacs-version))
					(setq to-rebuild t)))
				  (if
				      (and
				       (stringp hash)
				       (not
					(equal hash
					       (doom-sync--system-hash))))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Your system has changed since last sync")))
					(setq to-rebuild t)))
				  (if
				      (and to-rebuild
					   (not rebuild?)
					   (not
					    (progn
					      (or
					       (progn
						 (and
						  (memq
						   (type-of context)
						   cl-struct-doom-cli-context-tags)
						  t))
					       (signal 'wrong-type-argument
						       (list 'doom-cli-context context)))
					      (aref context 6))))
				      (progn
					(cond
					 (nobuild?
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
					 ((doom-cli-context-get context 'upgrading)
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages will be rebuilt")))
					  (setq rebuild? t))
					 ((y-or-n-p
					   (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
					  (setq rebuild? t))
					 ((exit! 0))))))))))
			(if
			    (and
			     (not noenvvar?)
			     (file-exists-p doom-env-file))
			    (progn
			      (call!
			       '(env))))
			(doom-packages-ensure rebuild?)
			(if noupdate? nil
			  (doom-packages-update
			   (not update?)))
			(doom-packages-purge purge? purge? purge? purge? purge?)
			(if
			    (doom-profile-generate)
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			      (run-hooks 'doom-after-sync-hook)))
			(if
			    (or rebuild?
				(not
				 (file-exists-p doom-cli-sync-info-file)))
			    (progn
			      (let
				  ((temp-file doom-cli-sync-info-file)
				   (temp-buffer
				    (generate-new-buffer " *temp file*" t)))
				(unwind-protect
				    (prog1
					(save-current-buffer
					  (set-buffer temp-buffer)
					  (prin1
					   (cons emacs-version
						 (doom-sync--system-hash))
					   (current-buffer)))
				      (save-current-buffer
					(set-buffer temp-buffer)
					(write-region nil nil temp-file nil 0)))
				  (and
				   (buffer-name temp-buffer)
				   (kill-buffer temp-buffer))))))
			t))
		  (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h))))))
  (prefix . "doom")
  (seen t)
  (runners
   (#s(doom-cli
       ("doom" "sync")
       nil
       (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add, remove, or modify `package!' blocks to your config,\n  3. Add, remove, or modify autoloaded functions in module autoloaded files,\n  4. Update Doom manually (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. Up or downgrade Emacs itself (e.g. 29.1 -> 29.4).\n\nSync'ing ensures that unneeded packages are removed, needed packages are\ninstalled, autoloads files are up-to-date, and no byte-compiled files have gone\nstale.")
	("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined).\n--aot\n  Will only perform AOT native-compilation for packages updated/installed\n  during the execution of this command. Use --rebuild as well to do so for all\n  packages."))
       nil nil
       (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
			   ("-e")
			   nil nil)
	  #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
			     ("-u")
			     nil nil)
	  #s(doom-cli-option noupdate? "Don't update any packages" nil nil
			     ("-U")
			     nil nil)
	  #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
			     ("--gc")
			     nil nil)
	  #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
			     ("-j" "--jobs")
			     (num)
			     nil)
	  #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
			     ("-b" "--rebuild")
			     nil nil)
	  #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
			     ("-B")
			     nil nil)
	  #s(doom-cli-option aot? "Natively compile packages ahead-of-time (if available)" nil nil
			     ("--aot")
			     nil nil))
       ((&context context))
       (:benchmark t :prefix
		   (doom)
		   :group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
       (closure
	   (t)
	   (cli alist)
	 (let
	     ((noenvvar?
	       (cdr
		(assq 'noenvvar? alist)))
	      (update?
	       (cdr
		(assq 'update? alist)))
	      (noupdate?
	       (cdr
		(assq 'noupdate? alist)))
	      (purge?
	       (cdr
		(assq 'purge? alist)))
	      (jobs
	       (cdr
		(assq 'jobs alist)))
	      (rebuild?
	       (cdr
		(assq 'rebuild? alist)))
	      (nobuild?
	       (cdr
		(assq 'nobuild? alist)))
	      (aot?
	       (cdr
		(assq 'aot? alist)))
	      (context
	       (cdr
		(assq 'context alist))))
	   (if
	       (doom-profiles-bootloadable-p)
	       (progn
		 (call!
		  '(profiles sync "--reload"))))
	   (if aot?
	       (progn
		 (progn
		   (eval-after-load 'straight
		     #'(lambda nil
			 (setq straight--native-comp-available t))))))
	   (if jobs
	       (progn
		 (setq native-comp-async-jobs-number
		       (truncate jobs))))
	   (run-hooks 'doom-before-sync-hook)
	   (add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'item "Using Emacs %s @ %s")
	     emacs-version
	     (doom-print--class 'path invocation-directory invocation-name)))
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'start "Synchronizing %S profile...")
	     (or
	      (car doom-profile)
	      "default")))
	   (unwind-protect
	       (progn
		 (let
		     ((doom-print-level
		       (or nil doom-print-level))
		      (doom-print-indent
		       (+
			(if t
			    (or nil doom-print-indent-increment)
			  0)
			doom-print-indent)))
		   (let
		       ((x0
			 (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			(to-rebuild nil))
		     (progn
		       (ignore
			(consp x0))
		       (let*
			   ((x54
			     (car-safe x0))
			    (x55
			     (cdr-safe x0)))
			 (let
			     ((old-version x54)
			      (hash x55))
			   (progn
			     (if
				 (and old-version
				      (not
				       (equal old-version emacs-version)))
				 (progn
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
				     old-version emacs-version))
				   (setq to-rebuild t)))
			     (if
				 (and
				  (stringp hash)
				  (not
				   (equal hash
					  (doom-sync--system-hash))))
				 (progn
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'warn "Your system has changed since last sync")))
				   (setq to-rebuild t)))
			     (if
				 (and to-rebuild
				      (not rebuild?)
				      (not
				       (progn
					 (or
					  (progn
					    (and
					     (memq
					      (type-of context)
					      cl-struct-doom-cli-context-tags)
					     t))
					  (signal 'wrong-type-argument
						  (list 'doom-cli-context context)))
					 (aref context 6))))
				 (progn
				   (cond
				    (nobuild?
				     (doom-print
				      (doom-print--format
				       (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
				    ((doom-cli-context-get context 'upgrading)
				     (doom-print
				      (doom-print--format
				       (doom-print--class 'warn "Packages will be rebuilt")))
				     (setq rebuild? t))
				    ((y-or-n-p
				      (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
				     (setq rebuild? t))
				    ((exit! 0))))))))))
		   (if
		       (and
			(not noenvvar?)
			(file-exists-p doom-env-file))
		       (progn
			 (call!
			  '(env))))
		   (doom-packages-ensure rebuild?)
		   (if noupdate? nil
		     (doom-packages-update
		      (not update?)))
		   (doom-packages-purge purge? purge? purge? purge? purge?)
		   (if
		       (doom-profile-generate)
		       (progn
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			 (run-hooks 'doom-after-sync-hook)))
		   (if
		       (or rebuild?
			   (not
			    (file-exists-p doom-cli-sync-info-file)))
		       (progn
			 (let
			     ((temp-file doom-cli-sync-info-file)
			      (temp-buffer
			       (generate-new-buffer " *temp file*" t)))
			   (unwind-protect
			       (prog1
				   (save-current-buffer
				     (set-buffer temp-buffer)
				     (prin1
				      (cons emacs-version
					    (doom-sync--system-hash))
				      (current-buffer)))
				 (save-current-buffer
				   (set-buffer temp-buffer)
				   (write-region nil nil temp-file nil 0)))
			     (and
			      (buffer-name temp-buffer)
			      (kill-buffer temp-buffer))))))
		   t))
	     (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)))))
      (context . #s(doom-cli-context
		    (26387 63354 473960 173000)
		    8602 0
		    (90 . 8)
		    nil nil "doom" nil nil
		    ("doom" "profiles" "sync")
		    nil
		    ("sync")
		    (("--reload" . "--reload")
		     ("--aot")
		     ("-B")
		     ("--rebuild")
		     ("-b")
		     ("--jobs")
		     ("-j")
		     ("--gc")
		     ("-U")
		     ("-u")
		     ("-e")
		     ("--eval")
		     ("-E")
		     ("--strict-load")
		     ("--load")
		     ("-L")
		     ("--color")
		     ("--benchmark")
		     ("--profile")
		     ("--pager")
		     ("--emacsdir")
		     ("--doomdir")
		     ("--verbose")
		     ("-v")
		     ("--debug")
		     ("-D")
		     ("--force")
		     ("-!"))
		    ((t)
		     (("doom" "profiles" "sync")
		      "--reload")
		     (("doom" "profiles")
		      "sync" "--reload")
		     (("doom")
		      "profiles" "sync" "--reload"))
		    #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
      (aot?)
      (nobuild?)
      (rebuild?)
      (jobs)
      (purge?)
      (noupdate?)
      (update?)
      (noenvvar?)))
  (tail
   (#s(doom-cli
       ("doom" "sync")
       nil
       (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add, remove, or modify `package!' blocks to your config,\n  3. Add, remove, or modify autoloaded functions in module autoloaded files,\n  4. Update Doom manually (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. Up or downgrade Emacs itself (e.g. 29.1 -> 29.4).\n\nSync'ing ensures that unneeded packages are removed, needed packages are\ninstalled, autoloads files are up-to-date, and no byte-compiled files have gone\nstale.")
	("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined).\n--aot\n  Will only perform AOT native-compilation for packages updated/installed\n  during the execution of this command. Use --rebuild as well to do so for all\n  packages."))
       nil nil
       (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
			   ("-e")
			   nil nil)
	  #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
			     ("-u")
			     nil nil)
	  #s(doom-cli-option noupdate? "Don't update any packages" nil nil
			     ("-U")
			     nil nil)
	  #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
			     ("--gc")
			     nil nil)
	  #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
			     ("-j" "--jobs")
			     (num)
			     nil)
	  #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
			     ("-b" "--rebuild")
			     nil nil)
	  #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
			     ("-B")
			     nil nil)
	  #s(doom-cli-option aot? "Natively compile packages ahead-of-time (if available)" nil nil
			     ("--aot")
			     nil nil))
       ((&context context))
       (:benchmark t :prefix
		   (doom)
		   :group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
       (closure
	   (t)
	   (cli alist)
	 (let
	     ((noenvvar?
	       (cdr
		(assq 'noenvvar? alist)))
	      (update?
	       (cdr
		(assq 'update? alist)))
	      (noupdate?
	       (cdr
		(assq 'noupdate? alist)))
	      (purge?
	       (cdr
		(assq 'purge? alist)))
	      (jobs
	       (cdr
		(assq 'jobs alist)))
	      (rebuild?
	       (cdr
		(assq 'rebuild? alist)))
	      (nobuild?
	       (cdr
		(assq 'nobuild? alist)))
	      (aot?
	       (cdr
		(assq 'aot? alist)))
	      (context
	       (cdr
		(assq 'context alist))))
	   (if
	       (doom-profiles-bootloadable-p)
	       (progn
		 (call!
		  '(profiles sync "--reload"))))
	   (if aot?
	       (progn
		 (progn
		   (eval-after-load 'straight
		     #'(lambda nil
			 (setq straight--native-comp-available t))))))
	   (if jobs
	       (progn
		 (setq native-comp-async-jobs-number
		       (truncate jobs))))
	   (run-hooks 'doom-before-sync-hook)
	   (add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'item "Using Emacs %s @ %s")
	     emacs-version
	     (doom-print--class 'path invocation-directory invocation-name)))
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'start "Synchronizing %S profile...")
	     (or
	      (car doom-profile)
	      "default")))
	   (unwind-protect
	       (progn
		 (let
		     ((doom-print-level
		       (or nil doom-print-level))
		      (doom-print-indent
		       (+
			(if t
			    (or nil doom-print-indent-increment)
			  0)
			doom-print-indent)))
		   (let
		       ((x0
			 (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			(to-rebuild nil))
		     (progn
		       (ignore
			(consp x0))
		       (let*
			   ((x54
			     (car-safe x0))
			    (x55
			     (cdr-safe x0)))
			 (let
			     ((old-version x54)
			      (hash x55))
			   (progn
			     (if
				 (and old-version
				      (not
				       (equal old-version emacs-version)))
				 (progn
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
				     old-version emacs-version))
				   (setq to-rebuild t)))
			     (if
				 (and
				  (stringp hash)
				  (not
				   (equal hash
					  (doom-sync--system-hash))))
				 (progn
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'warn "Your system has changed since last sync")))
				   (setq to-rebuild t)))
			     (if
				 (and to-rebuild
				      (not rebuild?)
				      (not
				       (progn
					 (or
					  (progn
					    (and
					     (memq
					      (type-of context)
					      cl-struct-doom-cli-context-tags)
					     t))
					  (signal 'wrong-type-argument
						  (list 'doom-cli-context context)))
					 (aref context 6))))
				 (progn
				   (cond
				    (nobuild?
				     (doom-print
				      (doom-print--format
				       (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
				    ((doom-cli-context-get context 'upgrading)
				     (doom-print
				      (doom-print--format
				       (doom-print--class 'warn "Packages will be rebuilt")))
				     (setq rebuild? t))
				    ((y-or-n-p
				      (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
				     (setq rebuild? t))
				    ((exit! 0))))))))))
		   (if
		       (and
			(not noenvvar?)
			(file-exists-p doom-env-file))
		       (progn
			 (call!
			  '(env))))
		   (doom-packages-ensure rebuild?)
		   (if noupdate? nil
		     (doom-packages-update
		      (not update?)))
		   (doom-packages-purge purge? purge? purge? purge? purge?)
		   (if
		       (doom-profile-generate)
		       (progn
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			 (run-hooks 'doom-after-sync-hook)))
		   (if
		       (or rebuild?
			   (not
			    (file-exists-p doom-cli-sync-info-file)))
		       (progn
			 (let
			     ((temp-file doom-cli-sync-info-file)
			      (temp-buffer
			       (generate-new-buffer " *temp file*" t)))
			   (unwind-protect
			       (prog1
				   (save-current-buffer
				     (set-buffer temp-buffer)
				     (prin1
				      (cons emacs-version
					    (doom-sync--system-hash))
				      (current-buffer)))
				 (save-current-buffer
				   (set-buffer temp-buffer)
				   (write-region nil nil temp-file nil 0)))
			     (and
			      (buffer-name temp-buffer)
			      (kill-buffer temp-buffer))))))
		   t))
	     (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)))))
      (context . #s(doom-cli-context
		    (26387 63354 473960 173000)
		    8602 0
		    (90 . 8)
		    nil nil "doom" nil nil
		    ("doom" "profiles" "sync")
		    nil
		    ("sync")
		    (("--reload" . "--reload")
		     ("--aot")
		     ("-B")
		     ("--rebuild")
		     ("-b")
		     ("--jobs")
		     ("-j")
		     ("--gc")
		     ("-U")
		     ("-u")
		     ("-e")
		     ("--eval")
		     ("-E")
		     ("--strict-load")
		     ("--load")
		     ("-L")
		     ("--color")
		     ("--benchmark")
		     ("--profile")
		     ("--pager")
		     ("--emacsdir")
		     ("--doomdir")
		     ("--verbose")
		     ("-v")
		     ("--debug")
		     ("-D")
		     ("--force")
		     ("-!"))
		    ((t)
		     (("doom" "profiles" "sync")
		      "--reload")
		     (("doom" "profiles")
		      "sync" "--reload")
		     (("doom")
		      "profiles" "sync" "--reload"))
		    #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
      (aot?)
      (nobuild?)
      (rebuild?)
      (jobs)
      (purge?)
      (noupdate?)
      (update?)
      (noenvvar?)))
  (x15 #s(doom-cli
	  ("doom" "sync")
	  nil
	  (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	   ("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add, remove, or modify `package!' blocks to your config,\n  3. Add, remove, or modify autoloaded functions in module autoloaded files,\n  4. Update Doom manually (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. Up or downgrade Emacs itself (e.g. 29.1 -> 29.4).\n\nSync'ing ensures that unneeded packages are removed, needed packages are\ninstalled, autoloads files are up-to-date, and no byte-compiled files have gone\nstale.")
	   ("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined).\n--aot\n  Will only perform AOT native-compilation for packages updated/installed\n  during the execution of this command. Use --rebuild as well to do so for all\n  packages."))
	  nil nil
	  (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
			      ("-e")
			      nil nil)
	     #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
				("-u")
				nil nil)
	     #s(doom-cli-option noupdate? "Don't update any packages" nil nil
				("-U")
				nil nil)
	     #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
				("--gc")
				nil nil)
	     #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
				("-j" "--jobs")
				(num)
				nil)
	     #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
				("-b" "--rebuild")
				nil nil)
	     #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
				("-B")
				nil nil)
	     #s(doom-cli-option aot? "Natively compile packages ahead-of-time (if available)" nil nil
				("--aot")
				nil nil))
	  ((&context context))
	  (:benchmark t :prefix
		      (doom)
		      :group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
	  (closure
	      (t)
	      (cli alist)
	    (let
		((noenvvar?
		  (cdr
		   (assq 'noenvvar? alist)))
		 (update?
		  (cdr
		   (assq 'update? alist)))
		 (noupdate?
		  (cdr
		   (assq 'noupdate? alist)))
		 (purge?
		  (cdr
		   (assq 'purge? alist)))
		 (jobs
		  (cdr
		   (assq 'jobs alist)))
		 (rebuild?
		  (cdr
		   (assq 'rebuild? alist)))
		 (nobuild?
		  (cdr
		   (assq 'nobuild? alist)))
		 (aot?
		  (cdr
		   (assq 'aot? alist)))
		 (context
		  (cdr
		   (assq 'context alist))))
	      (if
		  (doom-profiles-bootloadable-p)
		  (progn
		    (call!
		     '(profiles sync "--reload"))))
	      (if aot?
		  (progn
		    (progn
		      (eval-after-load 'straight
			#'(lambda nil
			    (setq straight--native-comp-available t))))))
	      (if jobs
		  (progn
		    (setq native-comp-async-jobs-number
			  (truncate jobs))))
	      (run-hooks 'doom-before-sync-hook)
	      (add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
	      (doom-print
	       (doom-print--format
		(doom-print--class 'item "Using Emacs %s @ %s")
		emacs-version
		(doom-print--class 'path invocation-directory invocation-name)))
	      (doom-print
	       (doom-print--format
		(doom-print--class 'start "Synchronizing %S profile...")
		(or
		 (car doom-profile)
		 "default")))
	      (unwind-protect
		  (progn
		    (let
			((doom-print-level
			  (or nil doom-print-level))
			 (doom-print-indent
			  (+
			   (if t
			       (or nil doom-print-indent-increment)
			     0)
			   doom-print-indent)))
		      (let
			  ((x0
			    (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			   (to-rebuild nil))
			(progn
			  (ignore
			   (consp x0))
			  (let*
			      ((x54
				(car-safe x0))
			       (x55
				(cdr-safe x0)))
			    (let
				((old-version x54)
				 (hash x55))
			      (progn
				(if
				    (and old-version
					 (not
					  (equal old-version emacs-version)))
				    (progn
				      (doom-print
				       (doom-print--format
					(doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
					old-version emacs-version))
				      (setq to-rebuild t)))
				(if
				    (and
				     (stringp hash)
				     (not
				      (equal hash
					     (doom-sync--system-hash))))
				    (progn
				      (doom-print
				       (doom-print--format
					(doom-print--class 'warn "Your system has changed since last sync")))
				      (setq to-rebuild t)))
				(if
				    (and to-rebuild
					 (not rebuild?)
					 (not
					  (progn
					    (or
					     (progn
					       (and
						(memq
						 (type-of context)
						 cl-struct-doom-cli-context-tags)
						t))
					     (signal 'wrong-type-argument
						     (list 'doom-cli-context context)))
					    (aref context 6))))
				    (progn
				      (cond
				       (nobuild?
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
				       ((doom-cli-context-get context 'upgrading)
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Packages will be rebuilt")))
					(setq rebuild? t))
				       ((y-or-n-p
					 (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
					(setq rebuild? t))
				       ((exit! 0))))))))))
		      (if
			  (and
			   (not noenvvar?)
			   (file-exists-p doom-env-file))
			  (progn
			    (call!
			     '(env))))
		      (doom-packages-ensure rebuild?)
		      (if noupdate? nil
			(doom-packages-update
			 (not update?)))
		      (doom-packages-purge purge? purge? purge? purge? purge?)
		      (if
			  (doom-profile-generate)
			  (progn
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			    (run-hooks 'doom-after-sync-hook)))
		      (if
			  (or rebuild?
			      (not
			       (file-exists-p doom-cli-sync-info-file)))
			  (progn
			    (let
				((temp-file doom-cli-sync-info-file)
				 (temp-buffer
				  (generate-new-buffer " *temp file*" t)))
			      (unwind-protect
				  (prog1
				      (save-current-buffer
					(set-buffer temp-buffer)
					(prin1
					 (cons emacs-version
					       (doom-sync--system-hash))
					 (current-buffer)))
				    (save-current-buffer
				      (set-buffer temp-buffer)
				      (write-region nil nil temp-file nil 0)))
				(and
				 (buffer-name temp-buffer)
				 (kill-buffer temp-buffer))))))
		      t))
		(remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)))))
       (context . #s(doom-cli-context
		     (26387 63354 473960 173000)
		     8602 0
		     (90 . 8)
		     nil nil "doom" nil nil
		     ("doom" "profiles" "sync")
		     nil
		     ("sync")
		     (("--reload" . "--reload")
		      ("--aot")
		      ("-B")
		      ("--rebuild")
		      ("-b")
		      ("--jobs")
		      ("-j")
		      ("--gc")
		      ("-U")
		      ("-u")
		      ("-e")
		      ("--eval")
		      ("-E")
		      ("--strict-load")
		      ("--load")
		      ("-L")
		      ("--color")
		      ("--benchmark")
		      ("--profile")
		      ("--pager")
		      ("--emacsdir")
		      ("--doomdir")
		      ("--verbose")
		      ("-v")
		      ("--debug")
		      ("-D")
		      ("--force")
		      ("-!"))
		     ((t)
		      (("doom" "profiles" "sync")
		       "--reload")
		      (("doom" "profiles")
		       "sync" "--reload")
		      (("doom")
		       "profiles" "sync" "--reload"))
		     #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
       (aot?)
       (nobuild?)
       (rebuild?)
       (jobs)
       (purge?)
       (noupdate?)
       (update?)
       (noenvvar?))))

;;;; 32
((while tail
   (let
       ((x15
	 (car tail)))
     (progn
       (ignore
	(consp x15))
       (let*
	   ((x16
	     (car-safe x15))
	    (x17
	     (cdr-safe x15)))
	 (let
	     ((cli x16)
	      (bindings x17))
	   (doom-cli-execute cli bindings))))
     (setq tail
	   (cdr tail))))
 nil)

;;;; 33
((let
     ((tail
       (nreverse runners)))
   (while tail
     (let
	 ((x15
	   (car tail)))
       (progn
	 (ignore
	  (consp x15))
	 (let*
	     ((x16
	       (car-safe x15))
	      (x17
	       (cdr-safe x15)))
	   (let
	       ((cli x16)
		(bindings x17))
	     (doom-cli-execute cli bindings))))
       (setq tail
	     (cdr tail)))))
 ((context . #s(doom-cli-context
		(26387 63354 473960 173000)
		8602 0
		(90 . 8)
		nil nil "doom" nil nil
		("doom" "profiles" "sync")
		nil
		("sync")
		(("--reload" . "--reload")
		 ("--aot")
		 ("-B")
		 ("--rebuild")
		 ("-b")
		 ("--jobs")
		 ("-j")
		 ("--gc")
		 ("-U")
		 ("-u")
		 ("-e")
		 ("--eval")
		 ("-E")
		 ("--strict-load")
		 ("--load")
		 ("-L")
		 ("--color")
		 ("--benchmark")
		 ("--profile")
		 ("--pager")
		 ("--emacsdir")
		 ("--doomdir")
		 ("--verbose")
		 ("-v")
		 ("--debug")
		 ("-D")
		 ("--force")
		 ("-!"))
		((t)
		 (("doom" "profiles" "sync")
		  "--reload")
		 (("doom" "profiles")
		  "sync" "--reload")
		 (("doom")
		  "profiles" "sync" "--reload"))
		#<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (command "doom" "sync")
  (cli . #s(doom-cli
	    ("doom" "sync")
	    nil
	    (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	     ("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add, remove, or modify `package!' blocks to your config,\n  3. Add, remove, or modify autoloaded functions in module autoloaded files,\n  4. Update Doom manually (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. Up or downgrade Emacs itself (e.g. 29.1 -> 29.4).\n\nSync'ing ensures that unneeded packages are removed, needed packages are\ninstalled, autoloads files are up-to-date, and no byte-compiled files have gone\nstale.")
	     ("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined).\n--aot\n  Will only perform AOT native-compilation for packages updated/installed\n  during the execution of this command. Use --rebuild as well to do so for all\n  packages."))
	    nil nil
	    (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
				("-e")
				nil nil)
	       #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
				  ("-u")
				  nil nil)
	       #s(doom-cli-option noupdate? "Don't update any packages" nil nil
				  ("-U")
				  nil nil)
	       #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
				  ("--gc")
				  nil nil)
	       #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
				  ("-j" "--jobs")
				  (num)
				  nil)
	       #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
				  ("-b" "--rebuild")
				  nil nil)
	       #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
				  ("-B")
				  nil nil)
	       #s(doom-cli-option aot? "Natively compile packages ahead-of-time (if available)" nil nil
				  ("--aot")
				  nil nil))
	    ((&context context))
	    (:benchmark t :prefix
			(doom)
			:group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
	    (closure
		(t)
		(cli alist)
	      (let
		  ((noenvvar?
		    (cdr
		     (assq 'noenvvar? alist)))
		   (update?
		    (cdr
		     (assq 'update? alist)))
		   (noupdate?
		    (cdr
		     (assq 'noupdate? alist)))
		   (purge?
		    (cdr
		     (assq 'purge? alist)))
		   (jobs
		    (cdr
		     (assq 'jobs alist)))
		   (rebuild?
		    (cdr
		     (assq 'rebuild? alist)))
		   (nobuild?
		    (cdr
		     (assq 'nobuild? alist)))
		   (aot?
		    (cdr
		     (assq 'aot? alist)))
		   (context
		    (cdr
		     (assq 'context alist))))
		(if
		    (doom-profiles-bootloadable-p)
		    (progn
		      (call!
		       '(profiles sync "--reload"))))
		(if aot?
		    (progn
		      (progn
			(eval-after-load 'straight
			  #'(lambda nil
			      (setq straight--native-comp-available t))))))
		(if jobs
		    (progn
		      (setq native-comp-async-jobs-number
			    (truncate jobs))))
		(run-hooks 'doom-before-sync-hook)
		(add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
		(doom-print
		 (doom-print--format
		  (doom-print--class 'item "Using Emacs %s @ %s")
		  emacs-version
		  (doom-print--class 'path invocation-directory invocation-name)))
		(doom-print
		 (doom-print--format
		  (doom-print--class 'start "Synchronizing %S profile...")
		  (or
		   (car doom-profile)
		   "default")))
		(unwind-protect
		    (progn
		      (let
			  ((doom-print-level
			    (or nil doom-print-level))
			   (doom-print-indent
			    (+
			     (if t
				 (or nil doom-print-indent-increment)
			       0)
			     doom-print-indent)))
			(let
			    ((x0
			      (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			     (to-rebuild nil))
			  (progn
			    (ignore
			     (consp x0))
			    (let*
				((x54
				  (car-safe x0))
				 (x55
				  (cdr-safe x0)))
			      (let
				  ((old-version x54)
				   (hash x55))
				(progn
				  (if
				      (and old-version
					   (not
					    (equal old-version emacs-version)))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
					  old-version emacs-version))
					(setq to-rebuild t)))
				  (if
				      (and
				       (stringp hash)
				       (not
					(equal hash
					       (doom-sync--system-hash))))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Your system has changed since last sync")))
					(setq to-rebuild t)))
				  (if
				      (and to-rebuild
					   (not rebuild?)
					   (not
					    (progn
					      (or
					       (progn
						 (and
						  (memq
						   (type-of context)
						   cl-struct-doom-cli-context-tags)
						  t))
					       (signal 'wrong-type-argument
						       (list 'doom-cli-context context)))
					      (aref context 6))))
				      (progn
					(cond
					 (nobuild?
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
					 ((doom-cli-context-get context 'upgrading)
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages will be rebuilt")))
					  (setq rebuild? t))
					 ((y-or-n-p
					   (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
					  (setq rebuild? t))
					 ((exit! 0))))))))))
			(if
			    (and
			     (not noenvvar?)
			     (file-exists-p doom-env-file))
			    (progn
			      (call!
			       '(env))))
			(doom-packages-ensure rebuild?)
			(if noupdate? nil
			  (doom-packages-update
			   (not update?)))
			(doom-packages-purge purge? purge? purge? purge? purge?)
			(if
			    (doom-profile-generate)
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			      (run-hooks 'doom-after-sync-hook)))
			(if
			    (or rebuild?
				(not
				 (file-exists-p doom-cli-sync-info-file)))
			    (progn
			      (let
				  ((temp-file doom-cli-sync-info-file)
				   (temp-buffer
				    (generate-new-buffer " *temp file*" t)))
				(unwind-protect
				    (prog1
					(save-current-buffer
					  (set-buffer temp-buffer)
					  (prin1
					   (cons emacs-version
						 (doom-sync--system-hash))
					   (current-buffer)))
				      (save-current-buffer
					(set-buffer temp-buffer)
					(write-region nil nil temp-file nil 0)))
				  (and
				   (buffer-name temp-buffer)
				   (kill-buffer temp-buffer))))))
			t))
		  (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h))))))
  (prefix . "doom")
  (seen t)
  (runners
   (#s(doom-cli
       ("doom" "sync")
       nil
       (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add, remove, or modify `package!' blocks to your config,\n  3. Add, remove, or modify autoloaded functions in module autoloaded files,\n  4. Update Doom manually (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. Up or downgrade Emacs itself (e.g. 29.1 -> 29.4).\n\nSync'ing ensures that unneeded packages are removed, needed packages are\ninstalled, autoloads files are up-to-date, and no byte-compiled files have gone\nstale.")
	("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined).\n--aot\n  Will only perform AOT native-compilation for packages updated/installed\n  during the execution of this command. Use --rebuild as well to do so for all\n  packages."))
       nil nil
       (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
			   ("-e")
			   nil nil)
	  #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
			     ("-u")
			     nil nil)
	  #s(doom-cli-option noupdate? "Don't update any packages" nil nil
			     ("-U")
			     nil nil)
	  #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
			     ("--gc")
			     nil nil)
	  #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
			     ("-j" "--jobs")
			     (num)
			     nil)
	  #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
			     ("-b" "--rebuild")
			     nil nil)
	  #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
			     ("-B")
			     nil nil)
	  #s(doom-cli-option aot? "Natively compile packages ahead-of-time (if available)" nil nil
			     ("--aot")
			     nil nil))
       ((&context context))
       (:benchmark t :prefix
		   (doom)
		   :group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
       (closure
	   (t)
	   (cli alist)
	 (let
	     ((noenvvar?
	       (cdr
		(assq 'noenvvar? alist)))
	      (update?
	       (cdr
		(assq 'update? alist)))
	      (noupdate?
	       (cdr
		(assq 'noupdate? alist)))
	      (purge?
	       (cdr
		(assq 'purge? alist)))
	      (jobs
	       (cdr
		(assq 'jobs alist)))
	      (rebuild?
	       (cdr
		(assq 'rebuild? alist)))
	      (nobuild?
	       (cdr
		(assq 'nobuild? alist)))
	      (aot?
	       (cdr
		(assq 'aot? alist)))
	      (context
	       (cdr
		(assq 'context alist))))
	   (if
	       (doom-profiles-bootloadable-p)
	       (progn
		 (call!
		  '(profiles sync "--reload"))))
	   (if aot?
	       (progn
		 (progn
		   (eval-after-load 'straight
		     #'(lambda nil
			 (setq straight--native-comp-available t))))))
	   (if jobs
	       (progn
		 (setq native-comp-async-jobs-number
		       (truncate jobs))))
	   (run-hooks 'doom-before-sync-hook)
	   (add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'item "Using Emacs %s @ %s")
	     emacs-version
	     (doom-print--class 'path invocation-directory invocation-name)))
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'start "Synchronizing %S profile...")
	     (or
	      (car doom-profile)
	      "default")))
	   (unwind-protect
	       (progn
		 (let
		     ((doom-print-level
		       (or nil doom-print-level))
		      (doom-print-indent
		       (+
			(if t
			    (or nil doom-print-indent-increment)
			  0)
			doom-print-indent)))
		   (let
		       ((x0
			 (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			(to-rebuild nil))
		     (progn
		       (ignore
			(consp x0))
		       (let*
			   ((x54
			     (car-safe x0))
			    (x55
			     (cdr-safe x0)))
			 (let
			     ((old-version x54)
			      (hash x55))
			   (progn
			     (if
				 (and old-version
				      (not
				       (equal old-version emacs-version)))
				 (progn
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
				     old-version emacs-version))
				   (setq to-rebuild t)))
			     (if
				 (and
				  (stringp hash)
				  (not
				   (equal hash
					  (doom-sync--system-hash))))
				 (progn
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'warn "Your system has changed since last sync")))
				   (setq to-rebuild t)))
			     (if
				 (and to-rebuild
				      (not rebuild?)
				      (not
				       (progn
					 (or
					  (progn
					    (and
					     (memq
					      (type-of context)
					      cl-struct-doom-cli-context-tags)
					     t))
					  (signal 'wrong-type-argument
						  (list 'doom-cli-context context)))
					 (aref context 6))))
				 (progn
				   (cond
				    (nobuild?
				     (doom-print
				      (doom-print--format
				       (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
				    ((doom-cli-context-get context 'upgrading)
				     (doom-print
				      (doom-print--format
				       (doom-print--class 'warn "Packages will be rebuilt")))
				     (setq rebuild? t))
				    ((y-or-n-p
				      (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
				     (setq rebuild? t))
				    ((exit! 0))))))))))
		   (if
		       (and
			(not noenvvar?)
			(file-exists-p doom-env-file))
		       (progn
			 (call!
			  '(env))))
		   (doom-packages-ensure rebuild?)
		   (if noupdate? nil
		     (doom-packages-update
		      (not update?)))
		   (doom-packages-purge purge? purge? purge? purge? purge?)
		   (if
		       (doom-profile-generate)
		       (progn
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			 (run-hooks 'doom-after-sync-hook)))
		   (if
		       (or rebuild?
			   (not
			    (file-exists-p doom-cli-sync-info-file)))
		       (progn
			 (let
			     ((temp-file doom-cli-sync-info-file)
			      (temp-buffer
			       (generate-new-buffer " *temp file*" t)))
			   (unwind-protect
			       (prog1
				   (save-current-buffer
				     (set-buffer temp-buffer)
				     (prin1
				      (cons emacs-version
					    (doom-sync--system-hash))
				      (current-buffer)))
				 (save-current-buffer
				   (set-buffer temp-buffer)
				   (write-region nil nil temp-file nil 0)))
			     (and
			      (buffer-name temp-buffer)
			      (kill-buffer temp-buffer))))))
		   t))
	     (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)))))
      (context . #s(doom-cli-context
		    (26387 63354 473960 173000)
		    8602 0
		    (90 . 8)
		    nil nil "doom" nil nil
		    ("doom" "profiles" "sync")
		    nil
		    ("sync")
		    (("--reload" . "--reload")
		     ("--aot")
		     ("-B")
		     ("--rebuild")
		     ("-b")
		     ("--jobs")
		     ("-j")
		     ("--gc")
		     ("-U")
		     ("-u")
		     ("-e")
		     ("--eval")
		     ("-E")
		     ("--strict-load")
		     ("--load")
		     ("-L")
		     ("--color")
		     ("--benchmark")
		     ("--profile")
		     ("--pager")
		     ("--emacsdir")
		     ("--doomdir")
		     ("--verbose")
		     ("-v")
		     ("--debug")
		     ("-D")
		     ("--force")
		     ("-!"))
		    ((t)
		     (("doom" "profiles" "sync")
		      "--reload")
		     (("doom" "profiles")
		      "sync" "--reload")
		     (("doom")
		      "profiles" "sync" "--reload"))
		    #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
      (aot?)
      (nobuild?)
      (rebuild?)
      (jobs)
      (purge?)
      (noupdate?)
      (update?)
      (noenvvar?)))
  (tail
   (#s(doom-cli
       ("doom" "sync")
       nil
       (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add, remove, or modify `package!' blocks to your config,\n  3. Add, remove, or modify autoloaded functions in module autoloaded files,\n  4. Update Doom manually (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. Up or downgrade Emacs itself (e.g. 29.1 -> 29.4).\n\nSync'ing ensures that unneeded packages are removed, needed packages are\ninstalled, autoloads files are up-to-date, and no byte-compiled files have gone\nstale.")
	("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined).\n--aot\n  Will only perform AOT native-compilation for packages updated/installed\n  during the execution of this command. Use --rebuild as well to do so for all\n  packages."))
       nil nil
       (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
			   ("-e")
			   nil nil)
	  #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
			     ("-u")
			     nil nil)
	  #s(doom-cli-option noupdate? "Don't update any packages" nil nil
			     ("-U")
			     nil nil)
	  #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
			     ("--gc")
			     nil nil)
	  #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
			     ("-j" "--jobs")
			     (num)
			     nil)
	  #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
			     ("-b" "--rebuild")
			     nil nil)
	  #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
			     ("-B")
			     nil nil)
	  #s(doom-cli-option aot? "Natively compile packages ahead-of-time (if available)" nil nil
			     ("--aot")
			     nil nil))
       ((&context context))
       (:benchmark t :prefix
		   (doom)
		   :group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
       (closure
	   (t)
	   (cli alist)
	 (let
	     ((noenvvar?
	       (cdr
		(assq 'noenvvar? alist)))
	      (update?
	       (cdr
		(assq 'update? alist)))
	      (noupdate?
	       (cdr
		(assq 'noupdate? alist)))
	      (purge?
	       (cdr
		(assq 'purge? alist)))
	      (jobs
	       (cdr
		(assq 'jobs alist)))
	      (rebuild?
	       (cdr
		(assq 'rebuild? alist)))
	      (nobuild?
	       (cdr
		(assq 'nobuild? alist)))
	      (aot?
	       (cdr
		(assq 'aot? alist)))
	      (context
	       (cdr
		(assq 'context alist))))
	   (if
	       (doom-profiles-bootloadable-p)
	       (progn
		 (call!
		  '(profiles sync "--reload"))))
	   (if aot?
	       (progn
		 (progn
		   (eval-after-load 'straight
		     #'(lambda nil
			 (setq straight--native-comp-available t))))))
	   (if jobs
	       (progn
		 (setq native-comp-async-jobs-number
		       (truncate jobs))))
	   (run-hooks 'doom-before-sync-hook)
	   (add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'item "Using Emacs %s @ %s")
	     emacs-version
	     (doom-print--class 'path invocation-directory invocation-name)))
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'start "Synchronizing %S profile...")
	     (or
	      (car doom-profile)
	      "default")))
	   (unwind-protect
	       (progn
		 (let
		     ((doom-print-level
		       (or nil doom-print-level))
		      (doom-print-indent
		       (+
			(if t
			    (or nil doom-print-indent-increment)
			  0)
			doom-print-indent)))
		   (let
		       ((x0
			 (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			(to-rebuild nil))
		     (progn
		       (ignore
			(consp x0))
		       (let*
			   ((x54
			     (car-safe x0))
			    (x55
			     (cdr-safe x0)))
			 (let
			     ((old-version x54)
			      (hash x55))
			   (progn
			     (if
				 (and old-version
				      (not
				       (equal old-version emacs-version)))
				 (progn
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
				     old-version emacs-version))
				   (setq to-rebuild t)))
			     (if
				 (and
				  (stringp hash)
				  (not
				   (equal hash
					  (doom-sync--system-hash))))
				 (progn
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'warn "Your system has changed since last sync")))
				   (setq to-rebuild t)))
			     (if
				 (and to-rebuild
				      (not rebuild?)
				      (not
				       (progn
					 (or
					  (progn
					    (and
					     (memq
					      (type-of context)
					      cl-struct-doom-cli-context-tags)
					     t))
					  (signal 'wrong-type-argument
						  (list 'doom-cli-context context)))
					 (aref context 6))))
				 (progn
				   (cond
				    (nobuild?
				     (doom-print
				      (doom-print--format
				       (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
				    ((doom-cli-context-get context 'upgrading)
				     (doom-print
				      (doom-print--format
				       (doom-print--class 'warn "Packages will be rebuilt")))
				     (setq rebuild? t))
				    ((y-or-n-p
				      (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
				     (setq rebuild? t))
				    ((exit! 0))))))))))
		   (if
		       (and
			(not noenvvar?)
			(file-exists-p doom-env-file))
		       (progn
			 (call!
			  '(env))))
		   (doom-packages-ensure rebuild?)
		   (if noupdate? nil
		     (doom-packages-update
		      (not update?)))
		   (doom-packages-purge purge? purge? purge? purge? purge?)
		   (if
		       (doom-profile-generate)
		       (progn
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			 (run-hooks 'doom-after-sync-hook)))
		   (if
		       (or rebuild?
			   (not
			    (file-exists-p doom-cli-sync-info-file)))
		       (progn
			 (let
			     ((temp-file doom-cli-sync-info-file)
			      (temp-buffer
			       (generate-new-buffer " *temp file*" t)))
			   (unwind-protect
			       (prog1
				   (save-current-buffer
				     (set-buffer temp-buffer)
				     (prin1
				      (cons emacs-version
					    (doom-sync--system-hash))
				      (current-buffer)))
				 (save-current-buffer
				   (set-buffer temp-buffer)
				   (write-region nil nil temp-file nil 0)))
			     (and
			      (buffer-name temp-buffer)
			      (kill-buffer temp-buffer))))))
		   t))
	     (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)))))
      (context . #s(doom-cli-context
		    (26387 63354 473960 173000)
		    8602 0
		    (90 . 8)
		    nil nil "doom" nil nil
		    ("doom" "profiles" "sync")
		    nil
		    ("sync")
		    (("--reload" . "--reload")
		     ("--aot")
		     ("-B")
		     ("--rebuild")
		     ("-b")
		     ("--jobs")
		     ("-j")
		     ("--gc")
		     ("-U")
		     ("-u")
		     ("-e")
		     ("--eval")
		     ("-E")
		     ("--strict-load")
		     ("--load")
		     ("-L")
		     ("--color")
		     ("--benchmark")
		     ("--profile")
		     ("--pager")
		     ("--emacsdir")
		     ("--doomdir")
		     ("--verbose")
		     ("-v")
		     ("--debug")
		     ("-D")
		     ("--force")
		     ("-!"))
		    ((t)
		     (("doom" "profiles" "sync")
		      "--reload")
		     (("doom" "profiles")
		      "sync" "--reload")
		     (("doom")
		      "profiles" "sync" "--reload"))
		    #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
      (aot?)
      (nobuild?)
      (rebuild?)
      (jobs)
      (purge?)
      (noupdate?)
      (update?)
      (noenvvar?)))))

;;;; 34
((let
     ((seen
       '(t))
      runners)
   (let
       ((tail
	 (doom-cli-find command
			(progn
			  (or
			   (progn
			     (and
			      (memq
			       (type-of cli)
			       cl-struct-doom-cli-tags)
			      t))
			   (signal 'wrong-type-argument
				   (list 'doom-cli cli)))
			  (aref cli 2)))))
     (while tail
       (let
	   ((cli
	     (car tail)))
	 (setq runners
	       (cons
		(cons
		 (doom-cli-get cli)
		 (doom-cli--bindings cli context seen))
		runners))
	 (setq tail
	       (cdr tail)))))
   (let
       ((tail
	 (nreverse runners)))
     (while tail
       (let
	   ((x15
	     (car tail)))
	 (progn
	   (ignore
	    (consp x15))
	   (let*
	       ((x16
		 (car-safe x15))
		(x17
		 (cdr-safe x15)))
	     (let
		 ((cli x16)
		  (bindings x17))
	       (doom-cli-execute cli bindings))))
	 (setq tail
	       (cdr tail)))))
   context)
 ((context . #s(doom-cli-context
		(26387 63354 473960 173000)
		8602 0
		(90 . 8)
		nil nil "doom" nil nil
		("doom" "profiles" "sync")
		nil
		("sync")
		(("--reload" . "--reload")
		 ("--aot")
		 ("-B")
		 ("--rebuild")
		 ("-b")
		 ("--jobs")
		 ("-j")
		 ("--gc")
		 ("-U")
		 ("-u")
		 ("-e")
		 ("--eval")
		 ("-E")
		 ("--strict-load")
		 ("--load")
		 ("-L")
		 ("--color")
		 ("--benchmark")
		 ("--profile")
		 ("--pager")
		 ("--emacsdir")
		 ("--doomdir")
		 ("--verbose")
		 ("-v")
		 ("--debug")
		 ("-D")
		 ("--force")
		 ("-!"))
		((t)
		 (("doom" "profiles" "sync")
		  "--reload")
		 (("doom" "profiles")
		  "sync" "--reload")
		 (("doom")
		  "profiles" "sync" "--reload"))
		#<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (command "doom" "sync")
  (cli . #s(doom-cli
	    ("doom" "sync")
	    nil
	    (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	     ("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add, remove, or modify `package!' blocks to your config,\n  3. Add, remove, or modify autoloaded functions in module autoloaded files,\n  4. Update Doom manually (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. Up or downgrade Emacs itself (e.g. 29.1 -> 29.4).\n\nSync'ing ensures that unneeded packages are removed, needed packages are\ninstalled, autoloads files are up-to-date, and no byte-compiled files have gone\nstale.")
	     ("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined).\n--aot\n  Will only perform AOT native-compilation for packages updated/installed\n  during the execution of this command. Use --rebuild as well to do so for all\n  packages."))
	    nil nil
	    (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
				("-e")
				nil nil)
	       #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
				  ("-u")
				  nil nil)
	       #s(doom-cli-option noupdate? "Don't update any packages" nil nil
				  ("-U")
				  nil nil)
	       #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
				  ("--gc")
				  nil nil)
	       #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
				  ("-j" "--jobs")
				  (num)
				  nil)
	       #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
				  ("-b" "--rebuild")
				  nil nil)
	       #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
				  ("-B")
				  nil nil)
	       #s(doom-cli-option aot? "Natively compile packages ahead-of-time (if available)" nil nil
				  ("--aot")
				  nil nil))
	    ((&context context))
	    (:benchmark t :prefix
			(doom)
			:group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
	    (closure
		(t)
		(cli alist)
	      (let
		  ((noenvvar?
		    (cdr
		     (assq 'noenvvar? alist)))
		   (update?
		    (cdr
		     (assq 'update? alist)))
		   (noupdate?
		    (cdr
		     (assq 'noupdate? alist)))
		   (purge?
		    (cdr
		     (assq 'purge? alist)))
		   (jobs
		    (cdr
		     (assq 'jobs alist)))
		   (rebuild?
		    (cdr
		     (assq 'rebuild? alist)))
		   (nobuild?
		    (cdr
		     (assq 'nobuild? alist)))
		   (aot?
		    (cdr
		     (assq 'aot? alist)))
		   (context
		    (cdr
		     (assq 'context alist))))
		(if
		    (doom-profiles-bootloadable-p)
		    (progn
		      (call!
		       '(profiles sync "--reload"))))
		(if aot?
		    (progn
		      (progn
			(eval-after-load 'straight
			  #'(lambda nil
			      (setq straight--native-comp-available t))))))
		(if jobs
		    (progn
		      (setq native-comp-async-jobs-number
			    (truncate jobs))))
		(run-hooks 'doom-before-sync-hook)
		(add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
		(doom-print
		 (doom-print--format
		  (doom-print--class 'item "Using Emacs %s @ %s")
		  emacs-version
		  (doom-print--class 'path invocation-directory invocation-name)))
		(doom-print
		 (doom-print--format
		  (doom-print--class 'start "Synchronizing %S profile...")
		  (or
		   (car doom-profile)
		   "default")))
		(unwind-protect
		    (progn
		      (let
			  ((doom-print-level
			    (or nil doom-print-level))
			   (doom-print-indent
			    (+
			     (if t
				 (or nil doom-print-indent-increment)
			       0)
			     doom-print-indent)))
			(let
			    ((x0
			      (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			     (to-rebuild nil))
			  (progn
			    (ignore
			     (consp x0))
			    (let*
				((x54
				  (car-safe x0))
				 (x55
				  (cdr-safe x0)))
			      (let
				  ((old-version x54)
				   (hash x55))
				(progn
				  (if
				      (and old-version
					   (not
					    (equal old-version emacs-version)))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
					  old-version emacs-version))
					(setq to-rebuild t)))
				  (if
				      (and
				       (stringp hash)
				       (not
					(equal hash
					       (doom-sync--system-hash))))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Your system has changed since last sync")))
					(setq to-rebuild t)))
				  (if
				      (and to-rebuild
					   (not rebuild?)
					   (not
					    (progn
					      (or
					       (progn
						 (and
						  (memq
						   (type-of context)
						   cl-struct-doom-cli-context-tags)
						  t))
					       (signal 'wrong-type-argument
						       (list 'doom-cli-context context)))
					      (aref context 6))))
				      (progn
					(cond
					 (nobuild?
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
					 ((doom-cli-context-get context 'upgrading)
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages will be rebuilt")))
					  (setq rebuild? t))
					 ((y-or-n-p
					   (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
					  (setq rebuild? t))
					 ((exit! 0))))))))))
			(if
			    (and
			     (not noenvvar?)
			     (file-exists-p doom-env-file))
			    (progn
			      (call!
			       '(env))))
			(doom-packages-ensure rebuild?)
			(if noupdate? nil
			  (doom-packages-update
			   (not update?)))
			(doom-packages-purge purge? purge? purge? purge? purge?)
			(if
			    (doom-profile-generate)
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			      (run-hooks 'doom-after-sync-hook)))
			(if
			    (or rebuild?
				(not
				 (file-exists-p doom-cli-sync-info-file)))
			    (progn
			      (let
				  ((temp-file doom-cli-sync-info-file)
				   (temp-buffer
				    (generate-new-buffer " *temp file*" t)))
				(unwind-protect
				    (prog1
					(save-current-buffer
					  (set-buffer temp-buffer)
					  (prin1
					   (cons emacs-version
						 (doom-sync--system-hash))
					   (current-buffer)))
				      (save-current-buffer
					(set-buffer temp-buffer)
					(write-region nil nil temp-file nil 0)))
				  (and
				   (buffer-name temp-buffer)
				   (kill-buffer temp-buffer))))))
			t))
		  (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h))))))
  (prefix . "doom")
  (seen t)
  (runners
   (#s(doom-cli
       ("doom" "sync")
       nil
       (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add, remove, or modify `package!' blocks to your config,\n  3. Add, remove, or modify autoloaded functions in module autoloaded files,\n  4. Update Doom manually (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. Up or downgrade Emacs itself (e.g. 29.1 -> 29.4).\n\nSync'ing ensures that unneeded packages are removed, needed packages are\ninstalled, autoloads files are up-to-date, and no byte-compiled files have gone\nstale.")
	("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined).\n--aot\n  Will only perform AOT native-compilation for packages updated/installed\n  during the execution of this command. Use --rebuild as well to do so for all\n  packages."))
       nil nil
       (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
			   ("-e")
			   nil nil)
	  #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
			     ("-u")
			     nil nil)
	  #s(doom-cli-option noupdate? "Don't update any packages" nil nil
			     ("-U")
			     nil nil)
	  #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
			     ("--gc")
			     nil nil)
	  #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
			     ("-j" "--jobs")
			     (num)
			     nil)
	  #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
			     ("-b" "--rebuild")
			     nil nil)
	  #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
			     ("-B")
			     nil nil)
	  #s(doom-cli-option aot? "Natively compile packages ahead-of-time (if available)" nil nil
			     ("--aot")
			     nil nil))
       ((&context context))
       (:benchmark t :prefix
		   (doom)
		   :group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
       (closure
	   (t)
	   (cli alist)
	 (let
	     ((noenvvar?
	       (cdr
		(assq 'noenvvar? alist)))
	      (update?
	       (cdr
		(assq 'update? alist)))
	      (noupdate?
	       (cdr
		(assq 'noupdate? alist)))
	      (purge?
	       (cdr
		(assq 'purge? alist)))
	      (jobs
	       (cdr
		(assq 'jobs alist)))
	      (rebuild?
	       (cdr
		(assq 'rebuild? alist)))
	      (nobuild?
	       (cdr
		(assq 'nobuild? alist)))
	      (aot?
	       (cdr
		(assq 'aot? alist)))
	      (context
	       (cdr
		(assq 'context alist))))
	   (if
	       (doom-profiles-bootloadable-p)
	       (progn
		 (call!
		  '(profiles sync "--reload"))))
	   (if aot?
	       (progn
		 (progn
		   (eval-after-load 'straight
		     #'(lambda nil
			 (setq straight--native-comp-available t))))))
	   (if jobs
	       (progn
		 (setq native-comp-async-jobs-number
		       (truncate jobs))))
	   (run-hooks 'doom-before-sync-hook)
	   (add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'item "Using Emacs %s @ %s")
	     emacs-version
	     (doom-print--class 'path invocation-directory invocation-name)))
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'start "Synchronizing %S profile...")
	     (or
	      (car doom-profile)
	      "default")))
	   (unwind-protect
	       (progn
		 (let
		     ((doom-print-level
		       (or nil doom-print-level))
		      (doom-print-indent
		       (+
			(if t
			    (or nil doom-print-indent-increment)
			  0)
			doom-print-indent)))
		   (let
		       ((x0
			 (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			(to-rebuild nil))
		     (progn
		       (ignore
			(consp x0))
		       (let*
			   ((x54
			     (car-safe x0))
			    (x55
			     (cdr-safe x0)))
			 (let
			     ((old-version x54)
			      (hash x55))
			   (progn
			     (if
				 (and old-version
				      (not
				       (equal old-version emacs-version)))
				 (progn
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
				     old-version emacs-version))
				   (setq to-rebuild t)))
			     (if
				 (and
				  (stringp hash)
				  (not
				   (equal hash
					  (doom-sync--system-hash))))
				 (progn
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'warn "Your system has changed since last sync")))
				   (setq to-rebuild t)))
			     (if
				 (and to-rebuild
				      (not rebuild?)
				      (not
				       (progn
					 (or
					  (progn
					    (and
					     (memq
					      (type-of context)
					      cl-struct-doom-cli-context-tags)
					     t))
					  (signal 'wrong-type-argument
						  (list 'doom-cli-context context)))
					 (aref context 6))))
				 (progn
				   (cond
				    (nobuild?
				     (doom-print
				      (doom-print--format
				       (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
				    ((doom-cli-context-get context 'upgrading)
				     (doom-print
				      (doom-print--format
				       (doom-print--class 'warn "Packages will be rebuilt")))
				     (setq rebuild? t))
				    ((y-or-n-p
				      (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
				     (setq rebuild? t))
				    ((exit! 0))))))))))
		   (if
		       (and
			(not noenvvar?)
			(file-exists-p doom-env-file))
		       (progn
			 (call!
			  '(env))))
		   (doom-packages-ensure rebuild?)
		   (if noupdate? nil
		     (doom-packages-update
		      (not update?)))
		   (doom-packages-purge purge? purge? purge? purge? purge?)
		   (if
		       (doom-profile-generate)
		       (progn
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			 (run-hooks 'doom-after-sync-hook)))
		   (if
		       (or rebuild?
			   (not
			    (file-exists-p doom-cli-sync-info-file)))
		       (progn
			 (let
			     ((temp-file doom-cli-sync-info-file)
			      (temp-buffer
			       (generate-new-buffer " *temp file*" t)))
			   (unwind-protect
			       (prog1
				   (save-current-buffer
				     (set-buffer temp-buffer)
				     (prin1
				      (cons emacs-version
					    (doom-sync--system-hash))
				      (current-buffer)))
				 (save-current-buffer
				   (set-buffer temp-buffer)
				   (write-region nil nil temp-file nil 0)))
			     (and
			      (buffer-name temp-buffer)
			      (kill-buffer temp-buffer))))))
		   t))
	     (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)))))
      (context . #s(doom-cli-context
		    (26387 63354 473960 173000)
		    8602 0
		    (90 . 8)
		    nil nil "doom" nil nil
		    ("doom" "profiles" "sync")
		    nil
		    ("sync")
		    (("--reload" . "--reload")
		     ("--aot")
		     ("-B")
		     ("--rebuild")
		     ("-b")
		     ("--jobs")
		     ("-j")
		     ("--gc")
		     ("-U")
		     ("-u")
		     ("-e")
		     ("--eval")
		     ("-E")
		     ("--strict-load")
		     ("--load")
		     ("-L")
		     ("--color")
		     ("--benchmark")
		     ("--profile")
		     ("--pager")
		     ("--emacsdir")
		     ("--doomdir")
		     ("--verbose")
		     ("-v")
		     ("--debug")
		     ("-D")
		     ("--force")
		     ("-!"))
		    ((t)
		     (("doom" "profiles" "sync")
		      "--reload")
		     (("doom" "profiles")
		      "sync" "--reload")
		     (("doom")
		      "profiles" "sync" "--reload"))
		    #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
      (aot?)
      (nobuild?)
      (rebuild?)
      (jobs)
      (purge?)
      (noupdate?)
      (update?)
      (noenvvar?)))))

;;;; 35
((cond
  ((null
    (or command
	(doom-cli-get
	 (list prefix)
	 t)))
   (signal 'doom-cli-invalid-prefix-error
	   (list prefix)))
  ((progn
     (or
      (progn
	(and
	 (memq
	  (type-of context)
	  cl-struct-doom-cli-context-tags)
	 t))
      (signal 'wrong-type-argument
	      (list 'doom-cli-context context)))
     (aref context 8))
   (let*
       ((val
	 (progn
	   (or
	    (progn
	      (and
	       (memq
		(type-of context)
		cl-struct-doom-cli-context-tags)
	       t))
	    (signal 'wrong-type-argument
		    (list 'doom-cli-context context)))
	   (aref context 8))))
     (cond
      ((equal val '"--version")
       (let nil
	 (doom-cli-call
	  (cons ':version
		(cdr command))
	  context)
	 t))
      ((member val
	       '("--help" "-?"))
       (let nil
	 (doom-cli-call
	  (cons ':help
		(cdr command))
	  context)
	 t))
      (t
       (let nil
	 (error "In meta mode with no destination!"))))))
  ((not
    (and cli
	 (let
	     ((cl-x
	       (doom-cli-get cli)))
	   (progn
	     (or
	      (progn
		(and
		 (memq
		  (type-of cl-x)
		  cl-struct-doom-cli-tags)
		 t))
	      (signal 'wrong-type-argument
		      (list 'doom-cli cl-x)))
	     (aref cl-x 9)))))
   (signal 'doom-cli-command-not-found-error
	   (append command
		   (alist-get t
			      (progn
				(or
				 (progn
				   (and
				    (memq
				     (type-of context)
				     cl-struct-doom-cli-context-tags)
				    t))
				 (signal 'wrong-type-argument
					 (list 'doom-cli-context context)))
				(aref context 14))))))
  ((let
       ((seen
	 '(t))
	runners)
     (let
	 ((tail
	   (doom-cli-find command
			  (progn
			    (or
			     (progn
			       (and
				(memq
				 (type-of cli)
				 cl-struct-doom-cli-tags)
				t))
			     (signal 'wrong-type-argument
				     (list 'doom-cli cli)))
			    (aref cli 2)))))
       (while tail
	 (let
	     ((cli
	       (car tail)))
	   (setq runners
		 (cons
		  (cons
		   (doom-cli-get cli)
		   (doom-cli--bindings cli context seen))
		  runners))
	   (setq tail
		 (cdr tail)))))
     (let
	 ((tail
	   (nreverse runners)))
       (while tail
	 (let
	     ((x15
	       (car tail)))
	   (progn
	     (ignore
	      (consp x15))
	     (let*
		 ((x16
		   (car-safe x15))
		  (x17
		   (cdr-safe x15)))
	       (let
		   ((cli x16)
		    (bindings x17))
		 (doom-cli-execute cli bindings))))
	   (setq tail
		 (cdr tail)))))
     context)))
 nil)

;;;; 36
((let*
     ((command
       (progn
	 (or
	  (progn
	    (and
	     (memq
	      (type-of context)
	      cl-struct-doom-cli-context-tags)
	     t))
	  (signal 'wrong-type-argument
		  (list 'doom-cli-context context)))
	 (aref context 10)))
      (cli
       (doom-cli-get command t))
      (prefix
       (progn
	 (or
	  (progn
	    (and
	     (memq
	      (type-of context)
	      cl-struct-doom-cli-context-tags)
	     t))
	  (signal 'wrong-type-argument
		  (list 'doom-cli-context context)))
	 (aref context 7))))
   (if
       (and
	(not doom-inhibit-log)
	(or
	 (not noninteractive)
	 (<= 2 doom-log-level)))
       (progn
	 (doom--log 2 "context-execute: %s"
		    (mapconcat #'doom-cli-command-string
			       (delq nil
				     (list
				      (car
				       (progn
					 (or
					  (progn
					    (and
					     (memq
					      (type-of context)
					      cl-struct-doom-cli-context-tags)
					     t))
					  (signal 'wrong-type-argument
						  (list 'doom-cli-context context)))
					 (aref context 11)))
				      command))
			       " -> "))))
   (cond
    ((null
      (or command
	  (doom-cli-get
	   (list prefix)
	   t)))
     (signal 'doom-cli-invalid-prefix-error
	     (list prefix)))
    ((progn
       (or
	(progn
	  (and
	   (memq
	    (type-of context)
	    cl-struct-doom-cli-context-tags)
	   t))
	(signal 'wrong-type-argument
		(list 'doom-cli-context context)))
       (aref context 8))
     (let*
	 ((val
	   (progn
	     (or
	      (progn
		(and
		 (memq
		  (type-of context)
		  cl-struct-doom-cli-context-tags)
		 t))
	      (signal 'wrong-type-argument
		      (list 'doom-cli-context context)))
	     (aref context 8))))
       (cond
	((equal val '"--version")
	 (let nil
	   (doom-cli-call
	    (cons ':version
		  (cdr command))
	    context)
	   t))
	((member val
		 '("--help" "-?"))
	 (let nil
	   (doom-cli-call
	    (cons ':help
		  (cdr command))
	    context)
	   t))
	(t
	 (let nil
	   (error "In meta mode with no destination!"))))))
    ((not
      (and cli
	   (let
	       ((cl-x
		 (doom-cli-get cli)))
	     (progn
	       (or
		(progn
		  (and
		   (memq
		    (type-of cl-x)
		    cl-struct-doom-cli-tags)
		   t))
		(signal 'wrong-type-argument
			(list 'doom-cli cl-x)))
	       (aref cl-x 9)))))
     (signal 'doom-cli-command-not-found-error
	     (append command
		     (alist-get t
				(progn
				  (or
				   (progn
				     (and
				      (memq
				       (type-of context)
				       cl-struct-doom-cli-context-tags)
				      t))
				   (signal 'wrong-type-argument
					   (list 'doom-cli-context context)))
				  (aref context 14))))))
    ((let
	 ((seen
	   '(t))
	  runners)
       (let
	   ((tail
	     (doom-cli-find command
			    (progn
			      (or
			       (progn
				 (and
				  (memq
				   (type-of cli)
				   cl-struct-doom-cli-tags)
				  t))
			       (signal 'wrong-type-argument
				       (list 'doom-cli cli)))
			      (aref cli 2)))))
	 (while tail
	   (let
	       ((cli
		 (car tail)))
	     (setq runners
		   (cons
		    (cons
		     (doom-cli-get cli)
		     (doom-cli--bindings cli context seen))
		    runners))
	     (setq tail
		   (cdr tail)))))
       (let
	   ((tail
	     (nreverse runners)))
	 (while tail
	   (let
	       ((x15
		 (car tail)))
	     (progn
	       (ignore
		(consp x15))
	       (let*
		   ((x16
		     (car-safe x15))
		    (x17
		     (cdr-safe x15)))
		 (let
		     ((cli x16)
		      (bindings x17))
		   (doom-cli-execute cli bindings))))
	     (setq tail
		   (cdr tail)))))
       context))))
 ((context . #s(doom-cli-context
		(26387 63354 473960 173000)
		8602 0
		(90 . 8)
		nil nil "doom" nil nil
		("doom" "profiles" "sync")
		nil
		("sync")
		(("--reload" . "--reload")
		 ("--aot")
		 ("-B")
		 ("--rebuild")
		 ("-b")
		 ("--jobs")
		 ("-j")
		 ("--gc")
		 ("-U")
		 ("-u")
		 ("-e")
		 ("--eval")
		 ("-E")
		 ("--strict-load")
		 ("--load")
		 ("-L")
		 ("--color")
		 ("--benchmark")
		 ("--profile")
		 ("--pager")
		 ("--emacsdir")
		 ("--doomdir")
		 ("--verbose")
		 ("-v")
		 ("--debug")
		 ("-D")
		 ("--force")
		 ("-!"))
		((t)
		 (("doom" "profiles" "sync")
		  "--reload")
		 (("doom" "profiles")
		  "sync" "--reload")
		 (("doom")
		  "profiles" "sync" "--reload"))
		#<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (command "doom" "sync")
  (cli . #s(doom-cli
	    ("doom" "sync")
	    nil
	    (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	     ("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add, remove, or modify `package!' blocks to your config,\n  3. Add, remove, or modify autoloaded functions in module autoloaded files,\n  4. Update Doom manually (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. Up or downgrade Emacs itself (e.g. 29.1 -> 29.4).\n\nSync'ing ensures that unneeded packages are removed, needed packages are\ninstalled, autoloads files are up-to-date, and no byte-compiled files have gone\nstale.")
	     ("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined).\n--aot\n  Will only perform AOT native-compilation for packages updated/installed\n  during the execution of this command. Use --rebuild as well to do so for all\n  packages."))
	    nil nil
	    (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
				("-e")
				nil nil)
	       #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
				  ("-u")
				  nil nil)
	       #s(doom-cli-option noupdate? "Don't update any packages" nil nil
				  ("-U")
				  nil nil)
	       #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
				  ("--gc")
				  nil nil)
	       #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
				  ("-j" "--jobs")
				  (num)
				  nil)
	       #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
				  ("-b" "--rebuild")
				  nil nil)
	       #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
				  ("-B")
				  nil nil)
	       #s(doom-cli-option aot? "Natively compile packages ahead-of-time (if available)" nil nil
				  ("--aot")
				  nil nil))
	    ((&context context))
	    (:benchmark t :prefix
			(doom)
			:group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
	    (closure
		(t)
		(cli alist)
	      (let
		  ((noenvvar?
		    (cdr
		     (assq 'noenvvar? alist)))
		   (update?
		    (cdr
		     (assq 'update? alist)))
		   (noupdate?
		    (cdr
		     (assq 'noupdate? alist)))
		   (purge?
		    (cdr
		     (assq 'purge? alist)))
		   (jobs
		    (cdr
		     (assq 'jobs alist)))
		   (rebuild?
		    (cdr
		     (assq 'rebuild? alist)))
		   (nobuild?
		    (cdr
		     (assq 'nobuild? alist)))
		   (aot?
		    (cdr
		     (assq 'aot? alist)))
		   (context
		    (cdr
		     (assq 'context alist))))
		(if
		    (doom-profiles-bootloadable-p)
		    (progn
		      (call!
		       '(profiles sync "--reload"))))
		(if aot?
		    (progn
		      (progn
			(eval-after-load 'straight
			  #'(lambda nil
			      (setq straight--native-comp-available t))))))
		(if jobs
		    (progn
		      (setq native-comp-async-jobs-number
			    (truncate jobs))))
		(run-hooks 'doom-before-sync-hook)
		(add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
		(doom-print
		 (doom-print--format
		  (doom-print--class 'item "Using Emacs %s @ %s")
		  emacs-version
		  (doom-print--class 'path invocation-directory invocation-name)))
		(doom-print
		 (doom-print--format
		  (doom-print--class 'start "Synchronizing %S profile...")
		  (or
		   (car doom-profile)
		   "default")))
		(unwind-protect
		    (progn
		      (let
			  ((doom-print-level
			    (or nil doom-print-level))
			   (doom-print-indent
			    (+
			     (if t
				 (or nil doom-print-indent-increment)
			       0)
			     doom-print-indent)))
			(let
			    ((x0
			      (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			     (to-rebuild nil))
			  (progn
			    (ignore
			     (consp x0))
			    (let*
				((x54
				  (car-safe x0))
				 (x55
				  (cdr-safe x0)))
			      (let
				  ((old-version x54)
				   (hash x55))
				(progn
				  (if
				      (and old-version
					   (not
					    (equal old-version emacs-version)))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
					  old-version emacs-version))
					(setq to-rebuild t)))
				  (if
				      (and
				       (stringp hash)
				       (not
					(equal hash
					       (doom-sync--system-hash))))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Your system has changed since last sync")))
					(setq to-rebuild t)))
				  (if
				      (and to-rebuild
					   (not rebuild?)
					   (not
					    (progn
					      (or
					       (progn
						 (and
						  (memq
						   (type-of context)
						   cl-struct-doom-cli-context-tags)
						  t))
					       (signal 'wrong-type-argument
						       (list 'doom-cli-context context)))
					      (aref context 6))))
				      (progn
					(cond
					 (nobuild?
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
					 ((doom-cli-context-get context 'upgrading)
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages will be rebuilt")))
					  (setq rebuild? t))
					 ((y-or-n-p
					   (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
					  (setq rebuild? t))
					 ((exit! 0))))))))))
			(if
			    (and
			     (not noenvvar?)
			     (file-exists-p doom-env-file))
			    (progn
			      (call!
			       '(env))))
			(doom-packages-ensure rebuild?)
			(if noupdate? nil
			  (doom-packages-update
			   (not update?)))
			(doom-packages-purge purge? purge? purge? purge? purge?)
			(if
			    (doom-profile-generate)
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			      (run-hooks 'doom-after-sync-hook)))
			(if
			    (or rebuild?
				(not
				 (file-exists-p doom-cli-sync-info-file)))
			    (progn
			      (let
				  ((temp-file doom-cli-sync-info-file)
				   (temp-buffer
				    (generate-new-buffer " *temp file*" t)))
				(unwind-protect
				    (prog1
					(save-current-buffer
					  (set-buffer temp-buffer)
					  (prin1
					   (cons emacs-version
						 (doom-sync--system-hash))
					   (current-buffer)))
				      (save-current-buffer
					(set-buffer temp-buffer)
					(write-region nil nil temp-file nil 0)))
				  (and
				   (buffer-name temp-buffer)
				   (kill-buffer temp-buffer))))))
			t))
		  (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h))))))
  (prefix . "doom")))

;;;; 37
((doom-cli-context-execute #s(doom-cli-context
			      (26387 63354 473960 173000)
			      8602 0
			      (90 . 8)
			      nil nil "doom" nil nil
			      ("doom" "profiles" "sync")
			      nil
			      ("sync")
			      (("--reload" . "--reload")
			       ("--aot")
			       ("-B")
			       ("--rebuild")
			       ("-b")
			       ("--jobs")
			       ("-j")
			       ("--gc")
			       ("-U")
			       ("-u")
			       ("-e")
			       ("--eval")
			       ("-E")
			       ("--strict-load")
			       ("--load")
			       ("-L")
			       ("--color")
			       ("--benchmark")
			       ("--profile")
			       ("--pager")
			       ("--emacsdir")
			       ("--doomdir")
			       ("--verbose")
			       ("-v")
			       ("--debug")
			       ("-D")
			       ("--force")
			       ("-!"))
			      ((t)
			       (("doom" "profiles" "sync")
				"--reload")
			       (("doom" "profiles")
				"sync" "--reload")
			       (("doom")
				"profiles" "sync" "--reload"))
			      #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
 ((context . #s(doom-cli-context
		(26387 63354 473960 173000)
		8602 0
		(90 . 8)
		nil nil "doom" nil nil
		("doom" "profiles" "sync")
		nil
		("sync")
		(("--reload" . "--reload")
		 ("--aot")
		 ("-B")
		 ("--rebuild")
		 ("-b")
		 ("--jobs")
		 ("-j")
		 ("--gc")
		 ("-U")
		 ("-u")
		 ("-e")
		 ("--eval")
		 ("-E")
		 ("--strict-load")
		 ("--load")
		 ("-L")
		 ("--color")
		 ("--benchmark")
		 ("--profile")
		 ("--pager")
		 ("--emacsdir")
		 ("--doomdir")
		 ("--verbose")
		 ("-v")
		 ("--debug")
		 ("-D")
		 ("--force")
		 ("-!"))
		((t)
		 (("doom" "profiles" "sync")
		  "--reload")
		 (("doom" "profiles")
		  "sync" "--reload")
		 (("doom")
		  "profiles" "sync" "--reload"))
		#<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))))

;;;; 38
((let
     ((result
       (doom-cli-context-execute context)))
   (run-hook-with-args 'doom-cli-after-run-functions context result))
 nil)

;;;; 39
((let*
     ((args
       (cons
	(if
	    (getenv "__DOOMDUMP")
	    :dump prefix)
	args))
      (context
       (doom-cli-context-restore
	(getenv "__DOOMCONTEXT")
	context))
      (context
       (doom-cli-context-parse args context)))
   (run-hook-with-args 'doom-cli-before-run-functions context)
   (let
       ((result
	 (doom-cli-context-execute context)))
     (run-hook-with-args 'doom-cli-after-run-functions context result))
   0)
 ((prefix . "doom")
  (args
   ("sync"))
  (args "sync")
  (context . #s(doom-cli-context
		(26387 63354 473960 173000)
		8602 0
		(90 . 8)
		nil nil "doom" nil nil
		("doom" "profiles" "sync")
		nil
		("sync")
		(("--reload" . "--reload")
		 ("--aot")
		 ("-B")
		 ("--rebuild")
		 ("-b")
		 ("--jobs")
		 ("-j")
		 ("--gc")
		 ("-U")
		 ("-u")
		 ("-e")
		 ("--eval")
		 ("-E")
		 ("--strict-load")
		 ("--load")
		 ("-L")
		 ("--color")
		 ("--benchmark")
		 ("--profile")
		 ("--pager")
		 ("--emacsdir")
		 ("--doomdir")
		 ("--verbose")
		 ("-v")
		 ("--debug")
		 ("-D")
		 ("--force")
		 ("-!"))
		((t)
		 (("doom" "profiles" "sync")
		  "--reload")
		 (("doom" "profiles")
		  "sync" "--reload")
		 (("doom")
		  "profiles" "sync" "--reload"))
		#<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (write-logs-fn .
		 #[128 "\302\301\303\300\4\"\"\207"
		       [(#s(doom-cli-context
			    (26387 63354 473960 173000)
			    8602 0
			    (90 . 8)
			    nil nil "doom" nil nil
			    ("doom" "profiles" "sync")
			    nil
			    ("sync")
			    (("--reload" . "--reload")
			     ("--aot")
			     ("-B")
			     ("--rebuild")
			     ("-b")
			     ("--jobs")
			     ("-j")
			     ("--gc")
			     ("-U")
			     ("-u")
			     ("-e")
			     ("--eval")
			     ("-E")
			     ("--strict-load")
			     ("--load")
			     ("-L")
			     ("--color")
			     ("--benchmark")
			     ("--profile")
			     ("--pager")
			     ("--emacsdir")
			     ("--doomdir")
			     ("--verbose")
			     ("-v")
			     ("--debug")
			     ("-D")
			     ("--force")
			     ("-!"))
			    ((t)
			     (("doom" "profiles" "sync")
			      "--reload")
			     (("doom" "profiles")
			      "sync" "--reload")
			     (("doom")
			      "profiles" "sync" "--reload"))
			    #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
			doom-cli--output-write-logs-h apply append]
		       6 "\n\n(fn &rest ARGS2)"])
  (show-benchmark-fn .
		     #[128 "\302\301\303\300\4\"\"\207"
			   [(#s(doom-cli-context
				(26387 63354 473960 173000)
				8602 0
				(90 . 8)
				nil nil "doom" nil nil
				("doom" "profiles" "sync")
				nil
				("sync")
				(("--reload" . "--reload")
				 ("--aot")
				 ("-B")
				 ("--rebuild")
				 ("-b")
				 ("--jobs")
				 ("-j")
				 ("--gc")
				 ("-U")
				 ("-u")
				 ("-e")
				 ("--eval")
				 ("-E")
				 ("--strict-load")
				 ("--load")
				 ("-L")
				 ("--color")
				 ("--benchmark")
				 ("--profile")
				 ("--pager")
				 ("--emacsdir")
				 ("--doomdir")
				 ("--verbose")
				 ("-v")
				 ("--debug")
				 ("-D")
				 ("--force")
				 ("-!"))
				((t)
				 (("doom" "profiles" "sync")
				  "--reload")
				 (("doom" "profiles")
				  "sync" "--reload")
				 (("doom")
				  "profiles" "sync" "--reload"))
				#<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
			    doom-cli--output-benchmark-h apply append]
			   6 "\n\n(fn &rest ARGS2)"])
  (doomctxt . #s(doom-cli-context
		 (26387 63354 473960 173000)
		 8602 0
		 (90 . 8)
		 nil nil "doom" nil nil
		 ("doom" "profiles" "sync")
		 nil
		 ("sync")
		 (("--reload" . "--reload")
		  ("--aot")
		  ("-B")
		  ("--rebuild")
		  ("-b")
		  ("--jobs")
		  ("-j")
		  ("--gc")
		  ("-U")
		  ("-u")
		  ("-e")
		  ("--eval")
		  ("-E")
		  ("--strict-load")
		  ("--load")
		  ("-L")
		  ("--color")
		  ("--benchmark")
		  ("--profile")
		  ("--pager")
		  ("--emacsdir")
		  ("--doomdir")
		  ("--verbose")
		  ("-v")
		  ("--debug")
		  ("-D")
		  ("--force")
		  ("-!"))
		 ((t)
		  (("doom" "profiles" "sync")
		   "--reload")
		  (("doom" "profiles")
		   "sync" "--reload")
		  (("doom")
		   "profiles" "sync" "--reload"))
		 #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (streamspec
   (>= notice #<buffer  *doom-cli stdout*>)
   (t . #<buffer  *doom-cli stderr*>))
  (vnew closure
	((streams
	  (#[128 "\302\301\303\300\4\"\"\207"
		 [(0 2)
		  >= apply append]
		 6 "\n\n(fn &rest ARGS2)"]
	   . #<buffer  *doom-cli stdout*>)
	  (t . #<buffer  *doom-cli stderr*>))
	 (old . #<subr message>)
	 (level . debug))
	(message &rest args)
	(if message
	    (progn
	      (let
		  ((output
		    (apply #'doom-print--format message args)))
		(if
		    (<= doom-print--output-depth 1)
		    (doom-print output :level level :stream t)
		  (let
		      ((doom-print--output-depth
			(1- doom-print--output-depth)))
		    (funcall old "%s" output)))
		(let
		    ((tail streams))
		  (while tail
		    (let
			((stream
			  (car tail)))
		      (if
			  (or
			   (eq
			    (car stream)
			    t)
			   (funcall
			    (car stream)))
			  (progn
			    (doom-print output :stream
					(cdr stream))))
		      (setq tail
			    (cdr tail))))))
	      message)))
  (old . #<subr message>)
  (args "doom" "sync")
  (context . #s(doom-cli-context
		(26387 63354 473960 173000)
		8602 0
		(90 . 8)
		nil nil "doom" nil nil
		("doom" "profiles" "sync")
		nil
		("sync")
		(("--reload" . "--reload")
		 ("--aot")
		 ("-B")
		 ("--rebuild")
		 ("-b")
		 ("--jobs")
		 ("-j")
		 ("--gc")
		 ("-U")
		 ("-u")
		 ("-e")
		 ("--eval")
		 ("-E")
		 ("--strict-load")
		 ("--load")
		 ("-L")
		 ("--color")
		 ("--benchmark")
		 ("--profile")
		 ("--pager")
		 ("--emacsdir")
		 ("--doomdir")
		 ("--verbose")
		 ("-v")
		 ("--debug")
		 ("-D")
		 ("--force")
		 ("-!"))
		((t)
		 (("doom" "profiles" "sync")
		  "--reload")
		 (("doom" "profiles")
		  "sync" "--reload")
		 (("doom")
		  "profiles" "sync" "--reload"))
		#<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (context . #s(doom-cli-context
		(26387 63354 473960 173000)
		8602 0
		(90 . 8)
		nil nil "doom" nil nil
		("doom" "profiles" "sync")
		nil
		("sync")
		(("--reload" . "--reload")
		 ("--aot")
		 ("-B")
		 ("--rebuild")
		 ("-b")
		 ("--jobs")
		 ("-j")
		 ("--gc")
		 ("-U")
		 ("-u")
		 ("-e")
		 ("--eval")
		 ("-E")
		 ("--strict-load")
		 ("--load")
		 ("-L")
		 ("--color")
		 ("--benchmark")
		 ("--profile")
		 ("--pager")
		 ("--emacsdir")
		 ("--doomdir")
		 ("--verbose")
		 ("-v")
		 ("--debug")
		 ("-D")
		 ("--force")
		 ("-!"))
		((t)
		 (("doom" "profiles" "sync")
		  "--reload")
		 (("doom" "profiles")
		  "sync" "--reload")
		 (("doom")
		  "profiles" "sync" "--reload"))
		#<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))))

;;;; 40
((condition-case e
     (let*
	 ((args
	   (cons
	    (if
		(getenv "__DOOMDUMP")
		:dump prefix)
	    args))
	  (context
	   (doom-cli-context-restore
	    (getenv "__DOOMCONTEXT")
	    context))
	  (context
	   (doom-cli-context-parse args context)))
       (run-hook-with-args 'doom-cli-before-run-functions context)
       (let
	   ((result
	     (doom-cli-context-execute context)))
	 (run-hook-with-args 'doom-cli-after-run-functions context result))
       0)
   (doom-cli-wrong-number-of-arguments-error
    (let*
	((val
	  (cdr e)))
      (progn
	(ignore
	 (consp val))
	(let*
	    ((x27
	      (car-safe val))
	     (x28
	      (cdr-safe val)))
	  (progn
	    (ignore
	     (consp x28))
	    (let*
		((x29
		  (car-safe x28))
		 (x30
		  (cdr-safe x28)))
	      (progn
		(ignore
		 (consp x30))
		(let*
		    ((x31
		      (car-safe x30))
		     (x32
		      (cdr-safe x30)))
		  (progn
		    (ignore
		     (consp x32))
		    (let*
			((x33
			  (car-safe x32))
			 (x34
			  (cdr-safe x32)))
		      (progn
			(ignore
			 (consp x34))
			(let*
			    ((x35
			      (car-safe x34))
			     (x36
			      (cdr-safe x34)))
			  (progn
			    (ignore
			     (null x36))
			    (let
				((command x27)
				 (flag x29)
				 (args x31)
				 (min x33)
				 (max x35))
			      (progn
				(doom-print
				 (doom-print--format
				  (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
				  (or flag
				      (doom-cli-command-string
				       (if
					   (keywordp
					    (car command))
					   command
					 (cdr command))))
				  (if
				      (or
				       (= min max)
				       (= max most-positive-fixnum))
				      min
				    (format "%d-%d" min max))
				  (if
				      (or
				       (= min 0)
				       (> min 1))
				      "s" "")
				  (length args)))
				(doom-cli-call
				 (cons ':help
				       (cons "--synopsis"
					     (cons "--postamble"
						   (cdr
						    (doom-cli--command context)))))
				 context e)))))))))))))))
    5)
   (doom-cli-unrecognized-option-error
    (doom-print
     (doom-print--format
      (doom-print--style 'red "Error: unknown option %s")
      (car
       (cdr e))))
    (doom-cli-call
     (cons ':help
	   (cons "--synopsis"
		 (cons "--postamble"
		       (cdr
			(doom-cli--command context)))))
     context e)
    5)
   (doom-cli-invalid-option-error
    (let*
	((val
	  (cdr e)))
      (progn
	(ignore
	 (consp val))
	(let*
	    ((x37
	      (car-safe val))
	     (x38
	      (cdr-safe val)))
	  (progn
	    (ignore
	     (consp x38))
	    (let*
		((x39
		  (car-safe x38))
		 (x40
		  (cdr-safe x38)))
	      (progn
		(ignore
		 (consp x40))
		(let*
		    ((x41
		      (car-safe x40))
		     (x42
		      (cdr-safe x40)))
		  (progn
		    (ignore
		     (consp x42))
		    (let*
			((x43
			  (car-safe x42))
			 (x44
			  (cdr-safe x42)))
		      (progn
			(ignore
			 (null x44))
			(let
			    ((types x37)
			     (option x39)
			     (value x41)
			     (errors x43))
			  (progn
			    (doom-print
			     (doom-print--format
			      (doom-print--style 'red "Error: %s received invalid value %S")
			      (string-join
			       (progn
				 (or
				  (progn
				    (and
				     (memq
				      (type-of option)
				      cl-struct-doom-cli-option-tags)
				     t))
				  (signal 'wrong-type-argument
					  (list 'doom-cli-option option)))
				 (aref option 5))
			       "/")
			      value))
			    (doom-print
			     (doom-print--format
			      (doom-print--style 'bold "\nValidation errors:")))
			    (let
				((tail errors))
			      (while tail
				(let
				    ((err
				      (car tail)))
				  (doom-print
				   (doom-print--format
				    (doom-print--class 'item "%s."
						       (doom-print--class 'fill err))))
				  (setq tail
					(cdr tail)))))))))))))))))
    (doom-cli-call
     (cons ':help
	   (cons "--postamble"
		 (cdr
		  (doom-cli--command context))))
     context e)
    5)
   (doom-cli-command-not-found-error
    (let*
	((command
	  (cdr e))
	 (cli
	  (doom-cli-get command)))
      (cond
       ((null cli)
	(doom-print
	 (doom-print--format
	  (doom-print--style 'red "Error: unrecognized command '%s'")
	  (doom-cli-command-string
	   (or
	    (cdr command)
	    command))))
	(doom-cli-call
	 (cons ':help
	       (cons "--similar"
		     (cons "--postamble"
			   (cdr command))))
	 context e))
       ((null
	 (progn
	   (or
	    (progn
	      (and
	       (memq
		(type-of cli)
		cl-struct-doom-cli-tags)
	       t))
	    (signal 'wrong-type-argument
		    (list 'doom-cli cli)))
	   (aref cli 9)))
	(doom-print
	 (doom-print--format
	  (doom-print--style 'red "Error: a subcommand is required")))
	(doom-cli-call
	 (cons ':help
	       (cons "--subcommands"
		     (cons "--postamble"
			   (cdr command))))
	 context e))))
    4)
   (doom-cli-invalid-prefix-error
    (let
	((prefix
	  (car
	   (cdr e))))
      (doom-print
       (doom-print--format
	(doom-print--style 'red "Error: `run!' called with invalid prefix %S")
	prefix))
      (let*
	  ((suggested
	    (and t
		 (let*
		     ((--cl-var-- t)
		      --cl-var--)
		   (catch '--cl-block---cl-finish----
		     (maphash
		      #'(lambda
			  (--cl-var-- cli)
			  (or
			   (if
			       (progn
				 (or
				  (progn
				    (and
				     (memq
				      (type-of cli)
				      cl-struct-doom-cli-tags)
				     t))
				  (signal 'wrong-type-argument
					  (list 'doom-cli cli)))
				 (aref cli 2))
			       t
			     (progn
			       (setq --cl-var--
				     (car
				      (progn
					(or
					 (progn
					   (and
					    (memq
					     (type-of cli)
					     cl-struct-doom-cli-tags)
					    t))
					 (signal 'wrong-type-argument
						 (list 'doom-cli cli)))
					(aref cli 1))))
			       (setq --cl-var-- nil)))
			   (throw '--cl-block---cl-finish---- nil)))
		      doom-cli--table))
		   --cl-var--))))
	(if suggested
	    (doom-print
	     (doom-print--format "Did you mean %S?" suggested))
	  (doom-print
	   (doom-print--format "There are no commands defined under %S." prefix)))))
    4)
   (user-error
    (doom-print
     (doom-print--format
      (doom-print--style 'red "Error: %s")
      (car
       (cdr e))))
    (doom-print
     (doom-print--format "\nAborting..."))
    3))
 nil)

;;;; 41
((catch 'exit
   (condition-case e
       (let*
	   ((args
	     (cons
	      (if
		  (getenv "__DOOMDUMP")
		  :dump prefix)
	      args))
	    (context
	     (doom-cli-context-restore
	      (getenv "__DOOMCONTEXT")
	      context))
	    (context
	     (doom-cli-context-parse args context)))
	 (run-hook-with-args 'doom-cli-before-run-functions context)
	 (let
	     ((result
	       (doom-cli-context-execute context)))
	   (run-hook-with-args 'doom-cli-after-run-functions context result))
	 0)
     (doom-cli-wrong-number-of-arguments-error
      (let*
	  ((val
	    (cdr e)))
	(progn
	  (ignore
	   (consp val))
	  (let*
	      ((x27
		(car-safe val))
	       (x28
		(cdr-safe val)))
	    (progn
	      (ignore
	       (consp x28))
	      (let*
		  ((x29
		    (car-safe x28))
		   (x30
		    (cdr-safe x28)))
		(progn
		  (ignore
		   (consp x30))
		  (let*
		      ((x31
			(car-safe x30))
		       (x32
			(cdr-safe x30)))
		    (progn
		      (ignore
		       (consp x32))
		      (let*
			  ((x33
			    (car-safe x32))
			   (x34
			    (cdr-safe x32)))
			(progn
			  (ignore
			   (consp x34))
			  (let*
			      ((x35
				(car-safe x34))
			       (x36
				(cdr-safe x34)))
			    (progn
			      (ignore
			       (null x36))
			      (let
				  ((command x27)
				   (flag x29)
				   (args x31)
				   (min x33)
				   (max x35))
				(progn
				  (doom-print
				   (doom-print--format
				    (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
				    (or flag
					(doom-cli-command-string
					 (if
					     (keywordp
					      (car command))
					     command
					   (cdr command))))
				    (if
					(or
					 (= min max)
					 (= max most-positive-fixnum))
					min
				      (format "%d-%d" min max))
				    (if
					(or
					 (= min 0)
					 (> min 1))
					"s" "")
				    (length args)))
				  (doom-cli-call
				   (cons ':help
					 (cons "--synopsis"
					       (cons "--postamble"
						     (cdr
						      (doom-cli--command context)))))
				   context e)))))))))))))))
      5)
     (doom-cli-unrecognized-option-error
      (doom-print
       (doom-print--format
	(doom-print--style 'red "Error: unknown option %s")
	(car
	 (cdr e))))
      (doom-cli-call
       (cons ':help
	     (cons "--synopsis"
		   (cons "--postamble"
			 (cdr
			  (doom-cli--command context)))))
       context e)
      5)
     (doom-cli-invalid-option-error
      (let*
	  ((val
	    (cdr e)))
	(progn
	  (ignore
	   (consp val))
	  (let*
	      ((x37
		(car-safe val))
	       (x38
		(cdr-safe val)))
	    (progn
	      (ignore
	       (consp x38))
	      (let*
		  ((x39
		    (car-safe x38))
		   (x40
		    (cdr-safe x38)))
		(progn
		  (ignore
		   (consp x40))
		  (let*
		      ((x41
			(car-safe x40))
		       (x42
			(cdr-safe x40)))
		    (progn
		      (ignore
		       (consp x42))
		      (let*
			  ((x43
			    (car-safe x42))
			   (x44
			    (cdr-safe x42)))
			(progn
			  (ignore
			   (null x44))
			  (let
			      ((types x37)
			       (option x39)
			       (value x41)
			       (errors x43))
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--style 'red "Error: %s received invalid value %S")
				(string-join
				 (progn
				   (or
				    (progn
				      (and
				       (memq
					(type-of option)
					cl-struct-doom-cli-option-tags)
				       t))
				    (signal 'wrong-type-argument
					    (list 'doom-cli-option option)))
				   (aref option 5))
				 "/")
				value))
			      (doom-print
			       (doom-print--format
				(doom-print--style 'bold "\nValidation errors:")))
			      (let
				  ((tail errors))
				(while tail
				  (let
				      ((err
					(car tail)))
				    (doom-print
				     (doom-print--format
				      (doom-print--class 'item "%s."
							 (doom-print--class 'fill err))))
				    (setq tail
					  (cdr tail)))))))))))))))))
      (doom-cli-call
       (cons ':help
	     (cons "--postamble"
		   (cdr
		    (doom-cli--command context))))
       context e)
      5)
     (doom-cli-command-not-found-error
      (let*
	  ((command
	    (cdr e))
	   (cli
	    (doom-cli-get command)))
	(cond
	 ((null cli)
	  (doom-print
	   (doom-print--format
	    (doom-print--style 'red "Error: unrecognized command '%s'")
	    (doom-cli-command-string
	     (or
	      (cdr command)
	      command))))
	  (doom-cli-call
	   (cons ':help
		 (cons "--similar"
		       (cons "--postamble"
			     (cdr command))))
	   context e))
	 ((null
	   (progn
	     (or
	      (progn
		(and
		 (memq
		  (type-of cli)
		  cl-struct-doom-cli-tags)
		 t))
	      (signal 'wrong-type-argument
		      (list 'doom-cli cli)))
	     (aref cli 9)))
	  (doom-print
	   (doom-print--format
	    (doom-print--style 'red "Error: a subcommand is required")))
	  (doom-cli-call
	   (cons ':help
		 (cons "--subcommands"
		       (cons "--postamble"
			     (cdr command))))
	   context e))))
      4)
     (doom-cli-invalid-prefix-error
      (let
	  ((prefix
	    (car
	     (cdr e))))
	(doom-print
	 (doom-print--format
	  (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
	  prefix))
	(let*
	    ((suggested
	      (and t
		   (let*
		       ((--cl-var-- t)
			--cl-var--)
		     (catch '--cl-block---cl-finish----
		       (maphash
			#'(lambda
			    (--cl-var-- cli)
			    (or
			     (if
				 (progn
				   (or
				    (progn
				      (and
				       (memq
					(type-of cli)
					cl-struct-doom-cli-tags)
				       t))
				    (signal 'wrong-type-argument
					    (list 'doom-cli cli)))
				   (aref cli 2))
				 t
			       (progn
				 (setq --cl-var--
				       (car
					(progn
					  (or
					   (progn
					     (and
					      (memq
					       (type-of cli)
					       cl-struct-doom-cli-tags)
					      t))
					   (signal 'wrong-type-argument
						   (list 'doom-cli cli)))
					  (aref cli 1))))
				 (setq --cl-var-- nil)))
			     (throw '--cl-block---cl-finish---- nil)))
			doom-cli--table))
		     --cl-var--))))
	  (if suggested
	      (doom-print
	       (doom-print--format "Did you mean %S?" suggested))
	    (doom-print
	     (doom-print--format "There are no commands defined under %S." prefix)))))
      4)
     (user-error
      (doom-print
       (doom-print--format
	(doom-print--style 'red "Error: %s")
	(car
	 (cdr e))))
      (doom-print
       (doom-print--format "\nAborting..."))
      3)))
 nil)

;;;; 42
((doom-cli--exit
  (catch 'exit
    (condition-case e
	(let*
	    ((args
	      (cons
	       (if
		   (getenv "__DOOMDUMP")
		   :dump prefix)
	       args))
	     (context
	      (doom-cli-context-restore
	       (getenv "__DOOMCONTEXT")
	       context))
	     (context
	      (doom-cli-context-parse args context)))
	  (run-hook-with-args 'doom-cli-before-run-functions context)
	  (let
	      ((result
		(doom-cli-context-execute context)))
	    (run-hook-with-args 'doom-cli-after-run-functions context result))
	  0)
      (doom-cli-wrong-number-of-arguments-error
       (let*
	   ((val
	     (cdr e)))
	 (progn
	   (ignore
	    (consp val))
	   (let*
	       ((x27
		 (car-safe val))
		(x28
		 (cdr-safe val)))
	     (progn
	       (ignore
		(consp x28))
	       (let*
		   ((x29
		     (car-safe x28))
		    (x30
		     (cdr-safe x28)))
		 (progn
		   (ignore
		    (consp x30))
		   (let*
		       ((x31
			 (car-safe x30))
			(x32
			 (cdr-safe x30)))
		     (progn
		       (ignore
			(consp x32))
		       (let*
			   ((x33
			     (car-safe x32))
			    (x34
			     (cdr-safe x32)))
			 (progn
			   (ignore
			    (consp x34))
			   (let*
			       ((x35
				 (car-safe x34))
				(x36
				 (cdr-safe x34)))
			     (progn
			       (ignore
				(null x36))
			       (let
				   ((command x27)
				    (flag x29)
				    (args x31)
				    (min x33)
				    (max x35))
				 (progn
				   (doom-print
				    (doom-print--format
				     (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
				     (or flag
					 (doom-cli-command-string
					  (if
					      (keywordp
					       (car command))
					      command
					    (cdr command))))
				     (if
					 (or
					  (= min max)
					  (= max most-positive-fixnum))
					 min
				       (format "%d-%d" min max))
				     (if
					 (or
					  (= min 0)
					  (> min 1))
					 "s" "")
				     (length args)))
				   (doom-cli-call
				    (cons ':help
					  (cons "--synopsis"
						(cons "--postamble"
						      (cdr
						       (doom-cli--command context)))))
				    context e)))))))))))))))
       5)
      (doom-cli-unrecognized-option-error
       (doom-print
	(doom-print--format
	 (doom-print--style 'red "Error: unknown option %s")
	 (car
	  (cdr e))))
       (doom-cli-call
	(cons ':help
	      (cons "--synopsis"
		    (cons "--postamble"
			  (cdr
			   (doom-cli--command context)))))
	context e)
       5)
      (doom-cli-invalid-option-error
       (let*
	   ((val
	     (cdr e)))
	 (progn
	   (ignore
	    (consp val))
	   (let*
	       ((x37
		 (car-safe val))
		(x38
		 (cdr-safe val)))
	     (progn
	       (ignore
		(consp x38))
	       (let*
		   ((x39
		     (car-safe x38))
		    (x40
		     (cdr-safe x38)))
		 (progn
		   (ignore
		    (consp x40))
		   (let*
		       ((x41
			 (car-safe x40))
			(x42
			 (cdr-safe x40)))
		     (progn
		       (ignore
			(consp x42))
		       (let*
			   ((x43
			     (car-safe x42))
			    (x44
			     (cdr-safe x42)))
			 (progn
			   (ignore
			    (null x44))
			   (let
			       ((types x37)
				(option x39)
				(value x41)
				(errors x43))
			     (progn
			       (doom-print
				(doom-print--format
				 (doom-print--style 'red "Error: %s received invalid value %S")
				 (string-join
				  (progn
				    (or
				     (progn
				       (and
					(memq
					 (type-of option)
					 cl-struct-doom-cli-option-tags)
					t))
				     (signal 'wrong-type-argument
					     (list 'doom-cli-option option)))
				    (aref option 5))
				  "/")
				 value))
			       (doom-print
				(doom-print--format
				 (doom-print--style 'bold "\nValidation errors:")))
			       (let
				   ((tail errors))
				 (while tail
				   (let
				       ((err
					 (car tail)))
				     (doom-print
				      (doom-print--format
				       (doom-print--class 'item "%s."
							  (doom-print--class 'fill err))))
				     (setq tail
					   (cdr tail)))))))))))))))))
       (doom-cli-call
	(cons ':help
	      (cons "--postamble"
		    (cdr
		     (doom-cli--command context))))
	context e)
       5)
      (doom-cli-command-not-found-error
       (let*
	   ((command
	     (cdr e))
	    (cli
	     (doom-cli-get command)))
	 (cond
	  ((null cli)
	   (doom-print
	    (doom-print--format
	     (doom-print--style 'red "Error: unrecognized command '%s'")
	     (doom-cli-command-string
	      (or
	       (cdr command)
	       command))))
	   (doom-cli-call
	    (cons ':help
		  (cons "--similar"
			(cons "--postamble"
			      (cdr command))))
	    context e))
	  ((null
	    (progn
	      (or
	       (progn
		 (and
		  (memq
		   (type-of cli)
		   cl-struct-doom-cli-tags)
		  t))
	       (signal 'wrong-type-argument
		       (list 'doom-cli cli)))
	      (aref cli 9)))
	   (doom-print
	    (doom-print--format
	     (doom-print--style 'red "Error: a subcommand is required")))
	   (doom-cli-call
	    (cons ':help
		  (cons "--subcommands"
			(cons "--postamble"
			      (cdr command))))
	    context e))))
       4)
      (doom-cli-invalid-prefix-error
       (let
	   ((prefix
	     (car
	      (cdr e))))
	 (doom-print
	  (doom-print--format
	   (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
	   prefix))
	 (let*
	     ((suggested
	       (and t
		    (let*
			((--cl-var-- t)
			 --cl-var--)
		      (catch '--cl-block---cl-finish----
			(maphash
			 #'(lambda
			     (--cl-var-- cli)
			     (or
			      (if
				  (progn
				    (or
				     (progn
				       (and
					(memq
					 (type-of cli)
					 cl-struct-doom-cli-tags)
					t))
				     (signal 'wrong-type-argument
					     (list 'doom-cli cli)))
				    (aref cli 2))
				  t
				(progn
				  (setq --cl-var--
					(car
					 (progn
					   (or
					    (progn
					      (and
					       (memq
						(type-of cli)
						cl-struct-doom-cli-tags)
					       t))
					    (signal 'wrong-type-argument
						    (list 'doom-cli cli)))
					   (aref cli 1))))
				  (setq --cl-var-- nil)))
			      (throw '--cl-block---cl-finish---- nil)))
			 doom-cli--table))
		      --cl-var--))))
	   (if suggested
	       (doom-print
		(doom-print--format "Did you mean %S?" suggested))
	     (doom-print
	      (doom-print--format "There are no commands defined under %S." prefix)))))
       4)
      (user-error
       (doom-print
	(doom-print--format
	 (doom-print--style 'red "Error: %s")
	 (car
	  (cdr e))))
       (doom-print
	(doom-print--format "\nAborting..."))
       3)))
  context)
 nil)

;;;; 43
((progn
   (if
       (and
	(not doom-inhibit-log)
	(or
	 (not noninteractive)
	 (<= 2 doom-log-level)))
       (progn
	 (doom--log 2 "run!: %s %s" prefix
		    (combine-and-quote-strings args))))
   (add-hook 'kill-emacs-hook show-benchmark-fn 94)
   (add-hook 'kill-emacs-hook write-logs-fn 95)
   (if
       (doom-cli-context-pipe-p context :out t)
       (progn
	 (setq doom-print-backend nil)))
   (if
       (doom-cli-context-pipe-p context :in)
       (progn
	 (save-current-buffer
	   (set-buffer
	    (progn
	      (or
	       (progn
		 (and
		  (memq
		   (type-of context)
		   cl-struct-doom-cli-context-tags)
		  t))
	       (signal 'wrong-type-argument
		       (list 'doom-cli-context context)))
	      (aref context 15)))
	   (while
	       (let*
		   ((in
		     (and t
			  (condition-case nil
			      (progn
				(read-from-minibuffer ""))
			    (error nil)))))
		 (if in
		     (insert in "\n")
		   (condition-case nil
		       (progn
			 (delete-char -1))
		     (error nil))))))))
   (doom-cli--exit
    (catch 'exit
      (condition-case e
	  (let*
	      ((args
		(cons
		 (if
		     (getenv "__DOOMDUMP")
		     :dump prefix)
		 args))
	       (context
		(doom-cli-context-restore
		 (getenv "__DOOMCONTEXT")
		 context))
	       (context
		(doom-cli-context-parse args context)))
	    (run-hook-with-args 'doom-cli-before-run-functions context)
	    (let
		((result
		  (doom-cli-context-execute context)))
	      (run-hook-with-args 'doom-cli-after-run-functions context result))
	    0)
	(doom-cli-wrong-number-of-arguments-error
	 (let*
	     ((val
	       (cdr e)))
	   (progn
	     (ignore
	      (consp val))
	     (let*
		 ((x27
		   (car-safe val))
		  (x28
		   (cdr-safe val)))
	       (progn
		 (ignore
		  (consp x28))
		 (let*
		     ((x29
		       (car-safe x28))
		      (x30
		       (cdr-safe x28)))
		   (progn
		     (ignore
		      (consp x30))
		     (let*
			 ((x31
			   (car-safe x30))
			  (x32
			   (cdr-safe x30)))
		       (progn
			 (ignore
			  (consp x32))
			 (let*
			     ((x33
			       (car-safe x32))
			      (x34
			       (cdr-safe x32)))
			   (progn
			     (ignore
			      (consp x34))
			     (let*
				 ((x35
				   (car-safe x34))
				  (x36
				   (cdr-safe x34)))
			       (progn
				 (ignore
				  (null x36))
				 (let
				     ((command x27)
				      (flag x29)
				      (args x31)
				      (min x33)
				      (max x35))
				   (progn
				     (doom-print
				      (doom-print--format
				       (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
				       (or flag
					   (doom-cli-command-string
					    (if
						(keywordp
						 (car command))
						command
					      (cdr command))))
				       (if
					   (or
					    (= min max)
					    (= max most-positive-fixnum))
					   min
					 (format "%d-%d" min max))
				       (if
					   (or
					    (= min 0)
					    (> min 1))
					   "s" "")
				       (length args)))
				     (doom-cli-call
				      (cons ':help
					    (cons "--synopsis"
						  (cons "--postamble"
							(cdr
							 (doom-cli--command context)))))
				      context e)))))))))))))))
	 5)
	(doom-cli-unrecognized-option-error
	 (doom-print
	  (doom-print--format
	   (doom-print--style 'red "Error: unknown option %s")
	   (car
	    (cdr e))))
	 (doom-cli-call
	  (cons ':help
		(cons "--synopsis"
		      (cons "--postamble"
			    (cdr
			     (doom-cli--command context)))))
	  context e)
	 5)
	(doom-cli-invalid-option-error
	 (let*
	     ((val
	       (cdr e)))
	   (progn
	     (ignore
	      (consp val))
	     (let*
		 ((x37
		   (car-safe val))
		  (x38
		   (cdr-safe val)))
	       (progn
		 (ignore
		  (consp x38))
		 (let*
		     ((x39
		       (car-safe x38))
		      (x40
		       (cdr-safe x38)))
		   (progn
		     (ignore
		      (consp x40))
		     (let*
			 ((x41
			   (car-safe x40))
			  (x42
			   (cdr-safe x40)))
		       (progn
			 (ignore
			  (consp x42))
			 (let*
			     ((x43
			       (car-safe x42))
			      (x44
			       (cdr-safe x42)))
			   (progn
			     (ignore
			      (null x44))
			     (let
				 ((types x37)
				  (option x39)
				  (value x41)
				  (errors x43))
			       (progn
				 (doom-print
				  (doom-print--format
				   (doom-print--style 'red "Error: %s received invalid value %S")
				   (string-join
				    (progn
				      (or
				       (progn
					 (and
					  (memq
					   (type-of option)
					   cl-struct-doom-cli-option-tags)
					  t))
				       (signal 'wrong-type-argument
					       (list 'doom-cli-option option)))
				      (aref option 5))
				    "/")
				   value))
				 (doom-print
				  (doom-print--format
				   (doom-print--style 'bold "\nValidation errors:")))
				 (let
				     ((tail errors))
				   (while tail
				     (let
					 ((err
					   (car tail)))
				       (doom-print
					(doom-print--format
					 (doom-print--class 'item "%s."
							    (doom-print--class 'fill err))))
				       (setq tail
					     (cdr tail)))))))))))))))))
	 (doom-cli-call
	  (cons ':help
		(cons "--postamble"
		      (cdr
		       (doom-cli--command context))))
	  context e)
	 5)
	(doom-cli-command-not-found-error
	 (let*
	     ((command
	       (cdr e))
	      (cli
	       (doom-cli-get command)))
	   (cond
	    ((null cli)
	     (doom-print
	      (doom-print--format
	       (doom-print--style 'red "Error: unrecognized command '%s'")
	       (doom-cli-command-string
		(or
		 (cdr command)
		 command))))
	     (doom-cli-call
	      (cons ':help
		    (cons "--similar"
			  (cons "--postamble"
				(cdr command))))
	      context e))
	    ((null
	      (progn
		(or
		 (progn
		   (and
		    (memq
		     (type-of cli)
		     cl-struct-doom-cli-tags)
		    t))
		 (signal 'wrong-type-argument
			 (list 'doom-cli cli)))
		(aref cli 9)))
	     (doom-print
	      (doom-print--format
	       (doom-print--style 'red "Error: a subcommand is required")))
	     (doom-cli-call
	      (cons ':help
		    (cons "--subcommands"
			  (cons "--postamble"
				(cdr command))))
	      context e))))
	 4)
	(doom-cli-invalid-prefix-error
	 (let
	     ((prefix
	       (car
		(cdr e))))
	   (doom-print
	    (doom-print--format
	     (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
	     prefix))
	   (let*
	       ((suggested
		 (and t
		      (let*
			  ((--cl-var-- t)
			   --cl-var--)
			(catch '--cl-block---cl-finish----
			  (maphash
			   #'(lambda
			       (--cl-var-- cli)
			       (or
				(if
				    (progn
				      (or
				       (progn
					 (and
					  (memq
					   (type-of cli)
					   cl-struct-doom-cli-tags)
					  t))
				       (signal 'wrong-type-argument
					       (list 'doom-cli cli)))
				      (aref cli 2))
				    t
				  (progn
				    (setq --cl-var--
					  (car
					   (progn
					     (or
					      (progn
						(and
						 (memq
						  (type-of cli)
						  cl-struct-doom-cli-tags)
						 t))
					      (signal 'wrong-type-argument
						      (list 'doom-cli cli)))
					     (aref cli 1))))
				    (setq --cl-var-- nil)))
				(throw '--cl-block---cl-finish---- nil)))
			   doom-cli--table))
			--cl-var--))))
	     (if suggested
		 (doom-print
		  (doom-print--format "Did you mean %S?" suggested))
	       (doom-print
		(doom-print--format "There are no commands defined under %S." prefix)))))
	 4)
	(user-error
	 (doom-print
	  (doom-print--format
	   (doom-print--style 'red "Error: %s")
	   (car
	    (cdr e))))
	 (doom-print
	  (doom-print--format "\nAborting..."))
	 3)))
    context))
 nil)

;;;; 44
((let
     ((doom-print-stream standard-output))
   (progn
     (if
	 (and
	  (not doom-inhibit-log)
	  (or
	   (not noninteractive)
	   (<= 2 doom-log-level)))
	 (progn
	   (doom--log 2 "run!: %s %s" prefix
		      (combine-and-quote-strings args))))
     (add-hook 'kill-emacs-hook show-benchmark-fn 94)
     (add-hook 'kill-emacs-hook write-logs-fn 95)
     (if
	 (doom-cli-context-pipe-p context :out t)
	 (progn
	   (setq doom-print-backend nil)))
     (if
	 (doom-cli-context-pipe-p context :in)
	 (progn
	   (save-current-buffer
	     (set-buffer
	      (progn
		(or
		 (progn
		   (and
		    (memq
		     (type-of context)
		     cl-struct-doom-cli-context-tags)
		    t))
		 (signal 'wrong-type-argument
			 (list 'doom-cli-context context)))
		(aref context 15)))
	     (while
		 (let*
		     ((in
		       (and t
			    (condition-case nil
				(progn
				  (read-from-minibuffer ""))
			      (error nil)))))
		   (if in
		       (insert in "\n")
		     (condition-case nil
			 (progn
			   (delete-char -1))
		       (error nil))))))))
     (doom-cli--exit
      (catch 'exit
	(condition-case e
	    (let*
		((args
		  (cons
		   (if
		       (getenv "__DOOMDUMP")
		       :dump prefix)
		   args))
		 (context
		  (doom-cli-context-restore
		   (getenv "__DOOMCONTEXT")
		   context))
		 (context
		  (doom-cli-context-parse args context)))
	      (run-hook-with-args 'doom-cli-before-run-functions context)
	      (let
		  ((result
		    (doom-cli-context-execute context)))
		(run-hook-with-args 'doom-cli-after-run-functions context result))
	      0)
	  (doom-cli-wrong-number-of-arguments-error
	   (let*
	       ((val
		 (cdr e)))
	     (progn
	       (ignore
		(consp val))
	       (let*
		   ((x27
		     (car-safe val))
		    (x28
		     (cdr-safe val)))
		 (progn
		   (ignore
		    (consp x28))
		   (let*
		       ((x29
			 (car-safe x28))
			(x30
			 (cdr-safe x28)))
		     (progn
		       (ignore
			(consp x30))
		       (let*
			   ((x31
			     (car-safe x30))
			    (x32
			     (cdr-safe x30)))
			 (progn
			   (ignore
			    (consp x32))
			   (let*
			       ((x33
				 (car-safe x32))
				(x34
				 (cdr-safe x32)))
			     (progn
			       (ignore
				(consp x34))
			       (let*
				   ((x35
				     (car-safe x34))
				    (x36
				     (cdr-safe x34)))
				 (progn
				   (ignore
				    (null x36))
				   (let
				       ((command x27)
					(flag x29)
					(args x31)
					(min x33)
					(max x35))
				     (progn
				       (doom-print
					(doom-print--format
					 (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
					 (or flag
					     (doom-cli-command-string
					      (if
						  (keywordp
						   (car command))
						  command
						(cdr command))))
					 (if
					     (or
					      (= min max)
					      (= max most-positive-fixnum))
					     min
					   (format "%d-%d" min max))
					 (if
					     (or
					      (= min 0)
					      (> min 1))
					     "s" "")
					 (length args)))
				       (doom-cli-call
					(cons ':help
					      (cons "--synopsis"
						    (cons "--postamble"
							  (cdr
							   (doom-cli--command context)))))
					context e)))))))))))))))
	   5)
	  (doom-cli-unrecognized-option-error
	   (doom-print
	    (doom-print--format
	     (doom-print--style 'red "Error: unknown option %s")
	     (car
	      (cdr e))))
	   (doom-cli-call
	    (cons ':help
		  (cons "--synopsis"
			(cons "--postamble"
			      (cdr
			       (doom-cli--command context)))))
	    context e)
	   5)
	  (doom-cli-invalid-option-error
	   (let*
	       ((val
		 (cdr e)))
	     (progn
	       (ignore
		(consp val))
	       (let*
		   ((x37
		     (car-safe val))
		    (x38
		     (cdr-safe val)))
		 (progn
		   (ignore
		    (consp x38))
		   (let*
		       ((x39
			 (car-safe x38))
			(x40
			 (cdr-safe x38)))
		     (progn
		       (ignore
			(consp x40))
		       (let*
			   ((x41
			     (car-safe x40))
			    (x42
			     (cdr-safe x40)))
			 (progn
			   (ignore
			    (consp x42))
			   (let*
			       ((x43
				 (car-safe x42))
				(x44
				 (cdr-safe x42)))
			     (progn
			       (ignore
				(null x44))
			       (let
				   ((types x37)
				    (option x39)
				    (value x41)
				    (errors x43))
				 (progn
				   (doom-print
				    (doom-print--format
				     (doom-print--style 'red "Error: %s received invalid value %S")
				     (string-join
				      (progn
					(or
					 (progn
					   (and
					    (memq
					     (type-of option)
					     cl-struct-doom-cli-option-tags)
					    t))
					 (signal 'wrong-type-argument
						 (list 'doom-cli-option option)))
					(aref option 5))
				      "/")
				     value))
				   (doom-print
				    (doom-print--format
				     (doom-print--style 'bold "\nValidation errors:")))
				   (let
				       ((tail errors))
				     (while tail
				       (let
					   ((err
					     (car tail)))
					 (doom-print
					  (doom-print--format
					   (doom-print--class 'item "%s."
							      (doom-print--class 'fill err))))
					 (setq tail
					       (cdr tail)))))))))))))))))
	   (doom-cli-call
	    (cons ':help
		  (cons "--postamble"
			(cdr
			 (doom-cli--command context))))
	    context e)
	   5)
	  (doom-cli-command-not-found-error
	   (let*
	       ((command
		 (cdr e))
		(cli
		 (doom-cli-get command)))
	     (cond
	      ((null cli)
	       (doom-print
		(doom-print--format
		 (doom-print--style 'red "Error: unrecognized command '%s'")
		 (doom-cli-command-string
		  (or
		   (cdr command)
		   command))))
	       (doom-cli-call
		(cons ':help
		      (cons "--similar"
			    (cons "--postamble"
				  (cdr command))))
		context e))
	      ((null
		(progn
		  (or
		   (progn
		     (and
		      (memq
		       (type-of cli)
		       cl-struct-doom-cli-tags)
		      t))
		   (signal 'wrong-type-argument
			   (list 'doom-cli cli)))
		  (aref cli 9)))
	       (doom-print
		(doom-print--format
		 (doom-print--style 'red "Error: a subcommand is required")))
	       (doom-cli-call
		(cons ':help
		      (cons "--subcommands"
			    (cons "--postamble"
				  (cdr command))))
		context e))))
	   4)
	  (doom-cli-invalid-prefix-error
	   (let
	       ((prefix
		 (car
		  (cdr e))))
	     (doom-print
	      (doom-print--format
	       (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
	       prefix))
	     (let*
		 ((suggested
		   (and t
			(let*
			    ((--cl-var-- t)
			     --cl-var--)
			  (catch '--cl-block---cl-finish----
			    (maphash
			     #'(lambda
				 (--cl-var-- cli)
				 (or
				  (if
				      (progn
					(or
					 (progn
					   (and
					    (memq
					     (type-of cli)
					     cl-struct-doom-cli-tags)
					    t))
					 (signal 'wrong-type-argument
						 (list 'doom-cli cli)))
					(aref cli 2))
				      t
				    (progn
				      (setq --cl-var--
					    (car
					     (progn
					       (or
						(progn
						  (and
						   (memq
						    (type-of cli)
						    cl-struct-doom-cli-tags)
						   t))
						(signal 'wrong-type-argument
							(list 'doom-cli cli)))
					       (aref cli 1))))
				      (setq --cl-var-- nil)))
				  (throw '--cl-block---cl-finish---- nil)))
			     doom-cli--table))
			  --cl-var--))))
	       (if suggested
		   (doom-print
		    (doom-print--format "Did you mean %S?" suggested))
		 (doom-print
		  (doom-print--format "There are no commands defined under %S." prefix)))))
	   4)
	  (user-error
	   (doom-print
	    (doom-print--format
	     (doom-print--style 'red "Error: %s")
	     (car
	      (cdr e))))
	   (doom-print
	    (doom-print--format "\nAborting..."))
	   3)))
      context)))
 ((doom-print-stream closure
		     ((streams
		       (t . #<buffer  *doom-cli stdout*>)
		       (t . #<buffer  *doom-cli stderr*>))
		      (level . t))
		     (ch)
		     (let
			 ((str
			   (char-to-string ch)))
		       (let
			   ((tail streams))
			 (while tail
			   (let
			       ((stream
				 (car tail)))
			     (if
				 (or
				  (eq
				   (car stream)
				   t)
				  (funcall
				   (car stream)))
				 (progn
				   (doom-print str :newline nil :stream
					       (cdr stream))))
			     (setq tail
				   (cdr tail)))))
		       (doom-print str :newline nil :stream t :level level)))))

;;;; 45
((progn
   (fset #'message vnew)
   (let
       ((doom-print-stream standard-output))
     (progn
       (if
	   (and
	    (not doom-inhibit-log)
	    (or
	     (not noninteractive)
	     (<= 2 doom-log-level)))
	   (progn
	     (doom--log 2 "run!: %s %s" prefix
			(combine-and-quote-strings args))))
       (add-hook 'kill-emacs-hook show-benchmark-fn 94)
       (add-hook 'kill-emacs-hook write-logs-fn 95)
       (if
	   (doom-cli-context-pipe-p context :out t)
	   (progn
	     (setq doom-print-backend nil)))
       (if
	   (doom-cli-context-pipe-p context :in)
	   (progn
	     (save-current-buffer
	       (set-buffer
		(progn
		  (or
		   (progn
		     (and
		      (memq
		       (type-of context)
		       cl-struct-doom-cli-context-tags)
		      t))
		   (signal 'wrong-type-argument
			   (list 'doom-cli-context context)))
		  (aref context 15)))
	       (while
		   (let*
		       ((in
			 (and t
			      (condition-case nil
				  (progn
				    (read-from-minibuffer ""))
				(error nil)))))
		     (if in
			 (insert in "\n")
		       (condition-case nil
			   (progn
			     (delete-char -1))
			 (error nil))))))))
       (doom-cli--exit
	(catch 'exit
	  (condition-case e
	      (let*
		  ((args
		    (cons
		     (if
			 (getenv "__DOOMDUMP")
			 :dump prefix)
		     args))
		   (context
		    (doom-cli-context-restore
		     (getenv "__DOOMCONTEXT")
		     context))
		   (context
		    (doom-cli-context-parse args context)))
		(run-hook-with-args 'doom-cli-before-run-functions context)
		(let
		    ((result
		      (doom-cli-context-execute context)))
		  (run-hook-with-args 'doom-cli-after-run-functions context result))
		0)
	    (doom-cli-wrong-number-of-arguments-error
	     (let*
		 ((val
		   (cdr e)))
	       (progn
		 (ignore
		  (consp val))
		 (let*
		     ((x27
		       (car-safe val))
		      (x28
		       (cdr-safe val)))
		   (progn
		     (ignore
		      (consp x28))
		     (let*
			 ((x29
			   (car-safe x28))
			  (x30
			   (cdr-safe x28)))
		       (progn
			 (ignore
			  (consp x30))
			 (let*
			     ((x31
			       (car-safe x30))
			      (x32
			       (cdr-safe x30)))
			   (progn
			     (ignore
			      (consp x32))
			     (let*
				 ((x33
				   (car-safe x32))
				  (x34
				   (cdr-safe x32)))
			       (progn
				 (ignore
				  (consp x34))
				 (let*
				     ((x35
				       (car-safe x34))
				      (x36
				       (cdr-safe x34)))
				   (progn
				     (ignore
				      (null x36))
				     (let
					 ((command x27)
					  (flag x29)
					  (args x31)
					  (min x33)
					  (max x35))
				       (progn
					 (doom-print
					  (doom-print--format
					   (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
					   (or flag
					       (doom-cli-command-string
						(if
						    (keywordp
						     (car command))
						    command
						  (cdr command))))
					   (if
					       (or
						(= min max)
						(= max most-positive-fixnum))
					       min
					     (format "%d-%d" min max))
					   (if
					       (or
						(= min 0)
						(> min 1))
					       "s" "")
					   (length args)))
					 (doom-cli-call
					  (cons ':help
						(cons "--synopsis"
						      (cons "--postamble"
							    (cdr
							     (doom-cli--command context)))))
					  context e)))))))))))))))
	     5)
	    (doom-cli-unrecognized-option-error
	     (doom-print
	      (doom-print--format
	       (doom-print--style 'red "Error: unknown option %s")
	       (car
		(cdr e))))
	     (doom-cli-call
	      (cons ':help
		    (cons "--synopsis"
			  (cons "--postamble"
				(cdr
				 (doom-cli--command context)))))
	      context e)
	     5)
	    (doom-cli-invalid-option-error
	     (let*
		 ((val
		   (cdr e)))
	       (progn
		 (ignore
		  (consp val))
		 (let*
		     ((x37
		       (car-safe val))
		      (x38
		       (cdr-safe val)))
		   (progn
		     (ignore
		      (consp x38))
		     (let*
			 ((x39
			   (car-safe x38))
			  (x40
			   (cdr-safe x38)))
		       (progn
			 (ignore
			  (consp x40))
			 (let*
			     ((x41
			       (car-safe x40))
			      (x42
			       (cdr-safe x40)))
			   (progn
			     (ignore
			      (consp x42))
			     (let*
				 ((x43
				   (car-safe x42))
				  (x44
				   (cdr-safe x42)))
			       (progn
				 (ignore
				  (null x44))
				 (let
				     ((types x37)
				      (option x39)
				      (value x41)
				      (errors x43))
				   (progn
				     (doom-print
				      (doom-print--format
				       (doom-print--style 'red "Error: %s received invalid value %S")
				       (string-join
					(progn
					  (or
					   (progn
					     (and
					      (memq
					       (type-of option)
					       cl-struct-doom-cli-option-tags)
					      t))
					   (signal 'wrong-type-argument
						   (list 'doom-cli-option option)))
					  (aref option 5))
					"/")
				       value))
				     (doom-print
				      (doom-print--format
				       (doom-print--style 'bold "\nValidation errors:")))
				     (let
					 ((tail errors))
				       (while tail
					 (let
					     ((err
					       (car tail)))
					   (doom-print
					    (doom-print--format
					     (doom-print--class 'item "%s."
								(doom-print--class 'fill err))))
					   (setq tail
						 (cdr tail)))))))))))))))))
	     (doom-cli-call
	      (cons ':help
		    (cons "--postamble"
			  (cdr
			   (doom-cli--command context))))
	      context e)
	     5)
	    (doom-cli-command-not-found-error
	     (let*
		 ((command
		   (cdr e))
		  (cli
		   (doom-cli-get command)))
	       (cond
		((null cli)
		 (doom-print
		  (doom-print--format
		   (doom-print--style 'red "Error: unrecognized command '%s'")
		   (doom-cli-command-string
		    (or
		     (cdr command)
		     command))))
		 (doom-cli-call
		  (cons ':help
			(cons "--similar"
			      (cons "--postamble"
				    (cdr command))))
		  context e))
		((null
		  (progn
		    (or
		     (progn
		       (and
			(memq
			 (type-of cli)
			 cl-struct-doom-cli-tags)
			t))
		     (signal 'wrong-type-argument
			     (list 'doom-cli cli)))
		    (aref cli 9)))
		 (doom-print
		  (doom-print--format
		   (doom-print--style 'red "Error: a subcommand is required")))
		 (doom-cli-call
		  (cons ':help
			(cons "--subcommands"
			      (cons "--postamble"
				    (cdr command))))
		  context e))))
	     4)
	    (doom-cli-invalid-prefix-error
	     (let
		 ((prefix
		   (car
		    (cdr e))))
	       (doom-print
		(doom-print--format
		 (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
		 prefix))
	       (let*
		   ((suggested
		     (and t
			  (let*
			      ((--cl-var-- t)
			       --cl-var--)
			    (catch '--cl-block---cl-finish----
			      (maphash
			       #'(lambda
				   (--cl-var-- cli)
				   (or
				    (if
					(progn
					  (or
					   (progn
					     (and
					      (memq
					       (type-of cli)
					       cl-struct-doom-cli-tags)
					      t))
					   (signal 'wrong-type-argument
						   (list 'doom-cli cli)))
					  (aref cli 2))
					t
				      (progn
					(setq --cl-var--
					      (car
					       (progn
						 (or
						  (progn
						    (and
						     (memq
						      (type-of cli)
						      cl-struct-doom-cli-tags)
						     t))
						  (signal 'wrong-type-argument
							  (list 'doom-cli cli)))
						 (aref cli 1))))
					(setq --cl-var-- nil)))
				    (throw '--cl-block---cl-finish---- nil)))
			       doom-cli--table))
			    --cl-var--))))
		 (if suggested
		     (doom-print
		      (doom-print--format "Did you mean %S?" suggested))
		   (doom-print
		    (doom-print--format "There are no commands defined under %S." prefix)))))
	     4)
	    (user-error
	     (doom-print
	      (doom-print--format
	       (doom-print--style 'red "Error: %s")
	       (car
		(cdr e))))
	     (doom-print
	      (doom-print--format "\nAborting..."))
	     3)))
	context))))
 nil)

;;;; 46
((unwind-protect
     (progn
       (fset #'message vnew)
       (let
	   ((doom-print-stream standard-output))
	 (progn
	   (if
	       (and
		(not doom-inhibit-log)
		(or
		 (not noninteractive)
		 (<= 2 doom-log-level)))
	       (progn
		 (doom--log 2 "run!: %s %s" prefix
			    (combine-and-quote-strings args))))
	   (add-hook 'kill-emacs-hook show-benchmark-fn 94)
	   (add-hook 'kill-emacs-hook write-logs-fn 95)
	   (if
	       (doom-cli-context-pipe-p context :out t)
	       (progn
		 (setq doom-print-backend nil)))
	   (if
	       (doom-cli-context-pipe-p context :in)
	       (progn
		 (save-current-buffer
		   (set-buffer
		    (progn
		      (or
		       (progn
			 (and
			  (memq
			   (type-of context)
			   cl-struct-doom-cli-context-tags)
			  t))
		       (signal 'wrong-type-argument
			       (list 'doom-cli-context context)))
		      (aref context 15)))
		   (while
		       (let*
			   ((in
			     (and t
				  (condition-case nil
				      (progn
					(read-from-minibuffer ""))
				    (error nil)))))
			 (if in
			     (insert in "\n")
			   (condition-case nil
			       (progn
				 (delete-char -1))
			     (error nil))))))))
	   (doom-cli--exit
	    (catch 'exit
	      (condition-case e
		  (let*
		      ((args
			(cons
			 (if
			     (getenv "__DOOMDUMP")
			     :dump prefix)
			 args))
		       (context
			(doom-cli-context-restore
			 (getenv "__DOOMCONTEXT")
			 context))
		       (context
			(doom-cli-context-parse args context)))
		    (run-hook-with-args 'doom-cli-before-run-functions context)
		    (let
			((result
			  (doom-cli-context-execute context)))
		      (run-hook-with-args 'doom-cli-after-run-functions context result))
		    0)
		(doom-cli-wrong-number-of-arguments-error
		 (let*
		     ((val
		       (cdr e)))
		   (progn
		     (ignore
		      (consp val))
		     (let*
			 ((x27
			   (car-safe val))
			  (x28
			   (cdr-safe val)))
		       (progn
			 (ignore
			  (consp x28))
			 (let*
			     ((x29
			       (car-safe x28))
			      (x30
			       (cdr-safe x28)))
			   (progn
			     (ignore
			      (consp x30))
			     (let*
				 ((x31
				   (car-safe x30))
				  (x32
				   (cdr-safe x30)))
			       (progn
				 (ignore
				  (consp x32))
				 (let*
				     ((x33
				       (car-safe x32))
				      (x34
				       (cdr-safe x32)))
				   (progn
				     (ignore
				      (consp x34))
				     (let*
					 ((x35
					   (car-safe x34))
					  (x36
					   (cdr-safe x34)))
				       (progn
					 (ignore
					  (null x36))
					 (let
					     ((command x27)
					      (flag x29)
					      (args x31)
					      (min x33)
					      (max x35))
					   (progn
					     (doom-print
					      (doom-print--format
					       (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
					       (or flag
						   (doom-cli-command-string
						    (if
							(keywordp
							 (car command))
							command
						      (cdr command))))
					       (if
						   (or
						    (= min max)
						    (= max most-positive-fixnum))
						   min
						 (format "%d-%d" min max))
					       (if
						   (or
						    (= min 0)
						    (> min 1))
						   "s" "")
					       (length args)))
					     (doom-cli-call
					      (cons ':help
						    (cons "--synopsis"
							  (cons "--postamble"
								(cdr
								 (doom-cli--command context)))))
					      context e)))))))))))))))
		 5)
		(doom-cli-unrecognized-option-error
		 (doom-print
		  (doom-print--format
		   (doom-print--style 'red "Error: unknown option %s")
		   (car
		    (cdr e))))
		 (doom-cli-call
		  (cons ':help
			(cons "--synopsis"
			      (cons "--postamble"
				    (cdr
				     (doom-cli--command context)))))
		  context e)
		 5)
		(doom-cli-invalid-option-error
		 (let*
		     ((val
		       (cdr e)))
		   (progn
		     (ignore
		      (consp val))
		     (let*
			 ((x37
			   (car-safe val))
			  (x38
			   (cdr-safe val)))
		       (progn
			 (ignore
			  (consp x38))
			 (let*
			     ((x39
			       (car-safe x38))
			      (x40
			       (cdr-safe x38)))
			   (progn
			     (ignore
			      (consp x40))
			     (let*
				 ((x41
				   (car-safe x40))
				  (x42
				   (cdr-safe x40)))
			       (progn
				 (ignore
				  (consp x42))
				 (let*
				     ((x43
				       (car-safe x42))
				      (x44
				       (cdr-safe x42)))
				   (progn
				     (ignore
				      (null x44))
				     (let
					 ((types x37)
					  (option x39)
					  (value x41)
					  (errors x43))
				       (progn
					 (doom-print
					  (doom-print--format
					   (doom-print--style 'red "Error: %s received invalid value %S")
					   (string-join
					    (progn
					      (or
					       (progn
						 (and
						  (memq
						   (type-of option)
						   cl-struct-doom-cli-option-tags)
						  t))
					       (signal 'wrong-type-argument
						       (list 'doom-cli-option option)))
					      (aref option 5))
					    "/")
					   value))
					 (doom-print
					  (doom-print--format
					   (doom-print--style 'bold "\nValidation errors:")))
					 (let
					     ((tail errors))
					   (while tail
					     (let
						 ((err
						   (car tail)))
					       (doom-print
						(doom-print--format
						 (doom-print--class 'item "%s."
								    (doom-print--class 'fill err))))
					       (setq tail
						     (cdr tail)))))))))))))))))
		 (doom-cli-call
		  (cons ':help
			(cons "--postamble"
			      (cdr
			       (doom-cli--command context))))
		  context e)
		 5)
		(doom-cli-command-not-found-error
		 (let*
		     ((command
		       (cdr e))
		      (cli
		       (doom-cli-get command)))
		   (cond
		    ((null cli)
		     (doom-print
		      (doom-print--format
		       (doom-print--style 'red "Error: unrecognized command '%s'")
		       (doom-cli-command-string
			(or
			 (cdr command)
			 command))))
		     (doom-cli-call
		      (cons ':help
			    (cons "--similar"
				  (cons "--postamble"
					(cdr command))))
		      context e))
		    ((null
		      (progn
			(or
			 (progn
			   (and
			    (memq
			     (type-of cli)
			     cl-struct-doom-cli-tags)
			    t))
			 (signal 'wrong-type-argument
				 (list 'doom-cli cli)))
			(aref cli 9)))
		     (doom-print
		      (doom-print--format
		       (doom-print--style 'red "Error: a subcommand is required")))
		     (doom-cli-call
		      (cons ':help
			    (cons "--subcommands"
				  (cons "--postamble"
					(cdr command))))
		      context e))))
		 4)
		(doom-cli-invalid-prefix-error
		 (let
		     ((prefix
		       (car
			(cdr e))))
		   (doom-print
		    (doom-print--format
		     (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
		     prefix))
		   (let*
		       ((suggested
			 (and t
			      (let*
				  ((--cl-var-- t)
				   --cl-var--)
				(catch '--cl-block---cl-finish----
				  (maphash
				   #'(lambda
				       (--cl-var-- cli)
				       (or
					(if
					    (progn
					      (or
					       (progn
						 (and
						  (memq
						   (type-of cli)
						   cl-struct-doom-cli-tags)
						  t))
					       (signal 'wrong-type-argument
						       (list 'doom-cli cli)))
					      (aref cli 2))
					    t
					  (progn
					    (setq --cl-var--
						  (car
						   (progn
						     (or
						      (progn
							(and
							 (memq
							  (type-of cli)
							  cl-struct-doom-cli-tags)
							 t))
						      (signal 'wrong-type-argument
							      (list 'doom-cli cli)))
						     (aref cli 1))))
					    (setq --cl-var-- nil)))
					(throw '--cl-block---cl-finish---- nil)))
				   doom-cli--table))
				--cl-var--))))
		     (if suggested
			 (doom-print
			  (doom-print--format "Did you mean %S?" suggested))
		       (doom-print
			(doom-print--format "There are no commands defined under %S." prefix)))))
		 4)
		(user-error
		 (doom-print
		  (doom-print--format
		   (doom-print--style 'red "Error: %s")
		   (car
		    (cdr e))))
		 (doom-print
		  (doom-print--format "\nAborting..."))
		 3)))
	    context))))
   (fset #'message old))
 nil)

;;;; 47
((let*
     ((vnew
       (doom-print--redirect-message streamspec
				     (if noninteractive 'debug 'notice)))
      (old
       (symbol-function #'message)))
   (unwind-protect
       (progn
	 (fset #'message vnew)
	 (let
	     ((doom-print-stream standard-output))
	   (progn
	     (if
		 (and
		  (not doom-inhibit-log)
		  (or
		   (not noninteractive)
		   (<= 2 doom-log-level)))
		 (progn
		   (doom--log 2 "run!: %s %s" prefix
			      (combine-and-quote-strings args))))
	     (add-hook 'kill-emacs-hook show-benchmark-fn 94)
	     (add-hook 'kill-emacs-hook write-logs-fn 95)
	     (if
		 (doom-cli-context-pipe-p context :out t)
		 (progn
		   (setq doom-print-backend nil)))
	     (if
		 (doom-cli-context-pipe-p context :in)
		 (progn
		   (save-current-buffer
		     (set-buffer
		      (progn
			(or
			 (progn
			   (and
			    (memq
			     (type-of context)
			     cl-struct-doom-cli-context-tags)
			    t))
			 (signal 'wrong-type-argument
				 (list 'doom-cli-context context)))
			(aref context 15)))
		     (while
			 (let*
			     ((in
			       (and t
				    (condition-case nil
					(progn
					  (read-from-minibuffer ""))
				      (error nil)))))
			   (if in
			       (insert in "\n")
			     (condition-case nil
				 (progn
				   (delete-char -1))
			       (error nil))))))))
	     (doom-cli--exit
	      (catch 'exit
		(condition-case e
		    (let*
			((args
			  (cons
			   (if
			       (getenv "__DOOMDUMP")
			       :dump prefix)
			   args))
			 (context
			  (doom-cli-context-restore
			   (getenv "__DOOMCONTEXT")
			   context))
			 (context
			  (doom-cli-context-parse args context)))
		      (run-hook-with-args 'doom-cli-before-run-functions context)
		      (let
			  ((result
			    (doom-cli-context-execute context)))
			(run-hook-with-args 'doom-cli-after-run-functions context result))
		      0)
		  (doom-cli-wrong-number-of-arguments-error
		   (let*
		       ((val
			 (cdr e)))
		     (progn
		       (ignore
			(consp val))
		       (let*
			   ((x27
			     (car-safe val))
			    (x28
			     (cdr-safe val)))
			 (progn
			   (ignore
			    (consp x28))
			   (let*
			       ((x29
				 (car-safe x28))
				(x30
				 (cdr-safe x28)))
			     (progn
			       (ignore
				(consp x30))
			       (let*
				   ((x31
				     (car-safe x30))
				    (x32
				     (cdr-safe x30)))
				 (progn
				   (ignore
				    (consp x32))
				   (let*
				       ((x33
					 (car-safe x32))
					(x34
					 (cdr-safe x32)))
				     (progn
				       (ignore
					(consp x34))
				       (let*
					   ((x35
					     (car-safe x34))
					    (x36
					     (cdr-safe x34)))
					 (progn
					   (ignore
					    (null x36))
					   (let
					       ((command x27)
						(flag x29)
						(args x31)
						(min x33)
						(max x35))
					     (progn
					       (doom-print
						(doom-print--format
						 (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
						 (or flag
						     (doom-cli-command-string
						      (if
							  (keywordp
							   (car command))
							  command
							(cdr command))))
						 (if
						     (or
						      (= min max)
						      (= max most-positive-fixnum))
						     min
						   (format "%d-%d" min max))
						 (if
						     (or
						      (= min 0)
						      (> min 1))
						     "s" "")
						 (length args)))
					       (doom-cli-call
						(cons ':help
						      (cons "--synopsis"
							    (cons "--postamble"
								  (cdr
								   (doom-cli--command context)))))
						context e)))))))))))))))
		   5)
		  (doom-cli-unrecognized-option-error
		   (doom-print
		    (doom-print--format
		     (doom-print--style 'red "Error: unknown option %s")
		     (car
		      (cdr e))))
		   (doom-cli-call
		    (cons ':help
			  (cons "--synopsis"
				(cons "--postamble"
				      (cdr
				       (doom-cli--command context)))))
		    context e)
		   5)
		  (doom-cli-invalid-option-error
		   (let*
		       ((val
			 (cdr e)))
		     (progn
		       (ignore
			(consp val))
		       (let*
			   ((x37
			     (car-safe val))
			    (x38
			     (cdr-safe val)))
			 (progn
			   (ignore
			    (consp x38))
			   (let*
			       ((x39
				 (car-safe x38))
				(x40
				 (cdr-safe x38)))
			     (progn
			       (ignore
				(consp x40))
			       (let*
				   ((x41
				     (car-safe x40))
				    (x42
				     (cdr-safe x40)))
				 (progn
				   (ignore
				    (consp x42))
				   (let*
				       ((x43
					 (car-safe x42))
					(x44
					 (cdr-safe x42)))
				     (progn
				       (ignore
					(null x44))
				       (let
					   ((types x37)
					    (option x39)
					    (value x41)
					    (errors x43))
					 (progn
					   (doom-print
					    (doom-print--format
					     (doom-print--style 'red "Error: %s received invalid value %S")
					     (string-join
					      (progn
						(or
						 (progn
						   (and
						    (memq
						     (type-of option)
						     cl-struct-doom-cli-option-tags)
						    t))
						 (signal 'wrong-type-argument
							 (list 'doom-cli-option option)))
						(aref option 5))
					      "/")
					     value))
					   (doom-print
					    (doom-print--format
					     (doom-print--style 'bold "\nValidation errors:")))
					   (let
					       ((tail errors))
					     (while tail
					       (let
						   ((err
						     (car tail)))
						 (doom-print
						  (doom-print--format
						   (doom-print--class 'item "%s."
								      (doom-print--class 'fill err))))
						 (setq tail
						       (cdr tail)))))))))))))))))
		   (doom-cli-call
		    (cons ':help
			  (cons "--postamble"
				(cdr
				 (doom-cli--command context))))
		    context e)
		   5)
		  (doom-cli-command-not-found-error
		   (let*
		       ((command
			 (cdr e))
			(cli
			 (doom-cli-get command)))
		     (cond
		      ((null cli)
		       (doom-print
			(doom-print--format
			 (doom-print--style 'red "Error: unrecognized command '%s'")
			 (doom-cli-command-string
			  (or
			   (cdr command)
			   command))))
		       (doom-cli-call
			(cons ':help
			      (cons "--similar"
				    (cons "--postamble"
					  (cdr command))))
			context e))
		      ((null
			(progn
			  (or
			   (progn
			     (and
			      (memq
			       (type-of cli)
			       cl-struct-doom-cli-tags)
			      t))
			   (signal 'wrong-type-argument
				   (list 'doom-cli cli)))
			  (aref cli 9)))
		       (doom-print
			(doom-print--format
			 (doom-print--style 'red "Error: a subcommand is required")))
		       (doom-cli-call
			(cons ':help
			      (cons "--subcommands"
				    (cons "--postamble"
					  (cdr command))))
			context e))))
		   4)
		  (doom-cli-invalid-prefix-error
		   (let
		       ((prefix
			 (car
			  (cdr e))))
		     (doom-print
		      (doom-print--format
		       (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
		       prefix))
		     (let*
			 ((suggested
			   (and t
				(let*
				    ((--cl-var-- t)
				     --cl-var--)
				  (catch '--cl-block---cl-finish----
				    (maphash
				     #'(lambda
					 (--cl-var-- cli)
					 (or
					  (if
					      (progn
						(or
						 (progn
						   (and
						    (memq
						     (type-of cli)
						     cl-struct-doom-cli-tags)
						    t))
						 (signal 'wrong-type-argument
							 (list 'doom-cli cli)))
						(aref cli 2))
					      t
					    (progn
					      (setq --cl-var--
						    (car
						     (progn
						       (or
							(progn
							  (and
							   (memq
							    (type-of cli)
							    cl-struct-doom-cli-tags)
							   t))
							(signal 'wrong-type-argument
								(list 'doom-cli cli)))
						       (aref cli 1))))
					      (setq --cl-var-- nil)))
					  (throw '--cl-block---cl-finish---- nil)))
				     doom-cli--table))
				  --cl-var--))))
		       (if suggested
			   (doom-print
			    (doom-print--format "Did you mean %S?" suggested))
			 (doom-print
			  (doom-print--format "There are no commands defined under %S." prefix)))))
		   4)
		  (user-error
		   (doom-print
		    (doom-print--format
		     (doom-print--style 'red "Error: %s")
		     (car
		      (cdr e))))
		   (doom-print
		    (doom-print--format "\nAborting..."))
		   3)))
	      context))))
     (fset #'message old)))
 ((prefix . "doom")
  (args
   ("sync"))
  (args "sync")
  (context . #s(doom-cli-context
		(26387 63354 473960 173000)
		8602 0
		(90 . 8)
		nil nil "doom" nil nil
		("doom" "profiles" "sync")
		nil
		("sync")
		(("--reload" . "--reload")
		 ("--aot")
		 ("-B")
		 ("--rebuild")
		 ("-b")
		 ("--jobs")
		 ("-j")
		 ("--gc")
		 ("-U")
		 ("-u")
		 ("-e")
		 ("--eval")
		 ("-E")
		 ("--strict-load")
		 ("--load")
		 ("-L")
		 ("--color")
		 ("--benchmark")
		 ("--profile")
		 ("--pager")
		 ("--emacsdir")
		 ("--doomdir")
		 ("--verbose")
		 ("-v")
		 ("--debug")
		 ("-D")
		 ("--force")
		 ("-!"))
		((t)
		 (("doom" "profiles" "sync")
		  "--reload")
		 (("doom" "profiles")
		  "sync" "--reload")
		 (("doom")
		  "profiles" "sync" "--reload"))
		#<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (write-logs-fn .
		 #[128 "\302\301\303\300\4\"\"\207"
		       [(#s(doom-cli-context
			    (26387 63354 473960 173000)
			    8602 0
			    (90 . 8)
			    nil nil "doom" nil nil
			    ("doom" "profiles" "sync")
			    nil
			    ("sync")
			    (("--reload" . "--reload")
			     ("--aot")
			     ("-B")
			     ("--rebuild")
			     ("-b")
			     ("--jobs")
			     ("-j")
			     ("--gc")
			     ("-U")
			     ("-u")
			     ("-e")
			     ("--eval")
			     ("-E")
			     ("--strict-load")
			     ("--load")
			     ("-L")
			     ("--color")
			     ("--benchmark")
			     ("--profile")
			     ("--pager")
			     ("--emacsdir")
			     ("--doomdir")
			     ("--verbose")
			     ("-v")
			     ("--debug")
			     ("-D")
			     ("--force")
			     ("-!"))
			    ((t)
			     (("doom" "profiles" "sync")
			      "--reload")
			     (("doom" "profiles")
			      "sync" "--reload")
			     (("doom")
			      "profiles" "sync" "--reload"))
			    #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
			doom-cli--output-write-logs-h apply append]
		       6 "\n\n(fn &rest ARGS2)"])
  (show-benchmark-fn .
		     #[128 "\302\301\303\300\4\"\"\207"
			   [(#s(doom-cli-context
				(26387 63354 473960 173000)
				8602 0
				(90 . 8)
				nil nil "doom" nil nil
				("doom" "profiles" "sync")
				nil
				("sync")
				(("--reload" . "--reload")
				 ("--aot")
				 ("-B")
				 ("--rebuild")
				 ("-b")
				 ("--jobs")
				 ("-j")
				 ("--gc")
				 ("-U")
				 ("-u")
				 ("-e")
				 ("--eval")
				 ("-E")
				 ("--strict-load")
				 ("--load")
				 ("-L")
				 ("--color")
				 ("--benchmark")
				 ("--profile")
				 ("--pager")
				 ("--emacsdir")
				 ("--doomdir")
				 ("--verbose")
				 ("-v")
				 ("--debug")
				 ("-D")
				 ("--force")
				 ("-!"))
				((t)
				 (("doom" "profiles" "sync")
				  "--reload")
				 (("doom" "profiles")
				  "sync" "--reload")
				 (("doom")
				  "profiles" "sync" "--reload"))
				#<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
			    doom-cli--output-benchmark-h apply append]
			   6 "\n\n(fn &rest ARGS2)"])
  (doomctxt . #s(doom-cli-context
		 (26387 63354 473960 173000)
		 8602 0
		 (90 . 8)
		 nil nil "doom" nil nil
		 ("doom" "profiles" "sync")
		 nil
		 ("sync")
		 (("--reload" . "--reload")
		  ("--aot")
		  ("-B")
		  ("--rebuild")
		  ("-b")
		  ("--jobs")
		  ("-j")
		  ("--gc")
		  ("-U")
		  ("-u")
		  ("-e")
		  ("--eval")
		  ("-E")
		  ("--strict-load")
		  ("--load")
		  ("-L")
		  ("--color")
		  ("--benchmark")
		  ("--profile")
		  ("--pager")
		  ("--emacsdir")
		  ("--doomdir")
		  ("--verbose")
		  ("-v")
		  ("--debug")
		  ("-D")
		  ("--force")
		  ("-!"))
		 ((t)
		  (("doom" "profiles" "sync")
		   "--reload")
		  (("doom" "profiles")
		   "sync" "--reload")
		  (("doom")
		   "profiles" "sync" "--reload"))
		 #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (streamspec
   (>= notice #<buffer  *doom-cli stdout*>)
   (t . #<buffer  *doom-cli stderr*>))
  (vnew closure
	((streams
	  (#[128 "\302\301\303\300\4\"\"\207"
		 [(0 2)
		  >= apply append]
		 6 "\n\n(fn &rest ARGS2)"]
	   . #<buffer  *doom-cli stdout*>)
	  (t . #<buffer  *doom-cli stderr*>))
	 (old . #<subr message>)
	 (level . debug))
	(message &rest args)
	(if message
	    (progn
	      (let
		  ((output
		    (apply #'doom-print--format message args)))
		(if
		    (<= doom-print--output-depth 1)
		    (doom-print output :level level :stream t)
		  (let
		      ((doom-print--output-depth
			(1- doom-print--output-depth)))
		    (funcall old "%s" output)))
		(let
		    ((tail streams))
		  (while tail
		    (let
			((stream
			  (car tail)))
		      (if
			  (or
			   (eq
			    (car stream)
			    t)
			   (funcall
			    (car stream)))
			  (progn
			    (doom-print output :stream
					(cdr stream))))
		      (setq tail
			    (cdr tail))))))
	      message)))
  (old . #<subr message>)))

;;;; 48
((let
     ((standard-output
       (doom-print--redirect-standard-output streamspec t)))
   (let*
       ((vnew
	 (doom-print--redirect-message streamspec
				       (if noninteractive 'debug 'notice)))
	(old
	 (symbol-function #'message)))
     (unwind-protect
	 (progn
	   (fset #'message vnew)
	   (let
	       ((doom-print-stream standard-output))
	     (progn
	       (if
		   (and
		    (not doom-inhibit-log)
		    (or
		     (not noninteractive)
		     (<= 2 doom-log-level)))
		   (progn
		     (doom--log 2 "run!: %s %s" prefix
				(combine-and-quote-strings args))))
	       (add-hook 'kill-emacs-hook show-benchmark-fn 94)
	       (add-hook 'kill-emacs-hook write-logs-fn 95)
	       (if
		   (doom-cli-context-pipe-p context :out t)
		   (progn
		     (setq doom-print-backend nil)))
	       (if
		   (doom-cli-context-pipe-p context :in)
		   (progn
		     (save-current-buffer
		       (set-buffer
			(progn
			  (or
			   (progn
			     (and
			      (memq
			       (type-of context)
			       cl-struct-doom-cli-context-tags)
			      t))
			   (signal 'wrong-type-argument
				   (list 'doom-cli-context context)))
			  (aref context 15)))
		       (while
			   (let*
			       ((in
				 (and t
				      (condition-case nil
					  (progn
					    (read-from-minibuffer ""))
					(error nil)))))
			     (if in
				 (insert in "\n")
			       (condition-case nil
				   (progn
				     (delete-char -1))
				 (error nil))))))))
	       (doom-cli--exit
		(catch 'exit
		  (condition-case e
		      (let*
			  ((args
			    (cons
			     (if
				 (getenv "__DOOMDUMP")
				 :dump prefix)
			     args))
			   (context
			    (doom-cli-context-restore
			     (getenv "__DOOMCONTEXT")
			     context))
			   (context
			    (doom-cli-context-parse args context)))
			(run-hook-with-args 'doom-cli-before-run-functions context)
			(let
			    ((result
			      (doom-cli-context-execute context)))
			  (run-hook-with-args 'doom-cli-after-run-functions context result))
			0)
		    (doom-cli-wrong-number-of-arguments-error
		     (let*
			 ((val
			   (cdr e)))
		       (progn
			 (ignore
			  (consp val))
			 (let*
			     ((x27
			       (car-safe val))
			      (x28
			       (cdr-safe val)))
			   (progn
			     (ignore
			      (consp x28))
			     (let*
				 ((x29
				   (car-safe x28))
				  (x30
				   (cdr-safe x28)))
			       (progn
				 (ignore
				  (consp x30))
				 (let*
				     ((x31
				       (car-safe x30))
				      (x32
				       (cdr-safe x30)))
				   (progn
				     (ignore
				      (consp x32))
				     (let*
					 ((x33
					   (car-safe x32))
					  (x34
					   (cdr-safe x32)))
				       (progn
					 (ignore
					  (consp x34))
					 (let*
					     ((x35
					       (car-safe x34))
					      (x36
					       (cdr-safe x34)))
					   (progn
					     (ignore
					      (null x36))
					     (let
						 ((command x27)
						  (flag x29)
						  (args x31)
						  (min x33)
						  (max x35))
					       (progn
						 (doom-print
						  (doom-print--format
						   (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
						   (or flag
						       (doom-cli-command-string
							(if
							    (keywordp
							     (car command))
							    command
							  (cdr command))))
						   (if
						       (or
							(= min max)
							(= max most-positive-fixnum))
						       min
						     (format "%d-%d" min max))
						   (if
						       (or
							(= min 0)
							(> min 1))
						       "s" "")
						   (length args)))
						 (doom-cli-call
						  (cons ':help
							(cons "--synopsis"
							      (cons "--postamble"
								    (cdr
								     (doom-cli--command context)))))
						  context e)))))))))))))))
		     5)
		    (doom-cli-unrecognized-option-error
		     (doom-print
		      (doom-print--format
		       (doom-print--style 'red "Error: unknown option %s")
		       (car
			(cdr e))))
		     (doom-cli-call
		      (cons ':help
			    (cons "--synopsis"
				  (cons "--postamble"
					(cdr
					 (doom-cli--command context)))))
		      context e)
		     5)
		    (doom-cli-invalid-option-error
		     (let*
			 ((val
			   (cdr e)))
		       (progn
			 (ignore
			  (consp val))
			 (let*
			     ((x37
			       (car-safe val))
			      (x38
			       (cdr-safe val)))
			   (progn
			     (ignore
			      (consp x38))
			     (let*
				 ((x39
				   (car-safe x38))
				  (x40
				   (cdr-safe x38)))
			       (progn
				 (ignore
				  (consp x40))
				 (let*
				     ((x41
				       (car-safe x40))
				      (x42
				       (cdr-safe x40)))
				   (progn
				     (ignore
				      (consp x42))
				     (let*
					 ((x43
					   (car-safe x42))
					  (x44
					   (cdr-safe x42)))
				       (progn
					 (ignore
					  (null x44))
					 (let
					     ((types x37)
					      (option x39)
					      (value x41)
					      (errors x43))
					   (progn
					     (doom-print
					      (doom-print--format
					       (doom-print--style 'red "Error: %s received invalid value %S")
					       (string-join
						(progn
						  (or
						   (progn
						     (and
						      (memq
						       (type-of option)
						       cl-struct-doom-cli-option-tags)
						      t))
						   (signal 'wrong-type-argument
							   (list 'doom-cli-option option)))
						  (aref option 5))
						"/")
					       value))
					     (doom-print
					      (doom-print--format
					       (doom-print--style 'bold "\nValidation errors:")))
					     (let
						 ((tail errors))
					       (while tail
						 (let
						     ((err
						       (car tail)))
						   (doom-print
						    (doom-print--format
						     (doom-print--class 'item "%s."
									(doom-print--class 'fill err))))
						   (setq tail
							 (cdr tail)))))))))))))))))
		     (doom-cli-call
		      (cons ':help
			    (cons "--postamble"
				  (cdr
				   (doom-cli--command context))))
		      context e)
		     5)
		    (doom-cli-command-not-found-error
		     (let*
			 ((command
			   (cdr e))
			  (cli
			   (doom-cli-get command)))
		       (cond
			((null cli)
			 (doom-print
			  (doom-print--format
			   (doom-print--style 'red "Error: unrecognized command '%s'")
			   (doom-cli-command-string
			    (or
			     (cdr command)
			     command))))
			 (doom-cli-call
			  (cons ':help
				(cons "--similar"
				      (cons "--postamble"
					    (cdr command))))
			  context e))
			((null
			  (progn
			    (or
			     (progn
			       (and
				(memq
				 (type-of cli)
				 cl-struct-doom-cli-tags)
				t))
			     (signal 'wrong-type-argument
				     (list 'doom-cli cli)))
			    (aref cli 9)))
			 (doom-print
			  (doom-print--format
			   (doom-print--style 'red "Error: a subcommand is required")))
			 (doom-cli-call
			  (cons ':help
				(cons "--subcommands"
				      (cons "--postamble"
					    (cdr command))))
			  context e))))
		     4)
		    (doom-cli-invalid-prefix-error
		     (let
			 ((prefix
			   (car
			    (cdr e))))
		       (doom-print
			(doom-print--format
			 (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
			 prefix))
		       (let*
			   ((suggested
			     (and t
				  (let*
				      ((--cl-var-- t)
				       --cl-var--)
				    (catch '--cl-block---cl-finish----
				      (maphash
				       #'(lambda
					   (--cl-var-- cli)
					   (or
					    (if
						(progn
						  (or
						   (progn
						     (and
						      (memq
						       (type-of cli)
						       cl-struct-doom-cli-tags)
						      t))
						   (signal 'wrong-type-argument
							   (list 'doom-cli cli)))
						  (aref cli 2))
						t
					      (progn
						(setq --cl-var--
						      (car
						       (progn
							 (or
							  (progn
							    (and
							     (memq
							      (type-of cli)
							      cl-struct-doom-cli-tags)
							     t))
							  (signal 'wrong-type-argument
								  (list 'doom-cli cli)))
							 (aref cli 1))))
						(setq --cl-var-- nil)))
					    (throw '--cl-block---cl-finish---- nil)))
				       doom-cli--table))
				    --cl-var--))))
			 (if suggested
			     (doom-print
			      (doom-print--format "Did you mean %S?" suggested))
			   (doom-print
			    (doom-print--format "There are no commands defined under %S." prefix)))))
		     4)
		    (user-error
		     (doom-print
		      (doom-print--format
		       (doom-print--style 'red "Error: %s")
		       (car
			(cdr e))))
		     (doom-print
		      (doom-print--format "\nAborting..."))
		     3)))
		context))))
       (fset #'message old))))
 ((standard-output closure
		   ((streams
		     (t . #<buffer  *doom-cli stdout*>)
		     (t . #<buffer  *doom-cli stderr*>))
		    (level . t))
		   (ch)
		   (let
		       ((str
			 (char-to-string ch)))
		     (let
			 ((tail streams))
		       (while tail
			 (let
			     ((stream
			       (car tail)))
			   (if
			       (or
				(eq
				 (car stream)
				 t)
				(funcall
				 (car stream)))
			       (progn
				 (doom-print str :newline nil :stream
					     (cdr stream))))
			   (setq tail
				 (cdr tail)))))
		     (doom-print str :newline nil :stream t :level level)))))

;;;; 49
((let
     ((streamspec
       (list
	(list '>= 'notice
	      (progn
		(or
		 (progn
		   (and
		    (memq
		     (type-of doomctxt)
		     cl-struct-doom-cli-context-tags)
		    t))
		 (signal 'wrong-type-argument
			 (list 'doom-cli-context doomctxt)))
		(aref doomctxt 16)))
	(cons t
	      (progn
		(or
		 (progn
		   (and
		    (memq
		     (type-of doomctxt)
		     cl-struct-doom-cli-context-tags)
		    t))
		 (signal 'wrong-type-argument
			 (list 'doom-cli-context doomctxt)))
		(aref doomctxt 17))))))
   (let
       ((standard-output
	 (doom-print--redirect-standard-output streamspec t)))
     (let*
	 ((vnew
	   (doom-print--redirect-message streamspec
					 (if noninteractive 'debug 'notice)))
	  (old
	   (symbol-function #'message)))
       (unwind-protect
	   (progn
	     (fset #'message vnew)
	     (let
		 ((doom-print-stream standard-output))
	       (progn
		 (if
		     (and
		      (not doom-inhibit-log)
		      (or
		       (not noninteractive)
		       (<= 2 doom-log-level)))
		     (progn
		       (doom--log 2 "run!: %s %s" prefix
				  (combine-and-quote-strings args))))
		 (add-hook 'kill-emacs-hook show-benchmark-fn 94)
		 (add-hook 'kill-emacs-hook write-logs-fn 95)
		 (if
		     (doom-cli-context-pipe-p context :out t)
		     (progn
		       (setq doom-print-backend nil)))
		 (if
		     (doom-cli-context-pipe-p context :in)
		     (progn
		       (save-current-buffer
			 (set-buffer
			  (progn
			    (or
			     (progn
			       (and
				(memq
				 (type-of context)
				 cl-struct-doom-cli-context-tags)
				t))
			     (signal 'wrong-type-argument
				     (list 'doom-cli-context context)))
			    (aref context 15)))
			 (while
			     (let*
				 ((in
				   (and t
					(condition-case nil
					    (progn
					      (read-from-minibuffer ""))
					  (error nil)))))
			       (if in
				   (insert in "\n")
				 (condition-case nil
				     (progn
				       (delete-char -1))
				   (error nil))))))))
		 (doom-cli--exit
		  (catch 'exit
		    (condition-case e
			(let*
			    ((args
			      (cons
			       (if
				   (getenv "__DOOMDUMP")
				   :dump prefix)
			       args))
			     (context
			      (doom-cli-context-restore
			       (getenv "__DOOMCONTEXT")
			       context))
			     (context
			      (doom-cli-context-parse args context)))
			  (run-hook-with-args 'doom-cli-before-run-functions context)
			  (let
			      ((result
				(doom-cli-context-execute context)))
			    (run-hook-with-args 'doom-cli-after-run-functions context result))
			  0)
		      (doom-cli-wrong-number-of-arguments-error
		       (let*
			   ((val
			     (cdr e)))
			 (progn
			   (ignore
			    (consp val))
			   (let*
			       ((x27
				 (car-safe val))
				(x28
				 (cdr-safe val)))
			     (progn
			       (ignore
				(consp x28))
			       (let*
				   ((x29
				     (car-safe x28))
				    (x30
				     (cdr-safe x28)))
				 (progn
				   (ignore
				    (consp x30))
				   (let*
				       ((x31
					 (car-safe x30))
					(x32
					 (cdr-safe x30)))
				     (progn
				       (ignore
					(consp x32))
				       (let*
					   ((x33
					     (car-safe x32))
					    (x34
					     (cdr-safe x32)))
					 (progn
					   (ignore
					    (consp x34))
					   (let*
					       ((x35
						 (car-safe x34))
						(x36
						 (cdr-safe x34)))
					     (progn
					       (ignore
						(null x36))
					       (let
						   ((command x27)
						    (flag x29)
						    (args x31)
						    (min x33)
						    (max x35))
						 (progn
						   (doom-print
						    (doom-print--format
						     (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
						     (or flag
							 (doom-cli-command-string
							  (if
							      (keywordp
							       (car command))
							      command
							    (cdr command))))
						     (if
							 (or
							  (= min max)
							  (= max most-positive-fixnum))
							 min
						       (format "%d-%d" min max))
						     (if
							 (or
							  (= min 0)
							  (> min 1))
							 "s" "")
						     (length args)))
						   (doom-cli-call
						    (cons ':help
							  (cons "--synopsis"
								(cons "--postamble"
								      (cdr
								       (doom-cli--command context)))))
						    context e)))))))))))))))
		       5)
		      (doom-cli-unrecognized-option-error
		       (doom-print
			(doom-print--format
			 (doom-print--style 'red "Error: unknown option %s")
			 (car
			  (cdr e))))
		       (doom-cli-call
			(cons ':help
			      (cons "--synopsis"
				    (cons "--postamble"
					  (cdr
					   (doom-cli--command context)))))
			context e)
		       5)
		      (doom-cli-invalid-option-error
		       (let*
			   ((val
			     (cdr e)))
			 (progn
			   (ignore
			    (consp val))
			   (let*
			       ((x37
				 (car-safe val))
				(x38
				 (cdr-safe val)))
			     (progn
			       (ignore
				(consp x38))
			       (let*
				   ((x39
				     (car-safe x38))
				    (x40
				     (cdr-safe x38)))
				 (progn
				   (ignore
				    (consp x40))
				   (let*
				       ((x41
					 (car-safe x40))
					(x42
					 (cdr-safe x40)))
				     (progn
				       (ignore
					(consp x42))
				       (let*
					   ((x43
					     (car-safe x42))
					    (x44
					     (cdr-safe x42)))
					 (progn
					   (ignore
					    (null x44))
					   (let
					       ((types x37)
						(option x39)
						(value x41)
						(errors x43))
					     (progn
					       (doom-print
						(doom-print--format
						 (doom-print--style 'red "Error: %s received invalid value %S")
						 (string-join
						  (progn
						    (or
						     (progn
						       (and
							(memq
							 (type-of option)
							 cl-struct-doom-cli-option-tags)
							t))
						     (signal 'wrong-type-argument
							     (list 'doom-cli-option option)))
						    (aref option 5))
						  "/")
						 value))
					       (doom-print
						(doom-print--format
						 (doom-print--style 'bold "\nValidation errors:")))
					       (let
						   ((tail errors))
						 (while tail
						   (let
						       ((err
							 (car tail)))
						     (doom-print
						      (doom-print--format
						       (doom-print--class 'item "%s."
									  (doom-print--class 'fill err))))
						     (setq tail
							   (cdr tail)))))))))))))))))
		       (doom-cli-call
			(cons ':help
			      (cons "--postamble"
				    (cdr
				     (doom-cli--command context))))
			context e)
		       5)
		      (doom-cli-command-not-found-error
		       (let*
			   ((command
			     (cdr e))
			    (cli
			     (doom-cli-get command)))
			 (cond
			  ((null cli)
			   (doom-print
			    (doom-print--format
			     (doom-print--style 'red "Error: unrecognized command '%s'")
			     (doom-cli-command-string
			      (or
			       (cdr command)
			       command))))
			   (doom-cli-call
			    (cons ':help
				  (cons "--similar"
					(cons "--postamble"
					      (cdr command))))
			    context e))
			  ((null
			    (progn
			      (or
			       (progn
				 (and
				  (memq
				   (type-of cli)
				   cl-struct-doom-cli-tags)
				  t))
			       (signal 'wrong-type-argument
				       (list 'doom-cli cli)))
			      (aref cli 9)))
			   (doom-print
			    (doom-print--format
			     (doom-print--style 'red "Error: a subcommand is required")))
			   (doom-cli-call
			    (cons ':help
				  (cons "--subcommands"
					(cons "--postamble"
					      (cdr command))))
			    context e))))
		       4)
		      (doom-cli-invalid-prefix-error
		       (let
			   ((prefix
			     (car
			      (cdr e))))
			 (doom-print
			  (doom-print--format
			   (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
			   prefix))
			 (let*
			     ((suggested
			       (and t
				    (let*
					((--cl-var-- t)
					 --cl-var--)
				      (catch '--cl-block---cl-finish----
					(maphash
					 #'(lambda
					     (--cl-var-- cli)
					     (or
					      (if
						  (progn
						    (or
						     (progn
						       (and
							(memq
							 (type-of cli)
							 cl-struct-doom-cli-tags)
							t))
						     (signal 'wrong-type-argument
							     (list 'doom-cli cli)))
						    (aref cli 2))
						  t
						(progn
						  (setq --cl-var--
							(car
							 (progn
							   (or
							    (progn
							      (and
							       (memq
								(type-of cli)
								cl-struct-doom-cli-tags)
							       t))
							    (signal 'wrong-type-argument
								    (list 'doom-cli cli)))
							   (aref cli 1))))
						  (setq --cl-var-- nil)))
					      (throw '--cl-block---cl-finish---- nil)))
					 doom-cli--table))
				      --cl-var--))))
			   (if suggested
			       (doom-print
				(doom-print--format "Did you mean %S?" suggested))
			     (doom-print
			      (doom-print--format "There are no commands defined under %S." prefix)))))
		       4)
		      (user-error
		       (doom-print
			(doom-print--format
			 (doom-print--style 'red "Error: %s")
			 (car
			  (cdr e))))
		       (doom-print
			(doom-print--format "\nAborting..."))
		       3)))
		  context))))
	 (fset #'message old)))))
 ((prefix . "doom")
  (args
   ("sync"))
  (args "sync")
  (context . #s(doom-cli-context
		(26387 63354 473960 173000)
		8602 0
		(90 . 8)
		nil nil "doom" nil nil
		("doom" "profiles" "sync")
		nil
		("sync")
		(("--reload" . "--reload")
		 ("--aot")
		 ("-B")
		 ("--rebuild")
		 ("-b")
		 ("--jobs")
		 ("-j")
		 ("--gc")
		 ("-U")
		 ("-u")
		 ("-e")
		 ("--eval")
		 ("-E")
		 ("--strict-load")
		 ("--load")
		 ("-L")
		 ("--color")
		 ("--benchmark")
		 ("--profile")
		 ("--pager")
		 ("--emacsdir")
		 ("--doomdir")
		 ("--verbose")
		 ("-v")
		 ("--debug")
		 ("-D")
		 ("--force")
		 ("-!"))
		((t)
		 (("doom" "profiles" "sync")
		  "--reload")
		 (("doom" "profiles")
		  "sync" "--reload")
		 (("doom")
		  "profiles" "sync" "--reload"))
		#<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (write-logs-fn .
		 #[128 "\302\301\303\300\4\"\"\207"
		       [(#s(doom-cli-context
			    (26387 63354 473960 173000)
			    8602 0
			    (90 . 8)
			    nil nil "doom" nil nil
			    ("doom" "profiles" "sync")
			    nil
			    ("sync")
			    (("--reload" . "--reload")
			     ("--aot")
			     ("-B")
			     ("--rebuild")
			     ("-b")
			     ("--jobs")
			     ("-j")
			     ("--gc")
			     ("-U")
			     ("-u")
			     ("-e")
			     ("--eval")
			     ("-E")
			     ("--strict-load")
			     ("--load")
			     ("-L")
			     ("--color")
			     ("--benchmark")
			     ("--profile")
			     ("--pager")
			     ("--emacsdir")
			     ("--doomdir")
			     ("--verbose")
			     ("-v")
			     ("--debug")
			     ("-D")
			     ("--force")
			     ("-!"))
			    ((t)
			     (("doom" "profiles" "sync")
			      "--reload")
			     (("doom" "profiles")
			      "sync" "--reload")
			     (("doom")
			      "profiles" "sync" "--reload"))
			    #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
			doom-cli--output-write-logs-h apply append]
		       6 "\n\n(fn &rest ARGS2)"])
  (show-benchmark-fn .
		     #[128 "\302\301\303\300\4\"\"\207"
			   [(#s(doom-cli-context
				(26387 63354 473960 173000)
				8602 0
				(90 . 8)
				nil nil "doom" nil nil
				("doom" "profiles" "sync")
				nil
				("sync")
				(("--reload" . "--reload")
				 ("--aot")
				 ("-B")
				 ("--rebuild")
				 ("-b")
				 ("--jobs")
				 ("-j")
				 ("--gc")
				 ("-U")
				 ("-u")
				 ("-e")
				 ("--eval")
				 ("-E")
				 ("--strict-load")
				 ("--load")
				 ("-L")
				 ("--color")
				 ("--benchmark")
				 ("--profile")
				 ("--pager")
				 ("--emacsdir")
				 ("--doomdir")
				 ("--verbose")
				 ("-v")
				 ("--debug")
				 ("-D")
				 ("--force")
				 ("-!"))
				((t)
				 (("doom" "profiles" "sync")
				  "--reload")
				 (("doom" "profiles")
				  "sync" "--reload")
				 (("doom")
				  "profiles" "sync" "--reload"))
				#<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
			    doom-cli--output-benchmark-h apply append]
			   6 "\n\n(fn &rest ARGS2)"])
  (doomctxt . #s(doom-cli-context
		 (26387 63354 473960 173000)
		 8602 0
		 (90 . 8)
		 nil nil "doom" nil nil
		 ("doom" "profiles" "sync")
		 nil
		 ("sync")
		 (("--reload" . "--reload")
		  ("--aot")
		  ("-B")
		  ("--rebuild")
		  ("-b")
		  ("--jobs")
		  ("-j")
		  ("--gc")
		  ("-U")
		  ("-u")
		  ("-e")
		  ("--eval")
		  ("-E")
		  ("--strict-load")
		  ("--load")
		  ("-L")
		  ("--color")
		  ("--benchmark")
		  ("--profile")
		  ("--pager")
		  ("--emacsdir")
		  ("--doomdir")
		  ("--verbose")
		  ("-v")
		  ("--debug")
		  ("-D")
		  ("--force")
		  ("-!"))
		 ((t)
		  (("doom" "profiles" "sync")
		   "--reload")
		  (("doom" "profiles")
		   "sync" "--reload")
		  (("doom")
		   "profiles" "sync" "--reload"))
		 #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (streamspec
   (>= notice #<buffer  *doom-cli stdout*>)
   (t . #<buffer  *doom-cli stderr*>))))

;;;; 50
((let*
     ((doomctxt context)
      (debugger
       (doom-rpartial #'doom-cli-debugger doomctxt))
      (debug-on-error t))
   (let
       ((streamspec
	 (list
	  (list '>= 'notice
		(progn
		  (or
		   (progn
		     (and
		      (memq
		       (type-of doomctxt)
		       cl-struct-doom-cli-context-tags)
		      t))
		   (signal 'wrong-type-argument
			   (list 'doom-cli-context doomctxt)))
		  (aref doomctxt 16)))
	  (cons t
		(progn
		  (or
		   (progn
		     (and
		      (memq
		       (type-of doomctxt)
		       cl-struct-doom-cli-context-tags)
		      t))
		   (signal 'wrong-type-argument
			   (list 'doom-cli-context doomctxt)))
		  (aref doomctxt 17))))))
     (let
	 ((standard-output
	   (doom-print--redirect-standard-output streamspec t)))
       (let*
	   ((vnew
	     (doom-print--redirect-message streamspec
					   (if noninteractive 'debug 'notice)))
	    (old
	     (symbol-function #'message)))
	 (unwind-protect
	     (progn
	       (fset #'message vnew)
	       (let
		   ((doom-print-stream standard-output))
		 (progn
		   (if
		       (and
			(not doom-inhibit-log)
			(or
			 (not noninteractive)
			 (<= 2 doom-log-level)))
		       (progn
			 (doom--log 2 "run!: %s %s" prefix
				    (combine-and-quote-strings args))))
		   (add-hook 'kill-emacs-hook show-benchmark-fn 94)
		   (add-hook 'kill-emacs-hook write-logs-fn 95)
		   (if
		       (doom-cli-context-pipe-p context :out t)
		       (progn
			 (setq doom-print-backend nil)))
		   (if
		       (doom-cli-context-pipe-p context :in)
		       (progn
			 (save-current-buffer
			   (set-buffer
			    (progn
			      (or
			       (progn
				 (and
				  (memq
				   (type-of context)
				   cl-struct-doom-cli-context-tags)
				  t))
			       (signal 'wrong-type-argument
				       (list 'doom-cli-context context)))
			      (aref context 15)))
			   (while
			       (let*
				   ((in
				     (and t
					  (condition-case nil
					      (progn
						(read-from-minibuffer ""))
					    (error nil)))))
				 (if in
				     (insert in "\n")
				   (condition-case nil
				       (progn
					 (delete-char -1))
				     (error nil))))))))
		   (doom-cli--exit
		    (catch 'exit
		      (condition-case e
			  (let*
			      ((args
				(cons
				 (if
				     (getenv "__DOOMDUMP")
				     :dump prefix)
				 args))
			       (context
				(doom-cli-context-restore
				 (getenv "__DOOMCONTEXT")
				 context))
			       (context
				(doom-cli-context-parse args context)))
			    (run-hook-with-args 'doom-cli-before-run-functions context)
			    (let
				((result
				  (doom-cli-context-execute context)))
			      (run-hook-with-args 'doom-cli-after-run-functions context result))
			    0)
			(doom-cli-wrong-number-of-arguments-error
			 (let*
			     ((val
			       (cdr e)))
			   (progn
			     (ignore
			      (consp val))
			     (let*
				 ((x27
				   (car-safe val))
				  (x28
				   (cdr-safe val)))
			       (progn
				 (ignore
				  (consp x28))
				 (let*
				     ((x29
				       (car-safe x28))
				      (x30
				       (cdr-safe x28)))
				   (progn
				     (ignore
				      (consp x30))
				     (let*
					 ((x31
					   (car-safe x30))
					  (x32
					   (cdr-safe x30)))
				       (progn
					 (ignore
					  (consp x32))
					 (let*
					     ((x33
					       (car-safe x32))
					      (x34
					       (cdr-safe x32)))
					   (progn
					     (ignore
					      (consp x34))
					     (let*
						 ((x35
						   (car-safe x34))
						  (x36
						   (cdr-safe x34)))
					       (progn
						 (ignore
						  (null x36))
						 (let
						     ((command x27)
						      (flag x29)
						      (args x31)
						      (min x33)
						      (max x35))
						   (progn
						     (doom-print
						      (doom-print--format
						       (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
						       (or flag
							   (doom-cli-command-string
							    (if
								(keywordp
								 (car command))
								command
							      (cdr command))))
						       (if
							   (or
							    (= min max)
							    (= max most-positive-fixnum))
							   min
							 (format "%d-%d" min max))
						       (if
							   (or
							    (= min 0)
							    (> min 1))
							   "s" "")
						       (length args)))
						     (doom-cli-call
						      (cons ':help
							    (cons "--synopsis"
								  (cons "--postamble"
									(cdr
									 (doom-cli--command context)))))
						      context e)))))))))))))))
			 5)
			(doom-cli-unrecognized-option-error
			 (doom-print
			  (doom-print--format
			   (doom-print--style 'red "Error: unknown option %s")
			   (car
			    (cdr e))))
			 (doom-cli-call
			  (cons ':help
				(cons "--synopsis"
				      (cons "--postamble"
					    (cdr
					     (doom-cli--command context)))))
			  context e)
			 5)
			(doom-cli-invalid-option-error
			 (let*
			     ((val
			       (cdr e)))
			   (progn
			     (ignore
			      (consp val))
			     (let*
				 ((x37
				   (car-safe val))
				  (x38
				   (cdr-safe val)))
			       (progn
				 (ignore
				  (consp x38))
				 (let*
				     ((x39
				       (car-safe x38))
				      (x40
				       (cdr-safe x38)))
				   (progn
				     (ignore
				      (consp x40))
				     (let*
					 ((x41
					   (car-safe x40))
					  (x42
					   (cdr-safe x40)))
				       (progn
					 (ignore
					  (consp x42))
					 (let*
					     ((x43
					       (car-safe x42))
					      (x44
					       (cdr-safe x42)))
					   (progn
					     (ignore
					      (null x44))
					     (let
						 ((types x37)
						  (option x39)
						  (value x41)
						  (errors x43))
					       (progn
						 (doom-print
						  (doom-print--format
						   (doom-print--style 'red "Error: %s received invalid value %S")
						   (string-join
						    (progn
						      (or
						       (progn
							 (and
							  (memq
							   (type-of option)
							   cl-struct-doom-cli-option-tags)
							  t))
						       (signal 'wrong-type-argument
							       (list 'doom-cli-option option)))
						      (aref option 5))
						    "/")
						   value))
						 (doom-print
						  (doom-print--format
						   (doom-print--style 'bold "\nValidation errors:")))
						 (let
						     ((tail errors))
						   (while tail
						     (let
							 ((err
							   (car tail)))
						       (doom-print
							(doom-print--format
							 (doom-print--class 'item "%s."
									    (doom-print--class 'fill err))))
						       (setq tail
							     (cdr tail)))))))))))))))))
			 (doom-cli-call
			  (cons ':help
				(cons "--postamble"
				      (cdr
				       (doom-cli--command context))))
			  context e)
			 5)
			(doom-cli-command-not-found-error
			 (let*
			     ((command
			       (cdr e))
			      (cli
			       (doom-cli-get command)))
			   (cond
			    ((null cli)
			     (doom-print
			      (doom-print--format
			       (doom-print--style 'red "Error: unrecognized command '%s'")
			       (doom-cli-command-string
				(or
				 (cdr command)
				 command))))
			     (doom-cli-call
			      (cons ':help
				    (cons "--similar"
					  (cons "--postamble"
						(cdr command))))
			      context e))
			    ((null
			      (progn
				(or
				 (progn
				   (and
				    (memq
				     (type-of cli)
				     cl-struct-doom-cli-tags)
				    t))
				 (signal 'wrong-type-argument
					 (list 'doom-cli cli)))
				(aref cli 9)))
			     (doom-print
			      (doom-print--format
			       (doom-print--style 'red "Error: a subcommand is required")))
			     (doom-cli-call
			      (cons ':help
				    (cons "--subcommands"
					  (cons "--postamble"
						(cdr command))))
			      context e))))
			 4)
			(doom-cli-invalid-prefix-error
			 (let
			     ((prefix
			       (car
				(cdr e))))
			   (doom-print
			    (doom-print--format
			     (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
			     prefix))
			   (let*
			       ((suggested
				 (and t
				      (let*
					  ((--cl-var-- t)
					   --cl-var--)
					(catch '--cl-block---cl-finish----
					  (maphash
					   #'(lambda
					       (--cl-var-- cli)
					       (or
						(if
						    (progn
						      (or
						       (progn
							 (and
							  (memq
							   (type-of cli)
							   cl-struct-doom-cli-tags)
							  t))
						       (signal 'wrong-type-argument
							       (list 'doom-cli cli)))
						      (aref cli 2))
						    t
						  (progn
						    (setq --cl-var--
							  (car
							   (progn
							     (or
							      (progn
								(and
								 (memq
								  (type-of cli)
								  cl-struct-doom-cli-tags)
								 t))
							      (signal 'wrong-type-argument
								      (list 'doom-cli cli)))
							     (aref cli 1))))
						    (setq --cl-var-- nil)))
						(throw '--cl-block---cl-finish---- nil)))
					   doom-cli--table))
					--cl-var--))))
			     (if suggested
				 (doom-print
				  (doom-print--format "Did you mean %S?" suggested))
			       (doom-print
				(doom-print--format "There are no commands defined under %S." prefix)))))
			 4)
			(user-error
			 (doom-print
			  (doom-print--format
			   (doom-print--style 'red "Error: %s")
			   (car
			    (cdr e))))
			 (doom-print
			  (doom-print--format "\nAborting..."))
			 3)))
		    context))))
	   (fset #'message old))))))
 ((prefix . "doom")
  (args
   ("sync"))
  (args "sync")
  (context . #s(doom-cli-context
		(26387 63354 473960 173000)
		8602 0
		(90 . 8)
		nil nil "doom" nil nil
		("doom" "profiles" "sync")
		nil
		("sync")
		(("--reload" . "--reload")
		 ("--aot")
		 ("-B")
		 ("--rebuild")
		 ("-b")
		 ("--jobs")
		 ("-j")
		 ("--gc")
		 ("-U")
		 ("-u")
		 ("-e")
		 ("--eval")
		 ("-E")
		 ("--strict-load")
		 ("--load")
		 ("-L")
		 ("--color")
		 ("--benchmark")
		 ("--profile")
		 ("--pager")
		 ("--emacsdir")
		 ("--doomdir")
		 ("--verbose")
		 ("-v")
		 ("--debug")
		 ("-D")
		 ("--force")
		 ("-!"))
		((t)
		 (("doom" "profiles" "sync")
		  "--reload")
		 (("doom" "profiles")
		  "sync" "--reload")
		 (("doom")
		  "profiles" "sync" "--reload"))
		#<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (write-logs-fn .
		 #[128 "\302\301\303\300\4\"\"\207"
		       [(#s(doom-cli-context
			    (26387 63354 473960 173000)
			    8602 0
			    (90 . 8)
			    nil nil "doom" nil nil
			    ("doom" "profiles" "sync")
			    nil
			    ("sync")
			    (("--reload" . "--reload")
			     ("--aot")
			     ("-B")
			     ("--rebuild")
			     ("-b")
			     ("--jobs")
			     ("-j")
			     ("--gc")
			     ("-U")
			     ("-u")
			     ("-e")
			     ("--eval")
			     ("-E")
			     ("--strict-load")
			     ("--load")
			     ("-L")
			     ("--color")
			     ("--benchmark")
			     ("--profile")
			     ("--pager")
			     ("--emacsdir")
			     ("--doomdir")
			     ("--verbose")
			     ("-v")
			     ("--debug")
			     ("-D")
			     ("--force")
			     ("-!"))
			    ((t)
			     (("doom" "profiles" "sync")
			      "--reload")
			     (("doom" "profiles")
			      "sync" "--reload")
			     (("doom")
			      "profiles" "sync" "--reload"))
			    #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
			doom-cli--output-write-logs-h apply append]
		       6 "\n\n(fn &rest ARGS2)"])
  (show-benchmark-fn .
		     #[128 "\302\301\303\300\4\"\"\207"
			   [(#s(doom-cli-context
				(26387 63354 473960 173000)
				8602 0
				(90 . 8)
				nil nil "doom" nil nil
				("doom" "profiles" "sync")
				nil
				("sync")
				(("--reload" . "--reload")
				 ("--aot")
				 ("-B")
				 ("--rebuild")
				 ("-b")
				 ("--jobs")
				 ("-j")
				 ("--gc")
				 ("-U")
				 ("-u")
				 ("-e")
				 ("--eval")
				 ("-E")
				 ("--strict-load")
				 ("--load")
				 ("-L")
				 ("--color")
				 ("--benchmark")
				 ("--profile")
				 ("--pager")
				 ("--emacsdir")
				 ("--doomdir")
				 ("--verbose")
				 ("-v")
				 ("--debug")
				 ("-D")
				 ("--force")
				 ("-!"))
				((t)
				 (("doom" "profiles" "sync")
				  "--reload")
				 (("doom" "profiles")
				  "sync" "--reload")
				 (("doom")
				  "profiles" "sync" "--reload"))
				#<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
			    doom-cli--output-benchmark-h apply append]
			   6 "\n\n(fn &rest ARGS2)"])
  (doomctxt . #s(doom-cli-context
		 (26387 63354 473960 173000)
		 8602 0
		 (90 . 8)
		 nil nil "doom" nil nil
		 ("doom" "profiles" "sync")
		 nil
		 ("sync")
		 (("--reload" . "--reload")
		  ("--aot")
		  ("-B")
		  ("--rebuild")
		  ("-b")
		  ("--jobs")
		  ("-j")
		  ("--gc")
		  ("-U")
		  ("-u")
		  ("-e")
		  ("--eval")
		  ("-E")
		  ("--strict-load")
		  ("--load")
		  ("-L")
		  ("--color")
		  ("--benchmark")
		  ("--profile")
		  ("--pager")
		  ("--emacsdir")
		  ("--doomdir")
		  ("--verbose")
		  ("-v")
		  ("--debug")
		  ("-D")
		  ("--force")
		  ("-!"))
		 ((t)
		  (("doom" "profiles" "sync")
		   "--reload")
		  (("doom" "profiles")
		   "sync" "--reload")
		  (("doom")
		   "profiles" "sync" "--reload"))
		 #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (debugger closure
	    ((args #s(doom-cli-context
		      (26387 63354 473960 173000)
		      8602 0
		      (90 . 8)
		      nil nil "doom" nil nil
		      ("doom" "profiles" "sync")
		      nil
		      ("sync")
		      (("--reload" . "--reload")
		       ("--aot")
		       ("-B")
		       ("--rebuild")
		       ("-b")
		       ("--jobs")
		       ("-j")
		       ("--gc")
		       ("-U")
		       ("-u")
		       ("-e")
		       ("--eval")
		       ("-E")
		       ("--strict-load")
		       ("--load")
		       ("-L")
		       ("--color")
		       ("--benchmark")
		       ("--profile")
		       ("--pager")
		       ("--emacsdir")
		       ("--doomdir")
		       ("--verbose")
		       ("-v")
		       ("--debug")
		       ("-D")
		       ("--force")
		       ("-!"))
		      ((t)
		       (("doom" "profiles" "sync")
			"--reload")
		       (("doom" "profiles")
			"sync" "--reload")
		       (("doom")
			"profiles" "sync" "--reload"))
		      #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
	     (fn . doom-cli-debugger))
	    (&rest pre-args)
	    (apply fn
		   (append pre-args args)))
  (debug-on-error . t)))

;;;; 51
((let*
     ((args
       (flatten-list args))
      (context
       (make-doom-cli-context :prefix prefix :whole args))
      (doom-cli--context context)
      (write-logs-fn
       (doom-partial #'doom-cli--output-write-logs-h context))
      (show-benchmark-fn
       (doom-partial #'doom-cli--output-benchmark-h context)))
   (let*
       ((doomctxt context)
	(debugger
	 (doom-rpartial #'doom-cli-debugger doomctxt))
	(debug-on-error t))
     (let
	 ((streamspec
	   (list
	    (list '>= 'notice
		  (progn
		    (or
		     (progn
		       (and
			(memq
			 (type-of doomctxt)
			 cl-struct-doom-cli-context-tags)
			t))
		     (signal 'wrong-type-argument
			     (list 'doom-cli-context doomctxt)))
		    (aref doomctxt 16)))
	    (cons t
		  (progn
		    (or
		     (progn
		       (and
			(memq
			 (type-of doomctxt)
			 cl-struct-doom-cli-context-tags)
			t))
		     (signal 'wrong-type-argument
			     (list 'doom-cli-context doomctxt)))
		    (aref doomctxt 17))))))
       (let
	   ((standard-output
	     (doom-print--redirect-standard-output streamspec t)))
	 (let*
	     ((vnew
	       (doom-print--redirect-message streamspec
					     (if noninteractive 'debug 'notice)))
	      (old
	       (symbol-function #'message)))
	   (unwind-protect
	       (progn
		 (fset #'message vnew)
		 (let
		     ((doom-print-stream standard-output))
		   (progn
		     (if
			 (and
			  (not doom-inhibit-log)
			  (or
			   (not noninteractive)
			   (<= 2 doom-log-level)))
			 (progn
			   (doom--log 2 "run!: %s %s" prefix
				      (combine-and-quote-strings args))))
		     (add-hook 'kill-emacs-hook show-benchmark-fn 94)
		     (add-hook 'kill-emacs-hook write-logs-fn 95)
		     (if
			 (doom-cli-context-pipe-p context :out t)
			 (progn
			   (setq doom-print-backend nil)))
		     (if
			 (doom-cli-context-pipe-p context :in)
			 (progn
			   (save-current-buffer
			     (set-buffer
			      (progn
				(or
				 (progn
				   (and
				    (memq
				     (type-of context)
				     cl-struct-doom-cli-context-tags)
				    t))
				 (signal 'wrong-type-argument
					 (list 'doom-cli-context context)))
				(aref context 15)))
			     (while
				 (let*
				     ((in
				       (and t
					    (condition-case nil
						(progn
						  (read-from-minibuffer ""))
					      (error nil)))))
				   (if in
				       (insert in "\n")
				     (condition-case nil
					 (progn
					   (delete-char -1))
				       (error nil))))))))
		     (doom-cli--exit
		      (catch 'exit
			(condition-case e
			    (let*
				((args
				  (cons
				   (if
				       (getenv "__DOOMDUMP")
				       :dump prefix)
				   args))
				 (context
				  (doom-cli-context-restore
				   (getenv "__DOOMCONTEXT")
				   context))
				 (context
				  (doom-cli-context-parse args context)))
			      (run-hook-with-args 'doom-cli-before-run-functions context)
			      (let
				  ((result
				    (doom-cli-context-execute context)))
				(run-hook-with-args 'doom-cli-after-run-functions context result))
			      0)
			  (doom-cli-wrong-number-of-arguments-error
			   (let*
			       ((val
				 (cdr e)))
			     (progn
			       (ignore
				(consp val))
			       (let*
				   ((x27
				     (car-safe val))
				    (x28
				     (cdr-safe val)))
				 (progn
				   (ignore
				    (consp x28))
				   (let*
				       ((x29
					 (car-safe x28))
					(x30
					 (cdr-safe x28)))
				     (progn
				       (ignore
					(consp x30))
				       (let*
					   ((x31
					     (car-safe x30))
					    (x32
					     (cdr-safe x30)))
					 (progn
					   (ignore
					    (consp x32))
					   (let*
					       ((x33
						 (car-safe x32))
						(x34
						 (cdr-safe x32)))
					     (progn
					       (ignore
						(consp x34))
					       (let*
						   ((x35
						     (car-safe x34))
						    (x36
						     (cdr-safe x34)))
						 (progn
						   (ignore
						    (null x36))
						   (let
						       ((command x27)
							(flag x29)
							(args x31)
							(min x33)
							(max x35))
						     (progn
						       (doom-print
							(doom-print--format
							 (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
							 (or flag
							     (doom-cli-command-string
							      (if
								  (keywordp
								   (car command))
								  command
								(cdr command))))
							 (if
							     (or
							      (= min max)
							      (= max most-positive-fixnum))
							     min
							   (format "%d-%d" min max))
							 (if
							     (or
							      (= min 0)
							      (> min 1))
							     "s" "")
							 (length args)))
						       (doom-cli-call
							(cons ':help
							      (cons "--synopsis"
								    (cons "--postamble"
									  (cdr
									   (doom-cli--command context)))))
							context e)))))))))))))))
			   5)
			  (doom-cli-unrecognized-option-error
			   (doom-print
			    (doom-print--format
			     (doom-print--style 'red "Error: unknown option %s")
			     (car
			      (cdr e))))
			   (doom-cli-call
			    (cons ':help
				  (cons "--synopsis"
					(cons "--postamble"
					      (cdr
					       (doom-cli--command context)))))
			    context e)
			   5)
			  (doom-cli-invalid-option-error
			   (let*
			       ((val
				 (cdr e)))
			     (progn
			       (ignore
				(consp val))
			       (let*
				   ((x37
				     (car-safe val))
				    (x38
				     (cdr-safe val)))
				 (progn
				   (ignore
				    (consp x38))
				   (let*
				       ((x39
					 (car-safe x38))
					(x40
					 (cdr-safe x38)))
				     (progn
				       (ignore
					(consp x40))
				       (let*
					   ((x41
					     (car-safe x40))
					    (x42
					     (cdr-safe x40)))
					 (progn
					   (ignore
					    (consp x42))
					   (let*
					       ((x43
						 (car-safe x42))
						(x44
						 (cdr-safe x42)))
					     (progn
					       (ignore
						(null x44))
					       (let
						   ((types x37)
						    (option x39)
						    (value x41)
						    (errors x43))
						 (progn
						   (doom-print
						    (doom-print--format
						     (doom-print--style 'red "Error: %s received invalid value %S")
						     (string-join
						      (progn
							(or
							 (progn
							   (and
							    (memq
							     (type-of option)
							     cl-struct-doom-cli-option-tags)
							    t))
							 (signal 'wrong-type-argument
								 (list 'doom-cli-option option)))
							(aref option 5))
						      "/")
						     value))
						   (doom-print
						    (doom-print--format
						     (doom-print--style 'bold "\nValidation errors:")))
						   (let
						       ((tail errors))
						     (while tail
						       (let
							   ((err
							     (car tail)))
							 (doom-print
							  (doom-print--format
							   (doom-print--class 'item "%s."
									      (doom-print--class 'fill err))))
							 (setq tail
							       (cdr tail)))))))))))))))))
			   (doom-cli-call
			    (cons ':help
				  (cons "--postamble"
					(cdr
					 (doom-cli--command context))))
			    context e)
			   5)
			  (doom-cli-command-not-found-error
			   (let*
			       ((command
				 (cdr e))
				(cli
				 (doom-cli-get command)))
			     (cond
			      ((null cli)
			       (doom-print
				(doom-print--format
				 (doom-print--style 'red "Error: unrecognized command '%s'")
				 (doom-cli-command-string
				  (or
				   (cdr command)
				   command))))
			       (doom-cli-call
				(cons ':help
				      (cons "--similar"
					    (cons "--postamble"
						  (cdr command))))
				context e))
			      ((null
				(progn
				  (or
				   (progn
				     (and
				      (memq
				       (type-of cli)
				       cl-struct-doom-cli-tags)
				      t))
				   (signal 'wrong-type-argument
					   (list 'doom-cli cli)))
				  (aref cli 9)))
			       (doom-print
				(doom-print--format
				 (doom-print--style 'red "Error: a subcommand is required")))
			       (doom-cli-call
				(cons ':help
				      (cons "--subcommands"
					    (cons "--postamble"
						  (cdr command))))
				context e))))
			   4)
			  (doom-cli-invalid-prefix-error
			   (let
			       ((prefix
				 (car
				  (cdr e))))
			     (doom-print
			      (doom-print--format
			       (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
			       prefix))
			     (let*
				 ((suggested
				   (and t
					(let*
					    ((--cl-var-- t)
					     --cl-var--)
					  (catch '--cl-block---cl-finish----
					    (maphash
					     #'(lambda
						 (--cl-var-- cli)
						 (or
						  (if
						      (progn
							(or
							 (progn
							   (and
							    (memq
							     (type-of cli)
							     cl-struct-doom-cli-tags)
							    t))
							 (signal 'wrong-type-argument
								 (list 'doom-cli cli)))
							(aref cli 2))
						      t
						    (progn
						      (setq --cl-var--
							    (car
							     (progn
							       (or
								(progn
								  (and
								   (memq
								    (type-of cli)
								    cl-struct-doom-cli-tags)
								   t))
								(signal 'wrong-type-argument
									(list 'doom-cli cli)))
							       (aref cli 1))))
						      (setq --cl-var-- nil)))
						  (throw '--cl-block---cl-finish---- nil)))
					     doom-cli--table))
					  --cl-var--))))
			       (if suggested
				   (doom-print
				    (doom-print--format "Did you mean %S?" suggested))
				 (doom-print
				  (doom-print--format "There are no commands defined under %S." prefix)))))
			   4)
			  (user-error
			   (doom-print
			    (doom-print--format
			     (doom-print--style 'red "Error: %s")
			     (car
			      (cdr e))))
			   (doom-print
			    (doom-print--format "\nAborting..."))
			   3)))
		      context))))
	     (fset #'message old)))))))
 ((prefix . "doom")
  (args
   ("sync"))
  (args "sync")
  (context . #s(doom-cli-context
		(26387 63354 473960 173000)
		8602 0
		(90 . 8)
		nil nil "doom" nil nil
		("doom" "profiles" "sync")
		nil
		("sync")
		(("--reload" . "--reload")
		 ("--aot")
		 ("-B")
		 ("--rebuild")
		 ("-b")
		 ("--jobs")
		 ("-j")
		 ("--gc")
		 ("-U")
		 ("-u")
		 ("-e")
		 ("--eval")
		 ("-E")
		 ("--strict-load")
		 ("--load")
		 ("-L")
		 ("--color")
		 ("--benchmark")
		 ("--profile")
		 ("--pager")
		 ("--emacsdir")
		 ("--doomdir")
		 ("--verbose")
		 ("-v")
		 ("--debug")
		 ("-D")
		 ("--force")
		 ("-!"))
		((t)
		 (("doom" "profiles" "sync")
		  "--reload")
		 (("doom" "profiles")
		  "sync" "--reload")
		 (("doom")
		  "profiles" "sync" "--reload"))
		#<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (write-logs-fn .
		 #[128 "\302\301\303\300\4\"\"\207"
		       [(#s(doom-cli-context
			    (26387 63354 473960 173000)
			    8602 0
			    (90 . 8)
			    nil nil "doom" nil nil
			    ("doom" "profiles" "sync")
			    nil
			    ("sync")
			    (("--reload" . "--reload")
			     ("--aot")
			     ("-B")
			     ("--rebuild")
			     ("-b")
			     ("--jobs")
			     ("-j")
			     ("--gc")
			     ("-U")
			     ("-u")
			     ("-e")
			     ("--eval")
			     ("-E")
			     ("--strict-load")
			     ("--load")
			     ("-L")
			     ("--color")
			     ("--benchmark")
			     ("--profile")
			     ("--pager")
			     ("--emacsdir")
			     ("--doomdir")
			     ("--verbose")
			     ("-v")
			     ("--debug")
			     ("-D")
			     ("--force")
			     ("-!"))
			    ((t)
			     (("doom" "profiles" "sync")
			      "--reload")
			     (("doom" "profiles")
			      "sync" "--reload")
			     (("doom")
			      "profiles" "sync" "--reload"))
			    #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
			doom-cli--output-write-logs-h apply append]
		       6 "\n\n(fn &rest ARGS2)"])
  (show-benchmark-fn .
		     #[128 "\302\301\303\300\4\"\"\207"
			   [(#s(doom-cli-context
				(26387 63354 473960 173000)
				8602 0
				(90 . 8)
				nil nil "doom" nil nil
				("doom" "profiles" "sync")
				nil
				("sync")
				(("--reload" . "--reload")
				 ("--aot")
				 ("-B")
				 ("--rebuild")
				 ("-b")
				 ("--jobs")
				 ("-j")
				 ("--gc")
				 ("-U")
				 ("-u")
				 ("-e")
				 ("--eval")
				 ("-E")
				 ("--strict-load")
				 ("--load")
				 ("-L")
				 ("--color")
				 ("--benchmark")
				 ("--profile")
				 ("--pager")
				 ("--emacsdir")
				 ("--doomdir")
				 ("--verbose")
				 ("-v")
				 ("--debug")
				 ("-D")
				 ("--force")
				 ("-!"))
				((t)
				 (("doom" "profiles" "sync")
				  "--reload")
				 (("doom" "profiles")
				  "sync" "--reload")
				 (("doom")
				  "profiles" "sync" "--reload"))
				#<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
			    doom-cli--output-benchmark-h apply append]
			   6 "\n\n(fn &rest ARGS2)"])
  (doom-cli--context . #s(doom-cli-context
			  (26387 63354 473960 173000)
			  8602 0
			  (90 . 8)
			  nil nil "doom" nil nil
			  ("doom" "profiles" "sync")
			  nil
			  ("sync")
			  (("--reload" . "--reload")
			   ("--aot")
			   ("-B")
			   ("--rebuild")
			   ("-b")
			   ("--jobs")
			   ("-j")
			   ("--gc")
			   ("-U")
			   ("-u")
			   ("-e")
			   ("--eval")
			   ("-E")
			   ("--strict-load")
			   ("--load")
			   ("-L")
			   ("--color")
			   ("--benchmark")
			   ("--profile")
			   ("--pager")
			   ("--emacsdir")
			   ("--doomdir")
			   ("--verbose")
			   ("-v")
			   ("--debug")
			   ("-D")
			   ("--force")
			   ("-!"))
			  ((t)
			   (("doom" "profiles" "sync")
			    "--reload")
			   (("doom" "profiles")
			    "sync" "--reload")
			   (("doom")
			    "profiles" "sync" "--reload"))
			  #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))))

;;;; 52
((let
     ((doom-context doom-context))
   (let
       ((tail
	 (ensure-list 'cli)))
     (while tail
       (let
	   ((context
	     (car tail)))
	 (doom-context-push context)
	 (setq tail
	       (cdr tail)))))
   (let*
       ((args
	 (flatten-list args))
	(context
	 (make-doom-cli-context :prefix prefix :whole args))
	(doom-cli--context context)
	(write-logs-fn
	 (doom-partial #'doom-cli--output-write-logs-h context))
	(show-benchmark-fn
	 (doom-partial #'doom-cli--output-benchmark-h context)))
     (let*
	 ((doomctxt context)
	  (debugger
	   (doom-rpartial #'doom-cli-debugger doomctxt))
	  (debug-on-error t))
       (let
	   ((streamspec
	     (list
	      (list '>= 'notice
		    (progn
		      (or
		       (progn
			 (and
			  (memq
			   (type-of doomctxt)
			   cl-struct-doom-cli-context-tags)
			  t))
		       (signal 'wrong-type-argument
			       (list 'doom-cli-context doomctxt)))
		      (aref doomctxt 16)))
	      (cons t
		    (progn
		      (or
		       (progn
			 (and
			  (memq
			   (type-of doomctxt)
			   cl-struct-doom-cli-context-tags)
			  t))
		       (signal 'wrong-type-argument
			       (list 'doom-cli-context doomctxt)))
		      (aref doomctxt 17))))))
	 (let
	     ((standard-output
	       (doom-print--redirect-standard-output streamspec t)))
	   (let*
	       ((vnew
		 (doom-print--redirect-message streamspec
					       (if noninteractive 'debug 'notice)))
		(old
		 (symbol-function #'message)))
	     (unwind-protect
		 (progn
		   (fset #'message vnew)
		   (let
		       ((doom-print-stream standard-output))
		     (progn
		       (if
			   (and
			    (not doom-inhibit-log)
			    (or
			     (not noninteractive)
			     (<= 2 doom-log-level)))
			   (progn
			     (doom--log 2 "run!: %s %s" prefix
					(combine-and-quote-strings args))))
		       (add-hook 'kill-emacs-hook show-benchmark-fn 94)
		       (add-hook 'kill-emacs-hook write-logs-fn 95)
		       (if
			   (doom-cli-context-pipe-p context :out t)
			   (progn
			     (setq doom-print-backend nil)))
		       (if
			   (doom-cli-context-pipe-p context :in)
			   (progn
			     (save-current-buffer
			       (set-buffer
				(progn
				  (or
				   (progn
				     (and
				      (memq
				       (type-of context)
				       cl-struct-doom-cli-context-tags)
				      t))
				   (signal 'wrong-type-argument
					   (list 'doom-cli-context context)))
				  (aref context 15)))
			       (while
				   (let*
				       ((in
					 (and t
					      (condition-case nil
						  (progn
						    (read-from-minibuffer ""))
						(error nil)))))
				     (if in
					 (insert in "\n")
				       (condition-case nil
					   (progn
					     (delete-char -1))
					 (error nil))))))))
		       (doom-cli--exit
			(catch 'exit
			  (condition-case e
			      (let*
				  ((args
				    (cons
				     (if
					 (getenv "__DOOMDUMP")
					 :dump prefix)
				     args))
				   (context
				    (doom-cli-context-restore
				     (getenv "__DOOMCONTEXT")
				     context))
				   (context
				    (doom-cli-context-parse args context)))
				(run-hook-with-args 'doom-cli-before-run-functions context)
				(let
				    ((result
				      (doom-cli-context-execute context)))
				  (run-hook-with-args 'doom-cli-after-run-functions context result))
				0)
			    (doom-cli-wrong-number-of-arguments-error
			     (let*
				 ((val
				   (cdr e)))
			       (progn
				 (ignore
				  (consp val))
				 (let*
				     ((x27
				       (car-safe val))
				      (x28
				       (cdr-safe val)))
				   (progn
				     (ignore
				      (consp x28))
				     (let*
					 ((x29
					   (car-safe x28))
					  (x30
					   (cdr-safe x28)))
				       (progn
					 (ignore
					  (consp x30))
					 (let*
					     ((x31
					       (car-safe x30))
					      (x32
					       (cdr-safe x30)))
					   (progn
					     (ignore
					      (consp x32))
					     (let*
						 ((x33
						   (car-safe x32))
						  (x34
						   (cdr-safe x32)))
					       (progn
						 (ignore
						  (consp x34))
						 (let*
						     ((x35
						       (car-safe x34))
						      (x36
						       (cdr-safe x34)))
						   (progn
						     (ignore
						      (null x36))
						     (let
							 ((command x27)
							  (flag x29)
							  (args x31)
							  (min x33)
							  (max x35))
						       (progn
							 (doom-print
							  (doom-print--format
							   (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
							   (or flag
							       (doom-cli-command-string
								(if
								    (keywordp
								     (car command))
								    command
								  (cdr command))))
							   (if
							       (or
								(= min max)
								(= max most-positive-fixnum))
							       min
							     (format "%d-%d" min max))
							   (if
							       (or
								(= min 0)
								(> min 1))
							       "s" "")
							   (length args)))
							 (doom-cli-call
							  (cons ':help
								(cons "--synopsis"
								      (cons "--postamble"
									    (cdr
									     (doom-cli--command context)))))
							  context e)))))))))))))))
			     5)
			    (doom-cli-unrecognized-option-error
			     (doom-print
			      (doom-print--format
			       (doom-print--style 'red "Error: unknown option %s")
			       (car
				(cdr e))))
			     (doom-cli-call
			      (cons ':help
				    (cons "--synopsis"
					  (cons "--postamble"
						(cdr
						 (doom-cli--command context)))))
			      context e)
			     5)
			    (doom-cli-invalid-option-error
			     (let*
				 ((val
				   (cdr e)))
			       (progn
				 (ignore
				  (consp val))
				 (let*
				     ((x37
				       (car-safe val))
				      (x38
				       (cdr-safe val)))
				   (progn
				     (ignore
				      (consp x38))
				     (let*
					 ((x39
					   (car-safe x38))
					  (x40
					   (cdr-safe x38)))
				       (progn
					 (ignore
					  (consp x40))
					 (let*
					     ((x41
					       (car-safe x40))
					      (x42
					       (cdr-safe x40)))
					   (progn
					     (ignore
					      (consp x42))
					     (let*
						 ((x43
						   (car-safe x42))
						  (x44
						   (cdr-safe x42)))
					       (progn
						 (ignore
						  (null x44))
						 (let
						     ((types x37)
						      (option x39)
						      (value x41)
						      (errors x43))
						   (progn
						     (doom-print
						      (doom-print--format
						       (doom-print--style 'red "Error: %s received invalid value %S")
						       (string-join
							(progn
							  (or
							   (progn
							     (and
							      (memq
							       (type-of option)
							       cl-struct-doom-cli-option-tags)
							      t))
							   (signal 'wrong-type-argument
								   (list 'doom-cli-option option)))
							  (aref option 5))
							"/")
						       value))
						     (doom-print
						      (doom-print--format
						       (doom-print--style 'bold "\nValidation errors:")))
						     (let
							 ((tail errors))
						       (while tail
							 (let
							     ((err
							       (car tail)))
							   (doom-print
							    (doom-print--format
							     (doom-print--class 'item "%s."
										(doom-print--class 'fill err))))
							   (setq tail
								 (cdr tail)))))))))))))))))
			     (doom-cli-call
			      (cons ':help
				    (cons "--postamble"
					  (cdr
					   (doom-cli--command context))))
			      context e)
			     5)
			    (doom-cli-command-not-found-error
			     (let*
				 ((command
				   (cdr e))
				  (cli
				   (doom-cli-get command)))
			       (cond
				((null cli)
				 (doom-print
				  (doom-print--format
				   (doom-print--style 'red "Error: unrecognized command '%s'")
				   (doom-cli-command-string
				    (or
				     (cdr command)
				     command))))
				 (doom-cli-call
				  (cons ':help
					(cons "--similar"
					      (cons "--postamble"
						    (cdr command))))
				  context e))
				((null
				  (progn
				    (or
				     (progn
				       (and
					(memq
					 (type-of cli)
					 cl-struct-doom-cli-tags)
					t))
				     (signal 'wrong-type-argument
					     (list 'doom-cli cli)))
				    (aref cli 9)))
				 (doom-print
				  (doom-print--format
				   (doom-print--style 'red "Error: a subcommand is required")))
				 (doom-cli-call
				  (cons ':help
					(cons "--subcommands"
					      (cons "--postamble"
						    (cdr command))))
				  context e))))
			     4)
			    (doom-cli-invalid-prefix-error
			     (let
				 ((prefix
				   (car
				    (cdr e))))
			       (doom-print
				(doom-print--format
				 (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
				 prefix))
			       (let*
				   ((suggested
				     (and t
					  (let*
					      ((--cl-var-- t)
					       --cl-var--)
					    (catch '--cl-block---cl-finish----
					      (maphash
					       #'(lambda
						   (--cl-var-- cli)
						   (or
						    (if
							(progn
							  (or
							   (progn
							     (and
							      (memq
							       (type-of cli)
							       cl-struct-doom-cli-tags)
							      t))
							   (signal 'wrong-type-argument
								   (list 'doom-cli cli)))
							  (aref cli 2))
							t
						      (progn
							(setq --cl-var--
							      (car
							       (progn
								 (or
								  (progn
								    (and
								     (memq
								      (type-of cli)
								      cl-struct-doom-cli-tags)
								     t))
								  (signal 'wrong-type-argument
									  (list 'doom-cli cli)))
								 (aref cli 1))))
							(setq --cl-var-- nil)))
						    (throw '--cl-block---cl-finish---- nil)))
					       doom-cli--table))
					    --cl-var--))))
				 (if suggested
				     (doom-print
				      (doom-print--format "Did you mean %S?" suggested))
				   (doom-print
				    (doom-print--format "There are no commands defined under %S." prefix)))))
			     4)
			    (user-error
			     (doom-print
			      (doom-print--format
			       (doom-print--style 'red "Error: %s")
			       (car
				(cdr e))))
			     (doom-print
			      (doom-print--format "\nAborting..."))
			     3)))
			context))))
	       (fset #'message old))))))))
 ((doom-context cli t)))

;;;; 53
((run! "doom"
       ("sync"))
 ((prefix . "doom")
  (args
   ("sync"))))

;;;; 54
((eval-buffer #<buffer  *load*> nil "/home/max/.emacs.d/bin/doom" nil t)
 ((eval-buffer-list #<buffer  *load*>)
  (standard-output)
  (lexical-binding)
  (standard-input . #<buffer  *load*>)
  (macroexp--dynvars)
  (current-load-list
   (require . finder-inf)
   (require . package)
   (require . straight)
   "/home/max/.emacs.d/bin/doom")))

;;;; 55
((load-with-code-conversion "/home/max/.emacs.d/bin/doom" "/home/max/.emacs.d/bin/doom" nil t)
 ((load-in-progress . t)
  (inhibit-file-name-operation)
  (set-auto-coding-for-load . t)
  (load-file-name . "/home/max/.emacs.d/bin/doom")
  (load-true-file-name . "/home/max/.emacs.d/bin/doom")
  (read-symbol-shorthands)))

;;;; 56
((load "/home/max/.emacs.d/bin/doom" nil t)
 ((lexical-binding)
  (lread--unescaped-character-literals)))

;;;; 57
((command-line-1
  ("--load" "/home/max/.emacs.d/bin/doom" "--" "sync"))
 ((command-line-args-left "--" "sync")
  (argi . "-load")))

;;;; 58
((command-line)
 nil)

;;;; 59
((normal-top-level)
 nil)

